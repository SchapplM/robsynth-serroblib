% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR7_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:13:30
% EndTime: 2019-05-05 19:13:35
% DurationCPUTime: 1.46s
% Computational Cost: add. (1467->111), mult. (2460->176), div. (0->0), fcn. (2968->8), ass. (0->80)
t55 = sin(pkin(10));
t56 = cos(pkin(10));
t59 = sin(qJ(3));
t61 = cos(qJ(3));
t38 = t55 * t61 + t56 * t59;
t40 = -t55 * t59 + t56 * t61;
t58 = sin(qJ(5));
t86 = cos(qJ(5));
t67 = t86 * t38 + t58 * t40;
t62 = -pkin(1) - pkin(7);
t78 = -qJ(4) + t62;
t74 = t78 * t61;
t75 = t78 * t59;
t26 = t55 * t74 + t56 * t75;
t12 = -t38 * pkin(8) + t26;
t25 = -t55 * t75 + t56 * t74;
t66 = -t40 * pkin(8) + t25;
t7 = t86 * t12 + t58 * t66;
t19 = t58 * t38 - t86 * t40;
t5 = t58 * t12 - t86 * t66;
t91 = t5 * t19;
t113 = t67 * t7 + t91;
t104 = t67 ^ 2;
t111 = t19 ^ 2;
t112 = t104 + t111;
t110 = t19 * pkin(5);
t88 = t56 * pkin(3);
t45 = pkin(4) + t88;
t89 = t55 * pkin(3);
t33 = t86 * t45 - t58 * t89;
t31 = -pkin(5) - t33;
t109 = t19 * t31;
t57 = sin(qJ(6));
t108 = t19 * t57;
t60 = cos(qJ(6));
t107 = t19 * t60;
t34 = t58 * t45 + t86 * t89;
t32 = pkin(9) + t34;
t50 = t57 ^ 2;
t52 = t60 ^ 2;
t79 = t50 + t52;
t106 = t79 * t32;
t105 = t19 * t33 - t34 * t67;
t103 = 0.2e1 * t19;
t101 = (t38 * t55 + t40 * t56) * pkin(3);
t14 = t57 * t67;
t15 = t60 * t67;
t37 = t40 ^ 2;
t95 = t38 ^ 2;
t99 = t37 + t95;
t98 = t5 ^ 2;
t46 = t59 * pkin(3) + qJ(2);
t29 = t38 * pkin(4) + t46;
t94 = 0.2e1 * t29;
t93 = 0.2e1 * t46;
t92 = 0.2e1 * qJ(2);
t90 = t5 * t60;
t87 = pkin(5) - t31;
t83 = t57 * t60;
t80 = pkin(9) * t79;
t51 = t59 ^ 2;
t53 = t61 ^ 2;
t42 = t51 + t53;
t77 = t67 * t103;
t10 = t79 * t67;
t73 = -pkin(9) * t67 + t110;
t8 = pkin(5) * t67 + pkin(9) * t19 + t29;
t2 = -t57 * t7 + t60 * t8;
t3 = t57 * t8 + t60 * t7;
t72 = t2 * t60 + t3 * t57;
t1 = -t2 * t57 + t3 * t60;
t70 = -t32 * t67 - t109;
t69 = t25 * t40 + t26 * t38;
t63 = qJ(2) ^ 2;
t43 = 0.2e1 * t83;
t41 = t42 * t62;
t13 = t57 * t107;
t9 = (-t50 + t52) * t19;
t4 = t5 * t57;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t92 (pkin(1) ^ 2) + t63, t53, -0.2e1 * t61 * t59, 0, t51, 0, 0, t59 * t92, t61 * t92, -0.2e1 * t41, t42 * t62 ^ 2 + t63, t37, -0.2e1 * t40 * t38, 0, t95, 0, 0, t38 * t93, t40 * t93, -0.2e1 * t69, t25 ^ 2 + t26 ^ 2 + t46 ^ 2, t111, t77, 0, t104, 0, 0, t67 * t94, -t19 * t94, -0.2e1 * t113, t29 ^ 2 + t7 ^ 2 + t98, t52 * t111, -0.2e1 * t111 * t83, -0.2e1 * t67 * t107, t50 * t111, t57 * t77, t104, -0.2e1 * t108 * t5 + 0.2e1 * t2 * t67, -0.2e1 * t107 * t5 - 0.2e1 * t3 * t67, t72 * t103, t2 ^ 2 + t3 ^ 2 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t42, t41, 0, 0, 0, 0, 0, 0, 0, 0, -t99, t69, 0, 0, 0, 0, 0, 0, 0, 0, -t112, t113, 0, 0, 0, 0, 0, 0, -t112 * t57, -t112 * t60, 0, t1 * t67 + t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104 * t79 + t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, -t59, 0, t61 * t62, -t59 * t62, 0, 0, 0, 0, t40, 0, -t38, 0, t25, -t26, -t101 (t25 * t56 + t26 * t55) * pkin(3), 0, 0, -t19, 0, -t67, 0, -t5, -t7, t105, -t5 * t33 + t7 * t34, -t13, -t9, t14, t13, t15, 0, t70 * t57 - t90, t70 * t60 + t4, t1, t1 * t32 + t5 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, -t59, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t38, 0, t101, 0, 0, 0, 0, 0, 0, -t19, -t67, 0, -t105, 0, 0, 0, 0, 0, 0, -t107, t108, t10, t106 * t67 + t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t88, -0.2e1 * t89, 0 (t55 ^ 2 + t56 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t33, -0.2e1 * t34, 0, t33 ^ 2 + t34 ^ 2, t50, t43, 0, t52, 0, 0, -0.2e1 * t31 * t60, 0.2e1 * t31 * t57, 0.2e1 * t106, t79 * t32 ^ 2 + t31 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t40, 0, t46, 0, 0, 0, 0, 0, 0, t67, -t19, 0, t29, 0, 0, 0, 0, 0, 0, t15, -t14, t79 * t19, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, -t67, 0, -t5, -t7, 0, 0, -t13, -t9, t14, t13, t15, 0, t73 * t57 - t90, t73 * t60 + t4, t1, -t5 * pkin(5) + t1 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t67, 0, 0, 0, 0, 0, 0, 0, 0, -t107, t108, t10, pkin(9) * t10 - t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t33, -t34, 0, 0, t50, t43, 0, t52, 0, 0, t87 * t60, -t87 * t57, t80 + t106, -t31 * pkin(5) + pkin(9) * t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t50, t43, 0, t52, 0, 0, 0.2e1 * pkin(5) * t60, -0.2e1 * pkin(5) * t57, 0.2e1 * t80, t79 * pkin(9) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, 0, t108, t67, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t60, 0, -t57 * t32, -t60 * t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t57, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t60, 0, -t57 * pkin(9), -t60 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
