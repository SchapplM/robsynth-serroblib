% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:12
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRRP3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRRP3_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 09:47:36
% EndTime: 2019-05-05 09:47:41
% DurationCPUTime: 1.92s
% Computational Cost: add. (1172->179), mult. (2660->306), div. (0->0), fcn. (3063->10), ass. (0->109)
t75 = sin(pkin(6));
t80 = sin(qJ(2));
t103 = t75 * t80;
t76 = cos(pkin(6));
t79 = sin(qJ(3));
t83 = cos(qJ(3));
t43 = t79 * t103 - t76 * t83;
t42 = t43 ^ 2;
t77 = sin(qJ(5));
t78 = sin(qJ(4));
t81 = cos(qJ(5));
t82 = cos(qJ(4));
t49 = t77 * t78 - t81 * t82;
t64 = -t82 * pkin(4) - pkin(3);
t35 = t49 * pkin(5) + t64;
t118 = 0.2e1 * t35;
t117 = 0.2e1 * t64;
t116 = -0.2e1 * t79;
t115 = -0.2e1 * t83;
t114 = 0.2e1 * t83;
t113 = -pkin(10) - pkin(9);
t112 = pkin(3) * t82;
t111 = pkin(8) * t78;
t72 = t79 ^ 2;
t110 = t72 * pkin(8);
t109 = t77 * pkin(4);
t68 = t79 * pkin(8);
t69 = t81 * pkin(4);
t108 = t83 * pkin(4);
t107 = t83 * pkin(5);
t106 = t43 * t79;
t105 = t49 * t83;
t51 = t77 * t82 + t81 * t78;
t104 = t51 * t83;
t84 = cos(qJ(2));
t102 = t75 * t84;
t101 = t78 * t79;
t100 = t78 * t82;
t99 = t78 * t83;
t98 = t82 * t79;
t97 = t82 * t83;
t53 = pkin(4) * t101 + t68;
t71 = t78 ^ 2;
t73 = t82 ^ 2;
t96 = t71 + t73;
t95 = t79 * t114;
t94 = pkin(8) * t97;
t93 = t78 * t98;
t54 = -t83 * pkin(3) - t79 * pkin(9) - pkin(2);
t46 = t82 * t54;
t18 = -pkin(10) * t98 + t46 + (-pkin(4) - t111) * t83;
t26 = t94 + (-pkin(10) * t79 + t54) * t78;
t9 = t81 * t18 - t77 * t26;
t55 = t113 * t78;
t56 = t113 * t82;
t28 = t81 * t55 + t77 * t56;
t10 = t77 * t18 + t81 * t26;
t45 = t83 * t103 + t76 * t79;
t24 = -t82 * t102 - t45 * t78;
t25 = -t78 * t102 + t45 * t82;
t92 = -t24 * t78 + t25 * t82;
t33 = -pkin(8) * t99 + t46;
t34 = t78 * t54 + t94;
t91 = -t33 * t78 + t34 * t82;
t90 = t45 * t83 + t106;
t29 = t77 * t55 - t81 * t56;
t40 = -t77 * t101 + t81 * t98;
t89 = -t40 * qJ(6) + t9;
t38 = t51 * t79;
t7 = -t38 * qJ(6) + t10;
t88 = pkin(4) ^ 2;
t87 = pkin(8) ^ 2;
t85 = 0.2e1 * pkin(5);
t74 = t83 ^ 2;
t70 = t75 ^ 2;
t67 = t72 * t87;
t66 = t77 ^ 2 * t88;
t65 = -0.2e1 * t109;
t63 = t69 + pkin(5);
t60 = t70 * t84 ^ 2;
t58 = t77 * t108;
t48 = t51 ^ 2;
t47 = t49 ^ 2;
t41 = t49 * t109;
t37 = t40 ^ 2;
t36 = t38 ^ 2;
t32 = t40 * t115;
t31 = t38 * t115;
t30 = t38 * t109;
t27 = -0.2e1 * t51 * t49;
t23 = t43 * t51;
t22 = t43 * t49;
t21 = t40 * t51;
t20 = t38 * t49;
t19 = t38 * pkin(5) + t53;
t16 = -0.2e1 * t40 * t38;
t15 = -t49 * qJ(6) + t29;
t14 = -t51 * qJ(6) + t28;
t13 = -t51 * t38 - t40 * t49;
t12 = t77 * t24 + t81 * t25;
t11 = t81 * t24 - t77 * t25;
t8 = t12 * t109;
t6 = t89 - t107;
t5 = t12 * t83 + t43 * t40;
t4 = -t11 * t83 + t43 * t38;
t3 = t11 ^ 2 + t12 ^ 2 + t42;
t2 = -t11 * t51 - t12 * t49;
t1 = -t11 * t40 - t12 * t38;
t17 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 * t80 ^ 2 + t76 ^ 2 + t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 ^ 2 + t42 + t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 ^ 2 + t25 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, -t103, 0, 0, 0, 0, 0, 0, 0, 0, t83 * t102, -t79 * t102, t90, pkin(2) * t102 + t90 * pkin(8), 0, 0, 0, 0, 0, 0, t43 * t101 - t24 * t83, t25 * t83 + t43 * t98 (-t24 * t82 - t25 * t78) * t79, pkin(8) * t106 + t24 * t33 + t25 * t34, 0, 0, 0, 0, 0, 0, t4, t5, t1, t12 * t10 + t11 * t9 + t43 * t53, 0, 0, 0, 0, 0, 0, t4, t5, t1, t11 * t6 + t12 * t7 + t43 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t72, t95, 0, t74, 0, 0, pkin(2) * t114, pkin(2) * t116, 0.2e1 * (t72 + t74) * pkin(8), pkin(2) ^ 2 + t74 * t87 + t67, t73 * t72, -0.2e1 * t72 * t100, t97 * t116, t71 * t72, t78 * t95, t74, 0.2e1 * t78 * t110 - 0.2e1 * t33 * t83, 0.2e1 * t82 * t110 + 0.2e1 * t34 * t83, 0.2e1 * (-t33 * t82 - t34 * t78) * t79, t33 ^ 2 + t34 ^ 2 + t67, t37, t16, t32, t36, -t31, t74, 0.2e1 * t53 * t38 - 0.2e1 * t9 * t83, 0.2e1 * t10 * t83 + 0.2e1 * t53 * t40, -0.2e1 * t10 * t38 - 0.2e1 * t9 * t40, t10 ^ 2 + t53 ^ 2 + t9 ^ 2, t37, t16, t32, t36, -t31, t74, 0.2e1 * t19 * t38 - 0.2e1 * t6 * t83, 0.2e1 * t19 * t40 + 0.2e1 * t7 * t83, -0.2e1 * t7 * t38 - 0.2e1 * t6 * t40, t19 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, -t45, 0, 0, 0, 0, 0, 0, 0, 0, -t43 * t82, t43 * t78, t92, -t43 * pkin(3) + t92 * pkin(9), 0, 0, 0, 0, 0, 0, t22, t23, t2, t11 * t28 + t12 * t29 + t43 * t64, 0, 0, 0, 0, 0, 0, t22, t23, t2, t11 * t14 + t12 * t15 + t43 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, t83, 0, -t68, -t83 * pkin(8), 0, 0, t93 (-t71 + t73) * t79, -t99, -t93, -t97, 0, -pkin(8) * t98 + (-pkin(3) * t79 + pkin(9) * t83) * t78, pkin(9) * t97 + (t111 - t112) * t79, t91, -pkin(3) * t68 + t91 * pkin(9), t21, t13, -t104, t20, t105, 0, -t28 * t83 + t64 * t38 + t53 * t49, t29 * t83 + t64 * t40 + t53 * t51, -t10 * t49 - t28 * t40 - t29 * t38 - t9 * t51, t10 * t29 + t9 * t28 + t53 * t64, t21, t13, -t104, t20, t105, 0, -t14 * t83 + t19 * t49 + t35 * t38, t15 * t83 + t19 * t51 + t35 * t40, -t14 * t40 - t15 * t38 - t7 * t49 - t6 * t51, t6 * t14 + t7 * t15 + t19 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t71, 0.2e1 * t100, 0, t73, 0, 0, 0.2e1 * t112, -0.2e1 * pkin(3) * t78, 0.2e1 * t96 * pkin(9), t96 * pkin(9) ^ 2 + pkin(3) ^ 2, t48, t27, 0, t47, 0, 0, t49 * t117, t51 * t117, -0.2e1 * t28 * t51 - 0.2e1 * t29 * t49, t28 ^ 2 + t29 ^ 2 + t64 ^ 2, t48, t27, 0, t47, 0, 0, t49 * t118, t51 * t118, -0.2e1 * t14 * t51 - 0.2e1 * t15 * t49, t14 ^ 2 + t15 ^ 2 + t35 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, -t25, 0, 0, 0, 0, 0, 0, 0, 0, t11, -t12, 0, t11 * t69 + t8, 0, 0, 0, 0, 0, 0, t11, -t12, 0, t11 * t63 + t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, -t101, -t83, t33, -t34, 0, 0, 0, 0, t40, 0, -t38, -t83, -t81 * t108 + t9, -t10 + t58, -t40 * t69 - t30 (t10 * t77 + t81 * t9) * pkin(4), 0, 0, t40, 0, -t38, -t83 (-pkin(5) - t63) * t83 + t89, t58 - t7, -t63 * t40 - t30, t7 * t109 + t6 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, t82, 0, -t78 * pkin(9), -t82 * pkin(9), 0, 0, 0, 0, t51, 0, -t49, 0, t28, -t29, -t51 * t69 - t41 (t28 * t81 + t29 * t77) * pkin(4), 0, 0, t51, 0, -t49, 0, t14, -t15, -t63 * t51 - t41, t15 * t109 + t14 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t69, t65, 0, t81 ^ 2 * t88 + t66, 0, 0, 0, 0, 0, 1, 0.2e1 * t63, t65, 0, t63 ^ 2 + t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, -t12, 0, 0, 0, 0, 0, 0, 0, 0, t11, -t12, 0, t11 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, -t38, -t83, t9, -t10, 0, 0, 0, 0, t40, 0, -t38, -t83, t89 - 0.2e1 * t107, -t7, -t40 * pkin(5), t6 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t49, 0, t28, -t29, 0, 0, 0, 0, t51, 0, -t49, 0, t14, -t15, -t51 * pkin(5), t14 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t69, -t109, 0, 0, 0, 0, 0, 0, 0, 1, t85 + t69, -t109, 0, t63 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t85, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t40, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, t51, 0, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t17;
