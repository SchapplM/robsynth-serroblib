% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR3_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:34:51
% EndTime: 2019-05-05 18:34:56
% DurationCPUTime: 1.67s
% Computational Cost: add. (1611->157), mult. (3158->274), div. (0->0), fcn. (3514->10), ass. (0->95)
t65 = sin(pkin(11));
t67 = cos(pkin(11));
t70 = sin(qJ(5));
t73 = cos(qJ(5));
t114 = -t70 * t65 + t73 * t67;
t60 = -t67 * pkin(4) - pkin(3);
t31 = -pkin(5) * t114 + t60;
t113 = 0.2e1 * t31;
t112 = 0.2e1 * t60;
t71 = sin(qJ(3));
t111 = 0.2e1 * t71;
t74 = cos(qJ(3));
t110 = -0.2e1 * t74;
t66 = sin(pkin(10));
t109 = t66 * pkin(1);
t68 = cos(pkin(10));
t108 = t68 * pkin(1);
t69 = sin(qJ(6));
t107 = t69 * pkin(5);
t72 = cos(qJ(6));
t106 = t72 * pkin(5);
t45 = t73 * t65 + t70 * t67;
t34 = t45 * t71;
t104 = t74 * pkin(3);
t59 = -pkin(2) - t108;
t41 = -t71 * qJ(4) - t104 + t59;
t38 = t67 * t41;
t58 = pkin(7) + t109;
t93 = t67 * t71;
t17 = -pkin(8) * t93 + t38 + (-t58 * t65 - pkin(4)) * t74;
t86 = t74 * t58;
t27 = t65 * t41 + t67 * t86;
t95 = t65 * t71;
t20 = -pkin(8) * t95 + t27;
t9 = t70 * t17 + t73 * t20;
t5 = -t34 * pkin(9) + t9;
t105 = t72 * t5;
t103 = t74 * pkin(5);
t36 = t114 * t71;
t14 = t72 * t34 + t69 * t36;
t24 = t114 * t69 + t72 * t45;
t102 = t24 * t14;
t101 = t24 * t74;
t100 = t45 * t34;
t99 = t45 * t74;
t61 = t65 ^ 2;
t98 = t61 * t71;
t63 = t71 ^ 2;
t97 = t63 * t58;
t96 = t65 * t67;
t94 = t65 * t74;
t92 = t67 * t74;
t50 = t71 * t58;
t90 = t71 * t74;
t22 = -t114 * t72 + t69 * t45;
t88 = t74 * t22;
t87 = t74 * t114;
t85 = pkin(8) + qJ(4);
t39 = pkin(4) * t95 + t50;
t62 = t67 ^ 2;
t84 = t61 + t62;
t64 = t74 ^ 2;
t83 = t63 + t64;
t82 = 0.2e1 * t90;
t81 = t65 * t93;
t8 = t73 * t17 - t70 * t20;
t4 = -t36 * pkin(9) - t103 + t8;
t1 = t72 * t4 - t69 * t5;
t47 = t85 * t65;
t48 = t85 * t67;
t28 = -t73 * t47 - t70 * t48;
t80 = t84 * qJ(4);
t79 = -pkin(3) * t71 + qJ(4) * t74;
t26 = -t65 * t86 + t38;
t78 = -t26 * t65 + t27 * t67;
t29 = -t70 * t47 + t73 * t48;
t56 = t62 * t71;
t55 = t62 * t63;
t54 = t61 * t63;
t53 = t58 ^ 2;
t49 = t63 * t53;
t33 = t36 ^ 2;
t32 = t34 ^ 2;
t25 = t36 * t114;
t21 = t34 * pkin(5) + t39;
t19 = pkin(9) * t114 + t29;
t18 = -t45 * pkin(9) + t28;
t16 = -t69 * t34 + t72 * t36;
t13 = t16 ^ 2;
t12 = t14 ^ 2;
t10 = t16 * t22;
t7 = t69 * t18 + t72 * t19;
t6 = t72 * t18 - t69 * t19;
t2 = t69 * t4 + t105;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t109, 0 (t66 ^ 2 + t68 ^ 2) * pkin(1) ^ 2, t63, t82, 0, t64, 0, 0, t59 * t110, t59 * t111, 0.2e1 * t83 * t58, t64 * t53 + t59 ^ 2 + t49, t55, -0.2e1 * t63 * t96, -0.2e1 * t67 * t90, t54, t65 * t82, t64, -0.2e1 * t26 * t74 + 0.2e1 * t65 * t97, 0.2e1 * t27 * t74 + 0.2e1 * t67 * t97 (-t26 * t67 - t27 * t65) * t111, t26 ^ 2 + t27 ^ 2 + t49, t33, -0.2e1 * t36 * t34, t36 * t110, t32, -t34 * t110, t64, 0.2e1 * t39 * t34 - 0.2e1 * t8 * t74, 0.2e1 * t39 * t36 + 0.2e1 * t9 * t74, -0.2e1 * t9 * t34 - 0.2e1 * t8 * t36, t39 ^ 2 + t8 ^ 2 + t9 ^ 2, t13, -0.2e1 * t16 * t14, t16 * t110, t12, 0.2e1 * t74 * t14, t64, -0.2e1 * t1 * t74 + 0.2e1 * t21 * t14, 0.2e1 * t21 * t16 + 0.2e1 * t2 * t74, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t2 ^ 2 + t21 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t78 - t86) * t71, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t8 * t34 + t9 * t36 - t39 * t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t14 + t2 * t16 - t21 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55 + t54 + t64, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 + t32 + t64, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 + t12 + t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t50, -t86, 0, 0, t81, t56 - t98, -t94, -t81, -t92, 0, -t67 * t50 + t79 * t65, t65 * t50 + t79 * t67, t78, -pkin(3) * t50 + t78 * qJ(4), t36 * t45, t25 - t100, -t99, -t34 * t114, -t87, 0, -t114 * t39 - t28 * t74 + t60 * t34, t29 * t74 + t60 * t36 + t39 * t45, t114 * t9 - t28 * t36 - t29 * t34 - t8 * t45, t8 * t28 + t9 * t29 + t39 * t60, t16 * t24, -t10 - t102, -t101, t14 * t22, t88, 0, t31 * t14 + t21 * t22 - t6 * t74, t31 * t16 + t21 * t24 + t7 * t74, -t1 * t24 - t7 * t14 - t6 * t16 - t2 * t22, t1 * t6 + t2 * t7 + t21 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t71, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t94, t56 + t98, t71 * t80 + t104, 0, 0, 0, 0, 0, 0, t87, -t99, t25 + t100, -t34 * t28 + t36 * t29 - t74 * t60, 0, 0, 0, 0, 0, 0, -t88, -t101, -t10 + t102, -t14 * t6 + t16 * t7 - t74 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, 0.2e1 * t96, 0, t62, 0, 0, 0.2e1 * pkin(3) * t67, -0.2e1 * pkin(3) * t65, 0.2e1 * t80, t84 * qJ(4) ^ 2 + pkin(3) ^ 2, t45 ^ 2, 0.2e1 * t45 * t114, 0, t114 ^ 2, 0, 0, -t114 * t112, t45 * t112, 0.2e1 * t114 * t29 - 0.2e1 * t28 * t45, t28 ^ 2 + t29 ^ 2 + t60 ^ 2, t24 ^ 2, -0.2e1 * t24 * t22, 0, t22 ^ 2, 0, 0, t22 * t113, t24 * t113, -0.2e1 * t7 * t22 - 0.2e1 * t6 * t24, t31 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, t93, 0, t50, 0, 0, 0, 0, 0, 0, t34, t36, 0, t39, 0, 0, 0, 0, 0, 0, t14, t16, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, t65, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t114, t45, 0, t60, 0, 0, 0, 0, 0, 0, t22, t24, 0, t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, -t74, t8, -t9, 0, 0, 0, 0, t16, 0, -t14, -t74, -t72 * t103 + t1, -t105 + (-t4 + t103) * t69 (-t14 * t69 - t16 * t72) * pkin(5) (t1 * t72 + t2 * t69) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t36, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t16, 0 (-t14 * t72 + t16 * t69) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, t114, 0, t28, -t29, 0, 0, 0, 0, t24, 0, -t22, 0, t6, -t7 (-t22 * t69 - t24 * t72) * pkin(5) (t6 * t72 + t69 * t7) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t106, -0.2e1 * t107, 0 (t69 ^ 2 + t72 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, -t74, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t22, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t106, -t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
