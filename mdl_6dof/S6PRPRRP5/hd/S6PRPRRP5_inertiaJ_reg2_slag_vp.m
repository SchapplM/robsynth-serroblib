% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRRP5_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:57:02
% EndTime: 2019-05-04 23:57:05
% DurationCPUTime: 1.19s
% Computational Cost: add. (433->118), mult. (950->191), div. (0->0), fcn. (1037->8), ass. (0->88)
t89 = 2 * pkin(5);
t52 = cos(pkin(6));
t54 = sin(qJ(4));
t57 = cos(qJ(4));
t51 = sin(pkin(6));
t58 = cos(qJ(2));
t79 = t51 * t58;
t17 = t52 * t54 + t57 * t79;
t88 = t17 ^ 2;
t56 = cos(qJ(5));
t87 = 0.2e1 * t56;
t86 = 0.2e1 * t57;
t85 = 2 * qJ(3);
t53 = sin(qJ(5));
t84 = t53 * pkin(5);
t83 = t57 * pkin(4);
t82 = t17 * t56;
t81 = t17 * t57;
t55 = sin(qJ(2));
t80 = t51 * t55;
t39 = t53 * t54;
t78 = t53 * t56;
t77 = t53 * t57;
t59 = -pkin(2) - pkin(8);
t76 = t53 * t59;
t75 = t54 * t59;
t42 = t56 * t57;
t74 = t56 * t59;
t43 = -t56 * pkin(5) - pkin(4);
t73 = t57 * t43;
t72 = t57 * t54;
t71 = t57 * t59;
t70 = -qJ(6) - pkin(9);
t46 = t53 ^ 2;
t48 = t56 ^ 2;
t69 = t46 + t48;
t47 = t54 ^ 2;
t49 = t57 ^ 2;
t35 = t47 + t49;
t68 = qJ(6) * t57;
t67 = -0.2e1 * t72;
t66 = t54 * t74;
t24 = t69 * t54;
t27 = t54 * pkin(4) - t57 * pkin(9) + qJ(3);
t20 = t56 * t27;
t65 = -t56 * t68 + t20;
t64 = -pkin(9) * t54 - t83;
t19 = t52 * t57 - t54 * t79;
t10 = -t19 * t53 + t56 * t80;
t11 = t19 * t56 + t53 * t80;
t4 = -t10 * t53 + t11 * t56;
t12 = -t53 * t75 + t20;
t13 = t53 * t27 + t66;
t63 = -t12 * t53 + t13 * t56;
t7 = t19 * t54 - t81;
t28 = t70 * t53;
t29 = t70 * t56;
t62 = -t28 * t53 - t29 * t56;
t60 = qJ(3) ^ 2;
t50 = t59 ^ 2;
t45 = t51 ^ 2;
t44 = t49 * t50;
t41 = t56 * t54;
t40 = t48 * t49;
t38 = t46 * t49;
t37 = t45 * t55 ^ 2;
t36 = 0.2e1 * t78;
t34 = qJ(3) * t80;
t33 = t53 * t42;
t32 = t72 * t87;
t31 = -0.2e1 * t49 * t78;
t30 = t53 * t67;
t26 = t35 * t59;
t25 = t35 * t56;
t23 = t35 * t53;
t22 = (-t46 + t48) * t57;
t21 = (-t59 + t84) * t57;
t16 = t69 * t47 + t49;
t15 = t45 * t58 ^ 2 + t52 ^ 2 + t37;
t14 = t17 * t53;
t9 = t66 + (t27 - t68) * t53;
t8 = (pkin(5) - t76) * t54 + t65;
t6 = -t11 * t54 + t17 * t42;
t5 = t10 * t54 + t17 * t77;
t3 = (-t10 * t56 - t11 * t53) * t57;
t2 = t10 ^ 2 + t11 ^ 2 + t88;
t1 = t4 * t54 - t81;
t18 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 ^ 2 + t37 + t88, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t80, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t80, pkin(2) * t79 + t34, 0, 0, 0, 0, 0, 0, t54 * t80, t57 * t80, -t7, t7 * t59 + t34, 0, 0, 0, 0, 0, 0, t5, t6, t3, t10 * t12 + t11 * t13 - t17 * t71, 0, 0, 0, 0, 0, 0, t5, t6, t3, t10 * t8 + t11 * t9 + t17 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(2), t85, pkin(2) ^ 2 + t60, t49, t67, 0, t47, 0, 0, t54 * t85, t57 * t85, -0.2e1 * t26, t47 * t50 + t44 + t60, t40, t31, t32, t38, t30, t47, 0.2e1 * t12 * t54 - 0.2e1 * t49 * t76, -0.2e1 * t13 * t54 - 0.2e1 * t49 * t74 (-t12 * t56 - t13 * t53) * t86, t12 ^ 2 + t13 ^ 2 + t44, t40, t31, t32, t38, t30, t47, 0.2e1 * t21 * t77 + 0.2e1 * t8 * t54, 0.2e1 * t21 * t42 - 0.2e1 * t9 * t54 (-t53 * t9 - t56 * t8) * t86, t21 ^ 2 + t8 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t35, t26, 0, 0, 0, 0, 0, 0, -t23, -t25, 0, t49 * t59 + t63 * t54, 0, 0, 0, 0, 0, 0, -t23, -t25, 0, -t21 * t57 + (-t8 * t53 + t9 * t56) * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0, 0, 0, 0, 0, 0, 0, 0, -t82, t14, t4, -t17 * pkin(4) + t4 * pkin(9), 0, 0, 0, 0, 0, 0, -t82, t14, t4, t10 * t28 - t11 * t29 + t17 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, -t54, 0, t71, -t75, 0, 0, t33, t22, t39, -t33, t41, 0, t64 * t53 + t56 * t71, -t53 * t71 + t64 * t56, t63, pkin(4) * t71 + t63 * pkin(9), t33, t22, t39, -t33, t41, 0, -t21 * t56 + t28 * t54 + t53 * t73, t21 * t53 + t29 * t54 + t56 * t73 (-t28 * t57 + t9) * t56 + (t29 * t57 - t8) * t53, t21 * t43 + t8 * t28 - t9 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, -t54, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t77, t24, pkin(9) * t24 + t83, 0, 0, 0, 0, 0, 0, t42, -t77, t24, t62 * t54 - t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t46, t36, 0, t48, 0, 0, pkin(4) * t87, -0.2e1 * pkin(4) * t53, 0.2e1 * t69 * pkin(9), t69 * pkin(9) ^ 2 + pkin(4) ^ 2, t46, t36, 0, t48, 0, 0, -0.2e1 * t43 * t56, 0.2e1 * t43 * t53, 0.2e1 * t62, t28 ^ 2 + t29 ^ 2 + t43 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t11, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t11, 0, t10 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t77, t54, t12, -t13, 0, 0, 0, 0, t42, 0, -t77, t54 (t89 - t76) * t54 + t65, -t9, -pkin(5) * t42, t8 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39, -t41, 0, 0, 0, 0, 0, 0, 0, 0, -t39, -t41, 0, -pkin(5) * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, t56, 0, -t53 * pkin(9), -t56 * pkin(9), 0, 0, 0, 0, t53, 0, t56, 0, t28, t29, -t84, t28 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t89, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t42, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, t53, 0, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t18;
