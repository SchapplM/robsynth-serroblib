% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP10_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPRPRP10_inertiaJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:11:21
% EndTime: 2019-05-05 18:11:25
% DurationCPUTime: 1.26s
% Computational Cost: add. (451->104), mult. (724->142), div. (0->0), fcn. (663->4), ass. (0->70)
t52 = sin(qJ(5));
t46 = t52 ^ 2;
t54 = cos(qJ(5));
t48 = t54 ^ 2;
t30 = t46 + t48;
t53 = sin(qJ(3));
t47 = t53 ^ 2;
t55 = cos(qJ(3));
t49 = t55 ^ 2;
t31 = t47 + t49;
t22 = t53 * pkin(3) - t55 * qJ(4) + qJ(2);
t80 = -0.2e1 * t22;
t79 = 0.2e1 * t52;
t78 = 0.2e1 * t53;
t77 = 0.2e1 * qJ(2);
t76 = 0.2e1 * qJ(4);
t75 = t55 * pkin(5);
t10 = t53 * pkin(8) + t22;
t57 = -pkin(1) - pkin(7);
t24 = (pkin(4) - t57) * t55;
t6 = t54 * t10 + t52 * t24;
t34 = t52 * t53;
t56 = -pkin(3) - pkin(8);
t74 = t52 * t56;
t60 = -t52 * pkin(5) + t54 * qJ(6);
t21 = qJ(4) - t60;
t73 = t53 * t21;
t72 = t54 * t52;
t37 = t54 * t53;
t71 = t55 * t53;
t70 = t55 * t56;
t69 = t55 * t57;
t68 = t30 * t56 ^ 2;
t67 = t31 * t57 ^ 2;
t66 = t53 * qJ(4);
t65 = t55 * qJ(6);
t64 = t47 * t72;
t63 = t54 * t71;
t62 = t52 * t10 - t54 * t24;
t61 = t30 * t70;
t3 = t65 + t6;
t4 = t62 - t75;
t1 = t3 * t52 - t4 * t54;
t2 = t6 * t52 - t54 * t62;
t26 = t55 * pkin(3) + t66;
t25 = pkin(5) * t54 + t52 * qJ(6);
t59 = qJ(2) ^ 2;
t58 = qJ(4) ^ 2;
t43 = t54 * t56;
t41 = t53 * t57;
t38 = t54 * t55;
t36 = t48 * t47;
t35 = t52 * t55;
t33 = t46 * t47;
t32 = -0.2e1 * t71;
t29 = t54 * t70;
t28 = t52 * t37;
t27 = t71 * t79;
t23 = -t53 * pkin(4) + t41;
t20 = t31 * t57;
t19 = t30 * t56;
t18 = t31 * t54;
t17 = (-t46 + t48) * t53;
t16 = t31 * t52;
t15 = t30 * t55;
t12 = 0.2e1 * t20;
t11 = 0.2e1 * t19;
t9 = t30 * t49 + t47;
t7 = t41 + (-pkin(4) - t25) * t53;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t77 (pkin(1) ^ 2) + t59, t49, t32, 0, t47, 0, 0, t53 * t77, t55 * t77, -t12, t59 + t67, 0, 0, 0, t49, t32, t47, -t12, t53 * t80, t55 * t80, t22 ^ 2 + t67, t33, 0.2e1 * t64, t27, t36, 0.2e1 * t63, t49, -0.2e1 * t23 * t37 - 0.2e1 * t55 * t62, 0.2e1 * t23 * t34 - 0.2e1 * t6 * t55 (t52 * t62 + t54 * t6) * t78, t23 ^ 2 + t6 ^ 2 + t62 ^ 2, t33, t27, -0.2e1 * t64, t49, -0.2e1 * t63, t36, -0.2e1 * t7 * t37 - 0.2e1 * t4 * t55 (t3 * t54 + t4 * t52) * t78, 0.2e1 * t3 * t55 - 0.2e1 * t7 * t34, t3 ^ 2 + t4 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t31, t20, 0, 0, 0, 0, 0, 0, -t31, 0, 0, t20, 0, 0, 0, 0, 0, 0, -t18, t16, 0, -t2 * t55 + t23 * t53, 0, 0, 0, 0, 0, 0, -t18, 0, -t16, -t1 * t55 + t7 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, -t53, 0, t69, -t41, 0, 0, 0, -t55, t53, 0, 0, 0, -t26, -t69, t41, t26 * t57, t28, t17, t38, -t28, -t35, 0, t23 * t52 - t54 * t66 + t29, t23 * t54 + (t66 - t70) * t52, -t2, t23 * qJ(4) + t2 * t56, t28, t38, -t17, 0, t35, -t28, -t21 * t37 + t7 * t52 + t29, -t1, -t7 * t54 + (t70 - t73) * t52, t1 * t56 + t7 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t53, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t53, t26, 0, 0, 0, 0, 0, 0, t34, t37, t15, -t61 + t66, 0, 0, 0, 0, 0, 0, t34, t15, -t37, -t61 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t76, pkin(3) ^ 2 + t58, t48, -0.2e1 * t72, 0, t46, 0, 0, t52 * t76, t54 * t76, -t11, t58 + t68, t48, 0, 0.2e1 * t72, 0, 0, t46, t21 * t79, -t11, -0.2e1 * t21 * t54, t21 ^ 2 + t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, 0, -t69, 0, 0, 0, 0, 0, 0, t38, -t35, 0, t2, 0, 0, 0, 0, 0, 0, t38, 0, t35, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t30, t19, 0, 0, 0, 0, 0, 0, 0, -t30, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, t37, t55, -t62, -t6, 0, 0, 0, t34, 0, t55, -t37, 0, -t62 + 0.2e1 * t75, t60 * t53, 0.2e1 * t65 + t6, -t4 * pkin(5) + t3 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t35, 0, 0, 0, 0, 0, 0, 0, 0, -t38, 0, -t35, -t25 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, 0, t43, -t74, 0, 0, 0, t54, 0, 0, t52, 0, t43, -t25, t74, t25 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t52, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t52, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t34, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
