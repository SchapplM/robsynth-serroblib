% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP1_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:30:14
% EndTime: 2019-05-05 17:30:18
% DurationCPUTime: 1.20s
% Computational Cost: add. (901->105), mult. (1631->180), div. (0->0), fcn. (1828->8), ass. (0->82)
t52 = sin(pkin(10));
t54 = cos(pkin(10));
t57 = sin(qJ(3));
t59 = cos(qJ(3));
t36 = t52 * t59 + t54 * t57;
t95 = -0.2e1 * t36;
t53 = sin(pkin(9));
t86 = t53 * pkin(1);
t45 = pkin(7) + t86;
t75 = qJ(4) + t45;
t30 = t75 * t59;
t70 = t75 * t57;
t10 = t52 * t30 + t54 * t70;
t94 = t10 ^ 2;
t34 = t52 * t57 - t54 * t59;
t93 = t34 ^ 2;
t55 = cos(pkin(9));
t84 = t55 * pkin(1);
t47 = -pkin(2) - t84;
t38 = -t59 * pkin(3) + t47;
t92 = 0.2e1 * t38;
t56 = sin(qJ(5));
t91 = 0.2e1 * t56;
t90 = 0.2e1 * t57;
t58 = cos(qJ(5));
t89 = -0.2e1 * t58;
t88 = t34 * pkin(5);
t87 = t52 * pkin(3);
t85 = t54 * pkin(3);
t83 = t58 * pkin(5);
t82 = t10 * t34;
t81 = t56 * t34;
t80 = t56 * t36;
t79 = t56 * t58;
t12 = t54 * t30 - t52 * t70;
t78 = t58 * t12;
t27 = t58 * t36;
t48 = t56 ^ 2;
t50 = t58 ^ 2;
t39 = t48 + t50;
t49 = t57 ^ 2;
t51 = t59 ^ 2;
t77 = t49 + t51;
t76 = qJ(6) * t36;
t44 = pkin(8) + t87;
t74 = qJ(6) + t44;
t73 = t34 * t95;
t72 = pkin(5) * t80;
t46 = -pkin(4) - t85;
t9 = t34 * pkin(4) - t36 * pkin(8) + t38;
t3 = -t56 * t12 + t58 * t9;
t71 = t39 * t44;
t62 = -t58 * t76 + t3;
t1 = t62 + t88;
t2 = t78 + (t9 - t76) * t56;
t69 = t1 * t58 + t2 * t56;
t68 = -t1 * t56 + t2 * t58;
t4 = t56 * t9 + t78;
t67 = t3 * t58 + t4 * t56;
t66 = -t3 * t56 + t4 * t58;
t28 = t74 * t56;
t29 = t74 * t58;
t65 = -t28 * t58 + t29 * t56;
t64 = t28 * t56 + t29 * t58;
t63 = -t34 * t44 + t36 * t46;
t42 = 0.2e1 * t79;
t37 = t46 - t83;
t33 = t36 ^ 2;
t26 = t58 * t34;
t25 = t50 * t36;
t24 = t50 * t33;
t21 = t48 * t36;
t20 = t48 * t33;
t18 = t56 * t27;
t17 = -0.2e1 * t33 * t79;
t16 = 0.2e1 * t34 * t27;
t15 = t56 * t73;
t14 = -t21 - t25;
t13 = -t21 + t25;
t7 = t24 + t20 + t93;
t6 = t10 + t72;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t84, -0.2e1 * t86, 0 (t53 ^ 2 + t55 ^ 2) * pkin(1) ^ 2, t49, t59 * t90, 0, t51, 0, 0, -0.2e1 * t47 * t59, t47 * t90, 0.2e1 * t77 * t45, t77 * t45 ^ 2 + t47 ^ 2, t33, t73, 0, t93, 0, 0, t34 * t92, t36 * t92, 0.2e1 * t10 * t36 - 0.2e1 * t12 * t34, t12 ^ 2 + t38 ^ 2 + t94, t24, t17, t16, t20, t15, t93, 0.2e1 * t10 * t80 + 0.2e1 * t3 * t34, 0.2e1 * t10 * t27 - 0.2e1 * t4 * t34, t67 * t95, t3 ^ 2 + t4 ^ 2 + t94, t24, t17, t16, t20, t15, t93, 0.2e1 * t1 * t34 + 0.2e1 * t6 * t80, -0.2e1 * t2 * t34 + 0.2e1 * t6 * t27, t69 * t95, t1 ^ 2 + t2 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 * t36 + t82, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 * t36 + t82, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6 * t34 + t68 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 + t93, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t59, 0, -t57 * t45, -t59 * t45, 0, 0, 0, 0, t36, 0, -t34, 0, -t10, -t12 (-t34 * t52 - t36 * t54) * pkin(3) (-t10 * t54 + t12 * t52) * pkin(3), t18, t13, t81, -t18, t26, 0, -t10 * t58 + t63 * t56, t10 * t56 + t63 * t58, t66, t10 * t46 + t66 * t44, t18, t13, t81, -t18, t26, 0, -t28 * t34 + t37 * t80 - t6 * t58, t37 * t27 - t29 * t34 + t6 * t56, -t65 * t36 + t68, -t1 * t28 + t2 * t29 + t6 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t57, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t36, 0 (-t34 * t54 + t36 * t52) * pkin(3), 0, 0, 0, 0, 0, 0, -t26, t81, -t14, t34 * t46 + t36 * t71, 0, 0, 0, 0, 0, 0, -t26, t81, -t14, t34 * t37 + t64 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t85, -0.2e1 * t87, 0 (t52 ^ 2 + t54 ^ 2) * pkin(3) ^ 2, t48, t42, 0, t50, 0, 0, t46 * t89, t46 * t91, 0.2e1 * t71, t39 * t44 ^ 2 + t46 ^ 2, t48, t42, 0, t50, 0, 0, t37 * t89, t37 * t91, 0.2e1 * t64, t28 ^ 2 + t29 ^ 2 + t37 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t36, 0, t38, 0, 0, 0, 0, 0, 0, t26, -t81, t14, t67, 0, 0, 0, 0, 0, 0, t26, -t81, t14, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t80, t34, t3, -t4, 0, 0, 0, 0, t27, 0, -t80, t34, t62 + 0.2e1 * t88, -t2, -pkin(5) * t27, t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, -t27, 0, 0, 0, 0, 0, 0, 0, 0, -t80, -t27, 0, -t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, t58, 0, -t56 * t44, -t58 * t44, 0, 0, 0, 0, t56, 0, t58, 0, -t28, -t29, -t56 * pkin(5), -t28 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, -t56, 0, 0, 0, 0, 0, 0, 0, 0, t58, -t56, 0, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, t27, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, t56, 0, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
