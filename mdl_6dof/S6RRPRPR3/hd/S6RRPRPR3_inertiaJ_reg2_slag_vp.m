% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRPR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR3_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 13:17:54
% EndTime: 2019-05-06 13:18:01
% DurationCPUTime: 1.84s
% Computational Cost: add. (2837->162), mult. (5414->319), div. (0->0), fcn. (6500->10), ass. (0->99)
t100 = -qJ(3) - pkin(7);
t86 = cos(qJ(2));
t66 = t100 * t86;
t79 = sin(pkin(10));
t81 = cos(pkin(10));
t84 = sin(qJ(2));
t93 = t100 * t84;
t41 = -t66 * t79 - t81 * t93;
t121 = t41 ^ 2;
t60 = t79 * t84 - t81 * t86;
t55 = t60 ^ 2;
t78 = sin(pkin(11));
t80 = cos(pkin(11));
t83 = sin(qJ(4));
t85 = cos(qJ(4));
t58 = t78 * t83 - t80 * t85;
t111 = t81 * pkin(2);
t72 = -pkin(3) - t111;
t65 = -pkin(4) * t85 + t72;
t44 = pkin(5) * t58 + t65;
t120 = 0.2e1 * t44;
t119 = -0.2e1 * t60;
t118 = 0.2e1 * t60;
t117 = 0.2e1 * t65;
t73 = -pkin(2) * t86 - pkin(1);
t116 = 0.2e1 * t73;
t115 = 0.2e1 * t86;
t114 = t78 * pkin(4);
t113 = t79 * pkin(2);
t112 = t80 * pkin(4);
t110 = cos(qJ(6));
t62 = t78 * t85 + t80 * t83;
t63 = t79 * t86 + t81 * t84;
t28 = t62 * t63;
t101 = t85 * t63;
t104 = t83 * t63;
t30 = t101 * t80 - t104 * t78;
t82 = sin(qJ(6));
t18 = t110 * t30 - t28 * t82;
t37 = t110 * t58 + t62 * t82;
t109 = t18 * t37;
t108 = t30 * t58;
t39 = t110 * t62 - t58 * t82;
t107 = t39 * t60;
t106 = t62 * t60;
t105 = t83 * t60;
t103 = t83 * t85;
t43 = -t81 * t66 + t79 * t93;
t102 = t85 * t43;
t34 = pkin(3) * t60 - pkin(8) * t63 + t73;
t20 = t34 * t85 - t43 * t83;
t97 = qJ(5) * t63;
t13 = pkin(4) * t60 - t85 * t97 + t20;
t15 = t102 + (t34 - t97) * t83;
t7 = t13 * t78 + t15 * t80;
t74 = t83 ^ 2;
t76 = t85 ^ 2;
t99 = t74 + t76;
t75 = t84 ^ 2;
t77 = t86 ^ 2;
t98 = t75 + t77;
t70 = pkin(8) + t113;
t96 = qJ(5) + t70;
t95 = t63 * t119;
t94 = t83 * t101;
t6 = t13 * t80 - t15 * t78;
t4 = pkin(5) * t60 - pkin(9) * t30 + t6;
t5 = -pkin(9) * t28 + t7;
t1 = t110 * t4 - t5 * t82;
t52 = t96 * t83;
t53 = t96 * t85;
t32 = -t52 * t80 - t53 * t78;
t26 = pkin(4) * t104 + t41;
t21 = t34 * t83 + t102;
t92 = t20 * t85 + t21 * t83;
t91 = -t20 * t83 + t21 * t85;
t33 = -t52 * t78 + t53 * t80;
t90 = -t60 * t70 + t63 * t72;
t2 = t110 * t5 + t4 * t82;
t71 = pkin(5) + t112;
t57 = t63 ^ 2;
t56 = t62 ^ 2;
t54 = t58 ^ 2;
t51 = t85 * t60;
t49 = t110 * t114 + t71 * t82;
t48 = t110 * t71 - t114 * t82;
t40 = t58 * t60;
t36 = t39 ^ 2;
t35 = t37 ^ 2;
t25 = t37 * t60;
t24 = -pkin(9) * t58 + t33;
t23 = -pkin(9) * t62 + t32;
t22 = t62 * t28;
t19 = pkin(5) * t28 + t26;
t16 = t110 * t28 + t30 * t82;
t10 = t110 * t24 + t23 * t82;
t9 = t110 * t23 - t24 * t82;
t8 = t39 * t16;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t75, t84 * t115, 0, t77, 0, 0, pkin(1) * t115, -0.2e1 * pkin(1) * t84, 0.2e1 * t98 * pkin(7), pkin(7) ^ 2 * t98 + pkin(1) ^ 2, t57, t95, 0, t55, 0, 0, t60 * t116, t63 * t116, 0.2e1 * t41 * t63 - 0.2e1 * t43 * t60, t43 ^ 2 + t73 ^ 2 + t121, t76 * t57, -0.2e1 * t57 * t103, t101 * t118, t74 * t57, t83 * t95, t55, 0.2e1 * t104 * t41 + 0.2e1 * t20 * t60, 0.2e1 * t101 * t41 - 0.2e1 * t21 * t60, -0.2e1 * t92 * t63, t20 ^ 2 + t21 ^ 2 + t121, t30 ^ 2, -0.2e1 * t30 * t28, t30 * t118, t28 ^ 2, -t28 * t118, t55, 0.2e1 * t26 * t28 + 0.2e1 * t6 * t60, 0.2e1 * t26 * t30 - 0.2e1 * t60 * t7, -0.2e1 * t28 * t7 - 0.2e1 * t30 * t6, t26 ^ 2 + t6 ^ 2 + t7 ^ 2, t18 ^ 2, -0.2e1 * t18 * t16, t18 * t118, t16 ^ 2, t16 * t119, t55, 0.2e1 * t1 * t60 + 0.2e1 * t16 * t19, 0.2e1 * t18 * t19 - 0.2e1 * t2 * t60, -0.2e1 * t1 * t18 - 0.2e1 * t16 * t2, t1 ^ 2 + t19 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, t86, 0, -t84 * pkin(7), -t86 * pkin(7), 0, 0, 0, 0, t63, 0, -t60, 0, -t41, -t43 (-t60 * t79 - t63 * t81) * pkin(2) (-t41 * t81 + t43 * t79) * pkin(2), t94 (-t74 + t76) * t63, t105, -t94, t51, 0, -t41 * t85 + t83 * t90, t41 * t83 + t85 * t90, t91, t41 * t72 + t70 * t91, t30 * t62, -t22 - t108, t106, t28 * t58, -t40, 0, t26 * t58 + t28 * t65 + t32 * t60, t26 * t62 + t30 * t65 - t33 * t60, -t28 * t33 - t30 * t32 - t58 * t7 - t6 * t62, t26 * t65 + t32 * t6 + t33 * t7, t18 * t39, -t8 - t109, t107, t16 * t37, -t25, 0, t16 * t44 + t19 * t37 + t60 * t9, -t10 * t60 + t18 * t44 + t19 * t39, -t1 * t39 - t10 * t16 - t18 * t9 - t2 * t37, t1 * t9 + t10 * t2 + t19 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t111, -0.2e1 * t113, 0 (t79 ^ 2 + t81 ^ 2) * pkin(2) ^ 2, t74, 0.2e1 * t103, 0, t76, 0, 0, -0.2e1 * t72 * t85, 0.2e1 * t72 * t83, 0.2e1 * t99 * t70, t70 ^ 2 * t99 + t72 ^ 2, t56, -0.2e1 * t62 * t58, 0, t54, 0, 0, t58 * t117, t62 * t117, -0.2e1 * t32 * t62 - 0.2e1 * t33 * t58, t32 ^ 2 + t33 ^ 2 + t65 ^ 2, t36, -0.2e1 * t39 * t37, 0, t35, 0, 0, t37 * t120, t39 * t120, -0.2e1 * t10 * t37 - 0.2e1 * t39 * t9, t10 ^ 2 + t44 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t63, 0, t73, 0, 0, 0, 0, 0, 0, t51, -t105, -t99 * t63, t92, 0, 0, 0, 0, 0, 0, -t40, -t106, -t22 + t108, -t58 * t6 + t62 * t7, 0, 0, 0, 0, 0, 0, -t25, -t107, -t8 + t109, -t1 * t37 + t2 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32 * t58 + t33 * t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t39 - t37 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56 + t54, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 + t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, -t104, t60, t20, -t21, 0, 0, 0, 0, t30, 0, -t28, t60, t112 * t60 + t6, -t114 * t60 - t7 (-t28 * t78 - t30 * t80) * pkin(4) (t6 * t80 + t7 * t78) * pkin(4), 0, 0, t18, 0, -t16, t60, t48 * t60 + t1, -t49 * t60 - t2, -t16 * t49 - t18 * t48, t1 * t48 + t2 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, t85, 0, -t83 * t70, -t85 * t70, 0, 0, 0, 0, t62, 0, -t58, 0, t32, -t33 (-t58 * t78 - t62 * t80) * pkin(4) (t32 * t80 + t33 * t78) * pkin(4), 0, 0, t39, 0, -t37, 0, t9, -t10, -t37 * t49 - t39 * t48, t10 * t49 + t48 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, -t83, 0, 0, 0, 0, 0, 0, 0, 0, -t58, -t62, 0 (-t58 * t80 + t62 * t78) * pkin(4), 0, 0, 0, 0, 0, 0, -t37, -t39, 0, -t37 * t48 + t39 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t112, -0.2e1 * t114, 0 (t78 ^ 2 + t80 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t48, -0.2e1 * t49, 0, t48 ^ 2 + t49 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, t30, 0, t26, 0, 0, 0, 0, 0, 0, t16, t18, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t62, 0, t65, 0, 0, 0, 0, 0, 0, t37, t39, 0, t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, 0, -t16, t60, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, -t37, 0, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t39, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t48, -t49, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
