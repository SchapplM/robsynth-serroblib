% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRP8_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP8_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRP8_inertiaJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 05:48:50
% EndTime: 2019-05-08 05:49:00
% DurationCPUTime: 2.16s
% Computational Cost: add. (2752->203), mult. (6148->367), div. (0->0), fcn. (7131->10), ass. (0->135)
t86 = sin(qJ(5));
t82 = t86 ^ 2;
t90 = cos(qJ(5));
t83 = t90 ^ 2;
t123 = t82 + t83;
t87 = sin(qJ(4));
t148 = t87 * pkin(3);
t76 = pkin(11) + t148;
t125 = t123 * t76;
t143 = cos(qJ(4));
t144 = cos(qJ(3));
t84 = sin(pkin(6));
t107 = t84 * t144;
t85 = cos(pkin(6));
t88 = sin(qJ(3));
t89 = sin(qJ(2));
t52 = t89 * t107 + t85 * t88;
t135 = t84 * t89;
t68 = t88 * t135;
t99 = -t85 * t144 + t68;
t35 = t143 * t99 + t87 * t52;
t160 = -0.2e1 * t35;
t78 = -t144 * pkin(3) - pkin(2);
t159 = 0.2e1 * t78;
t158 = -0.2e1 * t86;
t157 = -0.2e1 * t90;
t156 = -pkin(10) - pkin(9);
t122 = t35 * qJ(6);
t91 = cos(qJ(2));
t134 = t84 * t91;
t113 = pkin(8) * t134;
t155 = pkin(1) * t89;
t48 = t113 + (pkin(9) + t155) * t85;
t49 = (-pkin(2) * t91 - pkin(9) * t89 - pkin(1)) * t84;
t32 = t144 * t48 + t88 * t49;
t26 = -t99 * pkin(10) + t32;
t106 = t143 * t26;
t116 = pkin(3) * t134;
t31 = t144 * t49 - t88 * t48;
t22 = -t52 * pkin(10) - t116 + t31;
t14 = t87 * t22 + t106;
t12 = -pkin(11) * t134 + t14;
t36 = t143 * t52 - t87 * t99;
t146 = t91 * pkin(1);
t70 = pkin(8) * t135;
t39 = t68 * pkin(3) + t70 + (t78 - t146) * t85;
t17 = t35 * pkin(4) - t36 * pkin(11) + t39;
t6 = t90 * t12 + t86 * t17;
t3 = t122 + t6;
t104 = t86 * t12 - t90 * t17;
t153 = t35 * pkin(5);
t4 = t104 - t153;
t100 = t3 * t90 + t4 * t86;
t129 = t87 * t88;
t60 = -t143 * t144 + t129;
t154 = pkin(11) * t60;
t152 = t60 * pkin(5);
t127 = -t143 * t22 + t87 * t26;
t11 = pkin(4) * t134 + t127;
t29 = t90 * t134 + t86 * t36;
t30 = -t86 * t134 + t90 * t36;
t7 = t29 * pkin(5) - t30 * qJ(6) + t11;
t151 = t7 * t86;
t150 = t7 * t90;
t149 = t86 * pkin(11);
t147 = t90 * pkin(11);
t108 = t143 * pkin(3);
t77 = -t108 - pkin(4);
t145 = pkin(4) - t77;
t142 = t11 * t90;
t105 = t143 * t88;
t109 = t144 * pkin(9);
t65 = t144 * pkin(10) + t109;
t44 = -t156 * t105 + t87 * t65;
t61 = t87 * t144 + t105;
t96 = pkin(5) * t86 - t90 * qJ(6);
t27 = t96 * t61 + t44;
t141 = t27 * t86;
t140 = t27 * t90;
t139 = t29 * t90;
t28 = t30 * t86;
t138 = t44 * t90;
t137 = t60 * t76;
t81 = t84 ^ 2;
t136 = t81 * t91;
t133 = t85 * t89;
t33 = t86 * t35;
t132 = t86 * t61;
t131 = t86 * t76;
t130 = t86 * t90;
t34 = t90 * t35;
t55 = t90 * t61;
t128 = t90 * t76;
t40 = t60 * pkin(4) - t61 * pkin(11) + t78;
t45 = t156 * t129 + t143 * t65;
t25 = t86 * t40 + t90 * t45;
t97 = -t90 * pkin(5) - t86 * qJ(6);
t63 = -pkin(4) + t97;
t58 = -t108 + t63;
t126 = -t58 - t63;
t124 = t123 * pkin(11);
t121 = t60 * qJ(6);
t120 = 0.2e1 * t144;
t119 = -0.2e1 * t61 * t60;
t118 = -0.2e1 * t134;
t117 = 0.2e1 * t134;
t115 = pkin(11) * t33;
t114 = pkin(11) * t34;
t112 = t88 * t134;
t111 = t35 * t131;
t110 = t35 * t128;
t103 = -t90 * t40 + t86 * t45;
t102 = t91 * t107;
t101 = -pkin(4) * t61 - t154;
t98 = -t61 * t63 + t154;
t19 = t121 + t25;
t20 = t103 - t152;
t8 = t19 * t90 + t20 * t86;
t95 = t28 - t139;
t94 = t58 * t61 - t137;
t93 = t61 * t77 - t137;
t74 = t81 * t91 ^ 2;
t72 = 0.2e1 * t130;
t59 = t61 ^ 2;
t57 = pkin(1) * t133 + t113;
t56 = t85 * t146 - t70;
t54 = t90 * t60;
t53 = t86 * t60;
t51 = t86 * t55;
t47 = t70 + (-pkin(2) - t146) * t85;
t43 = t44 * t86;
t41 = (-t82 + t83) * t61;
t18 = -t86 * t29 + t30 * t90;
t10 = t11 * t86;
t1 = [1, 0, 0, t81 * t89 ^ 2, 0.2e1 * t89 * t136, 0.2e1 * t84 * t133, t85 * t117, t85 ^ 2, 0.2e1 * pkin(1) * t136 + 0.2e1 * t56 * t85, -0.2e1 * t81 * t155 - 0.2e1 * t57 * t85, t52 ^ 2, -0.2e1 * t52 * t99, t52 * t118, t99 * t117, t74, -0.2e1 * t134 * t31 + 0.2e1 * t47 * t99, 0.2e1 * t134 * t32 + 0.2e1 * t47 * t52, t36 ^ 2, t36 * t160, t36 * t118, t35 * t117, t74, 0.2e1 * t127 * t134 + 0.2e1 * t39 * t35, 0.2e1 * t134 * t14 + 0.2e1 * t39 * t36, t30 ^ 2, -0.2e1 * t30 * t29, 0.2e1 * t30 * t35, t29 * t160, t35 ^ 2, -0.2e1 * t104 * t35 + 0.2e1 * t11 * t29, 0.2e1 * t11 * t30 - 0.2e1 * t6 * t35, 0.2e1 * t7 * t29 - 0.2e1 * t4 * t35, -0.2e1 * t3 * t29 + 0.2e1 * t4 * t30, 0.2e1 * t3 * t35 - 0.2e1 * t7 * t30, t3 ^ 2 + t4 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, t135, t134, t85, t56, -t57, t52 * t88, t144 * t52 - t88 * t99, -t112, -t102, 0, -pkin(2) * t99 + pkin(9) * t112 - t144 * t47, -pkin(2) * t52 + pkin(9) * t102 + t47 * t88, t36 * t61, -t61 * t35 - t36 * t60, -t61 * t134, t60 * t134, 0, t134 * t44 + t78 * t35 + t39 * t60, t134 * t45 + t78 * t36 + t39 * t61, t30 * t55 (-t28 - t139) * t61, t30 * t60 + t35 * t55, -t132 * t35 - t29 * t60, t35 * t60, -t103 * t35 - t104 * t60 + t11 * t132 + t44 * t29, t11 * t55 - t25 * t35 + t44 * t30 - t6 * t60, t132 * t7 - t20 * t35 + t27 * t29 - t4 * t60, -t19 * t29 + t20 * t30 + (-t3 * t86 + t4 * t90) * t61, t19 * t35 - t27 * t30 + t3 * t60 - t55 * t7, t3 * t19 + t4 * t20 + t7 * t27; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t88 ^ 2, t88 * t120, 0, 0, 0, pkin(2) * t120, -0.2e1 * pkin(2) * t88, t59, t119, 0, 0, 0, t60 * t159, t61 * t159, t83 * t59, -0.2e1 * t59 * t130, 0.2e1 * t60 * t55, t86 * t119, t60 ^ 2, -0.2e1 * t103 * t60 + 0.2e1 * t132 * t44, -0.2e1 * t25 * t60 + 0.2e1 * t44 * t55, 0.2e1 * t132 * t27 - 0.2e1 * t20 * t60, 0.2e1 * (-t19 * t86 + t20 * t90) * t61, 0.2e1 * t19 * t60 - 0.2e1 * t27 * t55, t19 ^ 2 + t20 ^ 2 + t27 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t99, -t134, t31, -t32, 0, 0, t36, -t35, -t134, -t108 * t134 - t127, -t106 + (-t22 + t116) * t87, t28, t18, t33, t34, 0, t77 * t29 - t111 - t142, t77 * t30 + t10 - t110, t58 * t29 - t111 - t150, t76 * t95 + t100, -t58 * t30 + t110 - t151, t100 * t76 + t7 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, t144, 0, -t88 * pkin(9), -t109, 0, 0, t61, -t60, 0, -t44, -t45, t51, t41, t53, t54, 0, t86 * t93 - t138, t90 * t93 + t43, t86 * t94 - t140, t8, -t90 * t94 - t141, t27 * t58 + t76 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t148, t82, t72, 0, 0, 0, t77 * t157, 0.2e1 * t77 * t86, t58 * t157, 0.2e1 * t125, t58 * t158, t123 * t76 ^ 2 + t58 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t35, -t134, -t127, -t14, t28, t18, t33, t34, 0, -pkin(4) * t29 - t115 - t142, -pkin(4) * t30 + t10 - t114, t63 * t29 - t115 - t150, pkin(11) * t95 + t100, -t63 * t30 + t114 - t151, pkin(11) * t100 + t7 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, -t60, 0, -t44, -t45, t51, t41, t53, t54, 0, t101 * t86 - t138, t101 * t90 + t43, -t86 * t98 - t140, t8, t90 * t98 - t141, pkin(11) * t8 + t27 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t108, -t148, t82, t72, 0, 0, 0, t145 * t90, -t145 * t86, t126 * t90, t124 + t125, t126 * t86, pkin(11) * t125 + t58 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t82, t72, 0, 0, 0, 0.2e1 * pkin(4) * t90, pkin(4) * t158, t63 * t157, 0.2e1 * t124, t63 * t158, pkin(11) ^ 2 * t123 + t63 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t29, t35, -t104, -t6, -t104 + 0.2e1 * t153, -pkin(5) * t30 - t29 * qJ(6), 0.2e1 * t122 + t6, -t4 * pkin(5) + t3 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t132, t60, -t103, -t25, -t103 + 0.2e1 * t152, t97 * t61, 0.2e1 * t121 + t25, -t20 * pkin(5) + t19 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t90, 0, -t131, -t128, -t131, -t96, t128, -t96 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t90, 0, -t149, -t147, -t149, -t96, t147, -t96 * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, t30, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, t55, 0, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t1;
