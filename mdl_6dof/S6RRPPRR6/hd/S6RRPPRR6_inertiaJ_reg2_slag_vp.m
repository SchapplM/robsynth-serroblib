% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPRR6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR6_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 10:54:47
% EndTime: 2019-05-06 10:54:52
% DurationCPUTime: 1.50s
% Computational Cost: add. (1429->119), mult. (2458->211), div. (0->0), fcn. (2870->8), ass. (0->85)
t65 = sin(qJ(2));
t58 = t65 ^ 2;
t67 = cos(qJ(2));
t60 = t67 ^ 2;
t110 = t58 + t60;
t61 = sin(pkin(10));
t62 = cos(pkin(10));
t34 = t65 * t61 + t67 * t62;
t36 = -t67 * t61 + t65 * t62;
t64 = sin(qJ(5));
t92 = cos(qJ(5));
t17 = -t64 * t34 + t92 * t36;
t109 = -0.2e1 * t17;
t63 = sin(qJ(6));
t57 = t63 ^ 2;
t66 = cos(qJ(6));
t59 = t66 ^ 2;
t82 = t57 + t59;
t108 = t82 * pkin(9);
t99 = -pkin(2) - pkin(3);
t43 = t62 * qJ(3) + t61 * t99;
t41 = t61 * qJ(3) - t62 * t99;
t76 = -pkin(4) - t41;
t23 = t92 * t43 + t64 * t76;
t20 = -pkin(9) + t23;
t77 = t82 * t20;
t84 = pkin(7) - qJ(4);
t78 = t84 * t67;
t79 = t84 * t65;
t27 = t61 * t79 + t62 * t78;
t10 = -t34 * pkin(8) + t27;
t25 = t61 * t78 - t62 * t79;
t70 = -t36 * pkin(8) - t25;
t5 = t64 * t10 - t92 * t70;
t107 = t5 ^ 2;
t14 = t92 * t34 + t64 * t36;
t106 = t14 ^ 2;
t32 = t64 * t61 - t92 * t62;
t105 = t32 ^ 2;
t45 = -t67 * pkin(2) - t65 * qJ(3) - pkin(1);
t30 = t67 * pkin(3) - t45;
t24 = t34 * pkin(4) + t30;
t104 = 0.2e1 * t24;
t103 = 0.2e1 * t30;
t102 = -0.2e1 * t63;
t101 = -0.2e1 * t65;
t100 = 0.2e1 * t66;
t98 = t5 * t32;
t97 = t5 * t63;
t96 = t5 * t66;
t95 = t65 * pkin(7);
t94 = t67 * pkin(7);
t21 = t64 * t43 - t92 * t76;
t19 = pkin(5) + t21;
t93 = pkin(5) + t19;
t91 = t32 * t63;
t90 = t32 * t66;
t89 = t63 * t14;
t88 = t63 * t17;
t87 = t63 * t66;
t86 = t65 * t67;
t85 = t66 * t17;
t83 = t110 * pkin(7) ^ 2;
t81 = t14 * t109;
t80 = -0.2e1 * t87;
t37 = t92 * t61 + t64 * t62;
t16 = t82 * t37;
t75 = -pkin(5) * t17 - pkin(9) * t14;
t4 = t14 * pkin(5) - t17 * pkin(9) + t24;
t7 = t92 * t10 + t64 * t70;
t2 = t66 * t4 - t63 * t7;
t3 = t63 * t4 + t66 * t7;
t74 = t2 * t66 + t3 * t63;
t1 = -t2 * t63 + t3 * t66;
t73 = -t65 * pkin(2) + t67 * qJ(3);
t72 = -t14 * t20 + t17 * t19;
t71 = -t37 * t14 + t32 * t17;
t46 = 0.2e1 * t87;
t44 = 0.2e1 * t110 * pkin(7);
t31 = t37 ^ 2;
t13 = t17 ^ 2;
t12 = t66 * t14;
t11 = t63 * t85;
t8 = (t57 - t59) * t17;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t58, 0.2e1 * t86, 0, t60, 0, 0, 0.2e1 * pkin(1) * t67, pkin(1) * t101, t44, pkin(1) ^ 2 + t83, t58, 0, -0.2e1 * t86, 0, 0, t60, -0.2e1 * t45 * t67, t44, t45 * t101, t45 ^ 2 + t83, t36 ^ 2, -0.2e1 * t36 * t34, 0, t34 ^ 2, 0, 0, t34 * t103, t36 * t103, 0.2e1 * t25 * t36 - 0.2e1 * t27 * t34, t25 ^ 2 + t27 ^ 2 + t30 ^ 2, t13, t81, 0, t106, 0, 0, t14 * t104, t17 * t104, -0.2e1 * t7 * t14 + 0.2e1 * t5 * t17, t24 ^ 2 + t7 ^ 2 + t107, t59 * t13, t13 * t80, 0.2e1 * t14 * t85, t57 * t13, t63 * t81, t106, 0.2e1 * t2 * t14 + 0.2e1 * t5 * t88, -0.2e1 * t3 * t14 + 0.2e1 * t5 * t85, t74 * t109, t2 ^ 2 + t3 ^ 2 + t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t67, 0, -t95, -t94, 0, 0, 0, t65, 0, 0, -t67, 0, -t95, t73, t94, t73 * pkin(7), 0, 0, -t36, 0, t34, 0, t25, t27, -t43 * t34 + t41 * t36, t25 * t41 + t27 * t43, 0, 0, -t17, 0, t14, 0, t5, t7, -t23 * t14 + t21 * t17, t5 * t21 + t7 * t23, -t11, t8, -t89, t11, -t12, 0, t72 * t63 + t96, t72 * t66 - t97, -t1, t1 * t20 + t5 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(2), 0, 0.2e1 * qJ(3), pkin(2) ^ 2 + qJ(3) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t41, 0.2e1 * t43, 0, t41 ^ 2 + t43 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t21, 0.2e1 * t23, 0, t21 ^ 2 + t23 ^ 2, t57, t46, 0, t59, 0, 0, t19 * t100, t19 * t102, -0.2e1 * t77, t82 * t20 ^ 2 + t19 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t95, 0, 0, 0, 0, 0, 0, 0, 0, -t61 * t34 - t62 * t36, -t25 * t62 + t27 * t61, 0, 0, 0, 0, 0, 0, 0, 0, t71, t7 * t37 + t98, 0, 0, 0, 0, 0, 0, t71 * t63, t71 * t66, 0, t1 * t37 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t62, t61, 0, -t41 * t62 + t43 * t61, 0, 0, 0, 0, 0, 0, t32, t37, 0, t21 * t32 + t23 * t37, 0, 0, 0, 0, 0, 0, t90, -t91, -t16, t20 * t16 + t19 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61 ^ 2 + t62 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31 + t105, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82 * t31 + t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t36, 0, t30, 0, 0, 0, 0, 0, 0, t14, t17, 0, t24, 0, 0, 0, 0, 0, 0, t12, -t89, -t82 * t17, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, -t14, 0, -t5, -t7, 0, 0, t11, -t8, t89, -t11, t12, 0, t75 * t63 - t96, t75 * t66 + t97, t1, -t5 * pkin(5) + t1 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t21, -t23, 0, 0, -t57, t80, 0, -t59, 0, 0, -t93 * t66, t93 * t63, t77 - t108, -t19 * pkin(5) + pkin(9) * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t37, 0, 0, 0, 0, 0, 0, 0, 0, -t90, t91, t16, -t32 * pkin(5) + pkin(9) * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, t46, 0, t59, 0, 0, pkin(5) * t100, pkin(5) * t102, 0.2e1 * t108, t82 * pkin(9) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, -t88, t14, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, 0, -t66, 0, -t63 * t20, -t66 * t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63 * t37, -t66 * t37, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, -t63, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t66, 0, -t63 * pkin(9), -t66 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
