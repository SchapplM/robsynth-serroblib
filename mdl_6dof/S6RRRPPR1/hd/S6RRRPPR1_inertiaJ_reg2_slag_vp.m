% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPPR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:09:03
% EndTime: 2019-05-07 04:09:10
% DurationCPUTime: 2.15s
% Computational Cost: add. (2939->155), mult. (5490->290), div. (0->0), fcn. (6687->10), ass. (0->114)
t93 = sin(pkin(11));
t89 = t93 ^ 2;
t95 = cos(pkin(11));
t90 = t95 ^ 2;
t116 = t89 + t90;
t94 = sin(pkin(10));
t133 = t94 * pkin(3);
t82 = qJ(5) + t133;
t118 = t116 * t82;
t100 = cos(qJ(3));
t101 = cos(qJ(2));
t98 = sin(qJ(3));
t99 = sin(qJ(2));
t73 = t100 * t101 - t98 * t99;
t74 = t100 * t99 + t98 * t101;
t96 = cos(pkin(10));
t50 = t94 * t73 + t96 * t74;
t146 = -0.2e1 * t50;
t130 = cos(qJ(6));
t97 = sin(qJ(6));
t145 = t130 * t95 - t97 * t93;
t135 = -pkin(8) - pkin(7);
t110 = t135 * t101;
t112 = t135 * t99;
t54 = t100 * t112 + t98 * t110;
t105 = -t74 * qJ(4) + t54;
t55 = -t100 * t110 + t98 * t112;
t39 = t73 * qJ(4) + t55;
t22 = -t96 * t105 + t94 * t39;
t144 = t22 ^ 2;
t48 = -t96 * t73 + t94 * t74;
t46 = t48 ^ 2;
t143 = 0.2e1 * t48;
t111 = -t95 * pkin(5) - pkin(4);
t131 = t98 * pkin(2);
t88 = t100 * pkin(2);
t85 = t88 + pkin(3);
t117 = t94 * t131 - t96 * t85;
t56 = t111 + t117;
t142 = 0.2e1 * t56;
t86 = -t101 * pkin(2) - pkin(1);
t59 = -t73 * pkin(3) + t86;
t141 = 0.2e1 * t59;
t140 = 0.2e1 * t74;
t132 = t96 * pkin(3);
t75 = t111 - t132;
t139 = 0.2e1 * t75;
t138 = 0.2e1 * t93;
t137 = -0.2e1 * t95;
t136 = 0.2e1 * t101;
t125 = t95 * t50;
t21 = t48 * pkin(4) - t50 * qJ(5) + t59;
t24 = t94 * t105 + t96 * t39;
t9 = t95 * t21 - t93 * t24;
t6 = t48 * pkin(5) - pkin(9) * t125 + t9;
t10 = t93 * t21 + t95 * t24;
t127 = t93 * t50;
t7 = -pkin(9) * t127 + t10;
t3 = t130 * t6 - t97 * t7;
t4 = t130 * t7 + t97 * t6;
t72 = t130 * t93 + t97 * t95;
t134 = t145 * t4 - t3 * t72;
t129 = t22 * t95;
t27 = t145 * t50;
t128 = t27 * t145;
t37 = t72 * t48;
t44 = t93 * t48;
t126 = t93 * t95;
t113 = t96 * t131;
t64 = t94 * t85 + t113;
t61 = qJ(5) + t64;
t52 = (-pkin(9) - t61) * t93;
t87 = t95 * pkin(9);
t53 = t95 * t61 + t87;
t31 = t130 * t52 - t97 * t53;
t32 = t130 * t53 + t97 * t52;
t123 = t145 * t32 - t31 * t72;
t66 = (-pkin(9) - t82) * t93;
t67 = t95 * t82 + t87;
t42 = t130 * t66 - t97 * t67;
t43 = t130 * t67 + t97 * t66;
t122 = t145 * t43 - t42 * t72;
t121 = t56 + t75;
t120 = t116 * t61;
t62 = -pkin(4) + t117;
t84 = -pkin(4) - t132;
t119 = t62 + t84;
t91 = t99 ^ 2;
t92 = t101 ^ 2;
t115 = t91 + t92;
t114 = t48 * t146;
t5 = t10 * t95 - t9 * t93;
t108 = t10 * t93 + t9 * t95;
t107 = -t48 * t61 + t50 * t62;
t106 = -t48 * t82 + t50 * t84;
t79 = 0.2e1 * t126;
t69 = t72 ^ 2;
t68 = t145 ^ 2;
t51 = 0.2e1 * t72 * t145;
t47 = t50 ^ 2;
t45 = t95 * t48;
t40 = t93 * t125;
t36 = t145 * t48;
t30 = (-t89 + t90) * t50;
t25 = t72 * t50;
t20 = t22 * t93;
t16 = t72 * t25;
t15 = t27 * t72;
t14 = t25 * t145;
t13 = pkin(5) * t127 + t22;
t12 = t13 * t72;
t11 = t13 * t145;
t8 = -t16 + t128;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t91, t99 * t136, 0, t92, 0, 0, pkin(1) * t136, -0.2e1 * pkin(1) * t99, 0.2e1 * t115 * pkin(7), t115 * pkin(7) ^ 2 + pkin(1) ^ 2, t74 ^ 2, t73 * t140, 0, t73 ^ 2, 0, 0, -0.2e1 * t86 * t73, t86 * t140, -0.2e1 * t54 * t74 + 0.2e1 * t55 * t73, t54 ^ 2 + t55 ^ 2 + t86 ^ 2, t47, t114, 0, t46, 0, 0, t48 * t141, t50 * t141, 0.2e1 * t22 * t50 - 0.2e1 * t24 * t48, t24 ^ 2 + t59 ^ 2 + t144, t90 * t47, -0.2e1 * t47 * t126, t125 * t143, t89 * t47, t93 * t114, t46, 0.2e1 * t22 * t127 + 0.2e1 * t9 * t48, -0.2e1 * t10 * t48 + 0.2e1 * t22 * t125, t108 * t146, t10 ^ 2 + t9 ^ 2 + t144, t27 ^ 2, -0.2e1 * t27 * t25, t27 * t143, t25 ^ 2, -t25 * t143, t46, 0.2e1 * t13 * t25 + 0.2e1 * t3 * t48, 0.2e1 * t13 * t27 - 0.2e1 * t4 * t48, -0.2e1 * t4 * t25 - 0.2e1 * t3 * t27, t13 ^ 2 + t3 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, t101, 0, -t99 * pkin(7), -t101 * pkin(7), 0, 0, 0, 0, t74, 0, t73, 0, t54, -t55 (-t100 * t74 + t73 * t98) * pkin(2) (t100 * t54 + t55 * t98) * pkin(2), 0, 0, t50, 0, -t48, 0, -t22, -t24, t117 * t50 - t64 * t48, t117 * t22 + t24 * t64, t40, t30, t44, -t40, t45, 0, t107 * t93 - t129, t107 * t95 + t20, t5, t22 * t62 + t5 * t61, t15, t8, t37, -t14, t36, 0, t56 * t25 + t31 * t48 - t11, t56 * t27 - t32 * t48 + t12, -t32 * t25 - t31 * t27 + t134, t13 * t56 + t3 * t31 + t4 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t88, -0.2e1 * t131, 0 (t100 ^ 2 + t98 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t117, -0.2e1 * t64, 0, t117 ^ 2 + t64 ^ 2, t89, t79, 0, t90, 0, 0, t62 * t137, t62 * t138, 0.2e1 * t120, t116 * t61 ^ 2 + t62 ^ 2, t69, t51, 0, t68, 0, 0, -t145 * t142, t72 * t142, 0.2e1 * t123, t31 ^ 2 + t32 ^ 2 + t56 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t73, 0, t54, -t55, 0, 0, 0, 0, t50, 0, -t48, 0, -t22, -t24 (-t48 * t94 - t50 * t96) * pkin(3) (-t22 * t96 + t24 * t94) * pkin(3), t40, t30, t44, -t40, t45, 0, t106 * t93 - t129, t106 * t95 + t20, t5, t22 * t84 + t5 * t82, t15, t8, t37, -t14, t36, 0, t75 * t25 + t42 * t48 - t11, t75 * t27 - t43 * t48 + t12, -t43 * t25 - t42 * t27 + t134, t13 * t75 + t3 * t42 + t4 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t88, -t131, 0, 0, 0, 0, 0, 0, 0, 1, -t117 + t132, -t113 + (-pkin(3) - t85) * t94, 0 (-t117 * t96 + t64 * t94) * pkin(3), t89, t79, 0, t90, 0, 0, -t119 * t95, t119 * t93, t118 + t120, t61 * t118 + t62 * t84, t69, t51, 0, t68, 0, 0, -t121 * t145, t121 * t72, t122 + t123, t31 * t42 + t32 * t43 + t56 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t132, -0.2e1 * t133, 0 (t94 ^ 2 + t96 ^ 2) * pkin(3) ^ 2, t89, t79, 0, t90, 0, 0, t84 * t137, t84 * t138, 0.2e1 * t118, t116 * t82 ^ 2 + t84 ^ 2, t69, t51, 0, t68, 0, 0, -t145 * t139, t72 * t139, 0.2e1 * t122, t42 ^ 2 + t43 ^ 2 + t75 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t50, 0, t59, 0, 0, 0, 0, 0, 0, t45, -t44, -t116 * t50, t108, 0, 0, 0, 0, 0, 0, t36, -t37, -t16 - t128, t145 * t3 + t4 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145 * t31 + t32 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145 * t42 + t43 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69 + t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, t125, 0, t22, 0, 0, 0, 0, 0, 0, t25, t27, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t93, 0, t62, 0, 0, 0, 0, 0, 0, -t145, t72, 0, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t93, 0, t84, 0, 0, 0, 0, 0, 0, -t145, t72, 0, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t25, t48, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t145, 0, t31, -t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t145, 0, t42, -t43, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, -t72, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
