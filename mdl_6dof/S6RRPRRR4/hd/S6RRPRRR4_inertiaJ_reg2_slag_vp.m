% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR4_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 20:47:44
% EndTime: 2019-05-06 20:47:54
% DurationCPUTime: 3.03s
% Computational Cost: add. (4334->222), mult. (10343->432), div. (0->0), fcn. (11945->12), ass. (0->146)
t110 = cos(qJ(6));
t100 = t110 ^ 2;
t106 = sin(qJ(6));
t98 = t106 ^ 2;
t133 = t100 + t98;
t107 = sin(qJ(5));
t159 = t107 * pkin(4);
t92 = pkin(11) + t159;
t178 = t133 * t92;
t102 = sin(pkin(12));
t104 = cos(pkin(12));
t103 = sin(pkin(6));
t113 = cos(qJ(2));
t130 = t103 * t113;
t109 = sin(qJ(2));
t131 = t103 * t109;
t61 = t102 * t131 - t104 * t130;
t108 = sin(qJ(4));
t112 = cos(qJ(4));
t105 = cos(pkin(6));
t149 = pkin(8) + qJ(3);
t160 = t105 * pkin(2);
t85 = t105 * t113 * pkin(1);
t53 = -t131 * t149 + t160 + t85;
t163 = pkin(1) * t109;
t126 = t105 * t163;
t56 = t130 * t149 + t126;
t36 = t102 * t53 + t104 * t56;
t34 = pkin(9) * t105 + t36;
t63 = (t102 * t113 + t104 * t109) * t103;
t80 = (-pkin(2) * t113 - pkin(1)) * t103;
t38 = t61 * pkin(3) - t63 * pkin(9) + t80;
t15 = -t108 * t34 + t112 * t38;
t168 = t61 * pkin(4);
t52 = t105 * t108 + t112 * t63;
t12 = -pkin(10) * t52 + t15 + t168;
t111 = cos(qJ(5));
t16 = t108 * t38 + t112 * t34;
t51 = t105 * t112 - t108 * t63;
t14 = pkin(10) * t51 + t16;
t139 = t111 * t14;
t8 = t107 * t12 + t139;
t6 = pkin(11) * t61 + t8;
t148 = t102 * t56 - t104 * t53;
t33 = -pkin(3) * t105 + t148;
t21 = -pkin(4) * t51 + t33;
t30 = t107 * t52 - t111 * t51;
t32 = t107 * t51 + t111 * t52;
t9 = pkin(5) * t30 - pkin(11) * t32 + t21;
t3 = t106 * t9 + t110 * t6;
t1 = t3 * t110;
t2 = -t106 * t6 + t110 * t9;
t118 = -t2 * t106 + t1;
t177 = t30 ^ 2;
t162 = t102 * pkin(2);
t89 = pkin(9) + t162;
t164 = pkin(10) + t89;
t122 = t164 * t108;
t73 = t164 * t112;
t41 = t107 * t73 + t111 * t122;
t176 = t41 ^ 2;
t60 = t61 ^ 2;
t77 = t107 * t108 - t111 * t112;
t175 = t77 ^ 2;
t174 = -0.2e1 * t30;
t173 = -0.2e1 * t61;
t172 = 0.2e1 * t61;
t161 = t104 * pkin(2);
t90 = -pkin(3) - t161;
t81 = -pkin(4) * t112 + t90;
t171 = 0.2e1 * t81;
t170 = 0.2e1 * t105;
t169 = 0.2e1 * t108;
t167 = t77 * pkin(5);
t79 = t107 * t112 + t108 * t111;
t166 = t79 * pkin(11);
t158 = t111 * pkin(4);
t93 = -pkin(5) - t158;
t165 = pkin(5) - t93;
t156 = t30 * t77;
t155 = t32 * t77;
t154 = t41 * t77;
t120 = t107 * t14 - t111 * t12;
t5 = -pkin(5) * t61 + t120;
t153 = t5 * t110;
t22 = t106 * t32 - t110 * t61;
t152 = t77 * t22;
t151 = t79 * t61;
t150 = t98 * t79;
t146 = t133 * pkin(11);
t28 = t106 * t30;
t145 = t106 * t79;
t144 = t106 * t92;
t143 = t108 * t61;
t142 = t108 * t89;
t29 = t110 * t30;
t141 = t110 * t79;
t140 = t110 * t92;
t138 = t112 * t89;
t96 = t103 ^ 2;
t137 = t113 * t96;
t19 = t22 * t110;
t24 = t106 * t61 + t110 * t32;
t20 = t24 * t106;
t136 = t24 * t110;
t39 = t41 * t106;
t135 = t41 * t110;
t134 = t52 * t112;
t101 = t112 ^ 2;
t99 = t108 ^ 2;
t132 = t99 + t101;
t129 = t106 * t110;
t128 = -0.2e1 * t79 * t77;
t127 = t103 * t170;
t125 = t30 * t145;
t124 = t30 * t141;
t123 = t79 * t20;
t119 = -pkin(5) * t79 - pkin(11) * t77;
t117 = -t77 * t92 + t79 * t93;
t40 = -t166 + t81 + t167;
t43 = -t107 * t122 + t111 * t73;
t25 = -t106 * t43 + t110 * t40;
t26 = t106 * t40 + t110 * t43;
t13 = -t106 * t25 + t110 * t26;
t97 = t105 ^ 2;
t87 = 0.2e1 * t129;
t76 = t79 ^ 2;
t72 = pkin(8) * t130 + t126;
t71 = -pkin(8) * t131 + t85;
t70 = t110 * t77;
t69 = t100 * t79;
t68 = t100 * t76;
t67 = t106 * t77;
t66 = t98 * t76;
t64 = t79 * t129;
t57 = t112 * t61;
t48 = t77 * t61;
t47 = t69 + t150;
t46 = t69 - t150;
t44 = t108 * t51;
t27 = t79 * t30;
t18 = t24 * t77;
t17 = t79 * t19;
t10 = -t106 * t22 + t136;
t4 = t5 * t106;
t7 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t96 * t109 ^ 2, 0.2e1 * t109 * t137, t109 * t127, t96 * t113 ^ 2, t113 * t127, t97, 0.2e1 * pkin(1) * t137 + 0.2e1 * t105 * t71, -0.2e1 * t105 * t72 - 0.2e1 * t163 * t96, 0.2e1 * (-t109 * t71 + t113 * t72) * t103, pkin(1) ^ 2 * t96 + t71 ^ 2 + t72 ^ 2, t63 ^ 2, t63 * t173, t63 * t170, t60, t105 * t173, t97, -0.2e1 * t105 * t148 + 0.2e1 * t61 * t80, -0.2e1 * t105 * t36 + 0.2e1 * t63 * t80, 0.2e1 * t148 * t63 - 0.2e1 * t36 * t61, t148 ^ 2 + t36 ^ 2 + t80 ^ 2, t52 ^ 2, 0.2e1 * t52 * t51, t52 * t172, t51 ^ 2, t51 * t172, t60, 0.2e1 * t15 * t61 - 0.2e1 * t33 * t51, -0.2e1 * t16 * t61 + 0.2e1 * t33 * t52, -0.2e1 * t15 * t52 + 0.2e1 * t16 * t51, t15 ^ 2 + t16 ^ 2 + t33 ^ 2, t32 ^ 2, t32 * t174, t32 * t172, t177, t30 * t173, t60, -0.2e1 * t120 * t61 + 0.2e1 * t21 * t30, 0.2e1 * t21 * t32 - 0.2e1 * t61 * t8, 0.2e1 * t120 * t32 - 0.2e1 * t30 * t8, t120 ^ 2 + t21 ^ 2 + t8 ^ 2, t24 ^ 2, -0.2e1 * t24 * t22, 0.2e1 * t24 * t30, t22 ^ 2, t22 * t174, t177, 0.2e1 * t2 * t30 + 0.2e1 * t22 * t5, 0.2e1 * t24 * t5 - 0.2e1 * t3 * t30, -0.2e1 * t2 * t24 - 0.2e1 * t22 * t3, t2 ^ 2 + t3 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, 0, t130, t105, t71, -t72, 0, 0, 0, 0, t63, 0, -t61, t105, t104 * t160 - t148, -t102 * t160 - t36 (-t102 * t61 - t104 * t63) * pkin(2) (t102 * t36 - t104 * t148) * pkin(2), t52 * t108, t44 + t134, t143, t51 * t112, t57, 0, -t112 * t33 - t142 * t61 - t51 * t90, t108 * t33 - t138 * t61 + t52 * t90 (t51 * t89 + t16) * t112 + (t52 * t89 - t15) * t108, t33 * t90 + (-t15 * t108 + t16 * t112) * t89, t32 * t79, -t27 - t155, t151, t156, -t48, 0, t21 * t77 + t30 * t81 - t41 * t61, t21 * t79 + t32 * t81 - t43 * t61, t120 * t79 - t30 * t43 + t32 * t41 - t77 * t8, t120 * t41 + t21 * t81 + t43 * t8, t79 * t136, -t17 - t123, t18 + t124, t22 * t145, -t125 - t152, t156, t145 * t5 + t2 * t77 + t22 * t41 + t25 * t30, t141 * t5 + t24 * t41 - t26 * t30 - t3 * t77, -t26 * t22 - t25 * t24 + (-t106 * t3 - t110 * t2) * t79, t2 * t25 + t26 * t3 + t41 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t161, -0.2e1 * t162, 0 (t102 ^ 2 + t104 ^ 2) * pkin(2) ^ 2, t99, t112 * t169, 0, t101, 0, 0, -0.2e1 * t90 * t112, t90 * t169, 0.2e1 * t132 * t89, t132 * t89 ^ 2 + t90 ^ 2, t76, t128, 0, t175, 0, 0, t77 * t171, t79 * t171, 0.2e1 * t41 * t79 - 0.2e1 * t43 * t77, t43 ^ 2 + t81 ^ 2 + t176, t68, -0.2e1 * t76 * t129, 0.2e1 * t77 * t141, t66, t106 * t128, t175, 0.2e1 * t25 * t77 + 0.2e1 * t39 * t79, 0.2e1 * t135 * t79 - 0.2e1 * t26 * t77, 0.2e1 * (-t106 * t26 - t110 * t25) * t79, t25 ^ 2 + t26 ^ 2 + t176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t63, 0, t80, 0, 0, 0, 0, 0, 0, t57, -t143, t44 - t134, t108 * t16 + t112 * t15, 0, 0, 0, 0, 0, 0, -t48, -t151, -t27 + t155, t120 * t77 + t79 * t8, 0, 0, 0, 0, 0, 0, -t125 + t152, t18 - t124, -t17 + t123, t118 * t79 + t5 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43 * t79 + t154, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * t79 + t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 + t175, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 + t66 + t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, 0, t51, t61, t15, -t16, 0, 0, 0, 0, t32, 0, -t30, t61, t158 * t61 - t120, -t139 + (-t12 - t168) * t107 (-t107 * t30 - t111 * t32) * pkin(4) (t107 * t8 - t111 * t120) * pkin(4), t20, t10, t28, -t19, t29, 0, -t144 * t30 + t22 * t93 - t153, -t140 * t30 + t24 * t93 + t4, -t92 * t19 + t1 + (t24 * t92 - t2) * t106, t118 * t92 + t5 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, t112, 0, -t142, -t138, 0, 0, 0, 0, t79, 0, -t77, 0, -t41, -t43 (-t107 * t77 - t111 * t79) * pkin(4) (t107 * t43 - t111 * t41) * pkin(4), t64, t46, t67, -t64, t70, 0, t106 * t117 - t135, t110 * t117 + t39, t13, t13 * t92 + t41 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, -t108, 0, 0, 0, 0, 0, 0, 0, 0, -t77, -t79, 0 (t107 * t79 - t111 * t77) * pkin(4), 0, 0, 0, 0, 0, 0, -t70, t67, t47, t178 * t79 + t77 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t158, -0.2e1 * t159, 0 (t107 ^ 2 + t111 ^ 2) * pkin(4) ^ 2, t98, t87, 0, t100, 0, 0, -0.2e1 * t93 * t110, 0.2e1 * t93 * t106, 0.2e1 * t178, t133 * t92 ^ 2 + t93 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t30, t61, -t120, -t8, 0, 0, t20, t10, t28, -t19, t29, 0, -pkin(5) * t22 - pkin(11) * t28 - t153, -pkin(5) * t24 - pkin(11) * t29 + t4 (t20 - t19) * pkin(11) + t118, -t5 * pkin(5) + pkin(11) * t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, -t77, 0, -t41, -t43, 0, 0, t64, t46, t67, -t64, t70, 0, t106 * t119 - t135, t110 * t119 + t39, t13, -t41 * pkin(5) + pkin(11) * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, -t79, 0, 0, 0, 0, 0, 0, 0, 0, -t70, t67, t47, t133 * t166 - t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t158, -t159, 0, 0, t98, t87, 0, t100, 0, 0, t165 * t110, -t165 * t106, t146 + t178, -t93 * pkin(5) + pkin(11) * t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t98, t87, 0, t100, 0, 0, 0.2e1 * pkin(5) * t110, -0.2e1 * pkin(5) * t106, 0.2e1 * t146, pkin(11) ^ 2 * t133 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t22, t30, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, 0, -t145, t77, t25, -t26, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, -t141, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, t110, 0, -t144, -t140, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, t110, 0, -t106 * pkin(11), -t110 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t7;
