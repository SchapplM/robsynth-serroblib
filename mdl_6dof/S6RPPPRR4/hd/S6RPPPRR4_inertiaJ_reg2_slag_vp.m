% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPPRR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPPRR4_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:46:23
% EndTime: 2019-05-05 13:46:26
% DurationCPUTime: 0.88s
% Computational Cost: add. (413->87), mult. (585->138), div. (0->0), fcn. (576->6), ass. (0->63)
t33 = sin(pkin(9));
t34 = cos(pkin(9));
t39 = -pkin(1) - pkin(2);
t18 = t34 * qJ(2) + t33 * t39;
t13 = -qJ(4) + t18;
t68 = t13 ^ 2;
t67 = -0.2e1 * t13;
t37 = cos(qJ(6));
t66 = 0.2e1 * t37;
t36 = sin(qJ(5));
t65 = t36 * pkin(5);
t38 = cos(qJ(5));
t64 = t38 * pkin(5);
t63 = t13 * t33;
t31 = t37 ^ 2;
t62 = t31 * t38;
t32 = t38 ^ 2;
t61 = t32 * t34;
t35 = sin(qJ(6));
t60 = t32 * t35;
t59 = t32 * t37;
t58 = t35 * t36;
t57 = t35 * t37;
t56 = t35 * t38;
t16 = t33 * qJ(2) - t34 * t39;
t15 = pkin(3) + t16;
t11 = pkin(7) + t15;
t55 = t36 * t11;
t54 = t36 * t34;
t53 = t37 * t36;
t52 = t37 * t38;
t51 = t38 * t11;
t50 = t38 * t34;
t49 = t38 * t36;
t29 = t35 ^ 2;
t48 = t29 + t31;
t30 = t36 ^ 2;
t20 = t32 + t30;
t47 = -0.2e1 * t49;
t46 = t35 * t52;
t45 = t48 * pkin(8);
t44 = t48 * t36;
t12 = t20 * t34;
t43 = pkin(8) * t36 + t64;
t4 = t38 * pkin(8) + t13 - t65;
t1 = -t35 * t55 + t37 * t4;
t2 = t11 * t53 + t35 * t4;
t42 = -t1 * t35 + t2 * t37;
t7 = t37 * t33 + t35 * t54;
t8 = -t35 * t33 + t34 * t53;
t41 = -t7 * t35 - t8 * t37;
t28 = t34 ^ 2;
t27 = t33 ^ 2;
t26 = t31 * t32;
t25 = t29 * t38;
t24 = t29 * t32;
t22 = t32 * t28;
t19 = t27 + t28;
t10 = t11 ^ 2;
t6 = t32 * t11;
t5 = t32 * t10;
t3 = t30 * t11 + t6;
t9 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2 * pkin(1), 0, 0.2e1 * qJ(2) (pkin(1) ^ 2) + qJ(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t16, 0.2e1 * t18, 0, t16 ^ 2 + t18 ^ 2, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * t15, t67, t15 ^ 2 + t68, t32, t47, 0, t30, 0, 0, t36 * t67, t38 * t67, 0.2e1 * t3, t30 * t10 + t5 + t68, t26, -0.2e1 * t32 * t57, t49 * t66, t24, t35 * t47, t30, -0.2e1 * t1 * t36 + 0.2e1 * t11 * t60, 0.2e1 * t11 * t59 + 0.2e1 * t2 * t36, 0.2e1 * (t1 * t37 + t2 * t35) * t38, t1 ^ 2 + t2 ^ 2 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(1), 0, 0, 0, 0, 0, 0, -t34, t33, 0, -t16 * t34 + t18 * t33, 0, 0, 0, 0, 0, 0, 0, t34, -t33, -t15 * t34 + t63, 0, 0, 0, 0, 0, 0, -t33 * t36, -t38 * t33, -t12, -t11 * t12 + t63, 0, 0, 0, 0, 0, 0, -t34 * t60 - t7 * t36, -t34 * t59 - t8 * t36 (-t35 * t8 + t37 * t7) * t38, t1 * t7 - t11 * t61 - t2 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30 * t28 + t22 + t27, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 ^ 2 + t8 ^ 2 + t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t42 - t55) * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t41 + t54) * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 + t24 + t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, t20, t3, 0, 0, 0, 0, 0, 0, t20 * t35, t20 * t37, 0, t42 * t36 + t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 * t36 - t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t48) * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48 * t30 + t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, 0, t36, 0, t51, -t55, 0, 0, -t46, t25 - t62, -t58, t46, -t53, 0, t43 * t35 + t37 * t51, -t35 * t51 + t43 * t37, t42, pkin(5) * t51 + t42 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t54, 0, 0, 0, 0, 0, 0, 0, 0, -t37 * t50, t35 * t50, t41, -pkin(5) * t50 + t41 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, 0, 0, 0, 0, 0, 0, 0, 0, -t53, t58, t25 + t62, t38 * t45 - t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, -t36, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t56, t44, pkin(8) * t44 + t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t29, 0.2e1 * t57, 0, t31, 0, 0, pkin(5) * t66, -0.2e1 * pkin(5) * t35, 0.2e1 * t45, t48 * pkin(8) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t52, 0, t56, -t36, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, -t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, -t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, t37, 0, -t35 * pkin(8), -t37 * pkin(8), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t9;
