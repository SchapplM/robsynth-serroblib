% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:08
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPPR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPPR1_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:12:53
% EndTime: 2019-05-06 08:12:58
% DurationCPUTime: 1.53s
% Computational Cost: add. (1327->126), mult. (2523->240), div. (0->0), fcn. (2941->8), ass. (0->91)
t71 = sin(pkin(10));
t67 = t71 ^ 2;
t73 = cos(pkin(10));
t68 = t73 ^ 2;
t60 = t67 + t68;
t72 = sin(pkin(9));
t74 = cos(pkin(9));
t76 = sin(qJ(2));
t78 = cos(qJ(2));
t53 = t72 * t78 + t74 * t76;
t112 = -0.2e1 * t53;
t75 = sin(qJ(6));
t77 = cos(qJ(6));
t54 = t77 * t71 - t75 * t73;
t94 = -qJ(3) - pkin(7);
t59 = t94 * t78;
t89 = t94 * t76;
t26 = -t72 * t59 - t74 * t89;
t111 = t26 ^ 2;
t49 = t72 * t76 - t74 * t78;
t110 = t49 ^ 2;
t103 = pkin(4) + pkin(5);
t101 = t74 * pkin(2);
t65 = -pkin(3) - t101;
t81 = t71 * qJ(5) - t65;
t30 = t103 * t73 + t81;
t109 = 0.2e1 * t30;
t108 = -0.2e1 * t49;
t107 = 0.2e1 * t49;
t66 = -t78 * pkin(2) - pkin(1);
t106 = 0.2e1 * t66;
t105 = -0.2e1 * t73;
t104 = 0.2e1 * t78;
t102 = t72 * pkin(2);
t51 = t75 * t71 + t77 * t73;
t15 = t51 * t53;
t100 = t15 * t51;
t62 = qJ(4) + t102;
t99 = t49 * t62;
t98 = t54 * t49;
t35 = t71 * t49;
t36 = t71 * t53;
t97 = t71 * t73;
t38 = t73 * t49;
t39 = t73 * t53;
t19 = t49 * pkin(3) - t53 * qJ(4) + t66;
t28 = -t74 * t59 + t72 * t89;
t10 = t71 * t19 + t73 * t28;
t93 = t60 * t62 ^ 2;
t69 = t76 ^ 2;
t70 = t78 ^ 2;
t92 = t69 + t70;
t91 = t49 * t36;
t47 = t53 ^ 2;
t90 = t47 * t97;
t5 = t49 * qJ(5) + t10;
t23 = t71 * t28;
t9 = t73 * t19 - t23;
t88 = -qJ(5) * t39 + t26;
t6 = -t49 * pkin(4) - t9;
t87 = t5 * t73 + t6 * t71;
t86 = t5 * t71 - t6 * t73;
t85 = t10 * t73 - t9 * t71;
t84 = t10 * t71 + t9 * t73;
t40 = -t73 * pkin(4) - t81;
t83 = t40 * t53 - t99;
t82 = t53 * t65 - t99;
t57 = t71 * t62;
t48 = t54 ^ 2;
t46 = t51 ^ 2;
t42 = (-pkin(8) + t62) * t73;
t41 = -t71 * pkin(8) + t57;
t37 = t68 * t47;
t34 = t67 * t47;
t31 = t71 * t39;
t29 = 0.2e1 * t60 * t62;
t25 = t51 * t49;
t22 = t39 * t107;
t21 = t60 * t53;
t20 = (t67 - t68) * t53;
t18 = t75 * t41 + t77 * t42;
t17 = t77 * t41 - t75 * t42;
t13 = t54 * t53;
t12 = t54 * t13;
t11 = pkin(4) * t36 + t88;
t7 = t103 * t36 + t88;
t4 = pkin(8) * t36 + t5;
t3 = t23 + (-pkin(8) * t53 - t19) * t73 - t103 * t49;
t2 = t75 * t3 + t77 * t4;
t1 = t77 * t3 - t75 * t4;
t8 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, t76 * t104, 0, t70, 0, 0, pkin(1) * t104, -0.2e1 * pkin(1) * t76, 0.2e1 * t92 * pkin(7), t92 * pkin(7) ^ 2 + pkin(1) ^ 2, t47, t53 * t108, 0, t110, 0, 0, t49 * t106, t53 * t106, 0.2e1 * t26 * t53 - 0.2e1 * t28 * t49, t28 ^ 2 + t66 ^ 2 + t111, t37, -0.2e1 * t90, t22, t34, -0.2e1 * t91, t110, 0.2e1 * t26 * t36 + 0.2e1 * t9 * t49, -0.2e1 * t10 * t49 + 0.2e1 * t26 * t39, t84 * t112, t10 ^ 2 + t9 ^ 2 + t111, t37, t22, 0.2e1 * t90, t110, 0.2e1 * t91, t34, 0.2e1 * t11 * t36 - 0.2e1 * t6 * t49, t86 * t112, -0.2e1 * t11 * t39 + 0.2e1 * t5 * t49, t11 ^ 2 + t5 ^ 2 + t6 ^ 2, t15 ^ 2, 0.2e1 * t15 * t13, t15 * t108, t13 ^ 2, -t13 * t107, t110, -0.2e1 * t1 * t49 + 0.2e1 * t7 * t13, -0.2e1 * t7 * t15 + 0.2e1 * t2 * t49, -0.2e1 * t1 * t15 + 0.2e1 * t2 * t13, t1 ^ 2 + t2 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t78, 0, -t76 * pkin(7), -t78 * pkin(7), 0, 0, 0, 0, t53, 0, -t49, 0, -t26, -t28 (-t49 * t72 - t53 * t74) * pkin(2) (-t26 * t74 + t28 * t72) * pkin(2), t31, -t20, t35, -t31, t38, 0, -t26 * t73 + t82 * t71, t26 * t71 + t82 * t73, t85, t26 * t65 + t85 * t62, t31, t35, t20, 0, -t38, -t31, -t11 * t73 + t83 * t71, t87, -t11 * t71 - t83 * t73, t11 * t40 + t87 * t62, t15 * t54, t12 - t100, -t98, -t13 * t51, t25, 0, -t30 * t13 - t17 * t49 - t7 * t51, t30 * t15 + t18 * t49 - t7 * t54, -t1 * t54 + t18 * t13 - t17 * t15 - t2 * t51, t1 * t17 + t2 * t18 - t7 * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t101, -0.2e1 * t102, 0 (t72 ^ 2 + t74 ^ 2) * pkin(2) ^ 2, t67, 0.2e1 * t97, 0, t68, 0, 0, t65 * t105, 0.2e1 * t65 * t71, t29, t65 ^ 2 + t93, t67, 0, -0.2e1 * t97, 0, 0, t68, t40 * t105, t29, -0.2e1 * t40 * t71, t40 ^ 2 + t93, t48, -0.2e1 * t54 * t51, 0, t46, 0, 0, t51 * t109, t54 * t109, -0.2e1 * t17 * t54 - 0.2e1 * t18 * t51, t17 ^ 2 + t18 ^ 2 + t30 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, t53, 0, t66, 0, 0, 0, 0, 0, 0, t38, -t35, -t21, t84, 0, 0, 0, 0, 0, 0, t38, -t21, t35, t86, 0, 0, 0, 0, 0, 0, t25, t98, t12 + t100, -t1 * t51 + t2 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17 * t51 + t18 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48 + t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t39, 0, t26, 0, 0, 0, 0, 0, 0, t36, 0, -t39, t11, 0, 0, 0, 0, 0, 0, t13, -t15, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, t71, 0, t65, 0, 0, 0, 0, 0, 0, -t73, 0, -t71, t40, 0, 0, 0, 0, 0, 0, -t51, -t54, 0, -t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, t39, 0, t6, 0, 0, 0, 0, 0, 0, -t77 * t49, t75 * t49, t75 * t13 - t77 * t15, t1 * t77 + t2 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t57, 0, 0, 0, 0, 0, 0, 0, 0, -t75 * t51 - t77 * t54, t17 * t77 + t18 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51 * t77 + t54 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75 ^ 2 + t77 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, t13, -t49, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t51, 0, t17, -t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, -t54, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t75, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t8;
