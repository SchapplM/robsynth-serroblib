% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRPRR3_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:50:19
% EndTime: 2019-05-05 04:50:26
% DurationCPUTime: 2.16s
% Computational Cost: add. (2320->204), mult. (6106->399), div. (0->0), fcn. (7211->14), ass. (0->125)
t73 = cos(pkin(7));
t82 = cos(qJ(2));
t113 = t73 * t82;
t70 = sin(pkin(7));
t81 = cos(qJ(3));
t115 = t70 * t81;
t71 = sin(pkin(6));
t74 = cos(pkin(6));
t77 = sin(qJ(3));
t78 = sin(qJ(2));
t27 = t74 * t115 + (t113 * t81 - t77 * t78) * t71;
t116 = t70 * t77;
t28 = t74 * t116 + (t113 * t77 + t78 * t81) * t71;
t69 = sin(pkin(13));
t72 = cos(pkin(13));
t15 = t27 * t69 + t28 * t72;
t114 = t71 * t82;
t47 = -t114 * t70 + t73 * t74;
t76 = sin(qJ(5));
t80 = cos(qJ(5));
t10 = t15 * t76 - t47 * t80;
t142 = t10 ^ 2;
t13 = -t27 * t72 + t28 * t69;
t141 = t13 ^ 2;
t45 = (t69 * t81 + t72 * t77) * t70;
t33 = t45 * t76 - t73 * t80;
t140 = t33 ^ 2;
t43 = -t115 * t72 + t116 * t69;
t139 = t43 ^ 2;
t138 = -0.2e1 * t33;
t137 = -0.2e1 * t43;
t136 = 0.2e1 * t73;
t135 = 0.2e1 * t76;
t134 = pkin(2) * t77;
t79 = cos(qJ(6));
t133 = pkin(5) * t79;
t101 = pkin(9) + qJ(4);
t128 = t73 * pkin(3);
t54 = t73 * t81 * pkin(2);
t36 = -t101 * t116 + t128 + t54;
t95 = t73 * t134;
t39 = t101 * t115 + t95;
t20 = t36 * t69 + t39 * t72;
t17 = pkin(10) * t73 + t20;
t51 = (-pkin(3) * t81 - pkin(2)) * t70;
t24 = t43 * pkin(4) - t45 * pkin(10) + t51;
t8 = -t17 * t76 + t24 * t80;
t5 = -pkin(5) * t43 - t8;
t75 = sin(qJ(6));
t132 = t5 * t75;
t131 = t5 * t79;
t130 = t69 * pkin(3);
t129 = t72 * pkin(3);
t127 = t80 * pkin(5);
t126 = t10 * t80;
t35 = t45 * t80 + t73 * t76;
t21 = t35 * t75 - t43 * t79;
t125 = t21 * t79;
t23 = t35 * t79 + t43 * t75;
t124 = t23 * t75;
t123 = t23 * t80;
t122 = t33 * t80;
t121 = t35 * t76;
t120 = t35 * t80;
t62 = t70 ^ 2;
t119 = t62 * t81;
t65 = t75 ^ 2;
t118 = t65 * t76;
t57 = pkin(10) + t130;
t66 = t76 ^ 2;
t117 = t66 * t57;
t112 = t75 * t33;
t111 = t75 * t76;
t110 = t75 * t79;
t109 = t75 * t80;
t26 = t76 * t33;
t108 = t76 * t43;
t107 = t76 * t57;
t106 = t79 * t33;
t105 = t79 * t76;
t104 = t79 * t80;
t103 = t80 * t21;
t102 = t80 * t57;
t100 = -t36 * t72 + t39 * t69;
t67 = t79 ^ 2;
t99 = t65 + t67;
t68 = t80 ^ 2;
t98 = t66 + t68;
t97 = t70 * t136;
t96 = t80 * t135;
t94 = t23 * t111;
t93 = t75 * t26;
t92 = t33 * t105;
t91 = t75 * t105;
t58 = -pkin(4) - t129;
t90 = t99 * pkin(11);
t16 = -pkin(4) * t73 + t100;
t9 = t17 * t80 + t24 * t76;
t6 = pkin(11) * t43 + t9;
t7 = pkin(5) * t33 - pkin(11) * t35 + t16;
t1 = -t6 * t75 + t7 * t79;
t2 = t6 * t79 + t7 * t75;
t89 = -t1 * t75 + t2 * t79;
t12 = t15 * t80 + t47 * t76;
t3 = -t12 * t75 + t13 * t79;
t4 = t12 * t79 + t13 * t75;
t88 = -t3 * t75 + t4 * t79;
t87 = -t8 * t76 + t9 * t80;
t86 = t10 * t76 + t12 * t80;
t50 = -pkin(11) * t76 - t127 + t58;
t31 = -t102 * t75 + t50 * t79;
t32 = t102 * t79 + t50 * t75;
t85 = -t31 * t75 + t32 * t79;
t64 = t73 ^ 2;
t61 = t67 * t76;
t60 = t67 * t66;
t59 = t65 * t66;
t55 = t57 ^ 2;
t52 = t66 * t55;
t49 = pkin(9) * t115 + t95;
t48 = -pkin(9) * t116 + t54;
t46 = t47 ^ 2;
t41 = t80 * t43;
t18 = t21 * t105;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74 ^ 2 + (t78 ^ 2 + t82 ^ 2) * t71 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 ^ 2 + t28 ^ 2 + t46, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15 ^ 2 + t141 + t46, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 ^ 2 + t141 + t142, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, -t71 * t78, 0, 0, 0, 0, 0, 0, 0, 0, -t115 * t47 + t27 * t73, t116 * t47 - t28 * t73 (-t27 * t77 + t28 * t81) * t70, -pkin(2) * t47 * t70 + t27 * t48 + t28 * t49, 0, 0, 0, 0, 0, 0, -t13 * t73 + t43 * t47, -t15 * t73 + t45 * t47, t13 * t45 - t15 * t43, t100 * t13 + t15 * t20 + t47 * t51, 0, 0, 0, 0, 0, 0, -t10 * t43 + t13 * t33, -t12 * t43 + t13 * t35, t10 * t35 - t12 * t33, -t10 * t8 + t12 * t9 + t13 * t16, 0, 0, 0, 0, 0, 0, t10 * t21 + t3 * t33, t10 * t23 - t33 * t4, -t21 * t4 - t23 * t3, t1 * t3 + t10 * t5 + t2 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t62 * t77 ^ 2, 0.2e1 * t77 * t119, t77 * t97, t62 * t81 ^ 2, t81 * t97, t64, 0.2e1 * pkin(2) * t119 + 0.2e1 * t48 * t73, -0.2e1 * t134 * t62 - 0.2e1 * t49 * t73, 0.2e1 * (-t48 * t77 + t49 * t81) * t70, pkin(2) ^ 2 * t62 + t48 ^ 2 + t49 ^ 2, t45 ^ 2, t45 * t137, t45 * t136, t139, t73 * t137, t64, -0.2e1 * t100 * t73 + 0.2e1 * t43 * t51, -0.2e1 * t20 * t73 + 0.2e1 * t45 * t51, 0.2e1 * t100 * t45 - 0.2e1 * t20 * t43, t100 ^ 2 + t20 ^ 2 + t51 ^ 2, t35 ^ 2, t35 * t138, 0.2e1 * t35 * t43, t140, t33 * t137, t139, 0.2e1 * t16 * t33 + 0.2e1 * t43 * t8, 0.2e1 * t16 * t35 - 0.2e1 * t43 * t9, -0.2e1 * t33 * t9 - 0.2e1 * t35 * t8, t16 ^ 2 + t8 ^ 2 + t9 ^ 2, t23 ^ 2, -0.2e1 * t23 * t21, 0.2e1 * t23 * t33, t21 ^ 2, t21 * t138, t140, 0.2e1 * t1 * t33 + 0.2e1 * t21 * t5, -0.2e1 * t2 * t33 + 0.2e1 * t23 * t5, -0.2e1 * t1 * t23 - 0.2e1 * t2 * t21, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t28, 0, 0, 0, 0, 0, 0, 0, 0, -t13, -t15, 0 (-t13 * t72 + t15 * t69) * pkin(3), 0, 0, 0, 0, 0, 0, -t13 * t80, t13 * t76, t86, t13 * t58 + t57 * t86, 0, 0, 0, 0, 0, 0, t10 * t111 - t3 * t80, t10 * t105 + t4 * t80 (-t3 * t79 - t4 * t75) * t76, t10 * t107 + t3 * t31 + t32 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, 0, t115, t73, t48, -t49, 0, 0, 0, 0, t45, 0, -t43, t73, t128 * t72 - t100, -t128 * t69 - t20 (-t43 * t69 - t45 * t72) * pkin(3) (-t100 * t72 + t20 * t69) * pkin(3), t121, -t26 + t120, t108, -t122, t41, 0, -t107 * t43 - t16 * t80 + t33 * t58, -t102 * t43 + t16 * t76 + t35 * t58 (t121 - t122) * t57 + t87, t16 * t58 + t57 * t87, t23 * t105, -t18 - t94, t92 - t123, t21 * t111, -t93 + t103, -t122, -t1 * t80 + t31 * t33 + (t21 * t57 + t132) * t76, t2 * t80 - t32 * t33 + (t23 * t57 + t131) * t76, -t32 * t21 - t31 * t23 + (-t1 * t79 - t2 * t75) * t76, t1 * t31 + t107 * t5 + t2 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t129, -0.2e1 * t130, 0 (t69 ^ 2 + t72 ^ 2) * pkin(3) ^ 2, t66, t96, 0, t68, 0, 0, -0.2e1 * t58 * t80, t58 * t135, 0.2e1 * t98 * t57, t55 * t68 + t58 ^ 2 + t52, t60, -0.2e1 * t66 * t110, -0.2e1 * t76 * t104, t59, t75 * t96, t68, 0.2e1 * t117 * t75 - 0.2e1 * t31 * t80, 0.2e1 * t117 * t79 + 0.2e1 * t32 * t80 (-t31 * t79 - t32 * t75) * t135, t31 ^ 2 + t32 ^ 2 + t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 * t76 - t126, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 * t88 - t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, t45, 0, t51, 0, 0, 0, 0, 0, 0, t41, -t108, -t26 - t120, t76 * t9 + t8 * t80, 0, 0, 0, 0, 0, 0, -t93 - t103, -t92 - t123, -t18 + t94, -t5 * t80 + t76 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t85 - t102) * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60 + t59 + t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10, -t12, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t79, t10 * t75, t88, -t10 * pkin(5) + pkin(11) * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t33, t43, t8, -t9, 0, 0, t124, -t21 * t75 + t23 * t79, t112, -t125, t106, 0, -pkin(5) * t21 - pkin(11) * t112 - t131, -pkin(5) * t23 - pkin(11) * t106 + t132 (t124 - t125) * pkin(11) + t89, -t5 * pkin(5) + pkin(11) * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t80, 0, -t107, -t102, 0, 0, t91, t61 - t118, -t109, -t91, -t104, 0, -t57 * t105 + (-pkin(5) * t76 + pkin(11) * t80) * t75, pkin(11) * t104 + (t57 * t75 - t133) * t76, t85, -pkin(5) * t107 + pkin(11) * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -t76, 0, 0, 0, 0, 0, 0, 0, 0, t104, -t109, t61 + t118, t76 * t90 + t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, 0.2e1 * t110, 0, t67, 0, 0, 0.2e1 * t133, -0.2e1 * pkin(5) * t75, 0.2e1 * t90, pkin(11) ^ 2 * t99 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t21, t33, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, 0, -t111, -t80, t31, -t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, -t105, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, t79, 0, -t75 * pkin(11), -t79 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
