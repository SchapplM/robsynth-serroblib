% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP12_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP12_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP12_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:22:04
% EndTime: 2019-05-06 02:22:14
% DurationCPUTime: 3.28s
% Computational Cost: add. (4906->252), mult. (13237->464), div. (0->0), fcn. (15279->12), ass. (0->153)
t103 = sin(qJ(5));
t93 = t103 ^ 2;
t106 = cos(qJ(5));
t95 = t106 ^ 2;
t185 = t93 + t95;
t108 = cos(qJ(3));
t98 = sin(pkin(7));
t145 = t98 * t108;
t101 = cos(pkin(7));
t104 = sin(qJ(4));
t107 = cos(qJ(4));
t105 = sin(qJ(3));
t146 = t98 * t105;
t66 = t101 * t104 + t107 * t146;
t48 = t103 * t66 + t106 * t145;
t50 = -t103 * t145 + t106 * t66;
t126 = t103 * t48 + t50 * t106;
t102 = cos(pkin(6));
t100 = cos(pkin(12));
t99 = sin(pkin(6));
t144 = t99 * t100;
t134 = t101 * t144;
t113 = t102 * t98 + t134;
t97 = sin(pkin(12));
t160 = t97 * t99;
t45 = t113 * t105 + t108 * t160;
t60 = t101 * t102 - t98 * t144;
t36 = t104 * t60 + t107 * t45;
t43 = -t102 * t145 + t105 * t160 - t108 * t134;
t28 = t103 * t36 - t43 * t106;
t151 = t28 * t106;
t30 = t103 * t43 + t106 * t36;
t26 = t30 * t103;
t184 = (t26 + t151) * t104;
t174 = pkin(1) * t102;
t80 = t100 * t174;
t46 = pkin(2) * t102 + t80 + (-pkin(9) * t101 - qJ(2)) * t160;
t54 = (-pkin(9) * t97 * t98 - pkin(2) * t100 - pkin(1)) * t99;
t121 = t101 * t46 + t54 * t98;
t63 = qJ(2) * t144 + t97 * t174;
t40 = t113 * pkin(9) + t63;
t22 = -t105 * t40 + t121 * t108;
t183 = t28 ^ 2;
t34 = t104 * t45 - t60 * t107;
t33 = t34 ^ 2;
t182 = t43 ^ 2;
t64 = -t107 * t101 + t104 * t146;
t61 = t64 ^ 2;
t181 = -0.2e1 * t43;
t120 = -pkin(5) * t106 - qJ(6) * t103;
t72 = -pkin(4) + t120;
t180 = -0.2e1 * t72;
t179 = 0.2e1 * t99;
t178 = -0.2e1 * t104;
t177 = 0.2e1 * t104;
t176 = pkin(5) * t34;
t175 = pkin(11) * t30;
t19 = -pkin(3) * t60 - t22;
t13 = pkin(4) * t34 - pkin(11) * t36 + t19;
t31 = t101 * t54 - t46 * t98;
t16 = pkin(3) * t43 - pkin(10) * t45 + t31;
t23 = t121 * t105 + t108 * t40;
t20 = pkin(10) * t60 + t23;
t10 = t104 * t16 + t107 * t20;
t8 = pkin(11) * t43 + t10;
t4 = t103 * t13 + t106 * t8;
t173 = pkin(4) * t103;
t172 = pkin(4) * t106;
t171 = pkin(10) * t103;
t170 = pkin(10) * t106;
t158 = qJ(6) * t34;
t1 = t158 + t4;
t169 = t1 * t106;
t168 = t103 * pkin(11);
t9 = -t104 * t20 + t107 * t16;
t7 = -pkin(4) * t43 - t9;
t167 = t103 * t7;
t166 = t104 * pkin(10);
t165 = t106 * pkin(11);
t164 = t106 * t4;
t163 = t106 * t7;
t162 = t30 * t28;
t161 = t34 * t28;
t138 = t106 * t107;
t73 = -pkin(4) * t107 - pkin(11) * t104 - pkin(3);
t57 = pkin(10) * t138 + t103 * t73;
t159 = t185 * pkin(11) ^ 2;
t92 = t99 ^ 2;
t157 = t100 * t92;
t32 = t103 * t34;
t155 = t104 * t43;
t154 = t104 * t64;
t153 = t106 * t34;
t152 = t107 * t43;
t150 = t34 * t107;
t149 = t36 * t104;
t148 = t64 * t103;
t147 = t64 * t106;
t143 = qJ(6) * t107;
t142 = t103 * t104;
t141 = t103 * t106;
t140 = t103 * t107;
t139 = t104 * t107;
t87 = t106 * t104;
t137 = t102 * t179;
t136 = pkin(11) * t32;
t135 = pkin(11) * t153;
t94 = t104 ^ 2;
t133 = t94 * t141;
t132 = t28 * t142;
t131 = t103 * t139;
t130 = t103 * t8 - t106 * t13;
t129 = -t50 * t28 + t30 * t48;
t128 = t64 * t28 - t34 * t48;
t127 = t48 ^ 2 + t50 ^ 2 + t61;
t125 = t107 * t48 + t64 * t142;
t124 = t126 * pkin(11);
t123 = t30 * t64 - t34 * t50;
t122 = t10 * t107 - t104 * t9;
t119 = -pkin(5) * t103 + qJ(6) * t106;
t117 = t103 * t28 - t106 * t30;
t52 = -t143 + t57;
t68 = t106 * t73;
t53 = -t68 + (pkin(5) + t171) * t107;
t116 = t103 * t53 + t106 * t52;
t56 = -pkin(10) * t140 + t68;
t115 = -t103 * t56 + t106 * t57;
t114 = t107 * t66 + t154;
t112 = -t107 * t28 + t34 * t142;
t111 = (-t103 * t50 + t106 * t48) * t104;
t110 = pkin(10) ^ 2;
t96 = t107 ^ 2;
t91 = t98 ^ 2;
t89 = t94 * t110;
t86 = t95 * t94;
t85 = t93 * t94;
t83 = t91 * t108 ^ 2;
t81 = pkin(11) * t140;
t77 = t103 * t87;
t75 = t138 * t178;
t71 = 0.2e1 * t185 * pkin(11);
t69 = (t93 - t95) * t104;
t62 = -qJ(2) * t160 + t80;
t59 = (pkin(10) - t119) * t104;
t37 = t107 * t50 + t64 * t87;
t27 = t30 ^ 2;
t25 = pkin(11) * t151;
t24 = t30 * t87;
t15 = 0.2e1 * t30 * t34;
t14 = -t107 * t30 + t34 * t87;
t5 = pkin(5) * t28 - qJ(6) * t30 + t7;
t2 = t130 - t176;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t92 * t97 ^ 2, 0.2e1 * t97 * t157, t97 * t137, t92 * t100 ^ 2, t100 * t137, t102 ^ 2, 0.2e1 * pkin(1) * t157 + 0.2e1 * t102 * t62, -0.2e1 * pkin(1) * t92 * t97 - 0.2e1 * t102 * t63 (t100 * t63 - t62 * t97) * t179, pkin(1) ^ 2 * t92 + t62 ^ 2 + t63 ^ 2, t45 ^ 2, t45 * t181, 0.2e1 * t45 * t60, t182, t60 * t181, t60 ^ 2, 0.2e1 * t22 * t60 + 0.2e1 * t31 * t43, -0.2e1 * t23 * t60 + 0.2e1 * t31 * t45, -0.2e1 * t22 * t45 - 0.2e1 * t23 * t43, t22 ^ 2 + t23 ^ 2 + t31 ^ 2, t36 ^ 2, -0.2e1 * t36 * t34, 0.2e1 * t36 * t43, t33, t34 * t181, t182, 0.2e1 * t19 * t34 + 0.2e1 * t43 * t9, -0.2e1 * t10 * t43 + 0.2e1 * t19 * t36, -0.2e1 * t10 * t34 - 0.2e1 * t36 * t9, t10 ^ 2 + t19 ^ 2 + t9 ^ 2, t27, -0.2e1 * t162, t15, t183, -0.2e1 * t161, t33, -0.2e1 * t130 * t34 + 0.2e1 * t28 * t7, 0.2e1 * t30 * t7 - 0.2e1 * t34 * t4, 0.2e1 * t130 * t30 - 0.2e1 * t28 * t4, t130 ^ 2 + t4 ^ 2 + t7 ^ 2, t27, t15, 0.2e1 * t162, t33, 0.2e1 * t161, t183, -0.2e1 * t2 * t34 + 0.2e1 * t28 * t5, -0.2e1 * t1 * t28 + 0.2e1 * t2 * t30, 0.2e1 * t1 * t34 - 0.2e1 * t30 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144, t160, 0, -t99 * pkin(1), 0, 0, 0, 0, 0, 0, t101 * t43 + t60 * t145, t101 * t45 - t60 * t146 (-t105 * t43 - t108 * t45) * t98, t101 * t31 + (t105 * t23 + t108 * t22) * t98, 0, 0, 0, 0, 0, 0, -t34 * t145 - t43 * t64, -t36 * t145 - t43 * t66, -t34 * t66 + t36 * t64, t10 * t66 - t19 * t145 - t64 * t9, 0, 0, 0, 0, 0, 0, t128, t123, t129, t130 * t48 + t4 * t50 + t64 * t7, 0, 0, 0, 0, 0, 0, t128, t129, -t123, t1 * t50 + t2 * t48 + t5 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 ^ 2 * t91 + t101 ^ 2 + t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 ^ 2 + t61 + t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, -t43, t60, t22, -t23, 0, 0, t149, -t104 * t34 + t107 * t36, t155, -t150, t152, 0, -pkin(3) * t34 - pkin(10) * t155 - t107 * t19, -pkin(3) * t36 - pkin(10) * t152 + t104 * t19 (t149 - t150) * pkin(10) + t122, -t19 * pkin(3) + t122 * pkin(10), t24, -t184, t14, t132, -t112, -t150, t107 * t130 + t34 * t56 + (pkin(10) * t28 + t167) * t104, t107 * t4 - t34 * t57 + (pkin(10) * t30 + t163) * t104, -t28 * t57 - t30 * t56 + (-t103 * t4 + t106 * t130) * t104, -t130 * t56 + t7 * t166 + t4 * t57, t24, t14, t184, -t150, t112, t132, t107 * t2 + t142 * t5 + t28 * t59 - t34 * t53, -t28 * t52 + t30 * t53 + (-t1 * t103 + t106 * t2) * t104, -t1 * t107 - t30 * t59 + t34 * t52 - t5 * t87, t1 * t52 + t2 * t53 + t5 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t145, -t146, 0, 0, 0, 0, 0, 0, 0, 0, t107 * t145, -t104 * t145, t114, pkin(3) * t145 + t114 * pkin(10), 0, 0, 0, 0, 0, 0, t125, t37, t111, pkin(10) * t154 - t48 * t56 + t50 * t57, 0, 0, 0, 0, 0, 0, t125, t111, -t37, t48 * t53 + t50 * t52 + t59 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t94, 0.2e1 * t139, 0, t96, 0, 0, 0.2e1 * pkin(3) * t107, pkin(3) * t178, 0.2e1 * (t94 + t96) * pkin(10), pkin(3) ^ 2 + t110 * t96 + t89, t86, -0.2e1 * t133, t75, t85, 0.2e1 * t131, t96, -0.2e1 * t107 * t56 + 0.2e1 * t94 * t171, 0.2e1 * t107 * t57 + 0.2e1 * t94 * t170 (-t103 * t57 - t106 * t56) * t177, t56 ^ 2 + t57 ^ 2 + t89, t86, t75, 0.2e1 * t133, t96, -0.2e1 * t131, t85, 0.2e1 * t107 * t53 + 0.2e1 * t142 * t59 (-t103 * t52 + t106 * t53) * t177, -0.2e1 * t107 * t52 - 0.2e1 * t59 * t87, t52 ^ 2 + t53 ^ 2 + t59 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, t43, t9, -t10, 0, 0, t26, -t117, t32, -t151, t153, 0, -pkin(4) * t28 - t136 - t163, -pkin(4) * t30 - t135 + t167, t164 - t25 + (t130 + t175) * t103, -t7 * pkin(4) + (t103 * t130 + t164) * pkin(11), t26, t32, t117, 0, -t153, -t151, -t106 * t5 + t28 * t72 - t136, t169 - t25 + (t2 + t175) * t103, -t103 * t5 - t30 * t72 + t135, t5 * t72 + (t103 * t2 + t169) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, -t66, 0, 0, 0, 0, 0, 0, 0, 0, -t147, t148, t126, -pkin(4) * t64 + t124, 0, 0, 0, 0, 0, 0, -t147, t126, -t148, t64 * t72 + t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, t107, 0, -t166, -t107 * pkin(10), 0, 0, t77, -t69, -t140, -t77, -t138, 0, t81 + (-t170 - t173) * t104, pkin(11) * t138 + (t171 - t172) * t104, t115, -pkin(4) * t166 + pkin(11) * t115, t77, -t140, t69, 0, t138, -t77, -t106 * t59 + t142 * t72 + t81, t116, -t59 * t103 + (-pkin(11) * t107 - t104 * t72) * t106, pkin(11) * t116 + t59 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t93, 0.2e1 * t141, 0, t95, 0, 0, 0.2e1 * t172, -0.2e1 * t173, t71, pkin(4) ^ 2 + t159, t93, 0, -0.2e1 * t141, 0, 0, t95, t106 * t180, t71, t103 * t180, t72 ^ 2 + t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, -t28, t34, -t130, -t4, 0, 0, 0, t30, 0, t34, t28, 0, -t130 + 0.2e1 * t176, -pkin(5) * t30 - qJ(6) * t28, 0.2e1 * t158 + t4, -pkin(5) * t2 + qJ(6) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, -t50, 0, 0, 0, 0, 0, 0, 0, 0, -t48, 0, t50, -pkin(5) * t48 + qJ(6) * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, -t142, -t107, t56, -t57, 0, 0, 0, t87, 0, -t107, t142, 0, t68 + (-0.2e1 * pkin(5) - t171) * t107, t120 * t104, -0.2e1 * t143 + t57, -pkin(5) * t53 + qJ(6) * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, t106, 0, -t168, -t165, 0, 0, 0, t103, 0, 0, -t106, 0, -t168, t119, t165, t119 * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t30, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, t87, 0, t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
