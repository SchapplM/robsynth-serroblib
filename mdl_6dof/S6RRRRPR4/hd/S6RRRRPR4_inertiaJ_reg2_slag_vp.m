% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 22:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR4_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 20:11:16
% EndTime: 2019-05-07 20:11:28
% DurationCPUTime: 2.93s
% Computational Cost: add. (3658->206), mult. (6987->382), div. (0->0), fcn. (8300->10), ass. (0->140)
t131 = sin(qJ(3));
t163 = t131 * pkin(2);
t116 = pkin(9) + t163;
t130 = sin(qJ(4));
t123 = t130 ^ 2;
t133 = cos(qJ(4));
t125 = t133 ^ 2;
t145 = t123 + t125;
t147 = t145 * t116;
t135 = cos(qJ(2));
t171 = -pkin(8) - pkin(7);
t108 = t171 * t135;
t134 = cos(qJ(3));
t132 = sin(qJ(2));
t142 = t171 * t132;
t76 = -t131 * t108 - t134 * t142;
t180 = t76 ^ 2;
t118 = -t133 * pkin(4) - pkin(3);
t161 = t134 * pkin(2);
t105 = t118 - t161;
t127 = sin(pkin(11));
t128 = cos(pkin(11));
t95 = t127 * t130 - t128 * t133;
t169 = t95 * pkin(5);
t79 = t105 + t169;
t179 = 0.2e1 * t79;
t80 = t118 + t169;
t178 = 0.2e1 * t80;
t101 = t131 * t132 - t134 * t135;
t98 = t101 ^ 2;
t177 = -0.2e1 * t101;
t176 = 0.2e1 * t101;
t175 = 0.2e1 * t105;
t174 = 0.2e1 * t118;
t119 = -t135 * pkin(2) - pkin(1);
t173 = 0.2e1 * t119;
t172 = 0.2e1 * t135;
t129 = sin(qJ(6));
t166 = cos(qJ(6));
t103 = t131 * t135 + t134 * t132;
t150 = t133 * t103;
t65 = t101 * pkin(3) - t103 * pkin(9) + t119;
t78 = -t134 * t108 + t131 * t142;
t38 = -t130 * t78 + t133 * t65;
t28 = t101 * pkin(4) - qJ(5) * t150 + t38;
t154 = t133 * t78;
t35 = t154 + (-qJ(5) * t103 + t65) * t130;
t11 = -t127 * t35 + t128 * t28;
t152 = t130 * t103;
t58 = -t127 * t152 + t128 * t150;
t6 = t101 * pkin(5) - t58 * pkin(10) + t11;
t12 = t127 * t28 + t128 * t35;
t97 = t127 * t133 + t128 * t130;
t56 = t97 * t103;
t8 = -t56 * pkin(10) + t12;
t3 = -t129 * t8 + t166 * t6;
t4 = t129 * t6 + t166 * t8;
t66 = t129 * t97 + t166 * t95;
t68 = -t129 * t95 + t166 * t97;
t170 = -t3 * t68 - t4 * t66;
t168 = t97 * pkin(10);
t167 = -t11 * t97 - t12 * t95;
t165 = t127 * pkin(4);
t164 = t128 * pkin(4);
t162 = t133 * pkin(9);
t117 = -pkin(3) - t161;
t160 = pkin(3) - t117;
t91 = (-qJ(5) - t116) * t130;
t120 = t133 * qJ(5);
t149 = t133 * t116;
t92 = t120 + t149;
t60 = -t127 * t92 + t128 * t91;
t44 = t60 - t168;
t61 = t127 * t91 + t128 * t92;
t90 = t95 * pkin(10);
t45 = t61 - t90;
t22 = -t129 * t45 + t166 * t44;
t23 = t129 * t44 + t166 * t45;
t159 = -t22 * t68 - t23 * t66;
t106 = (-qJ(5) - pkin(9)) * t130;
t107 = t120 + t162;
t72 = t128 * t106 - t127 * t107;
t51 = t72 - t168;
t73 = t127 * t106 + t128 * t107;
t52 = t73 - t90;
t29 = -t129 * t52 + t166 * t51;
t30 = t129 * t51 + t166 * t52;
t158 = -t29 * t68 - t30 * t66;
t157 = -t60 * t97 - t61 * t95;
t156 = -t72 * t97 - t73 * t95;
t155 = t79 + t80;
t153 = t76 * t133;
t151 = t130 * t133;
t148 = t105 + t118;
t146 = t145 * pkin(9);
t124 = t132 ^ 2;
t126 = t135 ^ 2;
t144 = t124 + t126;
t143 = t103 * t177;
t50 = pkin(4) * t152 + t76;
t141 = -pkin(3) * t103 - pkin(9) * t101;
t39 = t130 * t65 + t154;
t15 = -t38 * t130 + t39 * t133;
t140 = -t101 * t116 + t103 * t117;
t114 = pkin(5) + t164;
t111 = 0.2e1 * t151;
t99 = t103 ^ 2;
t94 = t97 ^ 2;
t93 = t95 ^ 2;
t89 = t133 * t101;
t88 = t130 * t101;
t85 = t129 * t114 + t166 * t165;
t84 = t166 * t114 - t129 * t165;
t82 = t130 * t150;
t75 = t97 * t101;
t74 = t95 * t101;
t71 = -0.2e1 * t97 * t95;
t70 = t76 * t130;
t69 = (-t123 + t125) * t103;
t64 = t68 ^ 2;
t63 = t66 ^ 2;
t62 = (-t127 * t95 - t128 * t97) * pkin(4);
t49 = t68 * t101;
t48 = t66 * t101;
t43 = t58 * t97;
t42 = t56 * t95;
t41 = t50 * t97;
t40 = t50 * t95;
t37 = -0.2e1 * t68 * t66;
t36 = t56 * pkin(5) + t50;
t34 = -t129 * t56 + t166 * t58;
t32 = t129 * t58 + t166 * t56;
t25 = -t85 * t66 - t84 * t68;
t24 = -t97 * t56 - t58 * t95;
t21 = t36 * t68;
t20 = t36 * t66;
t19 = t34 * t68;
t18 = t32 * t66;
t7 = -t68 * t32 - t34 * t66;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t124, t132 * t172, 0, t126, 0, 0, pkin(1) * t172, -0.2e1 * pkin(1) * t132, 0.2e1 * t144 * pkin(7), t144 * pkin(7) ^ 2 + pkin(1) ^ 2, t99, t143, 0, t98, 0, 0, t101 * t173, t103 * t173, -0.2e1 * t78 * t101 + 0.2e1 * t76 * t103, t119 ^ 2 + t78 ^ 2 + t180, t125 * t99, -0.2e1 * t99 * t151, t150 * t176, t123 * t99, t130 * t143, t98, 0.2e1 * t38 * t101 + 0.2e1 * t76 * t152, -0.2e1 * t39 * t101 + 0.2e1 * t76 * t150, 0.2e1 * (-t130 * t39 - t133 * t38) * t103, t38 ^ 2 + t39 ^ 2 + t180, t58 ^ 2, -0.2e1 * t58 * t56, t58 * t176, t56 ^ 2, -t56 * t176, t98, 0.2e1 * t11 * t101 + 0.2e1 * t50 * t56, -0.2e1 * t12 * t101 + 0.2e1 * t50 * t58, -0.2e1 * t11 * t58 - 0.2e1 * t12 * t56, t11 ^ 2 + t12 ^ 2 + t50 ^ 2, t34 ^ 2, -0.2e1 * t34 * t32, t34 * t176, t32 ^ 2, t32 * t177, t98, 0.2e1 * t3 * t101 + 0.2e1 * t36 * t32, -0.2e1 * t4 * t101 + 0.2e1 * t36 * t34, -0.2e1 * t3 * t34 - 0.2e1 * t4 * t32, t3 ^ 2 + t36 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, 0, t135, 0, -t132 * pkin(7), -t135 * pkin(7), 0, 0, 0, 0, t103, 0, -t101, 0, -t76, -t78 (-t101 * t131 - t103 * t134) * pkin(2) (t131 * t78 - t134 * t76) * pkin(2), t82, t69, t88, -t82, t89, 0, t140 * t130 - t153, t140 * t133 + t70, t15, t15 * t116 + t76 * t117, t43, t24, t75, t42, -t74, 0, t60 * t101 + t105 * t56 + t40, -t61 * t101 + t105 * t58 + t41, -t61 * t56 - t60 * t58 + t167, t50 * t105 + t11 * t60 + t12 * t61, t19, t7, t49, t18, -t48, 0, t22 * t101 + t79 * t32 + t20, -t23 * t101 + t79 * t34 + t21, -t22 * t34 - t23 * t32 + t170, t3 * t22 + t4 * t23 + t36 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t161, -0.2e1 * t163, 0 (t131 ^ 2 + t134 ^ 2) * pkin(2) ^ 2, t123, t111, 0, t125, 0, 0, -0.2e1 * t117 * t133, 0.2e1 * t117 * t130, 0.2e1 * t147, t145 * t116 ^ 2 + t117 ^ 2, t94, t71, 0, t93, 0, 0, t95 * t175, t97 * t175, 0.2e1 * t157, t105 ^ 2 + t60 ^ 2 + t61 ^ 2, t64, t37, 0, t63, 0, 0, t66 * t179, t68 * t179, 0.2e1 * t159, t22 ^ 2 + t23 ^ 2 + t79 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, -t101, 0, -t76, -t78, 0, 0, t82, t69, t88, -t82, t89, 0, t141 * t130 - t153, t141 * t133 + t70, t15, -t76 * pkin(3) + t15 * pkin(9), t43, t24, t75, t42, -t74, 0, t72 * t101 + t118 * t56 + t40, -t73 * t101 + t118 * t58 + t41, -t73 * t56 - t72 * t58 + t167, t11 * t72 + t50 * t118 + t12 * t73, t19, t7, t49, t18, -t48, 0, t29 * t101 + t80 * t32 + t20, -t30 * t101 + t80 * t34 + t21, -t29 * t34 - t30 * t32 + t170, t3 * t29 + t4 * t30 + t36 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t161, -t163, 0, 0, t123, t111, 0, t125, 0, 0, t160 * t133, -t160 * t130, t146 + t147, -t117 * pkin(3) + pkin(9) * t147, t94, t71, 0, t93, 0, 0, t148 * t95, t148 * t97, t156 + t157, t105 * t118 + t60 * t72 + t61 * t73, t64, t37, 0, t63, 0, 0, t155 * t66, t155 * t68, t158 + t159, t22 * t29 + t23 * t30 + t79 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t123, t111, 0, t125, 0, 0, 0.2e1 * pkin(3) * t133, -0.2e1 * pkin(3) * t130, 0.2e1 * t146, t145 * pkin(9) ^ 2 + pkin(3) ^ 2, t94, t71, 0, t93, 0, 0, t95 * t174, t97 * t174, 0.2e1 * t156, t118 ^ 2 + t72 ^ 2 + t73 ^ 2, t64, t37, 0, t63, 0, 0, t66 * t178, t68 * t178, 0.2e1 * t158, t29 ^ 2 + t30 ^ 2 + t80 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, 0, -t152, t101, t38, -t39, 0, 0, 0, 0, t58, 0, -t56, t101, t101 * t164 + t11, -t101 * t165 - t12 (-t127 * t56 - t128 * t58) * pkin(4) (t11 * t128 + t12 * t127) * pkin(4), 0, 0, t34, 0, -t32, t101, t84 * t101 + t3, -t85 * t101 - t4, -t85 * t32 - t84 * t34, t3 * t84 + t4 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t130, 0, t133, 0, -t130 * t116, -t149, 0, 0, 0, 0, t97, 0, -t95, 0, t60, -t61, t62 (t127 * t61 + t128 * t60) * pkin(4), 0, 0, t68, 0, -t66, 0, t22, -t23, t25, t22 * t84 + t23 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t130, 0, t133, 0, -t130 * pkin(9), -t162, 0, 0, 0, 0, t97, 0, -t95, 0, t72, -t73, t62 (t127 * t73 + t128 * t72) * pkin(4), 0, 0, t68, 0, -t66, 0, t29, -t30, t25, t29 * t84 + t30 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t164, -0.2e1 * t165, 0 (t127 ^ 2 + t128 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t84, -0.2e1 * t85, 0, t84 ^ 2 + t85 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58, 0, t50, 0, 0, 0, 0, 0, 0, t32, t34, 0, t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, t97, 0, t105, 0, 0, 0, 0, 0, 0, t66, t68, 0, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, t97, 0, t118, 0, 0, 0, 0, 0, 0, t66, t68, 0, t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t32, t101, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t66, 0, t22, -t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t66, 0, t29, -t30, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t84, -t85, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
