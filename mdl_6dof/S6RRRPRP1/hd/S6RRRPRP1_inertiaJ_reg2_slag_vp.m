% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP1_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:27:09
% EndTime: 2019-05-07 07:27:16
% DurationCPUTime: 2.14s
% Computational Cost: add. (2139->153), mult. (3997->263), div. (0->0), fcn. (4763->8), ass. (0->105)
t73 = sin(qJ(5));
t67 = t73 ^ 2;
t76 = cos(qJ(5));
t69 = t76 ^ 2;
t58 = t67 + t69;
t71 = sin(pkin(10));
t115 = t71 * pkin(3);
t62 = pkin(9) + t115;
t101 = t58 * t62;
t74 = sin(qJ(3));
t75 = sin(qJ(2));
t77 = cos(qJ(3));
t78 = cos(qJ(2));
t52 = -t74 * t75 + t77 * t78;
t53 = t74 * t78 + t77 * t75;
t72 = cos(pkin(10));
t33 = t52 * t71 + t53 * t72;
t124 = -0.2e1 * t33;
t117 = -pkin(8) - pkin(7);
t92 = t117 * t75;
t93 = t117 * t78;
t38 = t74 * t92 - t77 * t93;
t20 = t52 * qJ(4) + t38;
t37 = t74 * t93 + t77 * t92;
t82 = -t53 * qJ(4) + t37;
t12 = t20 * t71 - t72 * t82;
t123 = t12 ^ 2;
t31 = -t72 * t52 + t53 * t71;
t29 = t31 ^ 2;
t65 = -pkin(2) * t78 - pkin(1);
t42 = -pkin(3) * t52 + t65;
t122 = 0.2e1 * t42;
t121 = 0.2e1 * t53;
t120 = 0.2e1 * t73;
t119 = -0.2e1 * t76;
t118 = 0.2e1 * t78;
t116 = pkin(5) * t31;
t114 = t72 * pkin(3);
t113 = t73 * pkin(5);
t112 = t74 * pkin(2);
t111 = t76 * pkin(5);
t106 = t73 * t33;
t8 = pkin(5) * t106 + t12;
t110 = t76 * t8;
t109 = t12 * t76;
t14 = t72 * t20 + t71 * t82;
t108 = t14 * t76;
t107 = t73 * t31;
t105 = t73 * t76;
t28 = t76 * t33;
t66 = t77 * pkin(2);
t64 = t66 + pkin(3);
t100 = t71 * t112 - t72 * t64;
t91 = -pkin(4) - t111;
t39 = t91 + t100;
t54 = t91 - t114;
t104 = t39 + t54;
t94 = t72 * t112;
t48 = t64 * t71 + t94;
t45 = pkin(9) + t48;
t103 = t58 * t45;
t44 = -pkin(4) + t100;
t63 = -pkin(4) - t114;
t102 = t44 + t63;
t68 = t75 ^ 2;
t70 = t78 ^ 2;
t99 = t68 + t70;
t98 = qJ(6) * t33;
t97 = qJ(6) + t45;
t96 = qJ(6) + t62;
t95 = t31 * t124;
t11 = pkin(4) * t31 - pkin(9) * t33 + t42;
t5 = t76 * t11 - t14 * t73;
t83 = -t76 * t98 + t5;
t2 = t83 + t116;
t4 = t108 + (t11 - t98) * t73;
t90 = -t2 * t73 + t4 * t76;
t89 = t2 * t76 + t4 * t73;
t6 = t11 * t73 + t108;
t88 = t5 * t76 + t6 * t73;
t1 = -t5 * t73 + t6 * t76;
t87 = -t31 * t45 + t33 * t44;
t86 = -t31 * t62 + t33 * t63;
t35 = t97 * t73;
t36 = t97 * t76;
t85 = -t35 * t76 + t36 * t73;
t50 = t96 * t73;
t51 = t96 * t76;
t84 = -t50 * t76 + t51 * t73;
t61 = 0.2e1 * t105;
t46 = t51 * t76;
t34 = t36 * t76;
t30 = t33 ^ 2;
t27 = t76 * t31;
t26 = t69 * t30;
t23 = t67 * t30;
t22 = t73 * t28;
t21 = -0.2e1 * t30 * t105;
t18 = 0.2e1 * t31 * t28;
t17 = t73 * t95;
t16 = t58 * t33;
t15 = (-t67 + t69) * t33;
t10 = t12 * t73;
t7 = t8 * t73;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t68, t75 * t118, 0, t70, 0, 0, pkin(1) * t118, -0.2e1 * pkin(1) * t75, 0.2e1 * t99 * pkin(7), t99 * pkin(7) ^ 2 + pkin(1) ^ 2, t53 ^ 2, t52 * t121, 0, t52 ^ 2, 0, 0, -0.2e1 * t65 * t52, t65 * t121, -0.2e1 * t37 * t53 + 0.2e1 * t38 * t52, t37 ^ 2 + t38 ^ 2 + t65 ^ 2, t30, t95, 0, t29, 0, 0, t31 * t122, t33 * t122, 0.2e1 * t12 * t33 - 0.2e1 * t14 * t31, t14 ^ 2 + t42 ^ 2 + t123, t26, t21, t18, t23, t17, t29, 0.2e1 * t12 * t106 + 0.2e1 * t31 * t5, 0.2e1 * t12 * t28 - 0.2e1 * t31 * t6, t88 * t124, t5 ^ 2 + t6 ^ 2 + t123, t26, t21, t18, t23, t17, t29, 0.2e1 * t8 * t106 + 0.2e1 * t2 * t31, 0.2e1 * t8 * t28 - 0.2e1 * t31 * t4, t89 * t124, t2 ^ 2 + t4 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, t78, 0, -t75 * pkin(7), -t78 * pkin(7), 0, 0, 0, 0, t53, 0, t52, 0, t37, -t38 (t52 * t74 - t53 * t77) * pkin(2) (t37 * t77 + t38 * t74) * pkin(2), 0, 0, t33, 0, -t31, 0, -t12, -t14, t100 * t33 - t31 * t48, t100 * t12 + t14 * t48, t22, t15, t107, -t22, t27, 0, t87 * t73 - t109, t87 * t76 + t10, t1, t1 * t45 + t12 * t44, t22, t15, t107, -t22, t27, 0, t39 * t106 - t31 * t35 - t110, t39 * t28 - t31 * t36 + t7, -t85 * t33 + t90, -t2 * t35 + t36 * t4 + t39 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t66, -0.2e1 * t112, 0 (t74 ^ 2 + t77 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t100, -0.2e1 * t48, 0, t100 ^ 2 + t48 ^ 2, t67, t61, 0, t69, 0, 0, t44 * t119, t44 * t120, 0.2e1 * t103, t58 * t45 ^ 2 + t44 ^ 2, t67, t61, 0, t69, 0, 0, t39 * t119, t39 * t120, 0.2e1 * t35 * t73 + 0.2e1 * t34, t35 ^ 2 + t36 ^ 2 + t39 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, t52, 0, t37, -t38, 0, 0, 0, 0, t33, 0, -t31, 0, -t12, -t14 (-t31 * t71 - t33 * t72) * pkin(3) (-t12 * t72 + t14 * t71) * pkin(3), t22, t15, t107, -t22, t27, 0, t86 * t73 - t109, t86 * t76 + t10, t1, t1 * t62 + t12 * t63, t22, t15, t107, -t22, t27, 0, t54 * t106 - t31 * t50 - t110, t54 * t28 - t31 * t51 + t7, -t84 * t33 + t90, -t2 * t50 + t4 * t51 + t54 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t66, -t112, 0, 0, 0, 0, 0, 0, 0, 1, -t100 + t114, -t94 + (-pkin(3) - t64) * t71, 0 (-t100 * t72 + t48 * t71) * pkin(3), t67, t61, 0, t69, 0, 0, -t102 * t76, t102 * t73, t101 + t103, t45 * t101 + t44 * t63, t67, t61, 0, t69, 0, 0, -t104 * t76, t104 * t73, t34 + t46 + (t35 + t50) * t73, t35 * t50 + t36 * t51 + t39 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t114, -0.2e1 * t115, 0 (t71 ^ 2 + t72 ^ 2) * pkin(3) ^ 2, t67, t61, 0, t69, 0, 0, t63 * t119, t63 * t120, 0.2e1 * t101, t58 * t62 ^ 2 + t63 ^ 2, t67, t61, 0, t69, 0, 0, t54 * t119, t54 * t120, 0.2e1 * t50 * t73 + 0.2e1 * t46, t50 ^ 2 + t51 ^ 2 + t54 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t33, 0, t42, 0, 0, 0, 0, 0, 0, t27, -t107, -t16, t88, 0, 0, 0, 0, 0, 0, t27, -t107, -t16, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t106, t31, t5, -t6, 0, 0, 0, 0, t28, 0, -t106, t31, t83 + 0.2e1 * t116, -t4, -pkin(5) * t28, t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t76, 0, -t73 * t45, -t76 * t45, 0, 0, 0, 0, t73, 0, t76, 0, -t35, -t36, -t113, -t35 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t76, 0, -t73 * t62, -t76 * t62, 0, 0, 0, 0, t73, 0, t76, 0, -t50, -t51, -t113, -t50 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, -t73, 0, 0, 0, 0, 0, 0, 0, 0, t76, -t73, 0, t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, t28, 0, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, t73, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, t73, 0, t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
