% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRRR3_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 08:57:15
% EndTime: 2019-05-08 08:57:31
% DurationCPUTime: 3.39s
% Computational Cost: add. (4100->233), mult. (7804->411), div. (0->0), fcn. (9242->10), ass. (0->148)
t132 = sin(qJ(3));
t170 = t132 * pkin(2);
t115 = pkin(9) + t170;
t131 = sin(qJ(4));
t125 = t131 ^ 2;
t136 = cos(qJ(4));
t127 = t136 ^ 2;
t150 = t125 + t127;
t152 = t150 * t115;
t138 = cos(qJ(2));
t179 = -pkin(8) - pkin(7);
t107 = t179 * t138;
t137 = cos(qJ(3));
t133 = sin(qJ(2));
t146 = t179 * t133;
t74 = -t132 * t107 - t137 * t146;
t188 = t74 ^ 2;
t98 = t132 * t133 - t137 * t138;
t93 = t98 ^ 2;
t118 = -t136 * pkin(4) - pkin(3);
t167 = t137 * pkin(2);
t104 = t118 - t167;
t130 = sin(qJ(5));
t135 = cos(qJ(5));
t96 = t130 * t131 - t135 * t136;
t177 = t96 * pkin(5);
t78 = t104 + t177;
t187 = 0.2e1 * t78;
t79 = t118 + t177;
t186 = 0.2e1 * t79;
t185 = -0.2e1 * t98;
t184 = 0.2e1 * t98;
t183 = 0.2e1 * t104;
t182 = 0.2e1 * t118;
t119 = -t138 * pkin(2) - pkin(1);
t181 = 0.2e1 * t119;
t180 = 0.2e1 * t138;
t129 = sin(qJ(6));
t134 = cos(qJ(6));
t101 = t132 * t138 + t137 * t133;
t155 = t136 * t101;
t176 = t98 * pkin(4);
t62 = t98 * pkin(3) - t101 * pkin(9) + t119;
t77 = -t137 * t107 + t132 * t146;
t36 = -t131 * t77 + t136 * t62;
t27 = -pkin(10) * t155 + t176 + t36;
t159 = t136 * t77;
t30 = t159 + (-pkin(10) * t101 + t62) * t131;
t11 = -t130 * t30 + t135 * t27;
t175 = t98 * pkin(5);
t157 = t131 * t101;
t57 = -t130 * t157 + t135 * t155;
t6 = -t57 * pkin(11) + t11 + t175;
t160 = t135 * t30;
t12 = t130 * t27 + t160;
t100 = t130 * t136 + t135 * t131;
t55 = t100 * t101;
t8 = -t55 * pkin(11) + t12;
t3 = -t129 * t8 + t134 * t6;
t169 = t134 * t8;
t4 = t129 * t6 + t169;
t65 = t129 * t100 + t134 * t96;
t68 = t134 * t100 - t129 * t96;
t178 = -t3 * t68 - t4 * t65;
t174 = -t11 * t100 - t12 * t96;
t173 = t100 * pkin(11);
t172 = t129 * pkin(5);
t171 = t130 * pkin(4);
t121 = t134 * pkin(5);
t122 = t135 * pkin(4);
t168 = t136 * pkin(9);
t117 = -pkin(3) - t167;
t166 = pkin(3) - t117;
t90 = (-pkin(10) - t115) * t131;
t124 = t136 * pkin(10);
t154 = t136 * t115;
t91 = t124 + t154;
t59 = -t130 * t91 + t135 * t90;
t43 = t59 - t173;
t60 = t130 * t90 + t135 * t91;
t89 = t96 * pkin(11);
t44 = t60 - t89;
t22 = -t129 * t44 + t134 * t43;
t23 = t129 * t43 + t134 * t44;
t165 = -t22 * t68 - t23 * t65;
t105 = (-pkin(10) - pkin(9)) * t131;
t106 = t124 + t168;
t73 = t135 * t105 - t130 * t106;
t51 = t73 - t173;
t76 = t130 * t105 + t135 * t106;
t52 = t76 - t89;
t28 = -t129 * t52 + t134 * t51;
t29 = t129 * t51 + t134 * t52;
t164 = -t28 * t68 - t29 * t65;
t163 = -t59 * t100 - t60 * t96;
t162 = -t73 * t100 - t76 * t96;
t161 = t78 + t79;
t158 = t74 * t136;
t156 = t131 * t136;
t153 = t104 + t118;
t151 = t150 * pkin(9);
t126 = t133 ^ 2;
t128 = t138 ^ 2;
t149 = t126 + t128;
t148 = t101 * t185;
t147 = t134 * t171;
t116 = t122 + pkin(5);
t84 = t134 * t116 - t129 * t171;
t145 = -pkin(3) * t101 - pkin(9) * t98;
t49 = pkin(4) * t157 + t74;
t37 = t131 * t62 + t159;
t13 = -t36 * t131 + t37 * t136;
t144 = t101 * t117 - t115 * t98;
t111 = 0.2e1 * t156;
t95 = t101 ^ 2;
t94 = t100 ^ 2;
t92 = t96 ^ 2;
t88 = t136 * t98;
t86 = t131 * t98;
t85 = t129 * t116 + t147;
t81 = t131 * t155;
t72 = t100 * t98;
t71 = t96 * t98;
t70 = -0.2e1 * t100 * t96;
t69 = t74 * t131;
t67 = (-t125 + t127) * t101;
t64 = t68 ^ 2;
t63 = t65 ^ 2;
t61 = (-t100 * t135 - t130 * t96) * pkin(4);
t48 = t68 * t98;
t47 = t65 * t98;
t42 = t57 * t100;
t41 = t55 * t96;
t40 = t49 * t100;
t39 = t49 * t96;
t38 = -0.2e1 * t68 * t65;
t35 = (-t129 * t65 - t134 * t68) * pkin(5);
t34 = t55 * pkin(5) + t49;
t33 = -t129 * t55 + t134 * t57;
t31 = t129 * t57 + t134 * t55;
t26 = -t85 * t65 - t84 * t68;
t24 = -t100 * t55 - t57 * t96;
t21 = t34 * t68;
t20 = t34 * t65;
t19 = t33 * t68;
t18 = t31 * t65;
t7 = -t68 * t31 - t33 * t65;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t126, t133 * t180, 0, t128, 0, 0, pkin(1) * t180, -0.2e1 * pkin(1) * t133, 0.2e1 * t149 * pkin(7), t149 * pkin(7) ^ 2 + pkin(1) ^ 2, t95, t148, 0, t93, 0, 0, t98 * t181, t101 * t181, 0.2e1 * t74 * t101 - 0.2e1 * t77 * t98, t119 ^ 2 + t77 ^ 2 + t188, t127 * t95, -0.2e1 * t95 * t156, t155 * t184, t125 * t95, t131 * t148, t93, 0.2e1 * t74 * t157 + 0.2e1 * t36 * t98, 0.2e1 * t74 * t155 - 0.2e1 * t37 * t98, 0.2e1 * (-t131 * t37 - t136 * t36) * t101, t36 ^ 2 + t37 ^ 2 + t188, t57 ^ 2, -0.2e1 * t57 * t55, t57 * t184, t55 ^ 2, -t55 * t184, t93, 0.2e1 * t11 * t98 + 0.2e1 * t49 * t55, -0.2e1 * t12 * t98 + 0.2e1 * t49 * t57, -0.2e1 * t11 * t57 - 0.2e1 * t12 * t55, t11 ^ 2 + t12 ^ 2 + t49 ^ 2, t33 ^ 2, -0.2e1 * t33 * t31, t33 * t184, t31 ^ 2, t31 * t185, t93, 0.2e1 * t3 * t98 + 0.2e1 * t34 * t31, 0.2e1 * t34 * t33 - 0.2e1 * t4 * t98, -0.2e1 * t3 * t33 - 0.2e1 * t4 * t31, t3 ^ 2 + t34 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, 0, t138, 0, -t133 * pkin(7), -t138 * pkin(7), 0, 0, 0, 0, t101, 0, -t98, 0, -t74, -t77 (-t101 * t137 - t132 * t98) * pkin(2) (t132 * t77 - t137 * t74) * pkin(2), t81, t67, t86, -t81, t88, 0, t144 * t131 - t158, t144 * t136 + t69, t13, t13 * t115 + t74 * t117, t42, t24, t72, t41, -t71, 0, t104 * t55 + t59 * t98 + t39, t104 * t57 - t60 * t98 + t40, -t60 * t55 - t59 * t57 + t174, t49 * t104 + t11 * t59 + t12 * t60, t19, t7, t48, t18, -t47, 0, t22 * t98 + t78 * t31 + t20, -t23 * t98 + t78 * t33 + t21, -t22 * t33 - t23 * t31 + t178, t3 * t22 + t4 * t23 + t34 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t167, -0.2e1 * t170, 0 (t132 ^ 2 + t137 ^ 2) * pkin(2) ^ 2, t125, t111, 0, t127, 0, 0, -0.2e1 * t117 * t136, 0.2e1 * t117 * t131, 0.2e1 * t152, t150 * t115 ^ 2 + t117 ^ 2, t94, t70, 0, t92, 0, 0, t96 * t183, t100 * t183, 0.2e1 * t163, t104 ^ 2 + t59 ^ 2 + t60 ^ 2, t64, t38, 0, t63, 0, 0, t65 * t187, t68 * t187, 0.2e1 * t165, t22 ^ 2 + t23 ^ 2 + t78 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, -t98, 0, -t74, -t77, 0, 0, t81, t67, t86, -t81, t88, 0, t145 * t131 - t158, t145 * t136 + t69, t13, -t74 * pkin(3) + t13 * pkin(9), t42, t24, t72, t41, -t71, 0, t118 * t55 + t73 * t98 + t39, t118 * t57 - t76 * t98 + t40, -t76 * t55 - t73 * t57 + t174, t11 * t73 + t49 * t118 + t12 * t76, t19, t7, t48, t18, -t47, 0, t28 * t98 + t79 * t31 + t20, -t29 * t98 + t79 * t33 + t21, -t28 * t33 - t29 * t31 + t178, t3 * t28 + t4 * t29 + t34 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t167, -t170, 0, 0, t125, t111, 0, t127, 0, 0, t166 * t136, -t166 * t131, t151 + t152, -t117 * pkin(3) + pkin(9) * t152, t94, t70, 0, t92, 0, 0, t153 * t96, t153 * t100, t162 + t163, t104 * t118 + t59 * t73 + t60 * t76, t64, t38, 0, t63, 0, 0, t161 * t65, t161 * t68, t164 + t165, t22 * t28 + t23 * t29 + t78 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t125, t111, 0, t127, 0, 0, 0.2e1 * pkin(3) * t136, -0.2e1 * pkin(3) * t131, 0.2e1 * t151, t150 * pkin(9) ^ 2 + pkin(3) ^ 2, t94, t70, 0, t92, 0, 0, t96 * t182, t100 * t182, 0.2e1 * t162, t118 ^ 2 + t73 ^ 2 + t76 ^ 2, t64, t38, 0, t63, 0, 0, t65 * t186, t68 * t186, 0.2e1 * t164, t28 ^ 2 + t29 ^ 2 + t79 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, 0, -t157, t98, t36, -t37, 0, 0, 0, 0, t57, 0, -t55, t98, t98 * t122 + t11, -t160 + (-t27 - t176) * t130 (-t130 * t55 - t135 * t57) * pkin(4) (t11 * t135 + t12 * t130) * pkin(4), 0, 0, t33, 0, -t31, t98, t84 * t98 + t3, -t85 * t98 - t4, -t85 * t31 - t84 * t33, t3 * t84 + t4 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, 0, t136, 0, -t131 * t115, -t154, 0, 0, 0, 0, t100, 0, -t96, 0, t59, -t60, t61 (t130 * t60 + t135 * t59) * pkin(4), 0, 0, t68, 0, -t65, 0, t22, -t23, t26, t22 * t84 + t23 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, 0, t136, 0, -t131 * pkin(9), -t168, 0, 0, 0, 0, t100, 0, -t96, 0, t73, -t76, t61 (t130 * t76 + t135 * t73) * pkin(4), 0, 0, t68, 0, -t65, 0, t28, -t29, t26, t28 * t84 + t29 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t122, -0.2e1 * t171, 0 (t130 ^ 2 + t135 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t84, -0.2e1 * t85, 0, t84 ^ 2 + t85 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, -t55, t98, t11, -t12, 0, 0, 0, 0, t33, 0, -t31, t98, t98 * t121 + t3, -t169 + (-t6 - t175) * t129 (-t129 * t31 - t134 * t33) * pkin(5) (t129 * t4 + t134 * t3) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, -t96, 0, t59, -t60, 0, 0, 0, 0, t68, 0, -t65, 0, t22, -t23, t35 (t129 * t23 + t134 * t22) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, -t96, 0, t73, -t76, 0, 0, 0, 0, t68, 0, -t65, 0, t28, -t29, t35 (t129 * t29 + t134 * t28) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t122, -t171, 0, 0, 0, 0, 0, 0, 0, 1, t121 + t84, -t147 + (-pkin(5) - t116) * t129, 0 (t129 * t85 + t134 * t84) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t121, -0.2e1 * t172, 0 (t129 ^ 2 + t134 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, -t31, t98, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t65, 0, t22, -t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t65, 0, t28, -t29, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t84, -t85, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t121, -t172, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
