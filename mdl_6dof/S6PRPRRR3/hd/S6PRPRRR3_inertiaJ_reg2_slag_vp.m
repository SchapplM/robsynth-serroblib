% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR3_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:42:23
% EndTime: 2019-05-05 00:42:28
% DurationCPUTime: 1.46s
% Computational Cost: add. (1436->126), mult. (3012->226), div. (0->0), fcn. (3787->12), ass. (0->85)
t58 = sin(qJ(5));
t91 = t58 * pkin(4);
t44 = pkin(10) + t91;
t57 = sin(qJ(6));
t51 = t57 ^ 2;
t61 = cos(qJ(6));
t52 = t61 ^ 2;
t77 = t51 + t52;
t80 = t77 * t44;
t53 = sin(pkin(12));
t55 = cos(pkin(12));
t59 = sin(qJ(4));
t63 = cos(qJ(4));
t35 = -t59 * t53 + t63 * t55;
t36 = t63 * t53 + t59 * t55;
t62 = cos(qJ(5));
t28 = t58 * t35 + t62 * t36;
t99 = -0.2e1 * t28;
t81 = pkin(8) + qJ(3);
t74 = t81 * t55;
t75 = t81 * t53;
t30 = -t59 * t75 + t63 * t74;
t19 = t35 * pkin(9) + t30;
t29 = -t59 * t74 - t63 * t75;
t68 = -t36 * pkin(9) + t29;
t8 = t58 * t19 - t62 * t68;
t98 = t8 ^ 2;
t56 = cos(pkin(6));
t54 = sin(pkin(6));
t60 = sin(qJ(2));
t86 = t54 * t60;
t32 = -t53 * t86 + t56 * t55;
t33 = t56 * t53 + t55 * t86;
t20 = t63 * t32 - t59 * t33;
t21 = t59 * t32 + t63 * t33;
t13 = -t62 * t20 + t58 * t21;
t97 = t13 ^ 2;
t26 = -t62 * t35 + t58 * t36;
t96 = t26 ^ 2;
t43 = -t55 * pkin(3) - pkin(2);
t31 = -t35 * pkin(4) + t43;
t95 = 0.2e1 * t31;
t94 = 0.2e1 * t36;
t93 = 0.2e1 * t55;
t92 = t13 * t8;
t90 = t62 * pkin(4);
t89 = t8 * t61;
t45 = -pkin(5) - t90;
t88 = pkin(5) - t45;
t87 = t13 * t61;
t64 = cos(qJ(2));
t85 = t54 * t64;
t23 = t57 * t26;
t84 = t57 * t28;
t83 = t57 * t61;
t82 = t61 * t28;
t79 = t77 * pkin(10);
t48 = t53 ^ 2;
t50 = t55 ^ 2;
t78 = t48 + t50;
t76 = t26 * t99;
t73 = -pkin(5) * t28 - pkin(10) * t26;
t10 = t62 * t19 + t58 * t68;
t11 = t26 * pkin(5) - t28 * pkin(10) + t31;
t3 = -t57 * t10 + t61 * t11;
t4 = t61 * t10 + t57 * t11;
t72 = t3 * t61 + t4 * t57;
t1 = -t3 * t57 + t4 * t61;
t15 = t58 * t20 + t62 * t21;
t5 = -t57 * t15 - t61 * t85;
t6 = t61 * t15 - t57 * t85;
t71 = t5 * t61 + t6 * t57;
t2 = -t5 * t57 + t6 * t61;
t70 = -t26 * t44 + t28 * t45;
t69 = -t32 * t53 + t33 * t55;
t49 = t54 ^ 2;
t42 = t49 * t64 ^ 2;
t39 = 0.2e1 * t83;
t25 = t28 ^ 2;
t24 = t61 * t26;
t22 = t57 * t82;
t16 = (-t51 + t52) * t28;
t12 = t13 * t57;
t7 = t8 * t57;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * t60 ^ 2 + t56 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 ^ 2 + t33 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 ^ 2 + t21 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15 ^ 2 + t42 + t97, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 ^ 2 + t6 ^ 2 + t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, -t86, 0, 0, 0, 0, 0, 0, 0, 0, t55 * t85, -t53 * t85, t69, pkin(2) * t85 + t69 * qJ(3), 0, 0, 0, 0, 0, 0, t35 * t85, -t36 * t85, -t20 * t36 + t21 * t35, t20 * t29 + t21 * t30 - t43 * t85, 0, 0, 0, 0, 0, 0, -t26 * t85, -t28 * t85, t13 * t28 - t15 * t26, t15 * t10 - t31 * t85 + t92, 0, 0, 0, 0, 0, 0, t13 * t84 + t5 * t26, t13 * t82 - t6 * t26, -t71 * t28, t5 * t3 + t6 * t4 + t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t48, t53 * t93, 0, t50, 0, 0, pkin(2) * t93, -0.2e1 * pkin(2) * t53, 0.2e1 * t78 * qJ(3), t78 * qJ(3) ^ 2 + pkin(2) ^ 2, t36 ^ 2, t35 * t94, 0, t35 ^ 2, 0, 0, -0.2e1 * t43 * t35, t43 * t94, -0.2e1 * t29 * t36 + 0.2e1 * t30 * t35, t29 ^ 2 + t30 ^ 2 + t43 ^ 2, t25, t76, 0, t96, 0, 0, t26 * t95, t28 * t95, -0.2e1 * t10 * t26 + 0.2e1 * t8 * t28, t10 ^ 2 + t31 ^ 2 + t98, t52 * t25, -0.2e1 * t25 * t83, 0.2e1 * t26 * t82, t51 * t25, t57 * t76, t96, 0.2e1 * t3 * t26 + 0.2e1 * t8 * t84, -0.2e1 * t4 * t26 + 0.2e1 * t8 * t82, t72 * t99, t3 ^ 2 + t4 ^ 2 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t53, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t35, t36, 0, t43, 0, 0, 0, 0, 0, 0, t26, t28, 0, t31, 0, 0, 0, 0, 0, 0, t24, -t23, -t77 * t28, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t21, 0, 0, 0, 0, 0, 0, 0, 0, -t13, -t15, 0 (-t13 * t62 + t15 * t58) * pkin(4), 0, 0, 0, 0, 0, 0, -t87, t12, t2, t13 * t45 + t2 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, t35, 0, t29, -t30, 0, 0, 0, 0, t28, 0, -t26, 0, -t8, -t10 (-t26 * t58 - t28 * t62) * pkin(4) (t10 * t58 - t62 * t8) * pkin(4), t22, t16, t23, -t22, t24, 0, t70 * t57 - t89, t70 * t61 + t7, t1, t1 * t44 + t8 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t90, -0.2e1 * t91, 0 (t58 ^ 2 + t62 ^ 2) * pkin(4) ^ 2, t51, t39, 0, t52, 0, 0, -0.2e1 * t45 * t61, 0.2e1 * t45 * t57, 0.2e1 * t80, t77 * t44 ^ 2 + t45 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13, -t15, 0, 0, 0, 0, 0, 0, 0, 0, -t87, t12, t2, -t13 * pkin(5) + t2 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, 0, -t8, -t10, 0, 0, t22, t16, t23, -t22, t24, 0, t73 * t57 - t89, t73 * t61 + t7, t1, -t8 * pkin(5) + t1 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t90, -t91, 0, 0, t51, t39, 0, t52, 0, 0, t88 * t61, -t88 * t57, t79 + t80, -t45 * pkin(5) + pkin(10) * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t51, t39, 0, t52, 0, 0, 0.2e1 * pkin(5) * t61, -0.2e1 * pkin(5) * t57, 0.2e1 * t79, t77 * pkin(10) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, -t84, t26, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, -t57, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t61, 0, -t57 * t44, -t61 * t44, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t61, 0, -t57 * pkin(10), -t61 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t9;
