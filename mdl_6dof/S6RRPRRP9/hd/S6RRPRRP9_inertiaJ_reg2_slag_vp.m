% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:35
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP9_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP9_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP9_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:34:30
% EndTime: 2019-05-06 18:34:38
% DurationCPUTime: 2.56s
% Computational Cost: add. (3367->214), mult. (7689->411), div. (0->0), fcn. (8943->10), ass. (0->140)
t100 = sin(pkin(11));
t102 = cos(pkin(11));
t105 = sin(qJ(4));
t153 = cos(qJ(4));
t81 = t153 * t100 + t105 * t102;
t161 = -0.2e1 * t81;
t103 = cos(pkin(6));
t101 = sin(pkin(6));
t106 = sin(qJ(2));
t132 = t101 * t106;
t66 = -t100 * t132 + t103 * t102;
t67 = t103 * t100 + t102 * t132;
t44 = t105 * t67 - t153 * t66;
t43 = t44 ^ 2;
t149 = pkin(9) + qJ(3);
t121 = t149 * t100;
t82 = t149 * t102;
t54 = t105 * t82 + t153 * t121;
t160 = t54 ^ 2;
t79 = t105 * t100 - t153 * t102;
t76 = t79 ^ 2;
t159 = -0.2e1 * t44;
t93 = -t102 * pkin(3) - pkin(2);
t158 = 0.2e1 * t93;
t157 = 0.2e1 * t101;
t156 = 0.2e1 * t102;
t155 = t44 * pkin(5);
t154 = t79 * pkin(5);
t152 = pkin(1) * t106;
t108 = cos(qJ(2));
t151 = pkin(1) * t108;
t107 = cos(qJ(5));
t150 = t107 * pkin(5);
t31 = t44 * t79;
t148 = -qJ(6) - pkin(10);
t131 = t101 * t108;
t125 = pkin(8) * t131;
t60 = t125 + (qJ(3) + t152) * t103;
t61 = (-pkin(2) * t108 - qJ(3) * t106 - pkin(1)) * t101;
t38 = t100 * t61 + t102 * t60;
t95 = t100 ^ 2;
t97 = t102 ^ 2;
t147 = t95 + t97;
t104 = sin(qJ(5));
t98 = t104 ^ 2;
t99 = t107 ^ 2;
t87 = t98 + t99;
t146 = t104 * t44;
t145 = t104 * t79;
t144 = t104 * t81;
t42 = t107 * t44;
t56 = -t105 * t121 + t153 * t82;
t143 = t107 * t56;
t73 = t107 * t81;
t96 = t101 ^ 2;
t142 = t108 * t96;
t46 = t105 * t66 + t153 * t67;
t34 = t104 * t46 + t107 * t131;
t29 = t34 * t107;
t36 = -t104 * t131 + t107 * t46;
t30 = t36 * t104;
t141 = t36 * t107;
t39 = pkin(5) * t144 + t54;
t140 = t39 * t104;
t139 = t39 * t107;
t138 = t54 * t104;
t137 = t54 * t107;
t136 = t66 * t102;
t135 = t67 * t100;
t94 = -pkin(4) - t150;
t134 = t94 * t104;
t133 = t94 * t107;
t130 = t103 * t106;
t129 = t104 * t107;
t128 = t79 * t161;
t127 = -0.2e1 * t131;
t126 = 0.2e1 * t131;
t124 = t34 * t144;
t123 = t100 * t131;
t122 = t102 * t131;
t88 = pkin(8) * t132;
t64 = t88 + (-pkin(2) - t151) * t103;
t48 = -t66 * pkin(3) + t64;
t14 = t44 * pkin(4) - t46 * pkin(10) + t48;
t37 = -t100 * t60 + t102 * t61;
t22 = -pkin(3) * t131 - t67 * pkin(9) + t37;
t27 = t66 * pkin(9) + t38;
t9 = t105 * t22 + t153 * t27;
t7 = -pkin(10) * t131 + t9;
t3 = -t104 * t7 + t107 * t14;
t49 = t79 * pkin(4) - t81 * pkin(10) + t93;
t23 = -t104 * t56 + t107 * t49;
t120 = -pkin(4) * t81 - pkin(10) * t79;
t8 = -t105 * t27 + t153 * t22;
t112 = -t36 * qJ(6) + t3;
t1 = t112 + t155;
t4 = t104 * t14 + t107 * t7;
t2 = -t34 * qJ(6) + t4;
t119 = t1 * t107 + t2 * t104;
t118 = t4 * t104 + t3 * t107;
t117 = -t3 * t104 + t4 * t107;
t116 = -t37 * t100 + t38 * t102;
t111 = -qJ(6) * t73 + t23;
t18 = t111 + t154;
t21 = t143 + (-qJ(6) * t81 + t49) * t104;
t115 = t21 * t104 + t18 * t107;
t24 = t104 * t49 + t143;
t114 = t24 * t104 + t23 * t107;
t113 = -t23 * t104 + t24 * t107;
t6 = pkin(4) * t131 - t8;
t91 = t96 * t108 ^ 2;
t90 = 0.2e1 * t129;
t84 = t148 * t107;
t83 = t148 * t104;
t77 = t81 ^ 2;
t75 = pkin(1) * t130 + t125;
t74 = t103 * t151 - t88;
t72 = t107 * t79;
t71 = t99 * t77;
t68 = t98 * t77;
t65 = t81 * t129;
t62 = -0.2e1 * t77 * t129;
t53 = 0.2e1 * t79 * t73;
t52 = t104 * t128;
t51 = t87 * t81;
t50 = (-t98 + t99) * t81;
t33 = t36 ^ 2;
t32 = t34 ^ 2;
t28 = t104 * t34;
t25 = t81 * t141;
t20 = 0.2e1 * t36 * t44;
t19 = t34 * t159;
t17 = -0.2e1 * t36 * t34;
t16 = -t28 + t141;
t15 = -t28 - t141;
t12 = t36 * t79 + t44 * t73;
t11 = -t44 * t144 - t34 * t79;
t10 = (-t30 - t29) * t81;
t5 = t34 * pkin(5) + t6;
t13 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t96 * t106 ^ 2, 0.2e1 * t106 * t142, t130 * t157, t91, t103 * t126, t103 ^ 2, 0.2e1 * pkin(1) * t142 + 0.2e1 * t74 * t103, -0.2e1 * t75 * t103 - 0.2e1 * t96 * t152 (-t106 * t74 + t108 * t75) * t157, t96 * pkin(1) ^ 2 + t74 ^ 2 + t75 ^ 2, t67 ^ 2, 0.2e1 * t67 * t66, t67 * t127, t66 ^ 2, t66 * t127, t91, -0.2e1 * t131 * t37 - 0.2e1 * t64 * t66, 0.2e1 * t131 * t38 + 0.2e1 * t64 * t67, -0.2e1 * t37 * t67 + 0.2e1 * t38 * t66, t37 ^ 2 + t38 ^ 2 + t64 ^ 2, t46 ^ 2, t46 * t159, t46 * t127, t43, t44 * t126, t91, -0.2e1 * t131 * t8 + 0.2e1 * t48 * t44, 0.2e1 * t131 * t9 + 0.2e1 * t48 * t46, -0.2e1 * t9 * t44 - 0.2e1 * t8 * t46, t48 ^ 2 + t8 ^ 2 + t9 ^ 2, t33, t17, t20, t32, t19, t43, 0.2e1 * t3 * t44 + 0.2e1 * t6 * t34, 0.2e1 * t6 * t36 - 0.2e1 * t4 * t44, -0.2e1 * t3 * t36 - 0.2e1 * t4 * t34, t3 ^ 2 + t4 ^ 2 + t6 ^ 2, t33, t17, t20, t32, t19, t43, 0.2e1 * t1 * t44 + 0.2e1 * t5 * t34, -0.2e1 * t2 * t44 + 0.2e1 * t5 * t36, -0.2e1 * t1 * t36 - 0.2e1 * t2 * t34, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, 0, t131, t103, t74, -t75, 0, 0, t135, t100 * t66 + t67 * t102, -t123, t136, -t122, 0, pkin(2) * t66 + qJ(3) * t123 - t64 * t102, -pkin(2) * t67 + qJ(3) * t122 + t64 * t100 (t135 + t136) * qJ(3) + t116, -t64 * pkin(2) + qJ(3) * t116, t46 * t81, -t81 * t44 - t46 * t79, -t81 * t131, t31, t79 * t131, 0, t131 * t54 + t93 * t44 + t48 * t79, t131 * t56 + t93 * t46 + t48 * t81, -t56 * t44 + t54 * t46 - t9 * t79 - t8 * t81, t48 * t93 - t8 * t54 + t9 * t56, t25, t10, t12, t124, t11, t31, t6 * t144 + t23 * t44 + t3 * t79 + t54 * t34, -t24 * t44 + t54 * t36 - t4 * t79 + t6 * t73, -t118 * t81 - t23 * t36 - t24 * t34, t3 * t23 + t4 * t24 + t6 * t54, t25, t10, t12, t124, t11, t31, t1 * t79 + t144 * t5 + t18 * t44 + t39 * t34, -t2 * t79 - t21 * t44 + t39 * t36 + t5 * t73, -t119 * t81 - t18 * t36 - t21 * t34, t1 * t18 + t2 * t21 + t5 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t95, t100 * t156, 0, t97, 0, 0, pkin(2) * t156, -0.2e1 * pkin(2) * t100, 0.2e1 * t147 * qJ(3), t147 * qJ(3) ^ 2 + pkin(2) ^ 2, t77, t128, 0, t76, 0, 0, t79 * t158, t81 * t158, 0.2e1 * t54 * t81 - 0.2e1 * t56 * t79, t56 ^ 2 + t93 ^ 2 + t160, t71, t62, t53, t68, t52, t76, 0.2e1 * t81 * t138 + 0.2e1 * t23 * t79, 0.2e1 * t81 * t137 - 0.2e1 * t24 * t79, t114 * t161, t23 ^ 2 + t24 ^ 2 + t160, t71, t62, t53, t68, t52, t76, 0.2e1 * t140 * t81 + 0.2e1 * t18 * t79, 0.2e1 * t139 * t81 - 0.2e1 * t21 * t79, t115 * t161, t18 ^ 2 + t21 ^ 2 + t39 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, t67, 0, t64, 0, 0, 0, 0, 0, 0, t44, t46, 0, t48, 0, 0, 0, 0, 0, 0, t42, -t146, t15, t118, 0, 0, 0, 0, 0, 0, t42, -t146, t15, t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102, t100, 0, -pkin(2), 0, 0, 0, 0, 0, 0, t79, t81, 0, t93, 0, 0, 0, 0, 0, 0, t72, -t145, -t51, t114, 0, 0, 0, 0, 0, 0, t72, -t145, -t51, t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t44, -t131, t8, -t9, 0, 0, t30, t16, t146, -t29, t42, 0, -pkin(4) * t34 - pkin(10) * t146 - t6 * t107, -pkin(4) * t36 - pkin(10) * t42 + t6 * t104 (t30 - t29) * pkin(10) + t117, -t6 * pkin(4) + pkin(10) * t117, t30, t16, t146, -t29, t42, 0, -t5 * t107 + t94 * t34 + t83 * t44, t5 * t104 + t94 * t36 + t84 * t44, -t1 * t104 + t2 * t107 + t84 * t34 - t83 * t36, t1 * t83 - t2 * t84 + t5 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, -t79, 0, -t54, -t56, 0, 0, t65, t50, t145, -t65, t72, 0, t120 * t104 - t137, t107 * t120 + t138, t113, -t54 * pkin(4) + pkin(10) * t113, t65, t50, t145, -t65, t72, 0, t134 * t81 + t83 * t79 - t139, t133 * t81 + t84 * t79 + t140 (-t81 * t83 + t21) * t107 + (t81 * t84 - t18) * t104, t18 * t83 - t21 * t84 + t39 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104 * t84 + t107 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t98, t90, 0, t99, 0, 0, 0.2e1 * pkin(4) * t107, -0.2e1 * pkin(4) * t104, 0.2e1 * t87 * pkin(10), pkin(10) ^ 2 * t87 + pkin(4) ^ 2, t98, t90, 0, t99, 0, 0, -0.2e1 * t133, 0.2e1 * t134, -0.2e1 * t83 * t104 - 0.2e1 * t84 * t107, t83 ^ 2 + t84 ^ 2 + t94 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, t44, t3, -t4, 0, 0, 0, 0, t36, 0, -t34, t44, t112 + 0.2e1 * t155, -t2, -t36 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, -t144, t79, t23, -t24, 0, 0, 0, 0, t73, 0, -t144, t79, t111 + 0.2e1 * t154, -t21, -pkin(5) * t73, t18 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, -t104, 0, 0, 0, 0, 0, 0, 0, 0, t107, -t104, 0, t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, t107, 0, -t104 * pkin(10), -t107 * pkin(10), 0, 0, 0, 0, t104, 0, t107, 0, t83, t84, -t104 * pkin(5), t83 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t36, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, t73, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, t104, 0, t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t13;
