% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPPR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPPR3_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:32:43
% EndTime: 2019-05-07 04:32:47
% DurationCPUTime: 1.38s
% Computational Cost: add. (899->120), mult. (1501->182), div. (0->0), fcn. (1663->6), ass. (0->79)
t54 = sin(qJ(3));
t55 = sin(qJ(2));
t57 = cos(qJ(3));
t58 = cos(qJ(2));
t27 = t54 * t58 + t57 * t55;
t97 = 0.2e1 * t27;
t88 = -pkin(8) - pkin(7);
t30 = t88 * t58;
t70 = t88 * t55;
t17 = -t57 * t30 + t54 * t70;
t25 = t54 * t55 - t57 * t58;
t9 = t25 * qJ(5) + t17;
t96 = t9 ^ 2;
t23 = t25 ^ 2;
t24 = t27 ^ 2;
t87 = t54 * pkin(2);
t38 = qJ(4) + t87;
t95 = t38 ^ 2;
t94 = 0.2e1 * t25;
t44 = -t58 * pkin(2) - pkin(1);
t93 = 0.2e1 * t44;
t53 = sin(qJ(6));
t92 = -0.2e1 * t53;
t56 = cos(qJ(6));
t91 = 0.2e1 * t56;
t90 = 0.2e1 * t58;
t89 = -pkin(4) - pkin(9);
t86 = t57 * pkin(2);
t85 = t9 * t53;
t84 = t27 * t25;
t83 = t38 * t25;
t82 = t53 * t25;
t81 = t53 * t27;
t80 = t53 * t56;
t79 = t56 * t25;
t78 = t56 * t27;
t35 = pkin(5) + t38;
t52 = qJ(4) + pkin(5);
t77 = t35 + t52;
t49 = t55 ^ 2;
t51 = t58 ^ 2;
t76 = t49 + t51;
t48 = t53 ^ 2;
t50 = t56 ^ 2;
t34 = t50 + t48;
t75 = t25 * qJ(4);
t74 = t38 * qJ(4);
t73 = -0.2e1 * t84;
t72 = 0.2e1 * t84;
t15 = -t54 * t30 - t57 * t70;
t71 = t15 ^ 2 + t17 ^ 2;
t42 = pkin(3) + t86;
t47 = -pkin(3) + t89;
t22 = t34 * t47;
t69 = -t25 * pkin(3) + t27 * qJ(4) - t44;
t36 = -pkin(4) - t42;
t5 = t27 * pkin(5) + t89 * t25 + t69;
t8 = -t27 * qJ(5) + t15;
t3 = t56 * t5 - t53 * t8;
t4 = t53 * t5 + t56 * t8;
t68 = t3 * t56 + t4 * t53;
t1 = -t3 * t53 + t4 * t56;
t33 = -pkin(9) + t36;
t67 = t25 * t35 - t27 * t33;
t66 = t25 * t52 - t27 * t47;
t65 = 0.2e1 * t15 * t27 - 0.2e1 * t17 * t25;
t62 = 0.2e1 * pkin(3);
t61 = qJ(4) ^ 2;
t60 = 0.2e1 * qJ(4);
t59 = -pkin(3) - pkin(4);
t40 = t60 + t87;
t37 = 0.2e1 * t80;
t31 = 0.2e1 * t38;
t19 = t53 * t79;
t18 = t34 * t33;
t13 = (t48 - t50) * t25;
t7 = t9 * t56;
t6 = -t25 * pkin(4) + t69;
t2 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t49, t55 * t90, 0, t51, 0, 0, pkin(1) * t90, -0.2e1 * pkin(1) * t55, 0.2e1 * t76 * pkin(7), t76 * pkin(7) ^ 2 + pkin(1) ^ 2, t24, t73, 0, t23, 0, 0, t25 * t93, t27 * t93, t65, t44 ^ 2 + t71, t24, 0, t72, 0, 0, t23, -t69 * t94, t65, t69 * t97, t69 ^ 2 + t71, t23, t73, 0, t24, 0, 0, t6 * t97, t6 * t94, 0.2e1 * t9 * t25 - 0.2e1 * t8 * t27, t6 ^ 2 + t8 ^ 2 + t96, t50 * t23, -0.2e1 * t23 * t80, t56 * t72, t48 * t23, t53 * t73, t24, 0.2e1 * t3 * t27 + 0.2e1 * t9 * t82, -0.2e1 * t4 * t27 + 0.2e1 * t9 * t79, -0.2e1 * t68 * t25, t3 ^ 2 + t4 ^ 2 + t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t58, 0, -t55 * pkin(7), -t58 * pkin(7), 0, 0, 0, 0, t27, 0, -t25, 0, -t15, -t17 (-t25 * t54 - t27 * t57) * pkin(2) (-t15 * t57 + t17 * t54) * pkin(2), 0, t27, 0, 0, t25, 0, -t15, -t42 * t27 - t83, t17, -t15 * t42 + t17 * t38, 0, 0, -t25, 0, t27, 0, t9, t8, -t36 * t27 + t83, t8 * t36 + t9 * t38, -t19, t13, -t81, t19, -t78, 0, t53 * t67 + t7, t56 * t67 - t85, -t1, t1 * t33 + t9 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t86, -0.2e1 * t87, 0 (t54 ^ 2 + t57 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t42, 0, t31, t42 ^ 2 + t95, 0, 0, 0, 0, 0, 1, t31, 0.2e1 * t36, 0, t36 ^ 2 + t95, t48, t37, 0, t50, 0, 0, t35 * t91, t35 * t92, -0.2e1 * t18, t34 * t33 ^ 2 + t35 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t25, 0, -t15, -t17, 0, 0, 0, t27, 0, 0, t25, 0, -t15, -pkin(3) * t27 - t75, t17, -t15 * pkin(3) + t17 * qJ(4), 0, 0, -t25, 0, t27, 0, t9, t8, -t59 * t27 + t75, t9 * qJ(4) + t8 * t59, -t19, t13, -t81, t19, -t78, 0, t53 * t66 + t7, t56 * t66 - t85, -t1, t1 * t47 + t9 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t86, -t87, 0, 0, 0, 0, 0, 1, 0, 0, t62 + t86, 0, t40, t42 * pkin(3) + t74, 0, 0, 0, 0, 0, 1, t40, -0.2e1 * pkin(3) - 0.2e1 * pkin(4) - t86, 0, t36 * t59 + t74, t48, t37, 0, t50, 0, 0, t77 * t56, -t77 * t53 (-t33 - t47) * t34, t22 * t33 + t35 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t62, 0, t60, pkin(3) ^ 2 + t61, 0, 0, 0, 0, 0, 1, t60, 0.2e1 * t59, 0, t59 ^ 2 + t61, t48, t37, 0, t50, 0, 0, t52 * t91, t52 * t92, -0.2e1 * t22, t34 * t47 ^ 2 + t52 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, t15, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t8, 0, 0, 0, 0, 0, 0, -t81, -t78, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t42, 0, 0, 0, 0, 0, 0, 0, 1, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 1, 0, t59, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t25, 0, t6, 0, 0, 0, 0, 0, 0, t78, -t81, -t34 * t25, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, -t82, t27, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, 0, -t56, 0, -t53 * t33, -t56 * t33, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, 0, -t56, 0, -t53 * t47, -t56 * t47, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t56, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t2;
