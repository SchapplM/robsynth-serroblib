% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:40
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPRP4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPRP4_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:21:49
% EndTime: 2019-05-06 09:21:55
% DurationCPUTime: 1.79s
% Computational Cost: add. (930->142), mult. (1876->257), div. (0->0), fcn. (1963->6), ass. (0->98)
t70 = sin(pkin(9));
t66 = t70 ^ 2;
t71 = cos(pkin(9));
t67 = t71 ^ 2;
t122 = t66 + t67;
t72 = sin(qJ(5));
t74 = cos(qJ(5));
t43 = t74 * t70 - t72 * t71;
t73 = sin(qJ(2));
t31 = t43 * t73;
t121 = t31 ^ 2;
t41 = t72 * t70 + t74 * t71;
t120 = t41 ^ 2;
t119 = 0.2e1 * t41;
t118 = -0.2e1 * t71;
t117 = 0.2e1 * t73;
t75 = cos(qJ(2));
t116 = 0.2e1 * t75;
t115 = pkin(3) + pkin(4);
t114 = pkin(2) * t70;
t68 = t73 ^ 2;
t113 = t68 * pkin(7);
t112 = t73 * pkin(7);
t111 = t75 * pkin(5);
t96 = -pkin(8) + qJ(3);
t47 = t96 * t71;
t87 = t96 * t70;
t18 = t72 * t47 - t74 * t87;
t110 = t18 * t75;
t20 = t74 * t47 + t72 * t87;
t109 = t20 * t75;
t108 = t31 * t41;
t33 = t41 * t73;
t107 = t33 * t31;
t106 = t43 * t41;
t105 = t70 * t71;
t57 = t70 * t73;
t104 = t70 * t75;
t60 = t71 * t73;
t103 = t71 * t75;
t101 = t72 * t75;
t100 = t73 * t75;
t98 = t75 * t31;
t97 = t75 * t41;
t46 = -t75 * pkin(2) - t73 * qJ(3) - pkin(1);
t54 = pkin(7) * t104;
t65 = t75 * pkin(3);
t12 = t75 * pkin(4) + t54 + t65 + (-pkin(8) * t73 - t46) * t71;
t27 = pkin(7) * t103 + t70 * t46;
t23 = -t75 * qJ(4) + t27;
t14 = pkin(8) * t57 + t23;
t4 = t72 * t12 + t74 * t14;
t95 = t122 * qJ(3) ^ 2;
t94 = qJ(3) * t75;
t93 = t70 * qJ(3);
t92 = t75 * qJ(6);
t91 = t18 ^ 2 + t20 ^ 2;
t90 = t68 * t105;
t89 = t70 * t100;
t88 = t18 * t33 + t20 * t31;
t86 = t70 * qJ(4) + pkin(2);
t85 = -t74 * t12 + t72 * t14;
t84 = -t18 * t74 + t20 * t72;
t83 = t72 * t31 - t74 * t33;
t82 = -t72 * t41 - t74 * t43;
t26 = t71 * t46 - t54;
t24 = -t26 + t65;
t81 = t23 * t71 + t24 * t70;
t80 = -t26 * t70 + t27 * t71;
t79 = -t43 * t31 + t33 * t41;
t78 = 0.2e1 * t18 * t43 - 0.2e1 * t20 * t41;
t36 = t115 * t71 + t86;
t52 = qJ(4) * t60;
t21 = -t52 - (-t115 * t70 - pkin(7)) * t73;
t77 = pkin(7) ^ 2;
t69 = t75 ^ 2;
t64 = t68 * t77;
t61 = t74 * t75;
t59 = t67 * t68;
t56 = t66 * t68;
t53 = t72 ^ 2 + t74 ^ 2;
t51 = t75 * t93;
t49 = t70 * t60;
t48 = t100 * t118;
t45 = -t71 * pkin(3) - t86;
t44 = 0.2e1 * t122 * qJ(3);
t40 = (t66 - t67) * t73;
t38 = t43 ^ 2;
t35 = t43 * t75;
t30 = t33 ^ 2;
t29 = -t52 + (pkin(3) * t70 + pkin(7)) * t73;
t25 = t33 * t116;
t15 = t33 * t43;
t8 = t41 * pkin(5) - t43 * qJ(6) + t36;
t5 = t31 * pkin(5) + t33 * qJ(6) + t21;
t2 = t85 - t111;
t1 = t92 + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t68, 0.2e1 * t100, 0, t69, 0, 0, pkin(1) * t116, -0.2e1 * pkin(1) * t73, 0.2e1 * (t68 + t69) * pkin(7), pkin(1) ^ 2 + t69 * t77 + t64, t59, -0.2e1 * t90, t48, t56, 0.2e1 * t89, t69, 0.2e1 * t70 * t113 - 0.2e1 * t26 * t75, 0.2e1 * t71 * t113 + 0.2e1 * t27 * t75 (-t26 * t71 - t27 * t70) * t117, t26 ^ 2 + t27 ^ 2 + t64, t59, t48, 0.2e1 * t90, t69, -0.2e1 * t89, t56, 0.2e1 * t24 * t75 + 0.2e1 * t29 * t57 (-t23 * t70 + t24 * t71) * t117, -0.2e1 * t23 * t75 - 0.2e1 * t29 * t60, t23 ^ 2 + t24 ^ 2 + t29 ^ 2, t30, 0.2e1 * t107, t25, t121, 0.2e1 * t98, t69, 0.2e1 * t21 * t31 - 0.2e1 * t75 * t85, -0.2e1 * t21 * t33 - 0.2e1 * t4 * t75, 0.2e1 * t4 * t31 + 0.2e1 * t33 * t85, t21 ^ 2 + t4 ^ 2 + t85 ^ 2, t30, t25, -0.2e1 * t107, t69, -0.2e1 * t98, t121, -0.2e1 * t2 * t75 + 0.2e1 * t5 * t31, 0.2e1 * t1 * t31 + 0.2e1 * t2 * t33, 0.2e1 * t1 * t75 + 0.2e1 * t5 * t33, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t75, 0, -t112, -t75 * pkin(7), 0, 0, t49, -t40, -t104, -t49, -t103, 0, t51 + (-pkin(7) * t71 - t114) * t73, pkin(7) * t57 + (-pkin(2) * t73 + t94) * t71, t80, -pkin(2) * t112 + t80 * qJ(3), t49, -t104, t40, 0, t103, -t49, -t29 * t71 + t45 * t57 + t51, t81, -t29 * t70 + (-t45 * t73 - t94) * t71, t81 * qJ(3) + t29 * t45, t15, -t79, t35, -t108, -t97, 0, -t21 * t41 - t36 * t31 - t110, -t21 * t43 + t36 * t33 - t109, -t4 * t41 + t43 * t85 + t88, t18 * t85 + t4 * t20 - t21 * t36, t15, t35, t79, 0, t97, -t108, -t8 * t31 - t5 * t41 - t110, -t1 * t41 + t2 * t43 + t88, -t8 * t33 + t5 * t43 + t109, t1 * t20 + t2 * t18 - t5 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t66, 0.2e1 * t105, 0, t67, 0, 0, 0.2e1 * pkin(2) * t71, -0.2e1 * t114, t44, pkin(2) ^ 2 + t95, t66, 0, -0.2e1 * t105, 0, 0, t67, t45 * t118, t44, -0.2e1 * t45 * t70, t45 ^ 2 + t95, t38, -0.2e1 * t106, 0, t120, 0, 0, t36 * t119, 0.2e1 * t36 * t43, t78, t36 ^ 2 + t91, t38, 0, 0.2e1 * t106, 0, 0, t120, t8 * t119, t78, -0.2e1 * t8 * t43, t8 ^ 2 + t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t60, 0, t112, 0, 0, 0, 0, 0, 0, t57, 0, -t60, t29, 0, 0, 0, 0, 0, 0, t31, -t33, 0, t21, 0, 0, 0, 0, 0, 0, t31, 0, t33, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t70, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t71, 0, -t70, t45, 0, 0, 0, 0, 0, 0, -t41, -t43, 0, -t36, 0, 0, 0, 0, 0, 0, -t41, 0, t43, -t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, t60, 0, t24, 0, 0, 0, 0, 0, 0, t61, -t101, t83, t4 * t72 - t74 * t85, 0, 0, 0, 0, 0, 0, t61, t83, t101, t1 * t72 - t2 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t93, 0, 0, 0, 0, 0, 0, 0, 0, t82, t84, 0, 0, 0, 0, 0, 0, 0, t82, 0, t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, t31, t75, -t85, -t4, 0, 0, 0, t33, 0, t75, -t31, 0, -t85 + 0.2e1 * t111, -t33 * pkin(5) + t31 * qJ(6), 0.2e1 * t92 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, -t41, 0, -t18, -t20, 0, 0, 0, t43, 0, 0, t41, 0, -t18, -pkin(5) * t43 - t41 * qJ(6), t20, -t18 * pkin(5) + t20 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t72, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t72, t74 * pkin(5) + t72 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, t33, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
