% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d5,d6,theta1,theta3,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPPRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPPRR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPPRR1_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 21:42:07
% EndTime: 2019-05-04 21:42:10
% DurationCPUTime: 0.98s
% Computational Cost: add. (742->98), mult. (1644->174), div. (0->0), fcn. (2026->12), ass. (0->77)
t48 = cos(pkin(12));
t52 = sin(qJ(5));
t45 = sin(pkin(12));
t77 = cos(qJ(5));
t64 = t77 * t45;
t32 = t52 * t48 + t64;
t90 = -0.2e1 * t32;
t46 = sin(pkin(11));
t47 = sin(pkin(6));
t49 = cos(pkin(11));
t53 = sin(qJ(2));
t55 = cos(qJ(2));
t19 = (t46 * t55 + t49 * t53) * t47;
t50 = cos(pkin(6));
t14 = -t19 * t45 + t50 * t48;
t15 = t19 * t48 + t50 * t45;
t5 = -t77 * t14 + t52 * t15;
t89 = t5 ^ 2;
t82 = t46 * pkin(2);
t36 = qJ(4) + t82;
t78 = pkin(8) + t36;
t26 = t78 * t48;
t9 = t52 * t26 + t78 * t64;
t88 = t9 ^ 2;
t74 = t47 * t55;
t75 = t47 * t53;
t17 = t46 * t75 - t49 * t74;
t16 = t17 ^ 2;
t71 = t52 * t45;
t30 = -t77 * t48 + t71;
t87 = t30 ^ 2;
t81 = t49 * pkin(2);
t38 = -pkin(3) - t81;
t33 = -t48 * pkin(4) + t38;
t86 = 0.2e1 * t33;
t85 = 0.2e1 * t45;
t84 = t5 * t9;
t83 = t30 * pkin(5);
t80 = t5 * t30;
t79 = t9 * t30;
t51 = sin(qJ(6));
t43 = t51 ^ 2;
t76 = t43 * t32;
t22 = t51 * t30;
t73 = t51 * t32;
t54 = cos(qJ(6));
t72 = t51 * t54;
t70 = t54 * t32;
t39 = t45 ^ 2;
t41 = t48 ^ 2;
t69 = t39 + t41;
t44 = t54 ^ 2;
t68 = t43 + t44;
t67 = t30 * t90;
t66 = t51 * t70;
t65 = t68 * pkin(9);
t63 = -pkin(5) * t32 - pkin(9) * t30;
t7 = t52 * t14 + t77 * t15;
t1 = t17 * t54 - t51 * t7;
t2 = t17 * t51 + t54 * t7;
t62 = t1 * t54 + t2 * t51;
t61 = -t1 * t51 + t2 * t54;
t11 = t77 * t26 - t78 * t71;
t8 = -t32 * pkin(9) + t33 + t83;
t3 = -t51 * t11 + t54 * t8;
t4 = t54 * t11 + t51 * t8;
t60 = t3 * t54 + t4 * t51;
t59 = -t3 * t51 + t4 * t54;
t58 = -t14 * t45 + t15 * t48;
t42 = t50 ^ 2;
t29 = t32 ^ 2;
t25 = t54 * t30;
t24 = t44 * t32;
t23 = t44 * t29;
t21 = t43 * t29;
t12 = -t24 - t76;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42 + (t53 ^ 2 + t55 ^ 2) * t47 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 ^ 2 + t16 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 ^ 2 + t15 ^ 2 + t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 ^ 2 + t16 + t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 ^ 2 + t2 ^ 2 + t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t75, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0 (-t17 * t49 + t19 * t46) * pkin(2), 0, 0, 0, 0, 0, 0, -t17 * t48, t17 * t45, t58, t17 * t38 + t36 * t58, 0, 0, 0, 0, 0, 0, t17 * t30, t17 * t32, -t7 * t30 + t5 * t32, t7 * t11 + t17 * t33 + t84, 0, 0, 0, 0, 0, 0, t1 * t30 + t5 * t73, -t2 * t30 + t5 * t70, -t62 * t32, t1 * t3 + t2 * t4 + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t81, -0.2e1 * t82, 0 (t46 ^ 2 + t49 ^ 2) * pkin(2) ^ 2, t39, t48 * t85, 0, t41, 0, 0, -0.2e1 * t38 * t48, t38 * t85, 0.2e1 * t69 * t36, t36 ^ 2 * t69 + t38 ^ 2, t29, t67, 0, t87, 0, 0, t30 * t86, t32 * t86, -0.2e1 * t11 * t30 + 0.2e1 * t9 * t32, t11 ^ 2 + t33 ^ 2 + t88, t23, -0.2e1 * t29 * t72, 0.2e1 * t30 * t70, t21, t51 * t67, t87, 0.2e1 * t3 * t30 + 0.2e1 * t73 * t9, -0.2e1 * t4 * t30 + 0.2e1 * t70 * t9, t60 * t90, t3 ^ 2 + t4 ^ 2 + t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 * t48 + t15 * t45, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 * t32 + t80, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 * t61 + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11 * t32 + t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 * t59 + t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29 + t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23 + t21 + t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, t45, 0, t38, 0, 0, 0, 0, 0, 0, t30, t32, 0, t33, 0, 0, 0, 0, 0, 0, t25, -t22, t12, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t5, -t7, 0, 0, 0, 0, 0, 0, 0, 0, -t5 * t54, t5 * t51, t61, -t5 * pkin(5) + pkin(9) * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t30, 0, -t9, -t11, 0, 0, t66, t24 - t76, t22, -t66, t25, 0, t51 * t63 - t9 * t54, t9 * t51 + t54 * t63, t59, -t9 * pkin(5) + pkin(9) * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, -t32, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t22, -t12, t32 * t65 - t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t43, 0.2e1 * t72, 0, t44, 0, 0, 0.2e1 * pkin(5) * t54, -0.2e1 * pkin(5) * t51, 0.2e1 * t65, pkin(9) ^ 2 * t68 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, -t73, t30, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, -t70, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t51, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, t54, 0, -t51 * pkin(9), -t54 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
