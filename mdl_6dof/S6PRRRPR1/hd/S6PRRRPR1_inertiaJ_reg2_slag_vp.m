% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRPR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR1_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 07:01:14
% EndTime: 2019-05-05 07:01:20
% DurationCPUTime: 1.66s
% Computational Cost: add. (1620->143), mult. (3365->261), div. (0->0), fcn. (4164->12), ass. (0->95)
t61 = sin(pkin(12));
t102 = t61 * pkin(4);
t50 = pkin(10) + t102;
t65 = sin(qJ(6));
t57 = t65 ^ 2;
t69 = cos(qJ(6));
t59 = t69 ^ 2;
t88 = t57 + t59;
t89 = t88 * t50;
t66 = sin(qJ(4));
t67 = sin(qJ(3));
t70 = cos(qJ(4));
t71 = cos(qJ(3));
t42 = -t66 * t67 + t70 * t71;
t43 = t66 * t71 + t70 * t67;
t63 = cos(pkin(12));
t28 = t61 * t42 + t63 * t43;
t112 = -0.2e1 * t28;
t103 = -pkin(9) - pkin(8);
t83 = t103 * t67;
t84 = t103 * t71;
t30 = t66 * t83 - t70 * t84;
t19 = t42 * qJ(5) + t30;
t29 = t66 * t84 + t70 * t83;
t76 = -t43 * qJ(5) + t29;
t10 = t61 * t19 - t63 * t76;
t111 = t10 ^ 2;
t64 = cos(pkin(6));
t62 = sin(pkin(6));
t68 = sin(qJ(2));
t96 = t62 * t68;
t40 = t64 * t71 - t67 * t96;
t41 = t64 * t67 + t71 * t96;
t20 = t70 * t40 - t66 * t41;
t21 = t66 * t40 + t70 * t41;
t13 = -t63 * t20 + t61 * t21;
t110 = t13 ^ 2;
t26 = -t63 * t42 + t61 * t43;
t109 = t26 ^ 2;
t54 = -t71 * pkin(3) - pkin(2);
t33 = -t42 * pkin(4) + t54;
t108 = 0.2e1 * t33;
t107 = 0.2e1 * t43;
t106 = 0.2e1 * t65;
t105 = -0.2e1 * t69;
t104 = 0.2e1 * t71;
t101 = t63 * pkin(4);
t100 = t66 * pkin(3);
t99 = t10 * t69;
t98 = t13 * t10;
t97 = t13 * t69;
t72 = cos(qJ(2));
t95 = t62 * t72;
t23 = t65 * t26;
t94 = t65 * t28;
t93 = t65 * t69;
t92 = t69 * t28;
t55 = t70 * pkin(3);
t53 = t55 + pkin(4);
t85 = t63 * t100;
t38 = t61 * t53 + t85;
t36 = pkin(10) + t38;
t91 = t88 * t36;
t82 = t61 * t100 - t63 * t53;
t35 = -pkin(5) + t82;
t51 = -pkin(5) - t101;
t90 = t35 + t51;
t58 = t67 ^ 2;
t60 = t71 ^ 2;
t87 = t58 + t60;
t86 = t26 * t112;
t12 = t63 * t19 + t61 * t76;
t9 = t26 * pkin(5) - t28 * pkin(10) + t33;
t3 = -t65 * t12 + t69 * t9;
t4 = t69 * t12 + t65 * t9;
t81 = t3 * t69 + t4 * t65;
t1 = -t3 * t65 + t4 * t69;
t15 = t61 * t20 + t63 * t21;
t5 = -t65 * t15 - t69 * t95;
t6 = t69 * t15 - t65 * t95;
t80 = t5 * t69 + t6 * t65;
t2 = -t5 * t65 + t6 * t69;
t79 = -t26 * t36 + t28 * t35;
t78 = -t26 * t50 + t28 * t51;
t77 = -t40 * t67 + t41 * t71;
t56 = t62 ^ 2;
t49 = t56 * t72 ^ 2;
t48 = 0.2e1 * t93;
t25 = t28 ^ 2;
t24 = t69 * t26;
t22 = t65 * t92;
t16 = (-t57 + t59) * t28;
t8 = t13 * t65;
t7 = t10 * t65;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56 * t68 ^ 2 + t64 ^ 2 + t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 ^ 2 + t41 ^ 2 + t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 ^ 2 + t21 ^ 2 + t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15 ^ 2 + t110 + t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 ^ 2 + t6 ^ 2 + t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t96, 0, 0, 0, 0, 0, 0, 0, 0, t71 * t95, -t67 * t95, t77, pkin(2) * t95 + t77 * pkin(8), 0, 0, 0, 0, 0, 0, t42 * t95, -t43 * t95, -t20 * t43 + t21 * t42, t20 * t29 + t21 * t30 - t54 * t95, 0, 0, 0, 0, 0, 0, -t26 * t95, -t28 * t95, t13 * t28 - t15 * t26, t15 * t12 - t33 * t95 + t98, 0, 0, 0, 0, 0, 0, t13 * t94 + t5 * t26, t13 * t92 - t26 * t6, -t80 * t28, t3 * t5 + t4 * t6 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t58, t67 * t104, 0, t60, 0, 0, pkin(2) * t104, -0.2e1 * pkin(2) * t67, 0.2e1 * t87 * pkin(8), t87 * pkin(8) ^ 2 + pkin(2) ^ 2, t43 ^ 2, t42 * t107, 0, t42 ^ 2, 0, 0, -0.2e1 * t54 * t42, t54 * t107, -0.2e1 * t29 * t43 + 0.2e1 * t30 * t42, t29 ^ 2 + t30 ^ 2 + t54 ^ 2, t25, t86, 0, t109, 0, 0, t26 * t108, t28 * t108, 0.2e1 * t10 * t28 - 0.2e1 * t12 * t26, t12 ^ 2 + t33 ^ 2 + t111, t59 * t25, -0.2e1 * t25 * t93, 0.2e1 * t26 * t92, t57 * t25, t65 * t86, t109, 0.2e1 * t10 * t94 + 0.2e1 * t26 * t3, 0.2e1 * t10 * t92 - 0.2e1 * t4 * t26, t81 * t112, t3 ^ 2 + t4 ^ 2 + t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t41, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t21, 0 (t20 * t70 + t21 * t66) * pkin(3), 0, 0, 0, 0, 0, 0, -t13, -t15, 0, t13 * t82 + t15 * t38, 0, 0, 0, 0, 0, 0, -t97, t8, t2, t13 * t35 + t2 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t71, 0, -t67 * pkin(8), -t71 * pkin(8), 0, 0, 0, 0, t43, 0, t42, 0, t29, -t30 (t42 * t66 - t43 * t70) * pkin(3) (t29 * t70 + t30 * t66) * pkin(3), 0, 0, t28, 0, -t26, 0, -t10, -t12, -t26 * t38 + t28 * t82, t10 * t82 + t12 * t38, t22, t16, t23, -t22, t24, 0, t79 * t65 - t99, t79 * t69 + t7, t1, t1 * t36 + t10 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t55, -0.2e1 * t100, 0 (t66 ^ 2 + t70 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t82, -0.2e1 * t38, 0, t38 ^ 2 + t82 ^ 2, t57, t48, 0, t59, 0, 0, t35 * t105, t35 * t106, 0.2e1 * t91, t88 * t36 ^ 2 + t35 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t21, 0, 0, 0, 0, 0, 0, 0, 0, -t13, -t15, 0 (-t13 * t63 + t15 * t61) * pkin(4), 0, 0, 0, 0, 0, 0, -t97, t8, t2, t13 * t51 + t2 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, t42, 0, t29, -t30, 0, 0, 0, 0, t28, 0, -t26, 0, -t10, -t12 (-t26 * t61 - t28 * t63) * pkin(4) (-t10 * t63 + t12 * t61) * pkin(4), t22, t16, t23, -t22, t24, 0, t78 * t65 - t99, t78 * t69 + t7, t1, t1 * t50 + t10 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t55, -t100, 0, 0, 0, 0, 0, 0, 0, 1, -t82 + t101, -t85 + (-pkin(4) - t53) * t61, 0 (t38 * t61 - t63 * t82) * pkin(4), t57, t48, 0, t59, 0, 0, -t90 * t69, t90 * t65, t89 + t91, t35 * t51 + t36 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t101, -0.2e1 * t102, 0 (t61 ^ 2 + t63 ^ 2) * pkin(4) ^ 2, t57, t48, 0, t59, 0, 0, t51 * t105, t51 * t106, 0.2e1 * t89, t88 * t50 ^ 2 + t51 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, t28, 0, t33, 0, 0, 0, 0, 0, 0, t24, -t23, -t88 * t28, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t94, t26, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t65 * t36, -t69 * t36, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t65 * t50, -t69 * t50, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t65, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
