% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR8_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR8_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR8_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:21:37
% EndTime: 2019-05-05 19:21:43
% DurationCPUTime: 1.62s
% Computational Cost: add. (1439->144), mult. (2517->248), div. (0->0), fcn. (2982->8), ass. (0->84)
t57 = sin(pkin(10));
t58 = cos(pkin(10));
t61 = sin(qJ(3));
t64 = cos(qJ(3));
t34 = -t57 * t61 + t58 * t64;
t106 = -0.2e1 * t34;
t32 = t57 * t64 + t58 * t61;
t105 = (t32 * t57 + t34 * t58) * pkin(3);
t102 = t34 ^ 2;
t29 = t32 ^ 2;
t104 = t29 + t102;
t65 = -pkin(1) - pkin(7);
t79 = -qJ(4) + t65;
t42 = t79 * t61;
t74 = t79 * t64;
t19 = t57 * t42 - t58 * t74;
t103 = t19 ^ 2;
t101 = 0.2e1 * t32;
t95 = t58 * pkin(3);
t48 = -pkin(4) - t95;
t63 = cos(qJ(5));
t43 = -t63 * pkin(5) + t48;
t100 = 0.2e1 * t43;
t49 = t61 * pkin(3) + qJ(2);
t99 = 0.2e1 * t49;
t98 = 0.2e1 * qJ(2);
t97 = t32 * pkin(5);
t96 = t57 * pkin(3);
t59 = sin(qJ(6));
t94 = t59 * pkin(5);
t62 = cos(qJ(6));
t93 = t62 * pkin(5);
t18 = t32 * pkin(4) - t34 * pkin(8) + t49;
t60 = sin(qJ(5));
t21 = t58 * t42 + t57 * t74;
t82 = t63 * t21;
t5 = t82 + (-pkin(9) * t34 + t18) * t60;
t92 = t62 * t5;
t47 = pkin(8) + t96;
t91 = pkin(9) + t47;
t81 = t63 * t34;
t84 = t60 * t34;
t14 = -t59 * t84 + t62 * t81;
t38 = t59 * t60 - t62 * t63;
t90 = t14 * t38;
t89 = t19 * t34;
t40 = t59 * t63 + t62 * t60;
t88 = t34 * t40;
t87 = t34 * t48;
t86 = t40 * t32;
t85 = t60 * t32;
t83 = t60 * t63;
t25 = t63 * t32;
t52 = t60 ^ 2;
t54 = t63 ^ 2;
t80 = t52 + t54;
t53 = t61 ^ 2;
t55 = t64 ^ 2;
t44 = t53 + t55;
t78 = t32 * t106;
t77 = t60 * t81;
t6 = t63 * t18 - t60 * t21;
t4 = -pkin(9) * t81 + t6 + t97;
t1 = t62 * t4 - t59 * t5;
t75 = t80 * t47;
t7 = t60 * t18 + t82;
t73 = t6 * t63 + t7 * t60;
t72 = -t6 * t60 + t7 * t63;
t71 = -t21 * t32 + t89;
t70 = -t32 * t47 + t87;
t66 = qJ(2) ^ 2;
t41 = t44 * t65;
t37 = t40 ^ 2;
t36 = t38 ^ 2;
t28 = t91 * t63;
t27 = t91 * t60;
t22 = t38 * t32;
t17 = -t59 * t27 + t62 * t28;
t16 = -t62 * t27 - t59 * t28;
t13 = t62 * t25 - t59 * t85;
t9 = pkin(5) * t84 + t19;
t8 = t40 * t88;
t2 = t59 * t4 + t92;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t98 (pkin(1) ^ 2) + t66, t55, -0.2e1 * t64 * t61, 0, t53, 0, 0, t61 * t98, t64 * t98, -0.2e1 * t41, t44 * t65 ^ 2 + t66, t102, t78, 0, t29, 0, 0, t32 * t99, t34 * t99, 0.2e1 * t71, t21 ^ 2 + t49 ^ 2 + t103, t54 * t102, -0.2e1 * t102 * t83, t81 * t101, t52 * t102, t60 * t78, t29, 0.2e1 * t19 * t84 + 0.2e1 * t6 * t32, 0.2e1 * t19 * t81 - 0.2e1 * t7 * t32, t73 * t106, t6 ^ 2 + t7 ^ 2 + t103, t14 ^ 2, -0.2e1 * t14 * t88, t14 * t101, t88 ^ 2, -t88 * t101, t29, 0.2e1 * t1 * t32 + 0.2e1 * t88 * t9, 0.2e1 * t9 * t14 - 0.2e1 * t2 * t32, -0.2e1 * t1 * t14 - 0.2e1 * t2 * t88, t1 ^ 2 + t2 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t44, t41, 0, 0, 0, 0, 0, 0, 0, 0, -t104, -t71, 0, 0, 0, 0, 0, 0, -t104 * t60, -t104 * t63, 0, t72 * t32 - t89, 0, 0, 0, 0, 0, 0, -t32 * t86 - t34 * t88, -t13 * t32 - t34 * t14, -t13 * t88 + t14 * t86, -t1 * t86 + t2 * t13 - t9 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80 * t29 + t102, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 ^ 2 + t86 ^ 2 + t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, -t61, 0, t64 * t65, -t61 * t65, 0, 0, 0, 0, t34, 0, -t32, 0, -t19, -t21, -t105 (-t19 * t58 + t21 * t57) * pkin(3), t77 (-t52 + t54) * t34, t85, -t77, t25, 0, -t19 * t63 + t70 * t60, t19 * t60 + t70 * t63, t72, t19 * t48 + t72 * t47, t14 * t40, -t8 - t90, t86, t88 * t38, -t22, 0, t16 * t32 + t9 * t38 + t43 * t88, t43 * t14 - t17 * t32 + t9 * t40, -t1 * t40 - t16 * t14 - t17 * t88 - t2 * t38, t1 * t16 + t2 * t17 + t9 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t61, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t32, 0, t105, 0, 0, 0, 0, 0, 0, t81, -t84, t80 * t32, t32 * t75 - t87, 0, 0, 0, 0, 0, 0, -t34 * t38, -t88, -t13 * t38 + t40 * t86, t13 * t17 - t16 * t86 - t34 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t95, -0.2e1 * t96, 0 (t57 ^ 2 + t58 ^ 2) * pkin(3) ^ 2, t52, 0.2e1 * t83, 0, t54, 0, 0, -0.2e1 * t48 * t63, 0.2e1 * t48 * t60, 0.2e1 * t75, t80 * t47 ^ 2 + t48 ^ 2, t37, -0.2e1 * t40 * t38, 0, t36, 0, 0, t38 * t100, t40 * t100, -0.2e1 * t16 * t40 - 0.2e1 * t17 * t38, t16 ^ 2 + t17 ^ 2 + t43 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, t34, 0, t49, 0, 0, 0, 0, 0, 0, t25, -t85, -t80 * t34, t73, 0, 0, 0, 0, 0, 0, -t22, -t86, -t8 + t90, -t1 * t38 + t2 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * t40 + t38 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16 * t38 + t17 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37 + t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, -t84, t32, t6, -t7, 0, 0, 0, 0, t14, 0, -t88, t32, t32 * t93 + t1, -t92 + (-t4 - t97) * t59 (-t14 * t62 - t59 * t88) * pkin(5) (t1 * t62 + t2 * t59) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, -t25, 0, 0, 0, 0, 0, 0, 0, 0, -t86, -t13, 0 (t13 * t59 - t62 * t86) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, t63, 0, -t60 * t47, -t63 * t47, 0, 0, 0, 0, t40, 0, -t38, 0, t16, -t17 (-t38 * t59 - t40 * t62) * pkin(5) (t16 * t62 + t17 * t59) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, -t60, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t40, 0 (-t38 * t62 + t40 * t59) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t93, -0.2e1 * t94, 0 (t59 ^ 2 + t62 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, -t88, t32, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t86, -t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, -t38, 0, t16, -t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t40, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t93, -t94, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
