% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:51
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:33:03
% EndTime: 2019-05-06 17:33:10
% DurationCPUTime: 1.86s
% Computational Cost: add. (2006->162), mult. (3850->279), div. (0->0), fcn. (4554->8), ass. (0->102)
t79 = sin(pkin(10));
t80 = cos(pkin(10));
t83 = sin(qJ(2));
t86 = cos(qJ(2));
t56 = t79 * t86 + t80 * t83;
t119 = -0.2e1 * t56;
t100 = -qJ(3) - pkin(7);
t64 = t100 * t86;
t95 = t100 * t83;
t34 = -t64 * t79 - t80 * t95;
t118 = t34 ^ 2;
t54 = t79 * t83 - t80 * t86;
t52 = t54 ^ 2;
t81 = sin(qJ(5));
t82 = sin(qJ(4));
t84 = cos(qJ(5));
t85 = cos(qJ(4));
t60 = t81 * t82 - t84 * t85;
t112 = t60 * pkin(5);
t110 = t80 * pkin(2);
t68 = -pkin(3) - t110;
t63 = -pkin(4) * t85 + t68;
t41 = t63 + t112;
t117 = 0.2e1 * t41;
t116 = 0.2e1 * t54;
t115 = 0.2e1 * t63;
t71 = -pkin(2) * t86 - pkin(1);
t114 = 0.2e1 * t71;
t113 = 0.2e1 * t86;
t111 = t79 * pkin(2);
t109 = t81 * pkin(4);
t74 = t84 * pkin(4);
t67 = pkin(8) + t111;
t108 = pkin(9) + t67;
t101 = t85 * t56;
t104 = t82 * t56;
t28 = t84 * t101 - t81 * t104;
t107 = t28 * t60;
t62 = t81 * t85 + t82 * t84;
t106 = t62 * t54;
t105 = t82 * t54;
t103 = t82 * t85;
t36 = -t80 * t64 + t79 * t95;
t102 = t85 * t36;
t75 = t82 ^ 2;
t77 = t85 ^ 2;
t99 = t75 + t77;
t76 = t83 ^ 2;
t78 = t86 ^ 2;
t98 = t76 + t78;
t97 = t54 * t119;
t96 = t82 * t101;
t32 = pkin(3) * t54 - pkin(8) * t56 + t71;
t12 = t85 * t32 - t36 * t82;
t8 = pkin(4) * t54 - pkin(9) * t101 + t12;
t9 = t102 + (-pkin(9) * t56 + t32) * t82;
t3 = t84 * t8 - t81 * t9;
t50 = t108 * t82;
t51 = t108 * t85;
t30 = -t84 * t50 - t51 * t81;
t22 = pkin(4) * t104 + t34;
t4 = t8 * t81 + t84 * t9;
t13 = t32 * t82 + t102;
t94 = t12 * t85 + t13 * t82;
t93 = -t12 * t82 + t13 * t85;
t31 = -t50 * t81 + t51 * t84;
t92 = -t54 * t67 + t56 * t68;
t91 = -qJ(6) * t28 + t3;
t49 = t54 * pkin(5);
t1 = t49 + t91;
t26 = t62 * t56;
t2 = -qJ(6) * t26 + t4;
t89 = pkin(4) ^ 2;
t87 = 0.2e1 * pkin(5);
t73 = t81 ^ 2 * t89;
t72 = -0.2e1 * t109;
t70 = t74 + pkin(5);
t58 = t62 ^ 2;
t57 = t60 ^ 2;
t53 = t56 ^ 2;
t48 = t85 * t54;
t47 = t62 * t109;
t46 = t60 * t109;
t44 = t54 * t109;
t38 = t60 * t54;
t37 = -0.2e1 * t62 * t60;
t33 = t58 + t57;
t25 = t28 ^ 2;
t24 = t26 ^ 2;
t23 = t26 * t109;
t21 = -qJ(6) * t60 + t31;
t20 = -qJ(6) * t62 + t30;
t19 = t62 * t26;
t18 = t28 * t62;
t17 = t26 * t60;
t15 = t28 * t116;
t14 = t26 * t116;
t11 = -0.2e1 * t28 * t26;
t10 = pkin(5) * t26 + t22;
t6 = -t19 + t107;
t5 = -t19 - t107;
t7 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t76, t83 * t113, 0, t78, 0, 0, pkin(1) * t113, -0.2e1 * pkin(1) * t83, 0.2e1 * t98 * pkin(7), t98 * pkin(7) ^ 2 + pkin(1) ^ 2, t53, t97, 0, t52, 0, 0, t54 * t114, t56 * t114, 0.2e1 * t34 * t56 - 0.2e1 * t36 * t54, t36 ^ 2 + t71 ^ 2 + t118, t77 * t53, -0.2e1 * t53 * t103, t101 * t116, t75 * t53, t82 * t97, t52, 0.2e1 * t34 * t104 + 0.2e1 * t12 * t54, 0.2e1 * t34 * t101 - 0.2e1 * t13 * t54, t94 * t119, t12 ^ 2 + t13 ^ 2 + t118, t25, t11, t15, t24, -t14, t52, 0.2e1 * t22 * t26 + 0.2e1 * t3 * t54, 0.2e1 * t22 * t28 - 0.2e1 * t4 * t54, -0.2e1 * t26 * t4 - 0.2e1 * t28 * t3, t22 ^ 2 + t3 ^ 2 + t4 ^ 2, t25, t11, t15, t24, -t14, t52, 0.2e1 * t1 * t54 + 0.2e1 * t10 * t26, 0.2e1 * t10 * t28 - 0.2e1 * t2 * t54, -0.2e1 * t1 * t28 - 0.2e1 * t2 * t26, t1 ^ 2 + t10 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, t86, 0, -t83 * pkin(7), -t86 * pkin(7), 0, 0, 0, 0, t56, 0, -t54, 0, -t34, -t36 (-t54 * t79 - t56 * t80) * pkin(2) (-t34 * t80 + t36 * t79) * pkin(2), t96 (-t75 + t77) * t56, t105, -t96, t48, 0, -t34 * t85 + t92 * t82, t34 * t82 + t92 * t85, t93, t34 * t68 + t93 * t67, t18, t5, t106, t17, -t38, 0, t22 * t60 + t26 * t63 + t30 * t54, t22 * t62 + t28 * t63 - t31 * t54, -t26 * t31 - t28 * t30 - t3 * t62 - t4 * t60, t22 * t63 + t3 * t30 + t31 * t4, t18, t5, t106, t17, -t38, 0, t10 * t60 + t20 * t54 + t26 * t41, t10 * t62 - t21 * t54 + t28 * t41, -t1 * t62 - t2 * t60 - t20 * t28 - t21 * t26, t1 * t20 + t10 * t41 + t2 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t110, -0.2e1 * t111, 0 (t79 ^ 2 + t80 ^ 2) * pkin(2) ^ 2, t75, 0.2e1 * t103, 0, t77, 0, 0, -0.2e1 * t68 * t85, 0.2e1 * t68 * t82, 0.2e1 * t99 * t67, t99 * t67 ^ 2 + t68 ^ 2, t58, t37, 0, t57, 0, 0, t60 * t115, t62 * t115, -0.2e1 * t30 * t62 - 0.2e1 * t31 * t60, t30 ^ 2 + t31 ^ 2 + t63 ^ 2, t58, t37, 0, t57, 0, 0, t60 * t117, t62 * t117, -0.2e1 * t20 * t62 - 0.2e1 * t21 * t60, t20 ^ 2 + t21 ^ 2 + t41 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, t56, 0, t71, 0, 0, 0, 0, 0, 0, t48, -t105, -t99 * t56, t94, 0, 0, 0, 0, 0, 0, -t38, -t106, t6, -t3 * t60 + t4 * t62, 0, 0, 0, 0, 0, 0, -t38, -t106, t6, -t1 * t60 + t2 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30 * t60 + t31 * t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20 * t60 + t21 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, -t104, t54, t12, -t13, 0, 0, 0, 0, t28, 0, -t26, t54, t54 * t74 + t3, -t4 - t44, -t28 * t74 - t23 (t3 * t84 + t4 * t81) * pkin(4), 0, 0, t28, 0, -t26, t54, t54 * t70 + t1, -t2 - t44, -t28 * t70 - t23, t1 * t70 + t109 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, t85, 0, -t82 * t67, -t85 * t67, 0, 0, 0, 0, t62, 0, -t60, 0, t30, -t31, -t62 * t74 - t46 (t30 * t84 + t31 * t81) * pkin(4), 0, 0, t62, 0, -t60, 0, t20, -t21, -t62 * t70 - t46, t109 * t21 + t20 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, -t82, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t62, 0, -t60 * t74 + t47, 0, 0, 0, 0, 0, 0, -t60, -t62, 0, -t60 * t70 + t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t74, t72, 0, t84 ^ 2 * t89 + t73, 0, 0, 0, 0, 0, 1, 0.2e1 * t70, t72, 0, t70 ^ 2 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, t54, t3, -t4, 0, 0, 0, 0, t28, 0, -t26, t54, 0.2e1 * t49 + t91, -t2, -t28 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, -t60, 0, t30, -t31, 0, 0, 0, 0, t62, 0, -t60, 0, t20, -t21, -t62 * pkin(5), t20 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t62, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t62, 0, -t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t74, -t109, 0, 0, 0, 0, 0, 0, 0, 1, t87 + t74, -t109, 0, t70 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t87, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, t28, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t62, 0, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t7;
