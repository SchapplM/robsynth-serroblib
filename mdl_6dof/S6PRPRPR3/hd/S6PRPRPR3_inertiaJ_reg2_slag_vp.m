% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRPR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRPR3_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 22:36:24
% EndTime: 2019-05-04 22:36:27
% DurationCPUTime: 1.02s
% Computational Cost: add. (433->92), mult. (961->150), div. (0->0), fcn. (1107->10), ass. (0->76)
t52 = sin(qJ(4));
t43 = t52 ^ 2;
t55 = cos(qJ(4));
t45 = t55 ^ 2;
t30 = t43 + t45;
t47 = sin(pkin(11));
t49 = cos(pkin(11));
t48 = sin(pkin(6));
t56 = cos(qJ(2));
t76 = t48 * t56;
t53 = sin(qJ(2));
t77 = t48 * t53;
t15 = t47 * t77 - t49 * t76;
t14 = t15 ^ 2;
t17 = (t47 * t56 + t49 * t53) * t48;
t50 = cos(pkin(6));
t11 = t17 * t55 + t50 * t52;
t8 = t11 ^ 2;
t9 = t17 * t52 - t50 * t55;
t88 = t9 ^ 2 + t14 + t8;
t7 = t11 * t52;
t87 = -t9 * t55 + t7;
t57 = -pkin(4) - pkin(9);
t86 = t57 * t55;
t85 = 0.2e1 * t55;
t84 = 2 * qJ(5);
t83 = t47 * pkin(2);
t82 = t49 * pkin(2);
t81 = t55 * pkin(4);
t79 = t15 * t52;
t78 = t15 * t55;
t51 = sin(qJ(6));
t75 = t51 * t52;
t74 = t51 * t55;
t73 = t52 * t55;
t54 = cos(qJ(6));
t72 = t54 * t51;
t71 = t54 * t55;
t34 = pkin(8) + t83;
t70 = t30 * t34 ^ 2;
t42 = t51 ^ 2;
t44 = t54 ^ 2;
t29 = t42 + t44;
t69 = qJ(5) * t55;
t68 = t11 * qJ(5);
t66 = -0.2e1 * t73;
t65 = t51 * t71;
t35 = -pkin(3) - t82;
t39 = t52 * qJ(5);
t64 = t35 - t39;
t3 = -t15 * t51 + t9 * t54;
t4 = t15 * t54 + t9 * t51;
t1 = t3 * t54 + t4 * t51;
t18 = t64 + t86;
t25 = t52 * t34;
t20 = t52 * pkin(5) + t25;
t5 = -t51 * t18 + t54 * t20;
t6 = t54 * t18 + t51 * t20;
t2 = t5 * t54 + t6 * t51;
t63 = t11 * t55 + t9 * t52;
t62 = -pkin(4) * t52 + t69;
t61 = t52 * t57 + t69;
t60 = t63 * t34;
t58 = qJ(5) ^ 2;
t41 = t50 ^ 2;
t38 = t54 * t52;
t37 = t44 * t45;
t36 = t42 * t45;
t32 = 0.2e1 * t73;
t27 = t55 * t34;
t23 = t29 * t57;
t22 = t29 * t55;
t21 = t55 * pkin(5) + t27;
t19 = t64 - t81;
t13 = 0.2e1 * t30 * t34;
t10 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 + (t53 ^ 2 + t56 ^ 2) * t48 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t14 + t41, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, -t77, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0 (-t15 * t49 + t17 * t47) * pkin(2), 0, 0, 0, 0, 0, 0, -t78, t79, t63, t15 * t35 + t60, 0, 0, 0, 0, 0, 0, t63, t78, -t79, t15 * t19 + t60, 0, 0, 0, 0, 0, 0, t11 * t71 + t3 * t52, -t11 * t74 - t4 * t52 (t3 * t51 - t4 * t54) * t55, t11 * t21 + t3 * t5 + t4 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t82, -0.2e1 * t83, 0 (t47 ^ 2 + t49 ^ 2) * pkin(2) ^ 2, t43, t32, 0, t45, 0, 0, -0.2e1 * t35 * t55, 0.2e1 * t35 * t52, t13, t35 ^ 2 + t70, 0, 0, 0, t43, t32, t45, t13, t19 * t85, -0.2e1 * t19 * t52, t19 ^ 2 + t70, t36, 0.2e1 * t45 * t72, t51 * t66, t37, t54 * t66, t43, 0.2e1 * t21 * t71 + 0.2e1 * t5 * t52, -0.2e1 * t21 * t74 - 0.2e1 * t6 * t52 (t5 * t51 - t54 * t6) * t85, t21 ^ 2 + t5 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t55 + t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2 * t55 + t21 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 + t37 + t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9, -t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, t11, -t9 * pkin(4) + t68, 0, 0, 0, 0, 0, 0, t11 * t51, t11 * t54, -t1, t1 * t57 + t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, 0, t55, 0, -t25, -t27, 0, 0, 0, -t52, -t55, 0, 0, 0, t62, t25, t27, t62 * t34, -t65 (t42 - t44) * t55, t38, t65, -t75, 0, t21 * t51 + t54 * t61, t21 * t54 - t51 * t61, -t2, t21 * qJ(5) + t2 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t52, t39 + t81, 0, 0, 0, 0, 0, 0, t75, t38, t22, -t29 * t86 + t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(4), t84, pkin(4) ^ 2 + t58, t44, -0.2e1 * t72, 0, t42, 0, 0, t51 * t84, t54 * t84, -0.2e1 * t23, t29 * t57 ^ 2 + t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, 0, 0, t25, 0, 0, 0, 0, 0, 0, t38, -t75, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, -t29, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, 0, -t71, t52, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t74, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t51, 0, t54 * t57, -t51 * t57, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t51, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t10;
