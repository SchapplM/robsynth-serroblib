% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR11_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR11_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR11_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 20:18:46
% EndTime: 2019-05-05 20:18:55
% DurationCPUTime: 2.79s
% Computational Cost: add. (6241->221), mult. (16605->453), div. (0->0), fcn. (19522->14), ass. (0->126)
t138 = cos(qJ(5));
t85 = sin(pkin(13));
t89 = cos(pkin(13));
t94 = sin(qJ(5));
t68 = t138 * t85 + t94 * t89;
t151 = -0.2e1 * t68;
t86 = sin(pkin(12));
t88 = sin(pkin(6));
t129 = t86 * t88;
t92 = cos(pkin(6));
t139 = pkin(1) * t92;
t90 = cos(pkin(12));
t74 = t90 * t139;
t91 = cos(pkin(7));
t50 = t92 * pkin(2) + t74 + (-pkin(9) * t91 - qJ(2)) * t129;
t87 = sin(pkin(7));
t55 = (-pkin(9) * t86 * t87 - pkin(2) * t90 - pkin(1)) * t88;
t101 = t50 * t91 + t55 * t87;
t125 = t90 * t91;
t112 = t88 * t125;
t116 = qJ(2) * t88;
t63 = t90 * t116 + t86 * t139;
t45 = (t87 * t92 + t112) * pkin(9) + t63;
t95 = sin(qJ(3));
t97 = cos(qJ(3));
t27 = t101 * t97 - t95 * t45;
t128 = t87 * t95;
t49 = t92 * t128 + (t95 * t125 + t86 * t97) * t88;
t126 = t88 * t90;
t57 = t87 * t126 - t92 * t91;
t33 = t49 * t85 + t57 * t89;
t35 = t49 * t89 - t57 * t85;
t24 = t138 * t33 + t94 * t35;
t150 = t24 ^ 2;
t59 = -t85 * t128 + t89 * t91;
t60 = t89 * t128 + t85 * t91;
t38 = -t138 * t59 + t94 * t60;
t149 = t38 ^ 2;
t127 = t87 * t97;
t47 = -t97 * t112 - t92 * t127 + t95 * t129;
t46 = t47 ^ 2;
t119 = pkin(10) + qJ(4);
t110 = t119 * t85;
t70 = t119 * t89;
t51 = t138 * t110 + t94 * t70;
t148 = t51 ^ 2;
t66 = -t138 * t89 + t94 * t85;
t147 = t66 ^ 2;
t146 = -0.2e1 * t24;
t145 = -0.2e1 * t47;
t144 = 0.2e1 * t47;
t143 = -0.2e1 * t49;
t78 = -t89 * pkin(4) - pkin(3);
t142 = 0.2e1 * t78;
t141 = 0.2e1 * t88;
t140 = 0.2e1 * t89;
t26 = t138 * t35 - t94 * t33;
t93 = sin(qJ(6));
t96 = cos(qJ(6));
t14 = t93 * t26 - t47 * t96;
t137 = t14 * t96;
t16 = t96 * t26 + t47 * t93;
t136 = t16 * t93;
t135 = t16 * t96;
t134 = t24 * t66;
t133 = t33 * t89;
t132 = t35 * t85;
t131 = t38 * t51;
t81 = t88 ^ 2;
t130 = t81 * t90;
t124 = t93 * t24;
t123 = t93 * t66;
t122 = t93 * t68;
t121 = t93 * t96;
t23 = t96 * t24;
t120 = t96 * t68;
t31 = -t87 * t50 + t91 * t55;
t19 = t47 * pkin(3) - t49 * qJ(4) + t31;
t28 = t101 * t95 + t97 * t45;
t21 = -t57 * qJ(4) + t28;
t11 = t85 * t19 + t89 * t21;
t79 = t85 ^ 2;
t82 = t89 ^ 2;
t118 = t79 + t82;
t83 = t93 ^ 2;
t84 = t96 ^ 2;
t117 = t83 + t84;
t115 = qJ(4) * t47;
t114 = t66 * t151;
t113 = t92 * t141;
t111 = t93 * t120;
t10 = t89 * t19 - t85 * t21;
t109 = -pkin(5) * t68 - pkin(11) * t66;
t8 = t47 * pkin(4) - t35 * pkin(10) + t10;
t9 = -t33 * pkin(10) + t11;
t6 = t138 * t9 + t94 * t8;
t4 = t47 * pkin(11) + t6;
t22 = t57 * pkin(3) - t27;
t12 = t33 * pkin(4) + t22;
t7 = t24 * pkin(5) - t26 * pkin(11) + t12;
t1 = -t93 * t4 + t96 * t7;
t2 = t96 * t4 + t93 * t7;
t108 = t1 * t96 + t2 * t93;
t107 = -t1 * t93 + t2 * t96;
t106 = -t10 * t85 + t11 * t89;
t42 = t66 * pkin(5) - t68 * pkin(11) + t78;
t53 = -t94 * t110 + t138 * t70;
t29 = t96 * t42 - t93 * t53;
t30 = t93 * t42 + t96 * t53;
t105 = t29 * t96 + t30 * t93;
t104 = -t29 * t93 + t30 * t96;
t40 = t138 * t60 + t94 * t59;
t36 = -t96 * t127 - t93 * t40;
t37 = -t93 * t127 + t96 * t40;
t103 = t36 * t96 + t37 * t93;
t102 = -t36 * t93 + t37 * t96;
t100 = -t59 * t85 + t60 * t89;
t5 = t138 * t8 - t94 * t9;
t80 = t87 ^ 2;
t76 = t80 * t97 ^ 2;
t64 = t68 ^ 2;
t62 = -t86 * t116 + t74;
t61 = t96 * t66;
t13 = t93 * t14;
t3 = -t47 * pkin(5) - t5;
t15 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t81 * t86 ^ 2, 0.2e1 * t86 * t130, t86 * t113, t81 * t90 ^ 2, t90 * t113, t92 ^ 2, 0.2e1 * pkin(1) * t130 + 0.2e1 * t62 * t92, -0.2e1 * t81 * pkin(1) * t86 - 0.2e1 * t63 * t92 (-t62 * t86 + t63 * t90) * t141, t81 * pkin(1) ^ 2 + t62 ^ 2 + t63 ^ 2, t49 ^ 2, t47 * t143, t57 * t143, t46, t57 * t144, t57 ^ 2, -0.2e1 * t27 * t57 + 0.2e1 * t31 * t47, 0.2e1 * t28 * t57 + 0.2e1 * t31 * t49, -0.2e1 * t27 * t49 - 0.2e1 * t28 * t47, t27 ^ 2 + t28 ^ 2 + t31 ^ 2, t35 ^ 2, -0.2e1 * t35 * t33, t35 * t144, t33 ^ 2, t33 * t145, t46, 0.2e1 * t10 * t47 + 0.2e1 * t22 * t33, -0.2e1 * t11 * t47 + 0.2e1 * t22 * t35, -0.2e1 * t10 * t35 - 0.2e1 * t11 * t33, t10 ^ 2 + t11 ^ 2 + t22 ^ 2, t26 ^ 2, t26 * t146, t26 * t144, t150, t24 * t145, t46, 0.2e1 * t12 * t24 + 0.2e1 * t5 * t47, 0.2e1 * t12 * t26 - 0.2e1 * t6 * t47, -0.2e1 * t6 * t24 - 0.2e1 * t5 * t26, t12 ^ 2 + t5 ^ 2 + t6 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, 0.2e1 * t16 * t24, t14 ^ 2, t14 * t146, t150, 0.2e1 * t1 * t24 + 0.2e1 * t3 * t14, 0.2e1 * t3 * t16 - 0.2e1 * t2 * t24, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, t129, 0, -t88 * pkin(1), 0, 0, 0, 0, 0, 0, -t57 * t127 + t91 * t47, t57 * t128 + t91 * t49 (-t47 * t95 - t49 * t97) * t87, t31 * t91 + (t27 * t97 + t28 * t95) * t87, 0, 0, 0, 0, 0, 0, -t33 * t127 + t59 * t47, -t35 * t127 - t60 * t47, -t60 * t33 - t59 * t35, t10 * t59 + t11 * t60 - t22 * t127, 0, 0, 0, 0, 0, 0, -t24 * t127 - t38 * t47, -t26 * t127 - t40 * t47, -t40 * t24 + t38 * t26, -t12 * t127 - t5 * t38 + t6 * t40, 0, 0, 0, 0, 0, 0, t38 * t14 + t36 * t24, t38 * t16 - t37 * t24, -t37 * t14 - t36 * t16, t1 * t36 + t2 * t37 + t3 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80 * t95 ^ 2 + t91 ^ 2 + t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 ^ 2 + t60 ^ 2 + t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 ^ 2 + t149 + t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 ^ 2 + t37 ^ 2 + t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t47, -t57, t27, -t28, 0, 0, t132, -t85 * t33 + t35 * t89, t85 * t47, -t133, t89 * t47, 0, -pkin(3) * t33 - t85 * t115 - t22 * t89, -pkin(3) * t35 - t89 * t115 + t22 * t85 (t132 - t133) * qJ(4) + t106, -t22 * pkin(3) + t106 * qJ(4), t26 * t68, -t68 * t24 - t26 * t66, t68 * t47, t134, -t66 * t47, 0, t12 * t66 + t78 * t24 - t51 * t47, t12 * t68 + t78 * t26 - t53 * t47, -t53 * t24 + t51 * t26 - t5 * t68 - t6 * t66, t12 * t78 - t5 * t51 + t6 * t53, t16 * t120 (-t136 - t137) * t68, t120 * t24 + t16 * t66, t14 * t122, -t122 * t24 - t14 * t66, t134, t1 * t66 + t122 * t3 + t51 * t14 + t29 * t24, t120 * t3 + t51 * t16 - t2 * t66 - t30 * t24, -t108 * t68 - t30 * t14 - t29 * t16, t1 * t29 + t2 * t30 + t3 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, -t128, 0, 0, 0, 0, 0, 0, 0, 0, t89 * t127, -t85 * t127, t100, pkin(3) * t127 + t100 * qJ(4), 0, 0, 0, 0, 0, 0, -t66 * t127, -t68 * t127, t38 * t68 - t40 * t66, -t127 * t78 + t40 * t53 + t131, 0, 0, 0, 0, 0, 0, t122 * t38 + t36 * t66, t120 * t38 - t37 * t66, -t103 * t68, t36 * t29 + t37 * t30 + t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t79, t85 * t140, 0, t82, 0, 0, pkin(3) * t140, -0.2e1 * pkin(3) * t85, 0.2e1 * t118 * qJ(4), t118 * qJ(4) ^ 2 + pkin(3) ^ 2, t64, t114, 0, t147, 0, 0, t66 * t142, t68 * t142, 0.2e1 * t51 * t68 - 0.2e1 * t53 * t66, t53 ^ 2 + t78 ^ 2 + t148, t84 * t64, -0.2e1 * t64 * t121, 0.2e1 * t66 * t120, t83 * t64, t93 * t114, t147, 0.2e1 * t122 * t51 + 0.2e1 * t29 * t66, 0.2e1 * t120 * t51 - 0.2e1 * t30 * t66, t105 * t151, t29 ^ 2 + t30 ^ 2 + t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, t35, 0, t22, 0, 0, 0, 0, 0, 0, t24, t26, 0, t12, 0, 0, 0, 0, 0, 0, t23, -t124, -t13 - t135, t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t127, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, t85, 0, -pkin(3), 0, 0, 0, 0, 0, 0, t66, t68, 0, t78, 0, 0, 0, 0, 0, 0, t61, -t123, -t117 * t68, t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t24, t47, t5, -t6, 0, 0, t136, -t13 + t135, t124, -t137, t23, 0, -pkin(5) * t14 - pkin(11) * t124 - t3 * t96, -pkin(5) * t16 - pkin(11) * t23 + t3 * t93 (t136 - t137) * pkin(11) + t107, -t3 * pkin(5) + pkin(11) * t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t40, 0, 0, 0, 0, 0, 0, 0, 0, -t38 * t96, t38 * t93, t102, -t38 * pkin(5) + pkin(11) * t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t66, 0, -t51, -t53, 0, 0, t111 (-t83 + t84) * t68, t123, -t111, t61, 0, t109 * t93 - t51 * t96, t109 * t96 + t51 * t93, t104, -t51 * pkin(5) + pkin(11) * t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83, 0.2e1 * t121, 0, t84, 0, 0, 0.2e1 * pkin(5) * t96, -0.2e1 * pkin(5) * t93, 0.2e1 * t117 * pkin(11), pkin(11) ^ 2 * t117 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, t24, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t37, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, 0, -t122, t66, t29, -t30, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, -t93, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, t96, 0, -t93 * pkin(11), -t96 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t15;
