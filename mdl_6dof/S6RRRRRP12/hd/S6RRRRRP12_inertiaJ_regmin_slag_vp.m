% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRP12_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP12_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRP12_inertiaJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 07:44:08
% EndTime: 2019-05-08 07:44:20
% DurationCPUTime: 2.73s
% Computational Cost: add. (4851->277), mult. (12737->548), div. (0->0), fcn. (14622->12), ass. (0->144)
t87 = cos(pkin(7));
t96 = cos(qJ(2));
t133 = t87 * t96;
t86 = sin(pkin(6));
t108 = t86 * t133;
t135 = t86 * t96;
t92 = sin(qJ(2));
t159 = pkin(1) * t92;
t88 = cos(pkin(6));
t64 = pkin(9) * t135 + t159 * t88;
t85 = sin(pkin(7));
t40 = (t85 * t88 + t108) * pkin(10) + t64;
t91 = sin(qJ(3));
t95 = cos(qJ(3));
t136 = t86 * t92;
t75 = t88 * t96 * pkin(1);
t43 = t88 * pkin(2) + t75 + (-pkin(10) * t87 - pkin(9)) * t136;
t50 = (-pkin(10) * t85 * t92 - pkin(2) * t96 - pkin(1)) * t86;
t99 = t43 * t87 + t50 * t85;
t23 = -t40 * t91 + t95 * t99;
t138 = t85 * t91;
t42 = t88 * t138 + (t133 * t91 + t92 * t95) * t86;
t58 = -t135 * t85 + t87 * t88;
t90 = sin(qJ(4));
t94 = cos(qJ(4));
t31 = t42 * t90 - t58 * t94;
t166 = -0.2e1 * t31;
t137 = t85 * t95;
t41 = -t108 * t95 + t136 * t91 - t137 * t88;
t165 = -0.2e1 * t41;
t60 = t138 * t94 + t87 * t90;
t89 = sin(qJ(5));
t93 = cos(qJ(5));
t44 = t137 * t93 + t60 * t89;
t164 = -0.2e1 * t44;
t163 = -0.2e1 * t60;
t102 = -pkin(5) * t93 - qJ(6) * t89;
t68 = -pkin(4) + t102;
t162 = -0.2e1 * t68;
t161 = -0.2e1 * t90;
t160 = 0.2e1 * t94;
t158 = pkin(2) * t91;
t157 = pkin(2) * t95;
t156 = pkin(4) * t89;
t155 = pkin(4) * t93;
t154 = pkin(11) * t89;
t153 = pkin(11) * t93;
t152 = t31 * pkin(5);
t59 = t138 * t90 - t87 * t94;
t151 = t59 * pkin(5);
t27 = -t43 * t85 + t50 * t87;
t16 = pkin(3) * t41 - pkin(11) * t42 + t27;
t24 = t95 * t40 + t91 * t99;
t19 = t58 * pkin(11) + t24;
t9 = t16 * t94 - t19 * t90;
t7 = -pkin(4) * t41 - t9;
t150 = t7 * t89;
t149 = t7 * t93;
t148 = t89 * pkin(12);
t147 = t93 * pkin(12);
t18 = -t58 * pkin(3) - t23;
t32 = t42 * t94 + t58 * t90;
t13 = t31 * pkin(4) - t32 * pkin(12) + t18;
t10 = t16 * t90 + t19 * t94;
t8 = pkin(12) * t41 + t10;
t4 = t13 * t89 + t8 * t93;
t25 = t32 * t89 - t41 * t93;
t146 = t25 * t93;
t26 = t32 * t93 + t41 * t89;
t145 = t26 * t89;
t109 = pkin(10) * t137;
t55 = t109 + (pkin(11) + t158) * t87;
t56 = (-pkin(3) * t95 - pkin(11) * t91 - pkin(2)) * t85;
t36 = -t55 * t90 + t56 * t94;
t34 = pkin(4) * t137 - t36;
t144 = t34 * t89;
t143 = t34 * t93;
t142 = t44 * t93;
t45 = -t137 * t89 + t60 * t93;
t141 = t45 * t89;
t80 = t85 ^ 2;
t140 = t80 * t95;
t81 = t86 ^ 2;
t139 = t81 * t96;
t134 = t87 * t91;
t132 = t89 * t31;
t131 = t89 * t59;
t130 = t89 * t90;
t129 = t89 * t93;
t128 = t89 * t94;
t127 = t90 * t31;
t126 = t90 * t41;
t125 = t90 * t59;
t124 = t93 * t31;
t123 = t93 * t59;
t79 = t93 * t90;
t122 = t93 * t94;
t121 = t94 * t41;
t73 = pkin(10) * t138;
t54 = t73 + (-pkin(3) - t157) * t87;
t33 = t59 * pkin(4) - t60 * pkin(12) + t54;
t37 = t55 * t94 + t56 * t90;
t35 = -pkin(12) * t137 + t37;
t21 = t33 * t89 + t35 * t93;
t69 = -pkin(4) * t94 - pkin(12) * t90 - pkin(3);
t52 = pkin(11) * t122 + t69 * t89;
t82 = t89 ^ 2;
t84 = t93 ^ 2;
t120 = t82 + t84;
t119 = t31 * qJ(6);
t118 = t59 * qJ(6);
t117 = t94 * qJ(6);
t116 = 0.2e1 * t137;
t115 = 0.2e1 * t86 * t88;
t114 = t90 * t160;
t113 = pkin(12) * t132;
t112 = pkin(12) * t131;
t111 = pkin(12) * t124;
t110 = pkin(12) * t123;
t107 = t90 * t137;
t106 = t94 * t137;
t105 = -t13 * t93 + t8 * t89;
t104 = -t33 * t93 + t35 * t89;
t1 = t119 + t4;
t2 = t105 - t152;
t103 = t1 * t93 + t2 * t89;
t101 = -pkin(5) * t89 + qJ(6) * t93;
t14 = t118 + t21;
t15 = t104 - t151;
t100 = t14 * t93 + t15 * t89;
t47 = -t117 + t52;
t66 = t93 * t69;
t48 = -t66 + (pkin(5) + t154) * t94;
t98 = t47 * t93 + t48 * t89;
t83 = t90 ^ 2;
t76 = pkin(12) * t128;
t63 = pkin(2) * t134 + t109;
t62 = -pkin(9) * t136 + t75;
t61 = t157 * t87 - t73;
t57 = (pkin(11) - t101) * t90;
t51 = -pkin(11) * t128 + t66;
t22 = pkin(5) * t44 - qJ(6) * t45 + t34;
t5 = pkin(5) * t25 - qJ(6) * t26 + t7;
t3 = [1, 0, 0, t81 * t92 ^ 2, 0.2e1 * t92 * t139, t92 * t115, t96 * t115, t88 ^ 2, 0.2e1 * pkin(1) * t139 + 0.2e1 * t62 * t88, -0.2e1 * t159 * t81 - 0.2e1 * t64 * t88, t42 ^ 2, t42 * t165, 0.2e1 * t42 * t58, t58 * t165, t58 ^ 2, 0.2e1 * t23 * t58 + 0.2e1 * t27 * t41, -0.2e1 * t24 * t58 + 0.2e1 * t27 * t42, t32 ^ 2, t32 * t166, 0.2e1 * t32 * t41, t31 * t165, t41 ^ 2, 0.2e1 * t18 * t31 + 0.2e1 * t41 * t9, -0.2e1 * t10 * t41 + 0.2e1 * t18 * t32, t26 ^ 2, -0.2e1 * t26 * t25, 0.2e1 * t26 * t31, t25 * t166, t31 ^ 2, -0.2e1 * t105 * t31 + 0.2e1 * t25 * t7, 0.2e1 * t26 * t7 - 0.2e1 * t31 * t4, -0.2e1 * t2 * t31 + 0.2e1 * t25 * t5, -0.2e1 * t1 * t25 + 0.2e1 * t2 * t26, 0.2e1 * t1 * t31 - 0.2e1 * t26 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, t136, t135, t88, t62, -t64, t42 * t138 (-t41 * t91 + t42 * t95) * t85, t138 * t58 + t42 * t87, t137 * t58 - t41 * t87, t58 * t87, t23 * t87 + t61 * t58 + (-pkin(2) * t41 - t27 * t95) * t85, -t24 * t87 - t63 * t58 + (-pkin(2) * t42 + t27 * t91) * t85, t32 * t60, -t31 * t60 - t32 * t59, -t137 * t32 + t41 * t60, t137 * t31 - t41 * t59, -t41 * t137, -t137 * t9 + t18 * t59 + t31 * t54 + t36 * t41, t10 * t137 + t18 * t60 + t32 * t54 - t37 * t41, t26 * t45, -t25 * t45 - t26 * t44, t26 * t59 + t31 * t45, -t25 * t59 - t31 * t44, t31 * t59, -t104 * t31 - t105 * t59 + t25 * t34 + t44 * t7, -t21 * t31 + t26 * t34 - t4 * t59 + t45 * t7, -t15 * t31 - t2 * t59 + t22 * t25 + t44 * t5, -t1 * t44 - t14 * t25 + t15 * t26 + t2 * t45, t1 * t59 + t14 * t31 - t22 * t26 - t45 * t5, t1 * t14 + t15 * t2 + t22 * t5; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t80 * t91 ^ 2, 0.2e1 * t91 * t140, 0.2e1 * t85 * t134, t87 * t116, t87 ^ 2, 0.2e1 * pkin(2) * t140 + 0.2e1 * t61 * t87, -0.2e1 * t158 * t80 - 0.2e1 * t63 * t87, t60 ^ 2, t59 * t163, t137 * t163, t59 * t116, t80 * t95 ^ 2, -0.2e1 * t137 * t36 + 0.2e1 * t54 * t59, 0.2e1 * t137 * t37 + 0.2e1 * t54 * t60, t45 ^ 2, t45 * t164, 0.2e1 * t45 * t59, t59 * t164, t59 ^ 2, -0.2e1 * t104 * t59 + 0.2e1 * t34 * t44, -0.2e1 * t21 * t59 + 0.2e1 * t34 * t45, -0.2e1 * t15 * t59 + 0.2e1 * t22 * t44, -0.2e1 * t14 * t44 + 0.2e1 * t15 * t45, 0.2e1 * t14 * t59 - 0.2e1 * t22 * t45, t14 ^ 2 + t15 ^ 2 + t22 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t41, t58, t23, -t24, t32 * t90, t32 * t94 - t127, t126, t121, 0, -pkin(3) * t31 - pkin(11) * t126 - t18 * t94, -pkin(3) * t32 - pkin(11) * t121 + t18 * t90, t26 * t79 (-t145 - t146) * t90, -t26 * t94 + t31 * t79, -t127 * t89 + t25 * t94, -t31 * t94, t105 * t94 + t51 * t31 + (pkin(11) * t25 + t150) * t90, -t52 * t31 + t4 * t94 + (pkin(11) * t26 + t149) * t90, t130 * t5 + t2 * t94 + t25 * t57 - t31 * t48, -t47 * t25 + t48 * t26 + (-t1 * t89 + t2 * t93) * t90, -t1 * t94 - t26 * t57 + t31 * t47 - t5 * t79, t1 * t47 + t2 * t48 + t5 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, t137, t87, t61, -t63, t60 * t90, t60 * t94 - t125, -t107, -t106, 0, -pkin(3) * t59 + pkin(11) * t107 - t54 * t94, -pkin(3) * t60 + pkin(11) * t106 + t54 * t90, t45 * t79 (-t141 - t142) * t90, -t45 * t94 + t59 * t79, -t125 * t89 + t44 * t94, -t59 * t94, t104 * t94 + t51 * t59 + (pkin(11) * t44 + t144) * t90, t21 * t94 - t52 * t59 + (pkin(11) * t45 + t143) * t90, t130 * t22 + t15 * t94 + t44 * t57 - t48 * t59, -t47 * t44 + t48 * t45 + (-t14 * t89 + t15 * t93) * t90, -t14 * t94 - t22 * t79 - t45 * t57 + t47 * t59, t14 * t47 + t15 * t48 + t22 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t83, t114, 0, 0, 0, pkin(3) * t160, pkin(3) * t161, t84 * t83, -0.2e1 * t83 * t129, t122 * t161, t89 * t114, t94 ^ 2, 0.2e1 * t154 * t83 - 0.2e1 * t51 * t94, 0.2e1 * t153 * t83 + 0.2e1 * t52 * t94, 0.2e1 * t130 * t57 + 0.2e1 * t48 * t94, 0.2e1 * (-t47 * t89 + t48 * t93) * t90, -0.2e1 * t47 * t94 - 0.2e1 * t57 * t79, t47 ^ 2 + t48 ^ 2 + t57 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t31, t41, t9, -t10, t145, -t25 * t89 + t26 * t93, t132, t124, 0, -pkin(4) * t25 - t113 - t149, -pkin(4) * t26 - t111 + t150, t25 * t68 - t5 * t93 - t113 (t145 - t146) * pkin(12) + t103, -t26 * t68 - t5 * t89 + t111, pkin(12) * t103 + t5 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t59, -t137, t36, -t37, t141, -t44 * t89 + t45 * t93, t131, t123, 0, -pkin(4) * t44 - t112 - t143, -pkin(4) * t45 - t110 + t144, -t22 * t93 + t44 * t68 - t112 (t141 - t142) * pkin(12) + t100, -t22 * t89 - t45 * t68 + t110, pkin(12) * t100 + t22 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, t94, 0, -t90 * pkin(11), -t94 * pkin(11), t89 * t79 (-t82 + t84) * t90, -t128, -t122, 0, t76 + (-t153 - t156) * t90, pkin(12) * t122 + (t154 - t155) * t90, t130 * t68 - t57 * t93 + t76, t98, -t57 * t89 + (-pkin(12) * t94 - t68 * t90) * t93, pkin(12) * t98 + t57 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t82, 0.2e1 * t129, 0, 0, 0, 0.2e1 * t155, -0.2e1 * t156, t93 * t162, 0.2e1 * t120 * pkin(12), t89 * t162, pkin(12) ^ 2 * t120 + t68 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, -t25, t31, -t105, -t4, -t105 + 0.2e1 * t152, -pkin(5) * t26 - qJ(6) * t25, 0.2e1 * t119 + t4, -pkin(5) * t2 + qJ(6) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, -t44, t59, -t104, -t21, -t104 + 0.2e1 * t151, -pkin(5) * t45 - qJ(6) * t44, 0.2e1 * t118 + t21, -pkin(5) * t15 + qJ(6) * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t130, -t94, t51, -t52, t66 + (-0.2e1 * pkin(5) - t154) * t94, t102 * t90, -0.2e1 * t117 + t52, -pkin(5) * t48 + qJ(6) * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t93, 0, -t148, -t147, -t148, t101, t147, t101 * pkin(12); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t26, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, t45, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, t79, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
