% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 05:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR8_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR8_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRRR8_inertiaJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 13:58:32
% EndTime: 2019-05-08 13:58:45
% DurationCPUTime: 2.82s
% Computational Cost: add. (4726->253), mult. (12566->515), div. (0->0), fcn. (14965->14), ass. (0->157)
t110 = sin(pkin(6));
t173 = 0.2e1 * t110;
t116 = sin(qJ(3));
t120 = cos(qJ(3));
t109 = sin(pkin(7));
t111 = cos(pkin(7));
t112 = cos(pkin(6));
t117 = sin(qJ(2));
t147 = t110 * t117;
t163 = cos(qJ(2));
t126 = t112 * t163;
t97 = pkin(1) * t126;
t66 = t112 * pkin(2) + t97 + (-pkin(10) * t111 - pkin(9)) * t147;
t72 = (-pkin(10) * t109 * t117 - pkin(2) * t163 - pkin(1)) * t110;
t121 = t109 * t72 + t111 * t66;
t127 = t111 * t163;
t124 = t110 * t127;
t128 = t110 * t163;
t145 = t112 * t117;
t87 = pkin(1) * t145 + pkin(9) * t128;
t61 = (t109 * t112 + t124) * pkin(10) + t87;
t36 = -t116 * t61 + t120 * t121;
t114 = sin(qJ(5));
t162 = cos(qJ(5));
t115 = sin(qJ(4));
t119 = cos(qJ(4));
t149 = t109 * t116;
t65 = t112 * t149 + (t116 * t127 + t117 * t120) * t110;
t78 = t109 * t128 - t111 * t112;
t46 = t115 * t65 + t119 * t78;
t47 = -t115 * t78 + t119 * t65;
t33 = t114 * t47 + t162 * t46;
t172 = -0.2e1 * t33;
t80 = -t111 * t119 + t115 * t149;
t81 = t111 * t115 + t119 * t149;
t54 = t114 * t81 + t162 * t80;
t171 = -0.2e1 * t54;
t148 = t109 * t120;
t64 = -t112 * t148 + t116 * t147 - t120 * t124;
t170 = -0.2e1 * t64;
t169 = 0.2e1 * t64;
t168 = -0.2e1 * t65;
t104 = -pkin(4) * t119 - pkin(3);
t167 = 0.2e1 * t104;
t166 = 0.2e1 * t119;
t165 = pkin(11) + pkin(12);
t164 = pkin(4) * t64;
t161 = pkin(2) * t116;
t160 = pkin(2) * t120;
t159 = t114 * pkin(4);
t118 = cos(qJ(6));
t43 = -t109 * t66 + t111 * t72;
t27 = pkin(3) * t64 - pkin(11) * t65 + t43;
t37 = t116 * t121 + t120 * t61;
t31 = -t78 * pkin(11) + t37;
t15 = -t115 * t31 + t119 * t27;
t10 = -pkin(12) * t47 + t15 + t164;
t16 = t115 * t27 + t119 * t31;
t12 = -pkin(12) * t46 + t16;
t6 = t10 * t162 - t114 * t12;
t4 = -pkin(5) * t64 - t6;
t158 = t118 * t4;
t135 = t162 * pkin(4);
t103 = -t135 - pkin(5);
t157 = pkin(5) - t103;
t113 = sin(qJ(6));
t28 = t113 * t33;
t52 = t113 * t54;
t125 = t162 * t115;
t90 = t114 * t119 + t125;
t156 = t113 * t90;
t155 = t115 * t64;
t137 = pkin(4) * t148;
t136 = pkin(10) * t148;
t74 = t136 + (pkin(11) + t161) * t111;
t75 = (-pkin(3) * t120 - pkin(11) * t116 - pkin(2)) * t109;
t50 = -t115 * t74 + t119 * t75;
t39 = -pkin(12) * t81 - t137 + t50;
t51 = t115 * t75 + t119 * t74;
t42 = -pkin(12) * t80 + t51;
t24 = -t114 * t42 + t162 * t39;
t22 = pkin(5) * t148 - t24;
t154 = t118 * t22;
t29 = t118 * t33;
t53 = t118 * t54;
t153 = t118 * t90;
t152 = t119 * t64;
t34 = -t114 * t46 + t162 * t47;
t20 = t113 * t64 + t118 * t34;
t18 = t20 * t113;
t21 = t22 * t113;
t55 = -t114 * t80 + t162 * t81;
t49 = -t113 * t148 + t118 * t55;
t45 = t49 * t113;
t94 = t165 * t119;
t69 = t114 * t94 + t125 * t165;
t67 = t69 * t113;
t151 = t69 * t118;
t105 = t109 ^ 2;
t150 = t105 * t120;
t146 = t111 * t116;
t102 = pkin(13) + t159;
t144 = t113 * t102;
t143 = t113 * t118;
t142 = t114 * t115;
t141 = t118 * t102;
t89 = -t119 * t162 + t142;
t140 = -0.2e1 * t90 * t89;
t139 = -0.2e1 * t148;
t138 = 0.2e1 * t148;
t134 = t64 * t148;
t133 = t162 * t12;
t132 = t162 * t42;
t131 = t115 * t148;
t130 = t119 * t148;
t106 = t110 ^ 2;
t129 = t106 * t163;
t123 = -pkin(5) * t90 - pkin(13) * t89;
t122 = -t102 * t89 + t103 * t90;
t96 = pkin(10) * t149;
t73 = t96 + (-pkin(3) - t160) * t111;
t7 = t10 * t114 + t133;
t25 = t114 * t39 + t132;
t56 = t80 * pkin(4) + t73;
t30 = t78 * pkin(3) - t36;
t17 = t46 * pkin(4) + t30;
t108 = t118 ^ 2;
t107 = t113 ^ 2;
t100 = t105 * t120 ^ 2;
t98 = 0.2e1 * t143;
t88 = t90 ^ 2;
t86 = pkin(2) * t146 + t136;
t85 = -pkin(9) * t147 + t97;
t84 = t111 * t160 - t96;
t83 = t118 * t89;
t82 = t113 * t89;
t77 = t90 * t143;
t70 = -t142 * t165 + t162 * t94;
t63 = t64 ^ 2;
t62 = (-t107 + t108) * t90;
t58 = pkin(5) * t89 - pkin(13) * t90 + t104;
t48 = t113 * t55 + t118 * t148;
t41 = t113 * t58 + t118 * t70;
t40 = -t113 * t70 + t118 * t58;
t35 = -t113 * t48 + t118 * t49;
t32 = t54 * pkin(5) - t55 * pkin(13) + t56;
t23 = -pkin(13) * t148 + t25;
t19 = t113 * t34 - t118 * t64;
t14 = t113 * t32 + t118 * t23;
t13 = -t113 * t23 + t118 * t32;
t11 = -t113 * t19 + t118 * t20;
t8 = t33 * pkin(5) - t34 * pkin(13) + t17;
t5 = pkin(13) * t64 + t7;
t3 = t4 * t113;
t2 = t113 * t8 + t118 * t5;
t1 = -t113 * t5 + t118 * t8;
t9 = [1, 0, 0, t106 * t117 ^ 2, 0.2e1 * t117 * t129, t145 * t173, t126 * t173, t112 ^ 2, 0.2e1 * pkin(1) * t129 + 0.2e1 * t112 * t85, -0.2e1 * pkin(1) * t106 * t117 - 0.2e1 * t112 * t87, t65 ^ 2, t64 * t168, t78 * t168, t78 * t169, t78 ^ 2, -0.2e1 * t36 * t78 + 0.2e1 * t43 * t64, 0.2e1 * t37 * t78 + 0.2e1 * t43 * t65, t47 ^ 2, -0.2e1 * t47 * t46, t47 * t169, t46 * t170, t63, 0.2e1 * t15 * t64 + 0.2e1 * t30 * t46, -0.2e1 * t16 * t64 + 0.2e1 * t30 * t47, t34 ^ 2, t34 * t172, t34 * t169, t33 * t170, t63, 0.2e1 * t17 * t33 + 0.2e1 * t6 * t64, 0.2e1 * t17 * t34 - 0.2e1 * t64 * t7, t20 ^ 2, -0.2e1 * t20 * t19, 0.2e1 * t20 * t33, t19 * t172, t33 ^ 2, 0.2e1 * t1 * t33 + 0.2e1 * t19 * t4, -0.2e1 * t2 * t33 + 0.2e1 * t20 * t4; 0, 0, 0, 0, 0, t147, t128, t112, t85, -t87, t65 * t149 (-t116 * t64 + t120 * t65) * t109, t111 * t65 - t149 * t78, -t111 * t64 - t148 * t78, -t78 * t111, t36 * t111 - t84 * t78 + (-pkin(2) * t64 - t120 * t43) * t109, -t37 * t111 + t86 * t78 + (-pkin(2) * t65 + t116 * t43) * t109, t47 * t81, -t46 * t81 - t47 * t80, -t148 * t47 + t64 * t81, t148 * t46 - t64 * t80, -t134, -t148 * t15 + t30 * t80 + t46 * t73 + t50 * t64, t148 * t16 + t30 * t81 + t47 * t73 - t51 * t64, t34 * t55, -t33 * t55 - t34 * t54, -t148 * t34 + t55 * t64, t148 * t33 - t54 * t64, -t134, -t148 * t6 + t17 * t54 + t24 * t64 + t33 * t56, t148 * t7 + t17 * t55 - t25 * t64 + t34 * t56, t20 * t49, -t19 * t49 - t20 * t48, t20 * t54 + t33 * t49, -t19 * t54 - t33 * t48, t33 * t54, t1 * t54 + t13 * t33 + t19 * t22 + t4 * t48, -t14 * t33 - t2 * t54 + t20 * t22 + t4 * t49; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t105 * t116 ^ 2, 0.2e1 * t116 * t150, 0.2e1 * t109 * t146, t111 * t138, t111 ^ 2, 0.2e1 * pkin(2) * t150 + 0.2e1 * t111 * t84, -0.2e1 * t105 * t161 - 0.2e1 * t111 * t86, t81 ^ 2, -0.2e1 * t81 * t80, t81 * t139, t80 * t138, t100, -0.2e1 * t148 * t50 + 0.2e1 * t73 * t80, 0.2e1 * t148 * t51 + 0.2e1 * t73 * t81, t55 ^ 2, t55 * t171, t55 * t139, t54 * t138, t100, -0.2e1 * t148 * t24 + 0.2e1 * t54 * t56, 0.2e1 * t148 * t25 + 0.2e1 * t55 * t56, t49 ^ 2, -0.2e1 * t49 * t48, 0.2e1 * t49 * t54, t48 * t171, t54 ^ 2, 0.2e1 * t13 * t54 + 0.2e1 * t22 * t48, -0.2e1 * t14 * t54 + 0.2e1 * t22 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t64, -t78, t36, -t37, t47 * t115, -t115 * t46 + t119 * t47, t155, t152, 0, -pkin(3) * t46 - pkin(11) * t155 - t119 * t30, -pkin(3) * t47 - pkin(11) * t152 + t115 * t30, t34 * t90, -t33 * t90 - t34 * t89, t90 * t64, -t89 * t64, 0, t104 * t33 + t17 * t89 - t64 * t69, t104 * t34 + t17 * t90 - t64 * t70, t20 * t153 (-t118 * t19 - t18) * t90, t153 * t33 + t20 * t89, -t156 * t33 - t19 * t89, t33 * t89, t1 * t89 + t156 * t4 + t19 * t69 + t33 * t40, t153 * t4 - t2 * t89 + t20 * t69 - t33 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, t148, t111, t84, -t86, t81 * t115, -t115 * t80 + t119 * t81, -t131, -t130, 0, -pkin(3) * t80 + pkin(11) * t131 - t119 * t73, -pkin(3) * t81 + pkin(11) * t130 + t115 * t73, t55 * t90, -t54 * t90 - t55 * t89, -t90 * t148, t89 * t148, 0, t104 * t54 + t148 * t69 + t56 * t89, t104 * t55 + t148 * t70 + t56 * t90, t49 * t153 (-t118 * t48 - t45) * t90, t153 * t54 + t49 * t89, -t156 * t54 - t48 * t89, t54 * t89, t13 * t89 + t21 * t90 + t40 * t54 + t48 * t69, -t14 * t89 + t153 * t22 - t41 * t54 + t49 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t115 ^ 2, t115 * t166, 0, 0, 0, pkin(3) * t166, -0.2e1 * pkin(3) * t115, t88, t140, 0, 0, 0, t89 * t167, t90 * t167, t108 * t88, -0.2e1 * t88 * t143, 0.2e1 * t89 * t153, t113 * t140, t89 ^ 2, 0.2e1 * t40 * t89 + 0.2e1 * t67 * t90, 0.2e1 * t151 * t90 - 0.2e1 * t41 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, -t46, t64, t15, -t16, 0, 0, t34, -t33, t64, t135 * t64 + t6, -t133 + (-t10 - t164) * t114, t18, t11, t28, t29, 0, t103 * t19 - t144 * t33 - t158, t103 * t20 - t141 * t33 + t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t80, -t148, t50, -t51, 0, 0, t55, -t54, -t148, -t135 * t148 + t24, -t132 + (-t39 + t137) * t114, t45, t35, t52, t53, 0, t103 * t48 - t144 * t54 - t154, t103 * t49 - t141 * t54 + t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, t119, 0, -t115 * pkin(11), -t119 * pkin(11), 0, 0, t90, -t89, 0, -t69, -t70, t77, t62, t82, t83, 0, t113 * t122 - t151, t118 * t122 + t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t135, -0.2e1 * t159, t107, t98, 0, 0, 0, -0.2e1 * t103 * t118, 0.2e1 * t103 * t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t33, t64, t6, -t7, t18, t11, t28, t29, 0, -pkin(5) * t19 - pkin(13) * t28 - t158, -pkin(5) * t20 - pkin(13) * t29 + t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t54, -t148, t24, -t25, t45, t35, t52, t53, 0, -pkin(5) * t48 - pkin(13) * t52 - t154, -pkin(5) * t49 - pkin(13) * t53 + t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, -t89, 0, -t69, -t70, t77, t62, t82, t83, 0, t113 * t123 - t151, t118 * t123 + t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t135, -t159, t107, t98, 0, 0, 0, t157 * t118, -t157 * t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t107, t98, 0, 0, 0, 0.2e1 * pkin(5) * t118, -0.2e1 * pkin(5) * t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t19, t33, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t48, t54, t13, -t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153, -t156, t89, t40, -t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t118, 0, -t144, -t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t118, 0, -t113 * pkin(13), -t118 * pkin(13); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t9;
