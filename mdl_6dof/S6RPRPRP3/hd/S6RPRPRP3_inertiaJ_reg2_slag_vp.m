% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:39:20
% EndTime: 2019-05-05 17:39:24
% DurationCPUTime: 1.44s
% Computational Cost: add. (981->131), mult. (1922->221), div. (0->0), fcn. (2064->8), ass. (0->93)
t105 = cos(qJ(5));
t59 = sin(pkin(10));
t61 = cos(pkin(10));
t63 = sin(qJ(5));
t40 = t105 * t59 + t63 * t61;
t64 = sin(qJ(3));
t29 = t40 * t64;
t100 = t40 * t29;
t116 = t105 * t61 - t63 * t59;
t31 = t116 * t64;
t16 = t31 * t116;
t119 = t16 - t100;
t118 = t16 + t100;
t54 = -t61 * pkin(4) - pkin(3);
t15 = -pkin(5) * t116 - t40 * qJ(6) + t54;
t117 = -0.2e1 * t15;
t114 = t29 ^ 2;
t28 = t31 ^ 2;
t65 = cos(qJ(3));
t58 = t65 ^ 2;
t115 = t114 + t28 + t58;
t113 = t116 ^ 2;
t112 = 0.2e1 * t54;
t111 = 0.2e1 * t64;
t110 = -0.2e1 * t65;
t60 = sin(pkin(9));
t109 = t60 * pkin(1);
t62 = cos(pkin(9));
t108 = t62 * pkin(1);
t107 = t65 * pkin(3);
t106 = t65 * pkin(5);
t53 = -pkin(2) - t108;
t35 = -t64 * qJ(4) - t107 + t53;
t33 = t61 * t35;
t52 = pkin(7) + t109;
t92 = t61 * t64;
t10 = -pkin(8) * t92 + t33 + (-t52 * t59 - pkin(4)) * t65;
t86 = t65 * t52;
t20 = t59 * t35 + t61 * t86;
t94 = t59 * t64;
t13 = -pkin(8) * t94 + t20;
t4 = t63 * t10 + t105 * t13;
t85 = pkin(8) + qJ(4);
t42 = t85 * t61;
t74 = t85 * t59;
t22 = t105 * t74 + t63 * t42;
t104 = t22 * t65;
t24 = t105 * t42 - t63 * t74;
t103 = t24 * t65;
t102 = t29 * t116;
t101 = t31 * t29;
t99 = t40 * t116;
t98 = t40 * t65;
t55 = t59 ^ 2;
t97 = t55 * t64;
t57 = t64 ^ 2;
t96 = t57 * t52;
t95 = t59 * t61;
t93 = t59 * t65;
t91 = t61 * t65;
t44 = t64 * t52;
t89 = t64 * t65;
t88 = t65 * t29;
t87 = t65 * t116;
t34 = pkin(4) * t94 + t44;
t56 = t61 ^ 2;
t83 = t55 + t56;
t82 = t57 + t58;
t81 = t65 * qJ(6);
t80 = 0.2e1 * t89;
t79 = t22 ^ 2 + t24 ^ 2;
t78 = t59 * t92;
t3 = t105 * t10 - t63 * t13;
t76 = t29 * t22 + t31 * t24;
t75 = t22 * t31 - t24 * t29;
t72 = t83 * qJ(4);
t71 = -pkin(3) * t64 + qJ(4) * t65;
t70 = -t29 * pkin(5) + t31 * qJ(6);
t19 = -t59 * t86 + t33;
t69 = -t19 * t59 + t20 * t61;
t68 = 0.2e1 * t116 * t24 + 0.2e1 * t22 * t40;
t50 = t56 * t64;
t49 = t56 * t57;
t48 = t55 * t57;
t47 = t52 ^ 2;
t43 = t57 * t47;
t36 = t40 ^ 2;
t25 = t31 * t110;
t17 = t31 * t40;
t5 = -t70 + t34;
t2 = -t3 + t106;
t1 = -t81 + t4;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t109, 0 (t60 ^ 2 + t62 ^ 2) * pkin(1) ^ 2, t57, t80, 0, t58, 0, 0, t53 * t110, t53 * t111, 0.2e1 * t82 * t52, t58 * t47 + t53 ^ 2 + t43, t49, -0.2e1 * t57 * t95, -0.2e1 * t61 * t89, t48, t59 * t80, t58, -0.2e1 * t19 * t65 + 0.2e1 * t59 * t96, 0.2e1 * t20 * t65 + 0.2e1 * t61 * t96 (-t19 * t61 - t20 * t59) * t111, t19 ^ 2 + t20 ^ 2 + t43, t28, -0.2e1 * t101, t25, t114, 0.2e1 * t88, t58, 0.2e1 * t34 * t29 - 0.2e1 * t3 * t65, 0.2e1 * t34 * t31 + 0.2e1 * t4 * t65, -0.2e1 * t4 * t29 - 0.2e1 * t3 * t31, t3 ^ 2 + t34 ^ 2 + t4 ^ 2, t28, t25, 0.2e1 * t101, t58, -0.2e1 * t88, t114, 0.2e1 * t2 * t65 + 0.2e1 * t5 * t29, -0.2e1 * t1 * t29 + 0.2e1 * t2 * t31, -0.2e1 * t1 * t65 - 0.2e1 * t5 * t31, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t69 - t86) * t64, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3 * t29 + t4 * t31 - t34 * t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t31 + t2 * t29 - t5 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 + t48 + t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t65, 0, -t44, -t86, 0, 0, t78, t50 - t97, -t93, -t78, -t91, 0, -t61 * t44 + t71 * t59, t59 * t44 + t71 * t61, t69, -pkin(3) * t44 + t69 * qJ(4), t17, t119, -t98, -t102, -t87, 0, -t116 * t34 + t54 * t29 + t104, t54 * t31 + t34 * t40 + t103, t116 * t4 - t3 * t40 + t75, -t3 * t22 + t4 * t24 + t34 * t54, t17, -t98, -t119, 0, t87, -t102, -t116 * t5 + t15 * t29 + t104, t1 * t116 + t2 * t40 + t75, -t15 * t31 - t5 * t40 - t103, t1 * t24 + t5 * t15 + t2 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t64, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t93, t50 + t97, t64 * t72 + t107, 0, 0, 0, 0, 0, 0, t87, -t98, t118, -t65 * t54 + t76, 0, 0, 0, 0, 0, 0, t87, t118, t98, -t65 * t15 + t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t55, 0.2e1 * t95, 0, t56, 0, 0, 0.2e1 * pkin(3) * t61, -0.2e1 * pkin(3) * t59, 0.2e1 * t72, t83 * qJ(4) ^ 2 + pkin(3) ^ 2, t36, 0.2e1 * t99, 0, t113, 0, 0, -t116 * t112, t40 * t112, t68, t54 ^ 2 + t79, t36, 0, -0.2e1 * t99, 0, 0, t113, t116 * t117, t68, t40 * t117, t15 ^ 2 + t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, t92, 0, t44, 0, 0, 0, 0, 0, 0, t29, t31, 0, t34, 0, 0, 0, 0, 0, 0, t29, 0, -t31, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t59, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t116, t40, 0, t54, 0, 0, 0, 0, 0, 0, -t116, 0, -t40, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t29, -t65, t3, -t4, 0, 0, 0, t31, 0, -t65, t29, 0, t3 - 0.2e1 * t106, -pkin(5) * t31 - t29 * qJ(6), -0.2e1 * t81 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t31, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, t31, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, t116, 0, -t22, -t24, 0, 0, 0, t40, 0, 0, -t116, 0, -t22, -pkin(5) * t40 + qJ(6) * t116, t24, -t22 * pkin(5) + t24 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t31, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t6;
