% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR12_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR12_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR12_inertiaJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 00:30:12
% EndTime: 2019-05-08 00:30:22
% DurationCPUTime: 2.19s
% Computational Cost: add. (4642->225), mult. (12204->482), div. (0->0), fcn. (14273->14), ass. (0->137)
t105 = sin(qJ(3));
t109 = cos(qJ(3));
t101 = cos(pkin(7));
t102 = cos(pkin(6));
t106 = sin(qJ(2));
t99 = sin(pkin(6));
t125 = t99 * t106;
t110 = cos(qJ(2));
t86 = t102 * t110 * pkin(1);
t57 = t102 * pkin(2) + t86 + (-pkin(10) * t101 - pkin(9)) * t125;
t98 = sin(pkin(7));
t63 = (-pkin(10) * t106 * t98 - pkin(2) * t110 - pkin(1)) * t99;
t113 = t101 * t57 + t63 * t98;
t124 = t99 * t110;
t118 = t101 * t124;
t112 = t102 * t98 + t118;
t150 = pkin(1) * t106;
t77 = pkin(9) * t124 + t102 * t150;
t54 = t112 * pkin(10) + t77;
t31 = -t105 * t54 + t113 * t109;
t103 = sin(qJ(6));
t107 = cos(qJ(6));
t100 = cos(pkin(13));
t104 = sin(qJ(4));
t108 = cos(qJ(4));
t56 = t112 * t105 + t109 * t125;
t69 = -t102 * t101 + t98 * t124;
t41 = t56 * t104 + t69 * t108;
t42 = -t69 * t104 + t56 * t108;
t97 = sin(pkin(13));
t30 = t100 * t42 - t97 * t41;
t126 = t98 * t109;
t55 = -t102 * t126 + t105 * t125 - t109 * t118;
t17 = t103 * t30 - t55 * t107;
t157 = -0.2e1 * t17;
t156 = -0.2e1 * t41;
t127 = t98 * t105;
t72 = -t108 * t101 + t104 * t127;
t73 = t104 * t101 + t108 * t127;
t49 = t100 * t73 - t97 * t72;
t43 = t103 * t49 + t107 * t126;
t155 = -0.2e1 * t43;
t154 = 0.2e1 * t55;
t153 = -0.2e1 * t56;
t152 = -0.2e1 * t73;
t151 = 0.2e1 * t108;
t39 = t101 * t63 - t98 * t57;
t24 = t55 * pkin(3) - t56 * pkin(11) + t39;
t32 = t113 * t105 + t109 * t54;
t28 = -t69 * pkin(11) + t32;
t15 = t104 * t24 + t108 * t28;
t11 = -t41 * qJ(5) + t15;
t14 = -t104 * t28 + t108 * t24;
t9 = t55 * pkin(4) - t42 * qJ(5) + t14;
t6 = t100 * t11 + t97 * t9;
t149 = pkin(2) * t105;
t148 = pkin(2) * t109;
t147 = -qJ(5) - pkin(11);
t119 = pkin(10) * t126;
t66 = t119 + (pkin(11) + t149) * t101;
t67 = (-pkin(3) * t109 - pkin(11) * t105 - pkin(2)) * t98;
t45 = -t104 * t66 + t108 * t67;
t34 = -pkin(4) * t126 - t73 * qJ(5) + t45;
t46 = t104 * t67 + t108 * t66;
t38 = -t72 * qJ(5) + t46;
t22 = t100 * t38 + t97 * t34;
t29 = t100 * t41 + t97 * t42;
t146 = t103 * t29;
t48 = t100 * t72 + t97 * t73;
t145 = t103 * t48;
t79 = -t100 * t108 + t97 * t104;
t144 = t103 * t79;
t80 = t100 * t104 + t97 * t108;
t143 = t103 * t80;
t90 = t97 * pkin(4) + pkin(12);
t142 = t103 * t90;
t141 = t104 * t55;
t140 = t107 * t80;
t139 = t107 * t90;
t138 = t108 * t55;
t93 = t98 ^ 2;
t137 = t109 * t93;
t94 = t99 ^ 2;
t136 = t110 * t94;
t18 = t55 * t103 + t107 * t30;
t135 = t18 * t103;
t134 = t18 * t107;
t21 = t100 * t34 - t97 * t38;
t19 = pkin(5) * t126 - t21;
t133 = t19 * t103;
t132 = t19 * t107;
t44 = -t103 * t126 + t107 * t49;
t131 = t44 * t103;
t130 = t44 * t107;
t115 = t147 * t104;
t83 = t147 * t108;
t58 = -t100 * t115 - t97 * t83;
t129 = t58 * t103;
t128 = t58 * t107;
t123 = t101 * t105;
t122 = t103 * t107;
t121 = 0.2e1 * t102 * t99;
t120 = 0.2e1 * t126;
t117 = t104 * t126;
t116 = t108 * t126;
t92 = -t108 * pkin(4) - pkin(3);
t5 = t100 * t9 - t97 * t11;
t91 = -t100 * pkin(4) - pkin(5);
t114 = -t79 * t90 + t80 * t91;
t85 = pkin(10) * t127;
t65 = t85 + (-pkin(3) - t148) * t101;
t50 = t72 * pkin(4) + t65;
t27 = t69 * pkin(3) - t31;
t16 = t41 * pkin(4) + t27;
t96 = t107 ^ 2;
t95 = t103 ^ 2;
t78 = t80 ^ 2;
t76 = pkin(2) * t123 + t119;
t75 = -pkin(9) * t125 + t86;
t74 = t101 * t148 - t85;
t71 = t107 * t79;
t60 = -t100 * t83 + t97 * t115;
t52 = t79 * pkin(5) - t80 * pkin(12) + t92;
t47 = t107 * t48;
t36 = t103 * t52 + t107 * t60;
t35 = -t103 * t60 + t107 * t52;
t26 = t48 * pkin(5) - t49 * pkin(12) + t50;
t25 = t107 * t29;
t20 = -pkin(12) * t126 + t22;
t13 = t103 * t26 + t107 * t20;
t12 = -t103 * t20 + t107 * t26;
t7 = t29 * pkin(5) - t30 * pkin(12) + t16;
t4 = t55 * pkin(12) + t6;
t3 = -t55 * pkin(5) - t5;
t2 = t103 * t7 + t107 * t4;
t1 = -t103 * t4 + t107 * t7;
t8 = [1, 0, 0, t94 * t106 ^ 2, 0.2e1 * t106 * t136, t106 * t121, t110 * t121, t102 ^ 2, 0.2e1 * pkin(1) * t136 + 0.2e1 * t75 * t102, -0.2e1 * t77 * t102 - 0.2e1 * t94 * t150, t56 ^ 2, t55 * t153, t69 * t153, t69 * t154, t69 ^ 2, -0.2e1 * t31 * t69 + 0.2e1 * t39 * t55, 0.2e1 * t32 * t69 + 0.2e1 * t39 * t56, t42 ^ 2, t42 * t156, t42 * t154, t55 * t156, t55 ^ 2, 0.2e1 * t14 * t55 + 0.2e1 * t27 * t41, -0.2e1 * t15 * t55 + 0.2e1 * t27 * t42, -0.2e1 * t6 * t29 - 0.2e1 * t5 * t30, t16 ^ 2 + t5 ^ 2 + t6 ^ 2, t18 ^ 2, t18 * t157, 0.2e1 * t18 * t29, t29 * t157, t29 ^ 2, 0.2e1 * t1 * t29 + 0.2e1 * t3 * t17, 0.2e1 * t3 * t18 - 0.2e1 * t2 * t29; 0, 0, 0, 0, 0, t125, t124, t102, t75, -t77, t56 * t127 (-t105 * t55 + t109 * t56) * t98, t56 * t101 - t69 * t127, -t55 * t101 - t69 * t126, -t69 * t101, t31 * t101 - t74 * t69 + (-pkin(2) * t55 - t109 * t39) * t98, -t32 * t101 + t76 * t69 + (-pkin(2) * t56 + t105 * t39) * t98, t42 * t73, -t73 * t41 - t42 * t72, -t42 * t126 + t73 * t55, t41 * t126 - t72 * t55, -t55 * t126, -t14 * t126 + t27 * t72 + t65 * t41 + t45 * t55, t15 * t126 + t27 * t73 + t65 * t42 - t46 * t55, -t21 * t30 - t22 * t29 - t6 * t48 - t5 * t49, t16 * t50 + t5 * t21 + t6 * t22, t18 * t44, -t44 * t17 - t18 * t43, t18 * t48 + t44 * t29, -t17 * t48 - t43 * t29, t29 * t48, t1 * t48 + t12 * t29 + t19 * t17 + t3 * t43, -t13 * t29 + t19 * t18 - t2 * t48 + t3 * t44; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t93 * t105 ^ 2, 0.2e1 * t105 * t137, 0.2e1 * t98 * t123, t101 * t120, t101 ^ 2, 0.2e1 * pkin(2) * t137 + 0.2e1 * t74 * t101, -0.2e1 * t76 * t101 - 0.2e1 * t93 * t149, t73 ^ 2, t72 * t152, t126 * t152, t72 * t120, t93 * t109 ^ 2, -0.2e1 * t45 * t126 + 0.2e1 * t65 * t72, 0.2e1 * t46 * t126 + 0.2e1 * t65 * t73, -0.2e1 * t21 * t49 - 0.2e1 * t22 * t48, t21 ^ 2 + t22 ^ 2 + t50 ^ 2, t44 ^ 2, t44 * t155, 0.2e1 * t44 * t48, t48 * t155, t48 ^ 2, 0.2e1 * t12 * t48 + 0.2e1 * t19 * t43, -0.2e1 * t13 * t48 + 0.2e1 * t19 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t55, -t69, t31, -t32, t42 * t104, -t104 * t41 + t42 * t108, t141, t138, 0, -pkin(3) * t41 - pkin(11) * t141 - t27 * t108, -pkin(3) * t42 - pkin(11) * t138 + t27 * t104, -t60 * t29 + t58 * t30 - t5 * t80 - t6 * t79, t16 * t92 - t5 * t58 + t6 * t60, t80 * t134 (-t107 * t17 - t135) * t80, t29 * t140 + t18 * t79, -t29 * t143 - t17 * t79, t29 * t79, t1 * t79 + t3 * t143 + t58 * t17 + t35 * t29, t3 * t140 + t58 * t18 - t2 * t79 - t36 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, t126, t101, t74, -t76, t73 * t104, -t104 * t72 + t73 * t108, -t117, -t116, 0, -pkin(3) * t72 + pkin(11) * t117 - t65 * t108, -pkin(3) * t73 + pkin(11) * t116 + t65 * t104, -t21 * t80 - t22 * t79 - t60 * t48 + t58 * t49, -t21 * t58 + t22 * t60 + t50 * t92, t80 * t130 (-t107 * t43 - t131) * t80, t48 * t140 + t44 * t79, -t48 * t143 - t43 * t79, t48 * t79, t12 * t79 + t133 * t80 + t35 * t48 + t58 * t43, -t13 * t79 + t132 * t80 - t36 * t48 + t58 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t104 ^ 2, t104 * t151, 0, 0, 0, pkin(3) * t151, -0.2e1 * pkin(3) * t104, 0.2e1 * t58 * t80 - 0.2e1 * t60 * t79, t58 ^ 2 + t60 ^ 2 + t92 ^ 2, t96 * t78, -0.2e1 * t78 * t122, 0.2e1 * t79 * t140, -0.2e1 * t79 * t143, t79 ^ 2, 0.2e1 * t129 * t80 + 0.2e1 * t35 * t79, 0.2e1 * t128 * t80 - 0.2e1 * t36 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t41, t55, t14, -t15 (-t100 * t30 - t29 * t97) * pkin(4) (t100 * t5 + t6 * t97) * pkin(4), t135, -t103 * t17 + t134, t146, t25, 0, -t3 * t107 - t29 * t142 + t91 * t17, t3 * t103 - t29 * t139 + t91 * t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, -t72, -t126, t45, -t46 (-t100 * t49 - t48 * t97) * pkin(4) (t100 * t21 + t22 * t97) * pkin(4), t131, -t103 * t43 + t130, t145, t47, 0, -t48 * t142 + t91 * t43 - t132, -t48 * t139 + t91 * t44 + t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, t108, 0, -t104 * pkin(11), -t108 * pkin(11) (-t100 * t80 - t79 * t97) * pkin(4) (-t100 * t58 + t60 * t97) * pkin(4), t80 * t122 (-t95 + t96) * t80, t144, t71, 0, t103 * t114 - t128, t107 * t114 + t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 (t100 ^ 2 + t97 ^ 2) * pkin(4) ^ 2, t95, 0.2e1 * t122, 0, 0, 0, -0.2e1 * t91 * t107, 0.2e1 * t91 * t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, t25, -t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, 0, 0, 0, 0, t47, -t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, 0, 0, 0, 0, t71, -t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, -t17, t29, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t43, t48, t12, -t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140, -t143, t79, t35, -t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, t107, 0, -t142, -t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, -t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t8;
