% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP6_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:54:20
% EndTime: 2019-05-05 17:54:24
% DurationCPUTime: 1.19s
% Computational Cost: add. (863->103), mult. (1575->159), div. (0->0), fcn. (1822->6), ass. (0->82)
t54 = sin(pkin(9));
t55 = cos(pkin(9));
t57 = sin(qJ(3));
t82 = cos(qJ(3));
t34 = t57 * t54 - t82 * t55;
t31 = t34 ^ 2;
t36 = t82 * t54 + t57 * t55;
t32 = t36 ^ 2;
t47 = -t55 * pkin(2) - pkin(1);
t64 = -t36 * qJ(4) + t47;
t11 = t34 * pkin(3) + t64;
t93 = -0.2e1 * t11;
t92 = 0.2e1 * t34;
t56 = sin(qJ(5));
t85 = t56 * pkin(5);
t46 = qJ(4) + t85;
t91 = 0.2e1 * t46;
t90 = 0.2e1 * t47;
t89 = 0.2e1 * t55;
t88 = 0.2e1 * qJ(4);
t87 = pkin(3) + pkin(8);
t86 = t36 * pkin(5);
t77 = pkin(7) + qJ(2);
t41 = t77 * t54;
t42 = t77 * t55;
t17 = t82 * t41 + t57 * t42;
t9 = t36 * pkin(4) + t17;
t84 = t56 * t9;
t58 = cos(qJ(5));
t83 = t58 * pkin(5);
t81 = t36 * t34;
t51 = t56 ^ 2;
t80 = t51 * t34;
t24 = t56 * t34;
t25 = t56 * t36;
t28 = t58 * t34;
t79 = t58 * t36;
t78 = t58 * t56;
t49 = t54 ^ 2;
t50 = t55 ^ 2;
t76 = t49 + t50;
t52 = t58 ^ 2;
t75 = t51 + t52;
t74 = qJ(4) * t34;
t73 = -0.2e1 * t81;
t72 = 0.2e1 * t81;
t19 = -t57 * t41 + t82 * t42;
t71 = t17 ^ 2 + t19 ^ 2;
t7 = t87 * t34 + t64;
t70 = qJ(6) * t34 + t7;
t8 = t58 * t9;
t63 = -t70 * t56 + t8;
t2 = t63 + t86;
t3 = t70 * t58 + t84;
t69 = t2 * t58 + t3 * t56;
t68 = -t2 * t56 + t3 * t58;
t4 = -t56 * t7 + t8;
t5 = t58 * t7 + t84;
t1 = t4 * t58 + t5 * t56;
t67 = -t4 * t56 + t5 * t58;
t39 = (-qJ(6) - t87) * t56;
t48 = t58 * t87;
t40 = -t58 * qJ(6) - t48;
t66 = t58 * t39 - t56 * t40;
t65 = t36 * t87 + t74;
t62 = 0.2e1 * t17 * t36 - 0.2e1 * t19 * t34;
t60 = qJ(4) ^ 2;
t44 = -0.2e1 * t78;
t38 = t75 * t87;
t27 = t52 * t34;
t26 = t52 * t31;
t23 = t51 * t31;
t22 = t34 * t78;
t21 = 0.2e1 * t31 * t78;
t16 = t39 * t56 + t40 * t58;
t15 = t58 * t72;
t14 = t56 * t72;
t13 = t27 - t80;
t12 = t27 + t80;
t10 = -t34 * pkin(4) + t19;
t6 = (-pkin(4) - t83) * t34 + t19;
t18 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t49, t54 * t89, 0, t50, 0, 0, pkin(1) * t89, -0.2e1 * pkin(1) * t54, 0.2e1 * t76 * qJ(2), t76 * qJ(2) ^ 2 + pkin(1) ^ 2, t32, t73, 0, t31, 0, 0, t34 * t90, t36 * t90, t62, t47 ^ 2 + t71, 0, 0, 0, t32, t73, t31, t62, t34 * t93, t36 * t93, t11 ^ 2 + t71, t23, t21, t14, t26, t15, t32, -0.2e1 * t10 * t28 + 0.2e1 * t4 * t36, 0.2e1 * t10 * t24 - 0.2e1 * t5 * t36, t67 * t92, t10 ^ 2 + t4 ^ 2 + t5 ^ 2, t23, t21, t14, t26, t15, t32, 0.2e1 * t2 * t36 - 0.2e1 * t6 * t28, 0.2e1 * t6 * t24 - 0.2e1 * t3 * t36, t68 * t92, t2 ^ 2 + t3 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55, t54, 0, -pkin(1), 0, 0, 0, 0, 0, 0, t34, t36, 0, t47, 0, 0, 0, 0, 0, 0, 0, -t34, -t36, t11, 0, 0, 0, 0, 0, 0, -t25, -t79, t12, t67, 0, 0, 0, 0, 0, 0, -t25, -t79, t12, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, 0, -t17, -t19, 0, 0, 0, -t36, t34, 0, 0, 0, -pkin(3) * t36 - t74, t17, t19, -t17 * pkin(3) + t19 * qJ(4), t22, t13, t79, -t22, -t25, 0, t10 * t56 - t65 * t58, t10 * t58 + t65 * t56, -t1, t10 * qJ(4) - t1 * t87, t22, t13, t79, -t22, -t25, 0, -t46 * t28 + t40 * t36 + t6 * t56, t46 * t24 - t39 * t36 + t6 * t58, t66 * t34 - t69, t2 * t40 + t3 * t39 + t6 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t88, pkin(3) ^ 2 + t60, t52, t44, 0, t51, 0, 0, t56 * t88, t58 * t88, 0.2e1 * t38, t75 * t87 ^ 2 + t60, t52, t44, 0, t51, 0, 0, t56 * t91, t58 * t91, -0.2e1 * t16, t39 ^ 2 + t40 ^ 2 + t46 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, t17, 0, 0, 0, 0, 0, 0, t79, -t25, 0, t1, 0, 0, 0, 0, 0, 0, t79, -t25, 0, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t75, -t38, 0, 0, 0, 0, 0, 0, 0, 0, -t75, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, t28, t36, t4, -t5, 0, 0, 0, 0, t24, 0, t28, t36, t63 + 0.2e1 * t86, -t3, -pkin(5) * t24, t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, -t58, 0, 0, 0, 0, 0, 0, 0, 0, -t56, -t58, 0, -t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, -t56, 0, -t48, t56 * t87, 0, 0, 0, 0, t58, 0, -t56, 0, t40, -t39, -t83, t40 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, -t56, 0, 0, 0, 0, 0, 0, 0, 0, t58, -t56, 0, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, t24, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58, 0, t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t18;
