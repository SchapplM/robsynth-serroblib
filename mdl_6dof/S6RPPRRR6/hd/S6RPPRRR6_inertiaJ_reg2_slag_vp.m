% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRR6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRR6_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:58:07
% EndTime: 2019-05-05 15:58:11
% DurationCPUTime: 1.28s
% Computational Cost: add. (661->124), mult. (1180->218), div. (0->0), fcn. (1260->6), ass. (0->74)
t42 = sin(qJ(6));
t43 = sin(qJ(5));
t45 = cos(qJ(6));
t46 = cos(qJ(5));
t18 = t42 * t43 - t45 * t46;
t85 = t18 ^ 2;
t20 = t42 * t46 + t45 * t43;
t84 = t20 ^ 2;
t40 = pkin(1) + qJ(3);
t83 = (t40 ^ 2);
t33 = -t46 * pkin(5) - pkin(4);
t82 = 0.2e1 * t33;
t44 = sin(qJ(4));
t81 = 0.2e1 * t44;
t80 = 0.2e1 * t46;
t47 = cos(qJ(4));
t79 = 0.2e1 * t47;
t78 = -pkin(9) - pkin(8);
t77 = t42 * pkin(5);
t76 = t45 * pkin(5);
t22 = t44 * pkin(4) - t47 * pkin(8) + t40;
t39 = -pkin(7) + qJ(2);
t63 = t46 * t44;
t57 = t39 * t63;
t5 = t57 + (-pkin(9) * t47 + t22) * t43;
t75 = t45 * t5;
t74 = t47 * pkin(4);
t32 = t46 * t47;
t65 = t43 * t47;
t14 = t32 * t45 - t42 * t65;
t73 = t18 * t14;
t72 = t18 * t44;
t62 = t47 * t20;
t71 = t20 * t62;
t70 = t20 * t44;
t35 = t43 ^ 2;
t69 = t35 * t47;
t38 = t47 ^ 2;
t68 = t38 * t39;
t67 = t39 * t43;
t29 = t43 * t44;
t66 = t43 * t46;
t64 = t44 * t39;
t61 = t47 * t39;
t60 = t47 * t44;
t37 = t46 ^ 2;
t59 = t35 + t37;
t36 = t44 ^ 2;
t27 = t36 + t38;
t58 = -0.2e1 * t60;
t56 = t43 * t32;
t15 = t46 * t22;
t4 = -pkin(9) * t32 + t15 + (pkin(5) - t67) * t44;
t1 = t45 * t4 - t42 * t5;
t55 = t59 * t44;
t54 = -pkin(8) * t44 - t74;
t8 = -t43 * t64 + t15;
t9 = t43 * t22 + t57;
t53 = -t9 * t43 - t8 * t46;
t52 = -t8 * t43 + t9 * t46;
t49 = (qJ(2) ^ 2);
t48 = 2 * qJ(2);
t34 = t39 ^ 2;
t31 = t37 * t47;
t28 = t38 * t34;
t24 = t78 * t46;
t23 = t78 * t43;
t17 = t27 * t39;
t16 = (pkin(5) * t43 - t39) * t47;
t13 = -t42 * t29 + t45 * t63;
t7 = t42 * t23 - t45 * t24;
t6 = t45 * t23 + t42 * t24;
t2 = t42 * t4 + t75;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t48, pkin(1) ^ 2 + t49, 1, 0, 0, 0, 0, 0, 0, t48, 0.2e1 * t40, t49 + t83, t38, t58, 0, t36, 0, 0, t40 * t81, t40 * t79, -0.2e1 * t17, t36 * t34 + t28 + t83, t37 * t38, -0.2e1 * t38 * t66, t60 * t80, t35 * t38, t43 * t58, t36, -0.2e1 * t38 * t67 + 0.2e1 * t8 * t44, -0.2e1 * t9 * t44 - 0.2e1 * t46 * t68, t53 * t79, t8 ^ 2 + t9 ^ 2 + t28, t14 ^ 2, -0.2e1 * t14 * t62, t14 * t81, t62 ^ 2, -t62 * t81, t36, 0.2e1 * t1 * t44 + 0.2e1 * t16 * t62, 0.2e1 * t16 * t14 - 0.2e1 * t2 * t44, -0.2e1 * t1 * t14 - 0.2e1 * t2 * t62, t1 ^ 2 + t16 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -1, -t40, 0, 0, 0, 0, 0, 0, -t44, -t47, 0, -t40, 0, 0, 0, 0, 0, 0, -t63, t29, t31 + t69, t53, 0, 0, 0, 0, 0, 0, t72, t70, t71 - t73, t1 * t18 - t2 * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84 + t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, qJ(2), 0, 0, 0, 0, 0, 0, 0, 0, -t27, t17, 0, 0, 0, 0, 0, 0, -t27 * t43, -t27 * t46, 0, t52 * t44 + t68, 0, 0, 0, 0, 0, 0, -t44 * t70 - t47 * t62, -t13 * t44 - t47 * t14, -t13 * t62 + t14 * t70, -t1 * t70 + t2 * t13 - t16 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20 * t13 - t18 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 * t36 + t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 ^ 2 + t70 ^ 2 + t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t44, 0, t61, -t64, 0, 0, t56, t31 - t69, t29, -t56, t63, 0, t54 * t43 + t46 * t61, -t43 * t61 + t54 * t46, t52, pkin(4) * t61 + t52 * pkin(8), t14 * t20, -t71 - t73, t70, t62 * t18, -t72, 0, t16 * t18 + t33 * t62 + t6 * t44, t33 * t14 + t16 * t20 - t7 * t44, -t1 * t20 - t6 * t14 - t2 * t18 - t62 * t7, t1 * t6 + t16 * t33 + t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18 * t6 - t20 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, -t44, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t65, t55, pkin(8) * t55 + t74, 0, 0, 0, 0, 0, 0, -t47 * t18, -t62, -t13 * t18 + t20 * t70, t13 * t7 - t47 * t33 - t6 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t35, 0.2e1 * t66, 0, t37, 0, 0, pkin(4) * t80, -0.2e1 * pkin(4) * t43, 0.2e1 * t59 * pkin(8), t59 * pkin(8) ^ 2 + pkin(4) ^ 2, t84, -0.2e1 * t20 * t18, 0, t85, 0, 0, t18 * t82, t20 * t82, -0.2e1 * t7 * t18 - 0.2e1 * t6 * t20, t33 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t65, t44, t8, -t9, 0, 0, 0, 0, t14, 0, -t62, t44, t44 * t76 + t1, -t75 + (-t44 * pkin(5) - t4) * t42 (-t14 * t45 - t42 * t62) * pkin(5) (t1 * t45 + t2 * t42) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t43, 0, 0, 0, 0, 0, 0, 0, 0, t18, t20, 0 (t18 * t45 - t20 * t42) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t63, 0, 0, 0, 0, 0, 0, 0, 0, -t70, -t13, 0 (t13 * t42 - t45 * t70) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, t46, 0, -t43 * pkin(8), -t46 * pkin(8), 0, 0, 0, 0, t20, 0, -t18, 0, t6, -t7 (-t18 * t42 - t20 * t45) * pkin(5) (t42 * t7 + t45 * t6) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t76, -0.2e1 * t77, 0 (t42 ^ 2 + t45 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, -t62, t44, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, -t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t76, -t77, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
