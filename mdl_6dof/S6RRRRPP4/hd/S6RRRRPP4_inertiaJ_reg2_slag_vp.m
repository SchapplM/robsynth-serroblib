% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPP4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP4_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:19:22
% EndTime: 2019-05-07 18:19:30
% DurationCPUTime: 2.33s
% Computational Cost: add. (2476->203), mult. (5007->366), div. (0->0), fcn. (5572->8), ass. (0->105)
t76 = sin(qJ(4));
t77 = sin(qJ(3));
t79 = cos(qJ(4));
t80 = cos(qJ(3));
t53 = t76 * t80 + t79 * t77;
t78 = sin(qJ(2));
t44 = t53 * t78;
t105 = t80 * t78;
t109 = t77 * t78;
t46 = t79 * t105 - t76 * t109;
t74 = sin(pkin(10));
t75 = cos(pkin(10));
t23 = t75 * t44 + t74 * t46;
t130 = t23 ^ 2;
t51 = t76 * t77 - t79 * t80;
t30 = t75 * t51 + t74 * t53;
t129 = t30 ^ 2;
t65 = -t80 * pkin(3) - pkin(2);
t41 = t51 * pkin(4) + t65;
t128 = 0.2e1 * t41;
t127 = 0.2e1 * t65;
t126 = -0.2e1 * t78;
t81 = cos(qJ(2));
t125 = -0.2e1 * t81;
t124 = 0.2e1 * t81;
t123 = -pkin(9) - pkin(8);
t122 = pkin(2) * t80;
t121 = pkin(7) * t77;
t71 = t78 ^ 2;
t120 = t71 * pkin(7);
t119 = t75 * pkin(4);
t118 = t76 * pkin(3);
t68 = t78 * pkin(7);
t117 = t81 * pkin(3);
t116 = t81 * pkin(4);
t55 = -t81 * pkin(2) - t78 * pkin(8) - pkin(1);
t50 = t80 * t55;
t33 = -pkin(9) * t105 + t50 + (-pkin(3) - t121) * t81;
t104 = t80 * t81;
t98 = pkin(7) * t104;
t35 = t98 + (-pkin(9) * t78 + t55) * t77;
t19 = t79 * t33 - t76 * t35;
t10 = -t46 * qJ(5) - t116 + t19;
t106 = t79 * t35;
t20 = t76 * t33 + t106;
t17 = -t44 * qJ(5) + t20;
t4 = t74 * t10 + t75 * t17;
t94 = t123 * t77;
t95 = t123 * t80;
t37 = t76 * t94 - t79 * t95;
t27 = -t51 * qJ(5) + t37;
t36 = t76 * t95 + t79 * t94;
t86 = -t53 * qJ(5) + t36;
t14 = t74 * t27 - t75 * t86;
t115 = t14 * t81;
t16 = t75 * t27 + t74 * t86;
t114 = t16 * t81;
t113 = t23 * t30;
t25 = -t74 * t44 + t75 * t46;
t112 = t25 * t23;
t32 = -t74 * t51 + t75 * t53;
t111 = t32 * t30;
t110 = t32 * t81;
t108 = t77 * t80;
t107 = t77 * t81;
t103 = t81 * t23;
t102 = t81 * t30;
t69 = t79 * pkin(3);
t64 = t69 + pkin(4);
t48 = t75 * t118 + t74 * t64;
t54 = pkin(3) * t109 + t68;
t70 = t77 ^ 2;
t72 = t80 ^ 2;
t101 = t70 + t72;
t100 = t78 * t124;
t99 = t14 ^ 2 + t16 ^ 2;
t97 = t77 * t105;
t66 = t74 * pkin(4);
t96 = -t66 - t48;
t93 = t14 * t25 - t16 * t23;
t92 = -t75 * t10 + t74 * t17;
t91 = t74 * t118 - t75 * t64;
t34 = t44 * pkin(4) + t54;
t90 = t32 * t23 + t25 * t30;
t39 = -pkin(7) * t107 + t50;
t40 = t77 * t55 + t98;
t89 = -t39 * t77 + t40 * t80;
t88 = 0.2e1 * t14 * t32 - 0.2e1 * t16 * t30;
t87 = -t91 + t119;
t83 = pkin(7) ^ 2;
t73 = t81 ^ 2;
t67 = t71 * t83;
t62 = pkin(5) + t119;
t61 = t66 + qJ(6);
t43 = -pkin(5) + t91;
t42 = qJ(6) + t48;
t29 = t32 ^ 2;
t22 = t25 ^ 2;
t21 = t25 * t125;
t18 = t25 * t32;
t12 = t30 * pkin(5) - t32 * qJ(6) + t41;
t6 = t23 * pkin(5) - t25 * qJ(6) + t34;
t2 = t81 * pkin(5) + t92;
t1 = -t81 * qJ(6) + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t71, t100, 0, t73, 0, 0, pkin(1) * t124, pkin(1) * t126, 0.2e1 * (t71 + t73) * pkin(7), pkin(1) ^ 2 + t73 * t83 + t67, t72 * t71, -0.2e1 * t71 * t108, t104 * t126, t70 * t71, t77 * t100, t73, 0.2e1 * t77 * t120 - 0.2e1 * t39 * t81, 0.2e1 * t80 * t120 + 0.2e1 * t40 * t81, 0.2e1 * (-t39 * t80 - t40 * t77) * t78, t39 ^ 2 + t40 ^ 2 + t67, t46 ^ 2, -0.2e1 * t46 * t44, t46 * t125, t44 ^ 2, -t44 * t125, t73, -0.2e1 * t19 * t81 + 0.2e1 * t54 * t44, 0.2e1 * t20 * t81 + 0.2e1 * t54 * t46, -0.2e1 * t19 * t46 - 0.2e1 * t20 * t44, t19 ^ 2 + t20 ^ 2 + t54 ^ 2, t22, -0.2e1 * t112, t21, t130, 0.2e1 * t103, t73, 0.2e1 * t34 * t23 + 0.2e1 * t81 * t92, 0.2e1 * t34 * t25 + 0.2e1 * t4 * t81, -0.2e1 * t4 * t23 + 0.2e1 * t25 * t92, t34 ^ 2 + t4 ^ 2 + t92 ^ 2, t22, t21, 0.2e1 * t112, t73, -0.2e1 * t103, t130, 0.2e1 * t2 * t81 + 0.2e1 * t6 * t23, -0.2e1 * t1 * t23 + 0.2e1 * t2 * t25, -0.2e1 * t1 * t81 - 0.2e1 * t6 * t25, t1 ^ 2 + t2 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, t81, 0, -t68, -t81 * pkin(7), 0, 0, t97 (-t70 + t72) * t78, -t107, -t97, -t104, 0, -pkin(7) * t105 + (-pkin(2) * t78 + pkin(8) * t81) * t77, pkin(8) * t104 + (t121 - t122) * t78, t89, -pkin(2) * t68 + t89 * pkin(8), t46 * t53, -t53 * t44 - t46 * t51, -t53 * t81, t44 * t51, t51 * t81, 0, -t36 * t81 + t65 * t44 + t54 * t51, t37 * t81 + t65 * t46 + t54 * t53, -t19 * t53 - t20 * t51 - t36 * t46 - t37 * t44, t19 * t36 + t20 * t37 + t54 * t65, t18, -t90, -t110, t113, t102, 0, t41 * t23 + t34 * t30 + t115, t41 * t25 + t34 * t32 + t114, -t4 * t30 + t32 * t92 + t93, t14 * t92 + t4 * t16 + t34 * t41, t18, -t110, t90, 0, -t102, t113, t12 * t23 + t6 * t30 + t115, -t1 * t30 + t2 * t32 + t93, -t12 * t25 - t6 * t32 - t114, t1 * t16 + t6 * t12 + t2 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t70, 0.2e1 * t108, 0, t72, 0, 0, 0.2e1 * t122, -0.2e1 * pkin(2) * t77, 0.2e1 * t101 * pkin(8), t101 * pkin(8) ^ 2 + pkin(2) ^ 2, t53 ^ 2, -0.2e1 * t53 * t51, 0, t51 ^ 2, 0, 0, t51 * t127, t53 * t127, -0.2e1 * t36 * t53 - 0.2e1 * t37 * t51, t36 ^ 2 + t37 ^ 2 + t65 ^ 2, t29, -0.2e1 * t111, 0, t129, 0, 0, t30 * t128, t32 * t128, t88, t41 ^ 2 + t99, t29, 0, 0.2e1 * t111, 0, 0, t129, 0.2e1 * t12 * t30, t88, -0.2e1 * t12 * t32, t12 ^ 2 + t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, 0, -t109, -t81, t39, -t40, 0, 0, 0, 0, t46, 0, -t44, -t81, -t79 * t117 + t19, -t106 + (-t33 + t117) * t76 (-t44 * t76 - t46 * t79) * pkin(3) (t19 * t79 + t20 * t76) * pkin(3), 0, 0, t25, 0, -t23, -t81, t81 * t91 - t92, t48 * t81 - t4, -t48 * t23 + t25 * t91, t4 * t48 + t91 * t92, 0, t25, 0, -t81, t23, 0 (-pkin(5) + t43) * t81 - t92, -t42 * t23 + t43 * t25 (-qJ(6) - t42) * t81 + t4, t1 * t42 + t2 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t80, 0, -t77 * pkin(8), -t80 * pkin(8), 0, 0, 0, 0, t53, 0, -t51, 0, t36, -t37 (-t51 * t76 - t53 * t79) * pkin(3) (t36 * t79 + t37 * t76) * pkin(3), 0, 0, t32, 0, -t30, 0, -t14, -t16, -t48 * t30 + t32 * t91, t14 * t91 + t16 * t48, 0, t32, 0, 0, t30, 0, -t14, -t42 * t30 + t43 * t32, t16, t14 * t43 + t16 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t69, -0.2e1 * t118, 0 (t76 ^ 2 + t79 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t91, -0.2e1 * t48, 0, t48 ^ 2 + t91 ^ 2, 0, 0, 0, 1, 0, 0, -0.2e1 * t43, 0, 0.2e1 * t42, t42 ^ 2 + t43 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t44, -t81, t19, -t20, 0, 0, 0, 0, t25, 0, -t23, -t81, -t75 * t116 - t92, t74 * t116 - t4 (-t23 * t74 - t25 * t75) * pkin(4) (t4 * t74 - t75 * t92) * pkin(4), 0, t25, 0, -t81, t23, 0 (-pkin(5) - t62) * t81 - t92, -t61 * t23 - t62 * t25 (-qJ(6) - t61) * t81 + t4, t1 * t61 - t2 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, -t51, 0, t36, -t37, 0, 0, 0, 0, t32, 0, -t30, 0, -t14, -t16 (-t30 * t74 - t32 * t75) * pkin(4) (-t14 * t75 + t16 * t74) * pkin(4), 0, t32, 0, 0, t30, 0, -t14, -t61 * t30 - t62 * t32, t16, -t14 * t62 + t16 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t69, -t118, 0, 0, 0, 0, 0, 0, 0, 1, t87, t96, 0 (t48 * t74 - t75 * t91) * pkin(4), 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5) + t87, 0, 0.2e1 * qJ(6) - t96, t42 * t61 - t43 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t119, -0.2e1 * t66, 0 (t74 ^ 2 + t75 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t62, 0, 0.2e1 * t61, t61 ^ 2 + t62 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, t25, 0, t34, 0, 0, 0, 0, 0, 0, t23, 0, -t25, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, t32, 0, t41, 0, 0, 0, 0, 0, 0, t30, 0, -t32, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, t25, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
