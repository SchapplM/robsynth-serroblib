% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:24
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPPR5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR5_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:54:17
% EndTime: 2019-05-06 08:54:22
% DurationCPUTime: 1.49s
% Computational Cost: add. (759->148), mult. (1489->252), div. (0->0), fcn. (1500->6), ass. (0->86)
t65 = sin(pkin(9));
t61 = t65 ^ 2;
t66 = cos(pkin(9));
t62 = t66 ^ 2;
t102 = t61 + t62;
t84 = pkin(3) + qJ(5);
t101 = t84 * t66;
t68 = sin(qJ(2));
t50 = t66 * t68;
t70 = cos(qJ(2));
t100 = pkin(4) * t50 + t70 * qJ(5);
t67 = sin(qJ(6));
t69 = cos(qJ(6));
t27 = -t67 * t65 + t69 * t66;
t99 = -t84 * t65 - pkin(7);
t26 = t69 * t65 + t67 * t66;
t20 = t26 * t68;
t98 = -0.2e1 * t20;
t97 = -0.2e1 * t27;
t96 = -0.2e1 * t65;
t95 = 0.2e1 * t66;
t94 = 0.2e1 * t68;
t93 = 0.2e1 * t70;
t63 = t68 ^ 2;
t92 = t63 * pkin(7);
t91 = t68 * pkin(7);
t90 = t65 * t66;
t46 = t65 * t68;
t47 = t65 * t70;
t89 = t66 * t70;
t87 = t68 * t70;
t85 = t69 * t70;
t83 = -pkin(5) - qJ(4);
t31 = -t70 * pkin(2) - t68 * qJ(3) - pkin(1);
t15 = pkin(7) * t89 + t65 * t31;
t82 = t102 * qJ(3) ^ 2;
t53 = t65 * qJ(3);
t32 = t65 * pkin(4) + t53;
t33 = (pkin(4) + qJ(3)) * t66;
t81 = qJ(3) * t70;
t80 = t63 * t90;
t79 = t65 * t87;
t78 = t66 * t87;
t77 = t65 * qJ(4) + pkin(2);
t42 = pkin(7) * t47;
t14 = t66 * t31 - t42;
t60 = t70 * pkin(3);
t13 = -t14 + t60;
t12 = t70 * qJ(4) - t15;
t76 = -pkin(2) * t68 + t81;
t75 = -t12 * t66 + t13 * t65;
t74 = -t14 * t65 + t15 * t66;
t30 = -t66 * pkin(3) - t77;
t73 = -t30 * t68 - t81;
t72 = pkin(7) ^ 2;
t64 = t70 ^ 2;
t59 = t63 * t72;
t51 = t67 * t70;
t49 = t62 * t63;
t45 = t61 * t63;
t41 = 0.2e1 * t90;
t40 = t67 ^ 2 + t69 ^ 2;
t39 = qJ(4) * t50;
t37 = t65 * t50;
t36 = 0.2e1 * t78;
t35 = 0.2e1 * t79;
t34 = -0.2e1 * t80;
t29 = 0.2e1 * t102 * qJ(3);
t25 = (-t61 + t62) * t68;
t23 = t66 * pkin(8) + t33;
t22 = t65 * pkin(8) + t32;
t21 = t77 + t101;
t18 = t27 * t68;
t17 = -t39 + (pkin(3) * t65 + pkin(7)) * t68;
t16 = t83 * t65 - pkin(2) - t101;
t10 = -t99 * t68 - t39;
t9 = -pkin(4) * t46 - t12;
t8 = -t39 + (-pkin(5) * t66 - t99) * t68;
t7 = t69 * t22 + t67 * t23;
t6 = -t67 * t22 + t69 * t23;
t5 = t13 + t100;
t4 = t83 * t70 + (-pkin(4) - pkin(8)) * t46 + t15;
t3 = t42 + t60 + (pkin(8) * t68 - t31) * t66 + t100;
t2 = t69 * t3 + t67 * t4;
t1 = -t67 * t3 + t69 * t4;
t11 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t63, 0.2e1 * t87, 0, t64, 0, 0, pkin(1) * t93, -0.2e1 * pkin(1) * t68, 0.2e1 * (t63 + t64) * pkin(7), pkin(1) ^ 2 + t64 * t72 + t59, t49, t34, -0.2e1 * t78, t45, t35, t64, -0.2e1 * t14 * t70 + 0.2e1 * t65 * t92, 0.2e1 * t15 * t70 + 0.2e1 * t66 * t92 (-t14 * t66 - t15 * t65) * t94, t14 ^ 2 + t15 ^ 2 + t59, t64, t36, -0.2e1 * t79, t49, t34, t45 (t12 * t65 + t13 * t66) * t94, -0.2e1 * t13 * t70 - 0.2e1 * t17 * t46, 0.2e1 * t12 * t70 - 0.2e1 * t17 * t50, t12 ^ 2 + t13 ^ 2 + t17 ^ 2, t45, t35, 0.2e1 * t80, t64, t36, t49, -0.2e1 * t10 * t50 - 0.2e1 * t9 * t70 (-t5 * t66 + t65 * t9) * t94, 0.2e1 * t10 * t46 + 0.2e1 * t5 * t70, t10 ^ 2 + t5 ^ 2 + t9 ^ 2, t20 ^ 2, -t18 * t98, t70 * t98, t18 ^ 2, -t18 * t93, t64, -0.2e1 * t1 * t70 - 0.2e1 * t8 * t18, 0.2e1 * t2 * t70 + 0.2e1 * t8 * t20, -0.2e1 * t1 * t20 + 0.2e1 * t2 * t18, t1 ^ 2 + t2 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t70, 0, -t91, -t70 * pkin(7), 0, 0, t37, t25, -t47, -t37, -t89, 0, -pkin(7) * t50 + t76 * t65, pkin(7) * t46 + t76 * t66, t74, -pkin(2) * t91 + t74 * qJ(3), 0, t47, t89, t37, t25, -t37, t75, t17 * t66 + t65 * t73, -t17 * t65 + t73 * t66, qJ(3) * t75 + t17 * t30, -t37, -t89, -t25, 0, t47, t37, -t10 * t65 + t21 * t50 - t33 * t70 (-t32 * t68 - t9) * t66 + (t33 * t68 - t5) * t65, -t10 * t66 - t21 * t46 + t32 * t70, -t10 * t21 + t5 * t32 + t9 * t33, -t20 * t27, -t27 * t18 + t20 * t26, t27 * t70, t18 * t26, -t26 * t70, 0, -t16 * t18 - t8 * t26 - t6 * t70, t16 * t20 - t8 * t27 + t7 * t70, t1 * t27 + t7 * t18 + t2 * t26 - t6 * t20, t1 * t6 + t8 * t16 + t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, t41, 0, t62, 0, 0, pkin(2) * t95, pkin(2) * t96, t29, pkin(2) ^ 2 + t82, 0, 0, 0, t61, t41, t62, t29, t30 * t95, t30 * t96, t30 ^ 2 + t82, t62, 0, -0.2e1 * t90, 0, 0, t61, 0.2e1 * t21 * t65, -0.2e1 * t32 * t65 - 0.2e1 * t33 * t66, t21 * t95, t21 ^ 2 + t32 ^ 2 + t33 ^ 2, t27 ^ 2, t26 * t97, 0, t26 ^ 2, 0, 0, -0.2e1 * t16 * t26, t16 * t97, 0.2e1 * t7 * t26 + 0.2e1 * t6 * t27, t16 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, t50, 0, t91, 0, 0, 0, 0, 0, 0, 0, -t46, -t50, t17, 0, 0, 0, 0, 0, 0, -t50, 0, t46, t10, 0, 0, 0, 0, 0, 0, -t18, t20, 0, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, t65, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, t66, -t65, t30, 0, 0, 0, 0, 0, 0, -t65, 0, -t66, -t21, 0, 0, 0, 0, 0, 0, -t26, -t27, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t70, 0, t13, 0, 0, 0, 0, 0, 0, 0, -t50, t70, t5, 0, 0, 0, 0, 0, 0, t51, t85, t69 * t18 + t67 * t20, -t1 * t67 + t2 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, 0, t53, 0, 0, 0, 0, 0, 0, 0, -t65, 0, t32, 0, 0, 0, 0, 0, 0, 0, 0, t69 * t26 - t67 * t27, -t6 * t67 + t7 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, t46, 0, t9, 0, 0, 0, 0, 0, 0, -t85, t51, t67 * t18 - t69 * t20, t1 * t69 + t2 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, 0, t33, 0, 0, 0, 0, 0, 0, 0, 0, t67 * t26 + t69 * t27, t6 * t69 + t7 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, t18, -t70, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, 0, t26, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, -t69, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t67, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
