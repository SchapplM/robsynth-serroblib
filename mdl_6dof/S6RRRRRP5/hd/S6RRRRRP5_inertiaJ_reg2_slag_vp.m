% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP5_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 05:03:11
% EndTime: 2019-05-08 05:03:21
% DurationCPUTime: 2.42s
% Computational Cost: add. (2731->217), mult. (5568->365), div. (0->0), fcn. (6239->8), ass. (0->118)
t90 = sin(qJ(4));
t91 = sin(qJ(3));
t94 = cos(qJ(4));
t95 = cos(qJ(3));
t62 = -t90 * t91 + t94 * t95;
t113 = t94 * t91;
t63 = t90 * t95 + t113;
t89 = sin(qJ(5));
t93 = cos(qJ(5));
t38 = -t93 * t62 + t89 * t63;
t78 = -t95 * pkin(3) - pkin(2);
t51 = -t62 * pkin(4) + t78;
t21 = t38 * pkin(5) + t51;
t134 = 0.2e1 * t21;
t133 = 0.2e1 * t51;
t132 = 0.2e1 * t63;
t92 = sin(qJ(2));
t131 = -0.2e1 * t92;
t96 = cos(qJ(2));
t130 = -0.2e1 * t96;
t129 = 0.2e1 * t96;
t128 = -pkin(9) - pkin(8);
t127 = pkin(2) * t95;
t126 = pkin(7) * t91;
t86 = t92 ^ 2;
t125 = t86 * pkin(7);
t124 = t89 * pkin(4);
t123 = t90 * pkin(3);
t82 = t92 * pkin(7);
t83 = t93 * pkin(4);
t122 = t96 * pkin(3);
t121 = t96 * pkin(4);
t120 = t96 * pkin(5);
t119 = t38 * t96;
t40 = t89 * t62 + t93 * t63;
t118 = t40 * t96;
t117 = t91 * t92;
t116 = t91 * t95;
t115 = t91 * t96;
t111 = t95 * t96;
t107 = pkin(7) * t111;
t66 = -t96 * pkin(2) - t92 * pkin(8) - pkin(1);
t43 = t107 + (-pkin(9) * t92 + t66) * t91;
t114 = t94 * t43;
t112 = t95 * t92;
t65 = pkin(3) * t117 + t82;
t85 = t91 ^ 2;
t87 = t95 ^ 2;
t110 = t85 + t87;
t109 = t92 * t129;
t108 = t93 * t123;
t106 = t91 * t112;
t61 = t95 * t66;
t41 = -pkin(9) * t112 + t61 + (-pkin(3) - t126) * t96;
t18 = t90 * t41 + t114;
t54 = -t90 * t112 - t92 * t113;
t13 = t54 * pkin(10) + t18;
t17 = t94 * t41 - t90 * t43;
t55 = t94 * t112 - t90 * t117;
t9 = -t55 * pkin(10) - t121 + t17;
t3 = -t89 * t13 + t93 * t9;
t67 = t128 * t91;
t68 = t128 * t95;
t44 = t94 * t67 + t90 * t68;
t32 = -t63 * pkin(10) + t44;
t45 = t90 * t67 - t94 * t68;
t33 = t62 * pkin(10) + t45;
t11 = t93 * t32 - t89 * t33;
t84 = t94 * pkin(3);
t77 = t84 + pkin(4);
t58 = -t89 * t123 + t93 * t77;
t42 = -t54 * pkin(4) + t65;
t4 = t93 * t13 + t89 * t9;
t12 = t89 * t32 + t93 * t33;
t48 = -pkin(7) * t115 + t61;
t49 = t91 * t66 + t107;
t105 = -t48 * t91 + t49 * t95;
t97 = 0.2e1 * pkin(5);
t104 = t58 + t97;
t30 = t89 * t54 + t93 * t55;
t103 = -t30 * qJ(6) + t3;
t28 = -t93 * t54 + t89 * t55;
t102 = t28 * qJ(6) - t4;
t100 = pkin(4) ^ 2;
t99 = pkin(7) ^ 2;
t88 = t96 ^ 2;
t81 = t86 * t99;
t80 = t89 ^ 2 * t100;
t79 = -0.2e1 * t124;
t76 = t83 + pkin(5);
t73 = t89 * t121;
t59 = t89 * t77 + t108;
t57 = t59 ^ 2;
t56 = pkin(5) + t58;
t53 = 0.2e1 * t59;
t52 = t59 * t96;
t50 = t59 * t124;
t47 = -t108 + (-pkin(4) - t77) * t89;
t37 = t40 ^ 2;
t36 = t38 ^ 2;
t34 = t38 * t124;
t27 = t30 ^ 2;
t26 = t28 ^ 2;
t25 = t30 * t130;
t24 = t28 * t129;
t23 = t28 * t124;
t22 = t59 * t38;
t20 = t59 * t28;
t19 = -0.2e1 * t40 * t38;
t16 = t28 * pkin(5) + t42;
t15 = t30 * t40;
t14 = t28 * t38;
t10 = -0.2e1 * t30 * t28;
t7 = -t38 * qJ(6) + t12;
t6 = -t40 * qJ(6) + t11;
t5 = -t40 * t28 - t30 * t38;
t1 = t103 - t120;
t2 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t86, t109, 0, t88, 0, 0, pkin(1) * t129, pkin(1) * t131, 0.2e1 * (t86 + t88) * pkin(7), pkin(1) ^ 2 + t88 * t99 + t81, t87 * t86, -0.2e1 * t86 * t116, t111 * t131, t85 * t86, t91 * t109, t88, 0.2e1 * t91 * t125 - 0.2e1 * t48 * t96, 0.2e1 * t95 * t125 + 0.2e1 * t49 * t96, 0.2e1 * (-t48 * t95 - t49 * t91) * t92, t48 ^ 2 + t49 ^ 2 + t81, t55 ^ 2, 0.2e1 * t55 * t54, t55 * t130, t54 ^ 2, t54 * t130, t88, -0.2e1 * t17 * t96 - 0.2e1 * t65 * t54, 0.2e1 * t18 * t96 + 0.2e1 * t65 * t55, -0.2e1 * t17 * t55 + 0.2e1 * t18 * t54, t17 ^ 2 + t18 ^ 2 + t65 ^ 2, t27, t10, t25, t26, t24, t88, 0.2e1 * t42 * t28 - 0.2e1 * t3 * t96, 0.2e1 * t42 * t30 + 0.2e1 * t4 * t96, -0.2e1 * t4 * t28 - 0.2e1 * t3 * t30, t3 ^ 2 + t4 ^ 2 + t42 ^ 2, t27, t10, t25, t26, t24, t88, -0.2e1 * t1 * t96 + 0.2e1 * t16 * t28, -0.2e1 * t102 * t96 + 0.2e1 * t16 * t30, -0.2e1 * t1 * t30 + 0.2e1 * t102 * t28, t1 ^ 2 + t102 ^ 2 + t16 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t96, 0, -t82, -t96 * pkin(7), 0, 0, t106 (-t85 + t87) * t92, -t115, -t106, -t111, 0, -pkin(7) * t112 + (-pkin(2) * t92 + pkin(8) * t96) * t91, pkin(8) * t111 + (t126 - t127) * t92, t105, -pkin(2) * t82 + t105 * pkin(8), t55 * t63, t63 * t54 + t55 * t62, -t63 * t96, t54 * t62, -t62 * t96, 0, -t44 * t96 - t78 * t54 - t65 * t62, t45 * t96 + t78 * t55 + t65 * t63, -t17 * t63 + t18 * t62 - t44 * t55 + t45 * t54, t17 * t44 + t18 * t45 + t65 * t78, t15, t5, -t118, t14, t119, 0, -t11 * t96 + t51 * t28 + t42 * t38, t12 * t96 + t51 * t30 + t42 * t40, -t11 * t30 - t12 * t28 - t3 * t40 - t4 * t38, t3 * t11 + t4 * t12 + t42 * t51, t15, t5, -t118, t14, t119, 0, t16 * t38 + t21 * t28 - t6 * t96, t16 * t40 + t21 * t30 + t7 * t96, -t1 * t40 + t102 * t38 - t7 * t28 - t6 * t30, t1 * t6 - t102 * t7 + t16 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t85, 0.2e1 * t116, 0, t87, 0, 0, 0.2e1 * t127, -0.2e1 * pkin(2) * t91, 0.2e1 * t110 * pkin(8), t110 * pkin(8) ^ 2 + pkin(2) ^ 2, t63 ^ 2, t62 * t132, 0, t62 ^ 2, 0, 0, -0.2e1 * t78 * t62, t78 * t132, -0.2e1 * t44 * t63 + 0.2e1 * t45 * t62, t44 ^ 2 + t45 ^ 2 + t78 ^ 2, t37, t19, 0, t36, 0, 0, t38 * t133, t40 * t133, -0.2e1 * t11 * t40 - 0.2e1 * t12 * t38, t11 ^ 2 + t12 ^ 2 + t51 ^ 2, t37, t19, 0, t36, 0, 0, t38 * t134, t40 * t134, -0.2e1 * t7 * t38 - 0.2e1 * t6 * t40, t21 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, 0, -t117, -t96, t48, -t49, 0, 0, 0, 0, t55, 0, t54, -t96, -t122 * t94 + t17, -t114 + (-t41 + t122) * t90 (t54 * t90 - t55 * t94) * pkin(3) (t17 * t94 + t18 * t90) * pkin(3), 0, 0, t30, 0, -t28, -t96, -t58 * t96 + t3, -t4 + t52, -t58 * t30 - t20, t3 * t58 + t4 * t59, 0, 0, t30, 0, -t28, -t96 (-pkin(5) - t56) * t96 + t103, t102 + t52, -t56 * t30 - t20, t1 * t56 - t102 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, t95, 0, -t91 * pkin(8), -t95 * pkin(8), 0, 0, 0, 0, t63, 0, t62, 0, t44, -t45 (t62 * t90 - t63 * t94) * pkin(3) (t44 * t94 + t45 * t90) * pkin(3), 0, 0, t40, 0, -t38, 0, t11, -t12, -t58 * t40 - t22, t11 * t58 + t12 * t59, 0, 0, t40, 0, -t38, 0, t6, -t7, -t56 * t40 - t22, t6 * t56 + t7 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t84, -0.2e1 * t123, 0 (t90 ^ 2 + t94 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t58, -t53, 0, t58 ^ 2 + t57, 0, 0, 0, 0, 0, 1, 0.2e1 * t56, -t53, 0, t56 ^ 2 + t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t54, -t96, t17, -t18, 0, 0, 0, 0, t30, 0, -t28, -t96, -t121 * t93 + t3, -t4 + t73, -t30 * t83 - t23 (t3 * t93 + t4 * t89) * pkin(4), 0, 0, t30, 0, -t28, -t96 (-pkin(5) - t76) * t96 + t103, t102 + t73, -t76 * t30 - t23, t1 * t76 - t102 * t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t62, 0, t44, -t45, 0, 0, 0, 0, t40, 0, -t38, 0, t11, -t12, -t40 * t83 - t34 (t11 * t93 + t12 * t89) * pkin(4), 0, 0, t40, 0, -t38, 0, t6, -t7, -t76 * t40 - t34, t124 * t7 + t6 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t84, -t123, 0, 0, 0, 0, 0, 0, 0, 1, t58 + t83, t47, 0, t58 * t83 + t50, 0, 0, 0, 0, 0, 1, t104 + t83, t47, 0, t56 * t76 + t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t83, t79, 0, t93 ^ 2 * t100 + t80, 0, 0, 0, 0, 0, 1, 0.2e1 * t76, t79, 0, t76 ^ 2 + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, -t28, -t96, t3, -t4, 0, 0, 0, 0, t30, 0, -t28, -t96, t103 - 0.2e1 * t120, t102, -t30 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, -t38, 0, t11, -t12, 0, 0, 0, 0, t40, 0, -t38, 0, t6, -t7, -t40 * pkin(5), t6 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t58, -t59, 0, 0, 0, 0, 0, 0, 0, 1, t104, -t59, 0, t56 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t83, -t124, 0, 0, 0, 0, 0, 0, 0, 1, t97 + t83, -t124, 0, t76 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t97, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, t30, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t40, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t2;
