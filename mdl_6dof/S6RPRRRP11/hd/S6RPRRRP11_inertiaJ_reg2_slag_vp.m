% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP11_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP11_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP11_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:08:25
% EndTime: 2019-05-06 02:08:34
% DurationCPUTime: 2.92s
% Computational Cost: add. (4856->247), mult. (13124->469), div. (0->0), fcn. (15177->12), ass. (0->144)
t110 = sin(qJ(3));
t113 = cos(qJ(3));
t103 = sin(pkin(7));
t106 = cos(pkin(7));
t107 = cos(pkin(6));
t102 = sin(pkin(12));
t104 = sin(pkin(6));
t136 = t102 * t104;
t105 = cos(pkin(12));
t152 = pkin(1) * t107;
t87 = t105 * t152;
t55 = t107 * pkin(2) + t87 + (-pkin(9) * t106 - qJ(2)) * t136;
t60 = (-pkin(9) * t102 * t103 - pkin(2) * t105 - pkin(1)) * t104;
t119 = t103 * t60 + t106 * t55;
t132 = t105 * t106;
t123 = t104 * t132;
t133 = t104 * t105;
t67 = qJ(2) * t133 + t102 * t152;
t50 = (t103 * t107 + t123) * pkin(9) + t67;
t26 = -t110 * t50 + t113 * t119;
t109 = sin(qJ(4));
t112 = cos(qJ(4));
t135 = t103 * t110;
t54 = t107 * t135 + (t102 * t113 + t110 * t132) * t104;
t65 = -t103 * t133 + t106 * t107;
t43 = t109 * t54 - t112 * t65;
t42 = t43 ^ 2;
t134 = t103 * t113;
t52 = -t107 * t134 + t110 * t136 - t113 * t123;
t161 = t52 ^ 2;
t68 = -t106 * t112 + t109 * t135;
t160 = t68 ^ 2;
t159 = -0.2e1 * t43;
t158 = -0.2e1 * t52;
t157 = 0.2e1 * t104;
t156 = -0.2e1 * t109;
t155 = 0.2e1 * t109;
t154 = 0.2e1 * t112;
t153 = pkin(5) * t43;
t111 = cos(qJ(5));
t151 = pkin(4) * t111;
t108 = sin(qJ(5));
t150 = pkin(10) * t108;
t149 = t108 * pkin(5);
t39 = -t103 * t55 + t106 * t60;
t22 = pkin(3) * t52 - pkin(10) * t54 + t39;
t27 = t110 * t119 + t113 * t50;
t25 = t65 * pkin(10) + t27;
t8 = -t109 * t25 + t112 * t22;
t6 = -pkin(4) * t52 - t8;
t148 = t108 * t6;
t147 = t109 * pkin(10);
t146 = t111 * t6;
t145 = -qJ(6) - pkin(11);
t97 = t104 ^ 2;
t144 = t105 * t97;
t40 = t108 * t43;
t143 = t109 * t52;
t142 = t109 * t68;
t41 = t111 * t43;
t141 = t112 * t52;
t45 = t109 * t65 + t112 * t54;
t33 = t108 * t45 - t111 * t52;
t29 = t33 * t111;
t35 = t108 * t52 + t111 * t45;
t30 = t35 * t108;
t140 = t43 * t112;
t139 = t45 * t109;
t138 = t68 * t111;
t100 = t111 ^ 2;
t98 = t108 ^ 2;
t137 = t100 + t98;
t131 = t108 * t109;
t130 = t108 * t111;
t129 = t108 * t112;
t93 = t111 * t109;
t128 = t111 * t112;
t127 = t107 * t157;
t126 = t109 * t154;
t125 = pkin(10) * t128;
t124 = t33 * t131;
t24 = -t65 * pkin(3) - t26;
t12 = pkin(4) * t43 - pkin(11) * t45 + t24;
t9 = t109 * t22 + t112 * t25;
t7 = pkin(11) * t52 + t9;
t3 = -t108 * t7 + t111 * t12;
t75 = -pkin(4) * t112 - pkin(11) * t109 - pkin(3);
t71 = t111 * t75;
t122 = -qJ(6) * t93 + t71;
t4 = t108 * t12 + t111 * t7;
t121 = -t3 * t108 + t4 * t111;
t120 = -t8 * t109 + t9 * t112;
t70 = t106 * t109 + t112 * t135;
t56 = -t108 * t70 - t111 * t134;
t57 = -t108 * t134 + t111 * t70;
t38 = -t108 * t56 + t111 * t57;
t61 = -pkin(10) * t129 + t71;
t62 = t108 * t75 + t125;
t118 = -t108 * t61 + t111 * t62;
t117 = t112 * t70 + t142;
t116 = -qJ(6) * t35 + t3;
t115 = pkin(10) ^ 2;
t101 = t112 ^ 2;
t99 = t109 ^ 2;
t96 = t103 ^ 2;
t95 = t99 * t115;
t94 = -pkin(5) * t111 - pkin(4);
t92 = t100 * t99;
t91 = t98 * t99;
t89 = t96 * t113 ^ 2;
t88 = 0.2e1 * t130;
t84 = t108 * t93;
t81 = t128 * t156;
t80 = -0.2e1 * t99 * t130;
t79 = t108 * t126;
t78 = t145 * t111;
t77 = t145 * t108;
t74 = (pkin(10) + t149) * t109;
t72 = (t100 - t98) * t109;
t66 = -qJ(2) * t136 + t87;
t64 = t68 * t108;
t58 = t125 + (-qJ(6) * t109 + t75) * t108;
t51 = (-pkin(5) - t150) * t112 + t122;
t47 = t112 * t57 + t68 * t93;
t46 = -t112 * t56 + t131 * t68;
t37 = (-t108 * t57 - t111 * t56) * t109;
t36 = t56 ^ 2 + t57 ^ 2 + t160;
t32 = t35 ^ 2;
t31 = t33 ^ 2;
t28 = t35 * t93;
t21 = 0.2e1 * t35 * t43;
t20 = t33 * t159;
t19 = -t112 * t35 + t43 * t93;
t18 = t112 * t33 - t131 * t43;
t17 = -0.2e1 * t35 * t33;
t16 = -t108 * t33 + t111 * t35;
t15 = t35 * t68 - t43 * t57;
t14 = t33 * t68 + t43 * t56;
t13 = (-t30 - t29) * t109;
t10 = -t33 * t57 - t35 * t56;
t5 = pkin(5) * t33 + t6;
t2 = -qJ(6) * t33 + t4;
t1 = t116 + t153;
t11 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t97 * t102 ^ 2, 0.2e1 * t102 * t144, t102 * t127, t97 * t105 ^ 2, t105 * t127, t107 ^ 2, 0.2e1 * pkin(1) * t144 + 0.2e1 * t107 * t66, -0.2e1 * pkin(1) * t102 * t97 - 0.2e1 * t107 * t67 (-t102 * t66 + t105 * t67) * t157, pkin(1) ^ 2 * t97 + t66 ^ 2 + t67 ^ 2, t54 ^ 2, t54 * t158, 0.2e1 * t54 * t65, t161, t65 * t158, t65 ^ 2, 0.2e1 * t26 * t65 + 0.2e1 * t39 * t52, -0.2e1 * t27 * t65 + 0.2e1 * t39 * t54, -0.2e1 * t26 * t54 - 0.2e1 * t27 * t52, t26 ^ 2 + t27 ^ 2 + t39 ^ 2, t45 ^ 2, t45 * t159, 0.2e1 * t45 * t52, t42, t43 * t158, t161, 0.2e1 * t24 * t43 + 0.2e1 * t52 * t8, 0.2e1 * t24 * t45 - 0.2e1 * t52 * t9, -0.2e1 * t43 * t9 - 0.2e1 * t45 * t8, t24 ^ 2 + t8 ^ 2 + t9 ^ 2, t32, t17, t21, t31, t20, t42, 0.2e1 * t3 * t43 + 0.2e1 * t33 * t6, 0.2e1 * t35 * t6 - 0.2e1 * t4 * t43, -0.2e1 * t3 * t35 - 0.2e1 * t33 * t4, t3 ^ 2 + t4 ^ 2 + t6 ^ 2, t32, t17, t21, t31, t20, t42, 0.2e1 * t1 * t43 + 0.2e1 * t33 * t5, -0.2e1 * t2 * t43 + 0.2e1 * t35 * t5, -0.2e1 * t1 * t35 - 0.2e1 * t2 * t33, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t133, t136, 0, -t104 * pkin(1), 0, 0, 0, 0, 0, 0, t106 * t52 + t134 * t65, t106 * t54 - t135 * t65 (-t110 * t52 - t113 * t54) * t103, t39 * t106 + (t110 * t27 + t113 * t26) * t103, 0, 0, 0, 0, 0, 0, -t134 * t43 - t52 * t68, -t134 * t45 - t52 * t70, -t43 * t70 + t45 * t68, -t134 * t24 - t68 * t8 + t70 * t9, 0, 0, 0, 0, 0, 0, t14, t15, t10, t3 * t56 + t4 * t57 + t6 * t68, 0, 0, 0, 0, 0, 0, t14, t15, t10, t1 * t56 + t2 * t57 + t5 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110 ^ 2 * t96 + t106 ^ 2 + t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 ^ 2 + t160 + t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, t65, t26, -t27, 0, 0, t139, -t109 * t43 + t112 * t45, t143, -t140, t141, 0, -pkin(3) * t43 - pkin(10) * t143 - t112 * t24, -pkin(3) * t45 - pkin(10) * t141 + t109 * t24 (t139 - t140) * pkin(10) + t120, -t24 * pkin(3) + pkin(10) * t120, t28, t13, t19, t124, t18, -t140, -t3 * t112 + t61 * t43 + (pkin(10) * t33 + t148) * t109, t4 * t112 - t62 * t43 + (pkin(10) * t35 + t146) * t109, -t62 * t33 - t61 * t35 + (-t108 * t4 - t111 * t3) * t109, t147 * t6 + t3 * t61 + t4 * t62, t28, t13, t19, t124, t18, -t140, -t1 * t112 + t131 * t5 + t33 * t74 + t43 * t51, t112 * t2 + t35 * t74 - t43 * t58 + t5 * t93, -t58 * t33 - t51 * t35 + (-t1 * t111 - t108 * t2) * t109, t1 * t51 + t2 * t58 + t5 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, -t135, 0, 0, 0, 0, 0, 0, 0, 0, t112 * t134, -t109 * t134, t117, pkin(3) * t134 + pkin(10) * t117, 0, 0, 0, 0, 0, 0, t46, t47, t37, pkin(10) * t142 + t56 * t61 + t57 * t62, 0, 0, 0, 0, 0, 0, t46, t47, t37, t51 * t56 + t57 * t58 + t68 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t99, t126, 0, t101, 0, 0, pkin(3) * t154, pkin(3) * t156, 0.2e1 * (t101 + t99) * pkin(10), pkin(3) ^ 2 + t101 * t115 + t95, t92, t80, t81, t91, t79, t101, -0.2e1 * t112 * t61 + 0.2e1 * t150 * t99, 0.2e1 * pkin(10) * t111 * t99 + 0.2e1 * t112 * t62 (-t108 * t62 - t111 * t61) * t155, t61 ^ 2 + t62 ^ 2 + t95, t92, t80, t81, t91, t79, t101, -0.2e1 * t112 * t51 + 0.2e1 * t131 * t74, 0.2e1 * t112 * t58 + 0.2e1 * t74 * t93 (-t108 * t58 - t111 * t51) * t155, t51 ^ 2 + t58 ^ 2 + t74 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, -t43, t52, t8, -t9, 0, 0, t30, t16, t40, -t29, t41, 0, -pkin(4) * t33 - pkin(11) * t40 - t146, -pkin(4) * t35 - pkin(11) * t41 + t148 (t30 - t29) * pkin(11) + t121, -t6 * pkin(4) + pkin(11) * t121, t30, t16, t40, -t29, t41, 0, -t111 * t5 + t33 * t94 + t43 * t77, t108 * t5 + t35 * t94 + t43 * t78, -t1 * t108 + t111 * t2 + t33 * t78 - t35 * t77, t1 * t77 - t2 * t78 + t5 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t68, -t70, 0, 0, 0, 0, 0, 0, 0, 0, -t138, t64, t38, -t68 * pkin(4) + pkin(11) * t38, 0, 0, 0, 0, 0, 0, -t138, t64, t38, t56 * t77 - t57 * t78 + t68 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, 0, t112, 0, -t147, -t112 * pkin(10), 0, 0, t84, t72, -t129, -t84, -t128, 0, -pkin(10) * t93 + (-pkin(4) * t109 + pkin(11) * t112) * t108, pkin(11) * t128 + (t150 - t151) * t109, t118, -pkin(4) * t147 + pkin(11) * t118, t84, t72, -t129, -t84, -t128, 0, -t111 * t74 - t112 * t77 + t131 * t94, t108 * t74 - t112 * t78 + t93 * t94 (-t109 * t77 + t58) * t111 + (t109 * t78 - t51) * t108, t51 * t77 - t58 * t78 + t74 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t98, t88, 0, t100, 0, 0, 0.2e1 * t151, -0.2e1 * pkin(4) * t108, 0.2e1 * t137 * pkin(11), pkin(11) ^ 2 * t137 + pkin(4) ^ 2, t98, t88, 0, t100, 0, 0, -0.2e1 * t94 * t111, 0.2e1 * t94 * t108, -0.2e1 * t108 * t77 - 0.2e1 * t111 * t78, t77 ^ 2 + t78 ^ 2 + t94 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t33, t43, t3, -t4, 0, 0, 0, 0, t35, 0, -t33, t43, t116 + 0.2e1 * t153, -t2, -t35 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t57, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t57, 0, t56 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, -t131, -t112, t61, -t62, 0, 0, 0, 0, t93, 0, -t131, -t112 (-0.2e1 * pkin(5) - t150) * t112 + t122, -t58, -pkin(5) * t93, t51 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, t111, 0, -t108 * pkin(11), -t111 * pkin(11), 0, 0, 0, 0, t108, 0, t111, 0, t77, t78, -t149, t77 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, t35, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, t93, 0, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, t108, 0, t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t11;
