% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP13_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP13_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP13_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:13:57
% EndTime: 2019-05-06 19:14:05
% DurationCPUTime: 2.42s
% Computational Cost: add. (1826->212), mult. (4107->388), div. (0->0), fcn. (4412->8), ass. (0->141)
t150 = -2 * pkin(2);
t149 = 2 * pkin(5);
t100 = cos(qJ(2));
t93 = sin(pkin(6));
t125 = t93 * t100;
t94 = cos(pkin(6));
t96 = sin(qJ(4));
t99 = cos(qJ(4));
t46 = t99 * t125 + t94 * t96;
t44 = t46 ^ 2;
t148 = -0.2e1 * t46;
t147 = 0.2e1 * t93;
t98 = cos(qJ(5));
t146 = 0.2e1 * t98;
t145 = 0.2e1 * t99;
t144 = 2 * qJ(3);
t101 = -pkin(2) - pkin(9);
t143 = pkin(5) * t46;
t138 = pkin(1) * t100;
t115 = -pkin(2) - t138;
t97 = sin(qJ(2));
t77 = t93 * t97;
t70 = pkin(8) * t77;
t26 = pkin(3) * t77 + t70 + (-pkin(9) + t115) * t94;
t114 = -qJ(3) * t97 - pkin(1);
t35 = (t101 * t100 + t114) * t93;
t10 = t26 * t99 - t96 * t35;
t6 = -pkin(4) * t77 - t10;
t95 = sin(qJ(5));
t142 = t6 * t95;
t141 = t6 * t98;
t140 = t95 * pkin(5);
t139 = t99 * pkin(4);
t48 = -t96 * t125 + t94 * t99;
t31 = t48 * t95 - t98 * t77;
t24 = t31 * t98;
t33 = t48 * t98 + t95 * t77;
t25 = t33 * t95;
t43 = t46 * t96;
t137 = t48 * t99;
t136 = t94 * t97;
t41 = t95 * t46;
t79 = t95 * t96;
t135 = t95 * t98;
t134 = t95 * t99;
t42 = t98 * t46;
t81 = t98 * t96;
t82 = t98 * t99;
t83 = -pkin(5) * t98 - pkin(4);
t133 = t99 * t83;
t132 = t99 * t96;
t131 = -qJ(6) - pkin(10);
t50 = pkin(1) * t136 + pkin(8) * t125;
t88 = t95 ^ 2;
t90 = t98 ^ 2;
t130 = t88 + t90;
t89 = t96 ^ 2;
t91 = t99 ^ 2;
t69 = t89 + t91;
t129 = qJ(6) * t99;
t86 = t93 ^ 2;
t128 = t100 * t86;
t127 = t101 * t91;
t126 = t101 * t95;
t124 = t96 * t101;
t123 = t99 * t101;
t122 = -0.2e1 * t132;
t121 = t31 * t134;
t120 = t93 * t136;
t119 = t96 * t77;
t85 = t94 * qJ(3);
t38 = -t85 - t50;
t118 = t101 * t77;
t117 = t98 * t124;
t116 = t94 * t125;
t34 = pkin(3) * t125 - t38;
t14 = pkin(4) * t46 - pkin(10) * t48 + t34;
t11 = t26 * t96 + t35 * t99;
t7 = pkin(10) * t77 + t11;
t3 = t98 * t14 - t7 * t95;
t55 = t130 * t96;
t58 = pkin(4) * t96 - pkin(10) * t99 + qJ(3);
t51 = t98 * t58;
t113 = -t98 * t129 + t51;
t112 = -pkin(10) * t96 - t139;
t104 = -qJ(6) * t33 + t3;
t1 = t104 + t143;
t4 = t14 * t95 + t7 * t98;
t2 = -qJ(6) * t31 + t4;
t111 = -t1 * t95 + t2 * t98;
t110 = -t3 * t95 + t4 * t98;
t109 = t10 * t99 + t11 * t96;
t108 = t25 - t24;
t36 = -t95 * t124 + t51;
t37 = t58 * t95 + t117;
t107 = -t36 * t95 + t37 * t98;
t106 = -t137 - t43;
t60 = t131 * t95;
t61 = t131 * t98;
t105 = -t60 * t95 - t61 * t98;
t102 = qJ(3) ^ 2;
t92 = t101 ^ 2;
t87 = t94 ^ 2;
t84 = t91 * t92;
t80 = t90 * t91;
t78 = t88 * t91;
t76 = t86 * t100 ^ 2;
t75 = t86 * t97 ^ 2;
t74 = 0.2e1 * t135;
t68 = t95 * t82;
t66 = t99 * t77;
t64 = t132 * t146;
t63 = -0.2e1 * t91 * t135;
t62 = t95 * t122;
t59 = 0.2e1 * t97 * t128;
t57 = t69 * t101;
t56 = t69 * t98;
t54 = t69 * t95;
t53 = (-t88 + t90) * t99;
t52 = (-t101 + t140) * t99;
t49 = t94 * t138 - t70;
t45 = t130 * t89 + t91;
t40 = t115 * t94 + t70;
t39 = (-pkin(2) * t100 + t114) * t93;
t30 = t33 ^ 2;
t29 = t31 ^ 2;
t28 = t117 + (t58 - t129) * t95;
t23 = (pkin(5) - t126) * t96 + t113;
t22 = t33 * t82;
t21 = 0.2e1 * t33 * t46;
t20 = t31 * t148;
t19 = t33 * t96 + t46 * t82;
t18 = -t33 * t99 - t46 * t81;
t17 = -t46 * t134 - t31 * t96;
t16 = -t31 * t99 - t46 * t79;
t15 = -0.2e1 * t33 * t31;
t13 = -t31 * t95 + t33 * t98;
t9 = (-t25 - t24) * t99;
t8 = t108 * t96;
t5 = pkin(5) * t31 + t6;
t12 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t75, t59, 0.2e1 * t120, t76, 0.2e1 * t116, t87, 0.2e1 * pkin(1) * t128 + 0.2e1 * t49 * t94, -0.2e1 * pkin(1) * t86 * t97 - 0.2e1 * t50 * t94 (t100 * t50 - t49 * t97) * t147, pkin(1) ^ 2 * t86 + t49 ^ 2 + t50 ^ 2, t87, -0.2e1 * t120, -0.2e1 * t116, t75, t59, t76 (-t100 * t38 + t40 * t97) * t147, 0.2e1 * t125 * t39 + 0.2e1 * t40 * t94, -0.2e1 * t38 * t94 - 0.2e1 * t39 * t77, t38 ^ 2 + t39 ^ 2 + t40 ^ 2, t48 ^ 2, t48 * t148, 0.2e1 * t48 * t77, t44, t77 * t148, t75, 0.2e1 * t10 * t77 + 0.2e1 * t34 * t46, -0.2e1 * t11 * t77 + 0.2e1 * t34 * t48, -0.2e1 * t10 * t48 - 0.2e1 * t11 * t46, t10 ^ 2 + t11 ^ 2 + t34 ^ 2, t30, t15, t21, t29, t20, t44, 0.2e1 * t3 * t46 + 0.2e1 * t31 * t6, 0.2e1 * t33 * t6 - 0.2e1 * t4 * t46, -0.2e1 * t3 * t33 - 0.2e1 * t31 * t4, t3 ^ 2 + t4 ^ 2 + t6 ^ 2, t30, t15, t21, t29, t20, t44, 0.2e1 * t1 * t46 + 0.2e1 * t31 * t5, -0.2e1 * t2 * t46 + 0.2e1 * t33 * t5, -0.2e1 * t1 * t33 - 0.2e1 * t2 * t31, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t125, t94, t49, -t50, 0, 0, t94, -t77, -t125, 0, 0, 0 (-pkin(2) * t97 + qJ(3) * t100) * t93, t70 + (t150 - t138) * t94, 0.2e1 * t85 + t50, -pkin(2) * t40 - qJ(3) * t38, t137, -t46 * t99 - t48 * t96, t66, t43, -t119, 0, qJ(3) * t46 + t118 * t99 + t34 * t96, qJ(3) * t48 - t118 * t96 + t34 * t99, t101 * t106 - t109, qJ(3) * t34 + t101 * t109, t22, t9, t19, t121, t17, t43, t3 * t96 + t36 * t46 + (-t101 * t31 + t142) * t99, -t37 * t46 - t4 * t96 + (-t101 * t33 + t141) * t99, -t31 * t37 - t33 * t36 + (-t3 * t98 - t4 * t95) * t99, -t123 * t6 + t3 * t36 + t37 * t4, t22, t9, t19, t121, t17, t43, t1 * t96 + t134 * t5 + t23 * t46 + t31 * t52, -t2 * t96 - t28 * t46 + t33 * t52 + t5 * t82, -t23 * t33 - t28 * t31 + (-t1 * t98 - t2 * t95) * t99, t1 * t23 + t2 * t28 + t5 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t150, t144, pkin(2) ^ 2 + t102, t91, t122, 0, t89, 0, 0, t96 * t144, t99 * t144, -0.2e1 * t57, t89 * t92 + t102 + t84, t80, t63, t64, t78, t62, t89, -0.2e1 * t126 * t91 + 0.2e1 * t36 * t96, -0.2e1 * t127 * t98 - 0.2e1 * t37 * t96 (-t36 * t98 - t37 * t95) * t145, t36 ^ 2 + t37 ^ 2 + t84, t80, t63, t64, t78, t62, t89, 0.2e1 * t134 * t52 + 0.2e1 * t23 * t96, -0.2e1 * t28 * t96 + 0.2e1 * t52 * t82 (-t23 * t98 - t28 * t95) * t145, t23 ^ 2 + t28 ^ 2 + t52 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t94, 0, t40, 0, 0, 0, 0, 0, 0, t66, -t119, t106, t109, 0, 0, 0, 0, 0, 0, t16, t18, t8, t110 * t96 - t6 * t99, 0, 0, 0, 0, 0, 0, t16, t18, t8, t111 * t96 - t5 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t69, t57, 0, 0, 0, 0, 0, 0, -t54, -t56, 0, t107 * t96 + t127, 0, 0, 0, 0, 0, 0, -t54, -t56, 0, -t52 * t99 + (-t23 * t95 + t28 * t98) * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t46, t77, t10, -t11, 0, 0, t25, t13, t41, -t24, t42, 0, -pkin(4) * t31 - pkin(10) * t41 - t141, -pkin(4) * t33 - pkin(10) * t42 + t142, pkin(10) * t108 + t110, -pkin(4) * t6 + pkin(10) * t110, t25, t13, t41, -t24, t42, 0, t31 * t83 + t46 * t60 - t5 * t98, t33 * t83 + t46 * t61 + t5 * t95, t31 * t61 - t33 * t60 + t111, t1 * t60 - t2 * t61 + t5 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, -t96, 0, t123, -t124, 0, 0, t68, t53, t79, -t68, t81, 0, t112 * t95 + t123 * t98, t112 * t98 - t123 * t95, t107, pkin(4) * t123 + pkin(10) * t107, t68, t53, t79, -t68, t81, 0, t133 * t95 - t52 * t98 + t60 * t96, t133 * t98 + t52 * t95 + t61 * t96 (-t60 * t99 + t28) * t98 + (t61 * t99 - t23) * t95, t23 * t60 - t28 * t61 + t52 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, -t96, 0, 0, 0, 0, 0, 0, 0, 0, t82, -t134, t55, pkin(10) * t55 + t139, 0, 0, 0, 0, 0, 0, t82, -t134, t55, t105 * t96 - t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88, t74, 0, t90, 0, 0, pkin(4) * t146, -0.2e1 * pkin(4) * t95, 0.2e1 * t130 * pkin(10), pkin(10) ^ 2 * t130 + pkin(4) ^ 2, t88, t74, 0, t90, 0, 0, -0.2e1 * t83 * t98, 0.2e1 * t83 * t95, 0.2e1 * t105, t60 ^ 2 + t61 ^ 2 + t83 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, -t31, t46, t3, -t4, 0, 0, 0, 0, t33, 0, -t31, t46, t104 + 0.2e1 * t143, -t2, -t33 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, -t134, t96, t36, -t37, 0, 0, 0, 0, t82, 0, -t134, t96 (t149 - t126) * t96 + t113, -t28, -pkin(5) * t82, t23 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t81, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t81, 0, -pkin(5) * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, t98, 0, -t95 * pkin(10), -t98 * pkin(10), 0, 0, 0, 0, t95, 0, t98, 0, t60, t61, -t140, t60 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t149, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t33, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, t82, 0, t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t98, t95, 0, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t12;
