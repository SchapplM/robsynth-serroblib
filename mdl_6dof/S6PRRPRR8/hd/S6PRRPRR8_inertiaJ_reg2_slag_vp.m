% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d5,d6,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRR8_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR8_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR8_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:20:06
% EndTime: 2019-05-05 06:20:13
% DurationCPUTime: 2.12s
% Computational Cost: add. (1391->191), mult. (3473->371), div. (0->0), fcn. (3972->12), ass. (0->121)
t67 = cos(pkin(7));
t76 = cos(qJ(2));
t113 = t67 * t76;
t65 = sin(pkin(7));
t71 = sin(qJ(3));
t53 = t65 * t71;
t66 = sin(pkin(6));
t68 = cos(pkin(6));
t72 = sin(qJ(2));
t75 = cos(qJ(3));
t19 = t68 * t53 - (-t71 * t113 - t72 * t75) * t66;
t15 = t19 ^ 2;
t117 = t66 * t72;
t118 = t65 * t75;
t17 = -t66 * t75 * t113 + t71 * t117 - t68 * t118;
t116 = t66 * t76;
t32 = -t65 * t116 + t68 * t67;
t137 = t17 ^ 2 + t32 ^ 2 + t15;
t136 = -2 * pkin(3);
t70 = sin(qJ(5));
t74 = cos(qJ(5));
t11 = -t17 * t74 + t32 * t70;
t135 = t11 ^ 2;
t33 = t74 * t118 + t70 * t67;
t134 = t33 ^ 2;
t133 = -0.2e1 * t33;
t132 = 0.2e1 * t65;
t73 = cos(qJ(6));
t131 = 0.2e1 * t73;
t130 = 2 * qJ(4);
t77 = -pkin(3) - pkin(10);
t129 = pkin(2) * t75;
t47 = pkin(9) * t53;
t91 = -pkin(3) - t129;
t16 = pkin(4) * t53 + t47 + (-pkin(10) + t91) * t67;
t89 = -qJ(4) * t71 - pkin(2);
t25 = (t77 * t75 + t89) * t65;
t8 = t74 * t16 - t70 * t25;
t6 = -pkin(5) * t53 - t8;
t69 = sin(qJ(6));
t128 = t6 * t69;
t127 = t6 * t73;
t126 = t74 * pkin(5);
t125 = t11 * t74;
t35 = -t70 * t118 + t74 * t67;
t21 = t69 * t35 - t73 * t53;
t124 = t21 * t73;
t23 = t73 * t35 + t69 * t53;
t123 = t23 * t69;
t122 = t33 * t70;
t121 = t35 * t74;
t57 = t65 ^ 2;
t120 = t57 * t75;
t63 = t74 ^ 2;
t119 = t63 * t77;
t115 = t67 * t71;
t114 = t67 * t75;
t112 = t69 * t33;
t111 = t69 * t70;
t110 = t69 * t73;
t109 = t69 * t74;
t108 = t70 * t77;
t107 = t73 * t33;
t106 = t73 * t70;
t54 = t73 * t74;
t105 = t73 * t77;
t104 = t74 * t21;
t103 = t74 * t23;
t102 = t74 * t33;
t101 = t74 * t70;
t100 = t74 * t77;
t37 = pkin(2) * t115 + pkin(9) * t118;
t60 = t69 ^ 2;
t62 = t73 ^ 2;
t99 = t60 + t62;
t61 = t70 ^ 2;
t46 = t61 + t63;
t98 = t19 * qJ(4);
t97 = -0.2e1 * t101;
t95 = t65 * t115;
t94 = t65 * t114;
t93 = t70 * t53;
t92 = t69 * t54;
t45 = t74 * t53;
t56 = t67 * qJ(4);
t28 = -t56 - t37;
t90 = t99 * t70;
t24 = pkin(4) * t118 - t28;
t88 = -pkin(11) * t70 - t126;
t10 = t33 * pkin(5) - t35 * pkin(11) + t24;
t9 = t70 * t16 + t74 * t25;
t7 = pkin(11) * t53 + t9;
t1 = t73 * t10 - t69 * t7;
t2 = t69 * t10 + t73 * t7;
t87 = -t1 * t69 + t2 * t73;
t13 = t17 * t70 + t32 * t74;
t4 = -t13 * t69 + t19 * t73;
t5 = t13 * t73 + t19 * t69;
t86 = -t4 * t69 + t5 * t73;
t85 = t9 * t70 + t8 * t74;
t3 = t13 * t70 - t125;
t84 = t123 - t124;
t40 = t70 * pkin(5) - t74 * pkin(11) + qJ(4);
t26 = -t69 * t108 + t73 * t40;
t27 = t70 * t105 + t69 * t40;
t83 = -t26 * t69 + t27 * t73;
t82 = t32 * t118 + t17 * t67;
t81 = -t19 * t67 + t32 * t53;
t80 = (t17 * t71 + t19 * t75) * t65;
t78 = qJ(4) ^ 2;
t64 = t77 ^ 2;
t59 = t67 ^ 2;
t55 = t63 * t64;
t52 = t57 * t75 ^ 2;
t51 = t57 * t71 ^ 2;
t41 = 0.2e1 * t71 * t120;
t38 = t46 * t77;
t36 = pkin(2) * t114 - t47;
t30 = t91 * t67 + t47;
t29 = (-pkin(3) * t75 + t89) * t65;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 ^ 2 + (t72 ^ 2 + t76 ^ 2) * t66 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 ^ 2 + t135 + t15, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4 ^ 2 + t5 ^ 2 + t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, -t117, 0, 0, 0, 0, 0, 0, 0, 0, -t82, t81, t80, -t32 * t65 * pkin(2) - t17 * t36 + t19 * t37, 0, 0, 0, 0, 0, 0, t80, t82, -t81, t17 * t30 - t19 * t28 + t32 * t29, 0, 0, 0, 0, 0, 0, -t11 * t53 + t19 * t33, -t13 * t53 + t19 * t35, t11 * t35 - t13 * t33, -t11 * t8 + t13 * t9 + t19 * t24, 0, 0, 0, 0, 0, 0, t11 * t21 + t4 * t33, t11 * t23 - t5 * t33, -t5 * t21 - t4 * t23, t4 * t1 + t11 * t6 + t5 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t51, t41, 0.2e1 * t95, t52, 0.2e1 * t94, t59, 0.2e1 * pkin(2) * t120 + 0.2e1 * t36 * t67, -0.2e1 * t57 * pkin(2) * t71 - 0.2e1 * t37 * t67 (-t36 * t71 + t37 * t75) * t132, t57 * pkin(2) ^ 2 + t36 ^ 2 + t37 ^ 2, t59, -0.2e1 * t95, -0.2e1 * t94, t51, t41, t52 (-t28 * t75 + t30 * t71) * t132, 0.2e1 * t29 * t118 + 0.2e1 * t30 * t67, -0.2e1 * t28 * t67 - 0.2e1 * t29 * t53, t28 ^ 2 + t29 ^ 2 + t30 ^ 2, t35 ^ 2, t35 * t133, 0.2e1 * t35 * t53, t134, t53 * t133, t51, 0.2e1 * t24 * t33 + 0.2e1 * t53 * t8, 0.2e1 * t24 * t35 - 0.2e1 * t53 * t9, -0.2e1 * t9 * t33 - 0.2e1 * t8 * t35, t24 ^ 2 + t8 ^ 2 + t9 ^ 2, t23 ^ 2, -0.2e1 * t23 * t21, 0.2e1 * t23 * t33, t21 ^ 2, t21 * t133, t134, 0.2e1 * t1 * t33 + 0.2e1 * t6 * t21, -0.2e1 * t2 * t33 + 0.2e1 * t6 * t23, -0.2e1 * t1 * t23 - 0.2e1 * t2 * t21, t1 ^ 2 + t2 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, t19, -t17 * pkin(3) + t98, 0, 0, 0, 0, 0, 0, t19 * t70, t19 * t74, -t3, t3 * t77 + t98, 0, 0, 0, 0, 0, 0, t109 * t11 + t4 * t70, t11 * t54 - t5 * t70 (-t4 * t73 - t5 * t69) * t74, -t100 * t11 + t4 * t26 + t5 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, t118, t67, t36, -t37, 0, 0, t67, -t53, -t118, 0, 0, 0 (-pkin(3) * t71 + qJ(4) * t75) * t65, t47 + (t136 - t129) * t67, 0.2e1 * t56 + t37, -t30 * pkin(3) - t28 * qJ(4), t121, -t35 * t70 - t102, t45, t122, -t93, 0, qJ(4) * t33 + t24 * t70 + t45 * t77, qJ(4) * t35 + t24 * t74 - t77 * t93 (-t35 * t77 - t8) * t74 + (-t33 * t77 - t9) * t70, t24 * qJ(4) + t77 * t85, t73 * t103 (-t123 - t124) * t74, t102 * t73 + t23 * t70, t69 * t104, -t102 * t69 - t21 * t70, t122, t1 * t70 + t26 * t33 + (-t21 * t77 + t128) * t74, -t2 * t70 - t27 * t33 + (-t23 * t77 + t127) * t74, -t27 * t21 - t26 * t23 + (-t1 * t73 - t2 * t69) * t74, t1 * t26 - t100 * t6 + t2 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t136, t130, pkin(3) ^ 2 + t78, t63, t97, 0, t61, 0, 0, t70 * t130, t74 * t130, -0.2e1 * t38, t61 * t64 + t55 + t78, t62 * t63, -0.2e1 * t63 * t110, t101 * t131, t60 * t63, t69 * t97, t61, -0.2e1 * t69 * t119 + 0.2e1 * t26 * t70, -0.2e1 * t105 * t63 - 0.2e1 * t27 * t70, 0.2e1 * (-t26 * t73 - t27 * t69) * t74, t26 ^ 2 + t27 ^ 2 + t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 * t86 - t125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, t67, 0, t30, 0, 0, 0, 0, 0, 0, t45, -t93, -t121 - t122, t85, 0, 0, 0, 0, 0, 0, -t111 * t33 - t104, -t106 * t33 - t103, t84 * t70, -t6 * t74 + t70 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t46, t38, 0, 0, 0, 0, 0, 0, -t46 * t69, -t46 * t73, 0, t70 * t83 + t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61 * t99 + t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, -t13, 0, 0, 0, 0, 0, 0, 0, 0, -t11 * t73, t11 * t69, t86, -t11 * pkin(5) + pkin(11) * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t33, t53, t8, -t9, 0, 0, t123, -t69 * t21 + t23 * t73, t112, -t124, t107, 0, -pkin(5) * t21 - pkin(11) * t112 - t127, -pkin(5) * t23 - pkin(11) * t107 + t128, pkin(11) * t84 + t87, -t6 * pkin(5) + pkin(11) * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, -t70, 0, t100, -t108, 0, 0, t92 (-t60 + t62) * t74, t111, -t92, t106, 0, t100 * t73 + t69 * t88, -t100 * t69 + t73 * t88, t83, pkin(5) * t100 + pkin(11) * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t70, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t109, t90, pkin(11) * t90 + t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t60, 0.2e1 * t110, 0, t62, 0, 0, pkin(5) * t131, -0.2e1 * pkin(5) * t69, 0.2e1 * t99 * pkin(11), pkin(11) ^ 2 * t99 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, -t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t21, t33, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t109, t70, t26, -t27, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, -t106, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, t73, 0, -t69 * pkin(11), -t73 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t12;
