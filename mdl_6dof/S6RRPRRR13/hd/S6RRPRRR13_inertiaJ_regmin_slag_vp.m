% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRPRRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR13_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR13_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR13_inertiaJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 01:18:10
% EndTime: 2019-05-07 01:18:14
% DurationCPUTime: 1.51s
% Computational Cost: add. (1190->172), mult. (2808->330), div. (0->0), fcn. (3225->10), ass. (0->115)
t127 = -2 * pkin(2);
t73 = sin(qJ(6));
t74 = sin(qJ(5));
t77 = cos(qJ(6));
t78 = cos(qJ(5));
t49 = t73 * t78 + t74 * t77;
t79 = cos(qJ(4));
t38 = t79 * t49;
t126 = -0.2e1 * t38;
t71 = sin(pkin(6));
t80 = cos(qJ(2));
t107 = t71 * t80;
t72 = cos(pkin(6));
t75 = sin(qJ(4));
t42 = t107 * t79 + t72 * t75;
t125 = -0.2e1 * t42;
t124 = 0.2e1 * t42;
t64 = -pkin(5) * t78 - pkin(4);
t123 = 0.2e1 * t64;
t122 = 0.2e1 * t71;
t121 = 0.2e1 * t78;
t120 = 2 * qJ(3);
t81 = -pkin(2) - pkin(9);
t119 = pkin(10) + pkin(11);
t76 = sin(qJ(2));
t118 = pkin(1) * t76;
t117 = pkin(1) * t80;
t116 = t42 * pkin(5);
t115 = t73 * pkin(5);
t114 = t77 * pkin(5);
t43 = -t107 * t75 + t72 * t79;
t61 = t71 * t76;
t25 = t43 * t74 - t61 * t78;
t56 = pkin(8) * t61;
t84 = -pkin(2) - t117;
t22 = pkin(3) * t61 + t56 + (-pkin(9) + t84) * t72;
t83 = -qJ(3) * t76 - pkin(1);
t28 = (t80 * t81 + t83) * t71;
t14 = t22 * t75 + t28 * t79;
t10 = pkin(10) * t61 + t14;
t45 = pkin(8) * t107 + t118 * t72;
t65 = t72 * qJ(3);
t33 = -t65 - t45;
t27 = pkin(3) * t107 - t33;
t18 = pkin(4) * t42 - pkin(10) * t43 + t27;
t7 = t10 * t78 + t18 * t74;
t5 = -pkin(11) * t25 + t7;
t113 = t77 * t5;
t13 = t22 * t79 - t28 * t75;
t9 = -pkin(4) * t61 - t13;
t112 = t9 * t74;
t111 = t9 * t78;
t26 = t43 * t78 + t61 * t74;
t110 = t26 * t74;
t109 = t49 * t75;
t66 = t71 ^ 2;
t108 = t66 * t80;
t106 = t72 * t80;
t105 = t74 * t42;
t104 = t74 * t75;
t103 = t74 * t78;
t102 = t74 * t79;
t101 = t74 * t81;
t100 = t75 * t81;
t50 = pkin(4) * t75 - pkin(10) * t79 + qJ(3);
t96 = t78 * t81;
t85 = t75 * t96;
t24 = t85 + (-pkin(11) * t79 + t50) * t74;
t99 = t77 * t24;
t98 = t78 * t42;
t97 = t78 * t75;
t63 = t78 * t79;
t95 = t79 * t26;
t94 = t79 * t42;
t48 = t73 * t74 - t77 * t78;
t93 = t79 * t48;
t92 = t79 * t75;
t91 = t79 * t81;
t68 = t75 ^ 2;
t70 = t79 ^ 2;
t90 = -t68 - t70;
t89 = 0.2e1 * t61;
t88 = -0.2e1 * t92;
t87 = t75 * t61;
t86 = t81 * t61;
t6 = -t10 * t74 + t18 * t78;
t4 = -pkin(11) * t26 + t116 + t6;
t1 = t4 * t77 - t5 * t73;
t46 = t78 * t50;
t20 = -pkin(11) * t63 + t46 + (pkin(5) - t101) * t75;
t11 = t20 * t77 - t24 * t73;
t82 = -pkin(4) * t79 - pkin(10) * t75;
t69 = t78 ^ 2;
t67 = t74 ^ 2;
t60 = t66 * t76 ^ 2;
t54 = t79 * t61;
t52 = t119 * t78;
t51 = t119 * t74;
t47 = (pkin(5) * t74 - t81) * t79;
t44 = pkin(1) * t106 - t56;
t41 = t42 ^ 2;
t39 = -t104 * t73 + t77 * t97;
t36 = t42 * t75;
t35 = t72 * t84 + t56;
t34 = (-pkin(2) * t80 + t83) * t71;
t32 = t50 * t74 + t85;
t31 = -t100 * t74 + t46;
t30 = -t51 * t73 + t52 * t77;
t29 = -t51 * t77 - t52 * t73;
t17 = -t25 * t73 + t26 * t77;
t16 = t25 * t77 + t26 * t73;
t12 = t20 * t73 + t99;
t8 = pkin(5) * t25 + t9;
t2 = t4 * t73 + t113;
t3 = [1, 0, 0, t60, 0.2e1 * t76 * t108, t72 * t89, t106 * t122, t72 ^ 2, 0.2e1 * pkin(1) * t108 + 0.2e1 * t44 * t72, -0.2e1 * t118 * t66 - 0.2e1 * t45 * t72 (-t33 * t80 + t35 * t76) * t122, 0.2e1 * t107 * t34 + 0.2e1 * t35 * t72, -0.2e1 * t33 * t72 - 0.2e1 * t34 * t61, t33 ^ 2 + t34 ^ 2 + t35 ^ 2, t43 ^ 2, t43 * t125, t43 * t89, t61 * t125, t60, 0.2e1 * t13 * t61 + 0.2e1 * t27 * t42, -0.2e1 * t14 * t61 + 0.2e1 * t27 * t43, t26 ^ 2, -0.2e1 * t26 * t25, t26 * t124, t25 * t125, t41, 0.2e1 * t25 * t9 + 0.2e1 * t42 * t6, 0.2e1 * t26 * t9 - 0.2e1 * t42 * t7, t17 ^ 2, -0.2e1 * t17 * t16, t17 * t124, t16 * t125, t41, 0.2e1 * t1 * t42 + 0.2e1 * t16 * t8, 0.2e1 * t17 * t8 - 0.2e1 * t2 * t42; 0, 0, 0, 0, 0, t61, t107, t72, t44, -t45 (-pkin(2) * t76 + qJ(3) * t80) * t71, t56 + (t127 - t117) * t72, 0.2e1 * t65 + t45, -pkin(2) * t35 - qJ(3) * t33, t43 * t79, -t43 * t75 - t94, t54, -t87, 0, qJ(3) * t42 + t27 * t75 + t79 * t86, qJ(3) * t43 + t27 * t79 - t75 * t86, t78 * t95 (-t25 * t78 - t110) * t79, t26 * t75 + t78 * t94, -t25 * t75 - t74 * t94, t36, t31 * t42 + t6 * t75 + (-t25 * t81 + t112) * t79, -t32 * t42 - t7 * t75 + (-t26 * t81 + t111) * t79, -t17 * t93, t16 * t93 - t17 * t38, t17 * t75 - t42 * t93, -t16 * t75 - t38 * t42, t36, t1 * t75 + t11 * t42 + t16 * t47 + t38 * t8, -t12 * t42 + t17 * t47 - t2 * t75 - t8 * t93; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, t127, t120, pkin(2) ^ 2 + qJ(3) ^ 2, t70, t88, 0, 0, 0, t75 * t120, t79 * t120, t69 * t70, -0.2e1 * t70 * t103, t92 * t121, t74 * t88, t68, -0.2e1 * t101 * t70 + 0.2e1 * t31 * t75, -0.2e1 * t32 * t75 - 0.2e1 * t70 * t96, t93 ^ 2, -t93 * t126, -0.2e1 * t93 * t75, t75 * t126, t68, 0.2e1 * t11 * t75 + 0.2e1 * t38 * t47, -0.2e1 * t12 * t75 - 0.2e1 * t47 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t72, 0, t35, 0, 0, 0, 0, 0, t54, -t87, 0, 0, 0, 0, 0, -t104 * t42 - t25 * t79, -t42 * t97 - t95, 0, 0, 0, 0, 0, -t109 * t42 - t16 * t79, -t17 * t79 - t39 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90 * t74, t90 * t78, 0, 0, 0, 0, 0, -t109 * t75 - t38 * t79, -t39 * t75 + t79 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t42, t61, t13, -t14, t110, -t25 * t74 + t26 * t78, t105, t98, 0, -pkin(4) * t25 - pkin(10) * t105 - t111, -pkin(4) * t26 - pkin(10) * t98 + t112, t17 * t49, -t16 * t49 - t17 * t48, t49 * t42, -t48 * t42, 0, t16 * t64 + t29 * t42 + t48 * t8, t17 * t64 - t30 * t42 + t49 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t75, 0, t91, -t100, t74 * t63 (-t67 + t69) * t79, t104, t97, 0, t74 * t82 + t78 * t91, -t74 * t91 + t78 * t82, -t93 * t49, -t38 * t49 + t48 * t93, t109, -t48 * t75, 0, t29 * t75 + t38 * t64 + t47 * t48, -t30 * t75 + t47 * t49 - t64 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t75, 0, 0, 0, 0, 0, t63, -t102, 0, 0, 0, 0, 0, -t93, -t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t67, 0.2e1 * t103, 0, 0, 0, pkin(4) * t121, -0.2e1 * pkin(4) * t74, t49 ^ 2, -0.2e1 * t49 * t48, 0, 0, 0, t48 * t123, t49 * t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, -t25, t42, t6, -t7, 0, 0, t17, -t16, t42, t114 * t42 + t1, -t113 + (-t4 - t116) * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, -t102, t75, t31, -t32, 0, 0, -t93, -t38, t75, t114 * t75 + t11, -t99 + (-pkin(5) * t75 - t20) * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104, -t97, 0, 0, 0, 0, 0, -t109, -t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t78, 0, -t74 * pkin(10), -t78 * pkin(10), 0, 0, t49, -t48, 0, t29, -t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t114, -0.2e1 * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, -t16, t42, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, -t38, t75, t11, -t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t48, 0, t29, -t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t114, -t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t3;
