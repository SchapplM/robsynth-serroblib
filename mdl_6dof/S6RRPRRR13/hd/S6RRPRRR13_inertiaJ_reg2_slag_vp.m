% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:56
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR13_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR13_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR13_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 01:18:10
% EndTime: 2019-05-07 01:18:19
% DurationCPUTime: 2.88s
% Computational Cost: add. (2848->256), mult. (6314->500), div. (0->0), fcn. (6970->10), ass. (0->134)
t155 = -2 * pkin(2);
t85 = sin(pkin(6));
t94 = cos(qJ(2));
t133 = t85 * t94;
t86 = cos(pkin(6));
t89 = sin(qJ(4));
t93 = cos(qJ(4));
t45 = t133 * t93 + t86 * t89;
t44 = t45 ^ 2;
t154 = -0.2e1 * t45;
t153 = 0.2e1 * t45;
t92 = cos(qJ(5));
t75 = -pkin(5) * t92 - pkin(4);
t152 = 0.2e1 * t75;
t151 = 0.2e1 * t85;
t150 = 0.2e1 * t89;
t149 = 0.2e1 * t92;
t148 = 2 * qJ(3);
t95 = -pkin(2) - pkin(9);
t147 = -pkin(11) - pkin(10);
t146 = pkin(1) * t94;
t145 = t45 * pkin(5);
t87 = sin(qJ(6));
t144 = t87 * pkin(5);
t88 = sin(qJ(5));
t106 = -pkin(2) - t146;
t90 = sin(qJ(2));
t72 = t85 * t90;
t66 = pkin(8) * t72;
t23 = pkin(3) * t72 + t66 + (-pkin(9) + t106) * t86;
t104 = -qJ(3) * t90 - pkin(1);
t30 = (t94 * t95 + t104) * t85;
t13 = t23 * t93 - t30 * t89;
t9 = -pkin(4) * t72 - t13;
t143 = t9 * t88;
t142 = t9 * t92;
t91 = cos(qJ(6));
t141 = t91 * pkin(5);
t47 = -t133 * t89 + t86 * t93;
t26 = t47 * t88 - t72 * t92;
t14 = t23 * t89 + t30 * t93;
t10 = pkin(10) * t72 + t14;
t132 = t86 * t90;
t49 = pkin(1) * t132 + pkin(8) * t133;
t77 = t86 * qJ(3);
t35 = -t77 - t49;
t29 = pkin(3) * t133 - t35;
t19 = pkin(4) * t45 - pkin(10) * t47 + t29;
t7 = t10 * t92 + t19 * t88;
t5 = -pkin(11) * t26 + t7;
t140 = t91 * t5;
t139 = t93 * pkin(4);
t138 = t26 * t92;
t28 = t47 * t92 + t72 * t88;
t137 = t28 * t88;
t38 = t45 * t89;
t136 = t47 * t93;
t54 = t87 * t92 + t88 * t91;
t135 = t54 * t89;
t78 = t85 ^ 2;
t134 = t78 * t94;
t131 = t86 * t94;
t130 = t88 * t45;
t129 = t88 * t89;
t128 = t88 * t92;
t127 = t88 * t93;
t126 = t88 * t95;
t125 = t89 * t95;
t121 = t92 * t95;
t108 = t89 * t121;
t56 = pkin(4) * t89 - pkin(10) * t93 + qJ(3);
t25 = t108 + (-pkin(11) * t93 + t56) * t88;
t124 = t91 * t25;
t123 = t92 * t45;
t122 = t92 * t89;
t74 = t92 * t93;
t120 = t93 * t26;
t119 = t93 * t28;
t118 = t93 * t45;
t117 = t93 * t54;
t116 = t93 * t89;
t115 = t93 * t95;
t80 = t88 ^ 2;
t82 = t92 ^ 2;
t114 = t80 + t82;
t81 = t89 ^ 2;
t83 = t93 ^ 2;
t65 = t81 + t83;
t113 = -0.2e1 * t116;
t112 = t85 * t132;
t111 = t89 * t72;
t110 = t95 * t72;
t109 = t85 * t131;
t107 = t88 * t74;
t6 = -t10 * t88 + t19 * t92;
t4 = -pkin(11) * t28 + t145 + t6;
t1 = t4 * t91 - t5 * t87;
t105 = t114 * t89;
t50 = t92 * t56;
t21 = -pkin(11) * t74 + t50 + (pkin(5) - t126) * t89;
t11 = t21 * t91 - t25 * t87;
t103 = -pkin(10) * t89 - t139;
t102 = -t6 * t88 + t7 * t92;
t101 = t13 * t93 + t14 * t89;
t100 = t137 - t138;
t33 = -t125 * t88 + t50;
t34 = t56 * t88 + t108;
t99 = -t33 * t88 + t34 * t92;
t96 = qJ(3) ^ 2;
t84 = t95 ^ 2;
t79 = t86 ^ 2;
t76 = t83 * t84;
t71 = t78 * t94 ^ 2;
t70 = t78 * t90 ^ 2;
t61 = t93 * t72;
t59 = t147 * t92;
t58 = t147 * t88;
t57 = 0.2e1 * t90 * t134;
t55 = t65 * t95;
t52 = t87 * t88 - t91 * t92;
t51 = (pkin(5) * t88 - t95) * t93;
t48 = pkin(1) * t131 - t66;
t43 = -t127 * t87 + t74 * t91;
t42 = t122 * t91 - t129 * t87;
t37 = t106 * t86 + t66;
t36 = (-pkin(2) * t94 + t104) * t85;
t32 = t58 * t87 - t59 * t91;
t31 = t58 * t91 + t59 * t87;
t18 = -t26 * t87 + t28 * t91;
t16 = t26 * t91 + t28 * t87;
t12 = t21 * t87 + t124;
t8 = pkin(5) * t26 + t9;
t2 = t4 * t87 + t140;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t70, t57, 0.2e1 * t112, t71, 0.2e1 * t109, t79, 0.2e1 * pkin(1) * t134 + 0.2e1 * t48 * t86, -0.2e1 * pkin(1) * t78 * t90 - 0.2e1 * t49 * t86 (-t48 * t90 + t49 * t94) * t151, pkin(1) ^ 2 * t78 + t48 ^ 2 + t49 ^ 2, t79, -0.2e1 * t112, -0.2e1 * t109, t70, t57, t71 (-t35 * t94 + t37 * t90) * t151, 0.2e1 * t133 * t36 + 0.2e1 * t37 * t86, -0.2e1 * t35 * t86 - 0.2e1 * t36 * t72, t35 ^ 2 + t36 ^ 2 + t37 ^ 2, t47 ^ 2, t47 * t154, 0.2e1 * t47 * t72, t44, t72 * t154, t70, 0.2e1 * t13 * t72 + 0.2e1 * t29 * t45, -0.2e1 * t14 * t72 + 0.2e1 * t29 * t47, -0.2e1 * t13 * t47 - 0.2e1 * t14 * t45, t13 ^ 2 + t14 ^ 2 + t29 ^ 2, t28 ^ 2, -0.2e1 * t28 * t26, t28 * t153, t26 ^ 2, t26 * t154, t44, 0.2e1 * t26 * t9 + 0.2e1 * t45 * t6, 0.2e1 * t28 * t9 - 0.2e1 * t45 * t7, -0.2e1 * t26 * t7 - 0.2e1 * t28 * t6, t6 ^ 2 + t7 ^ 2 + t9 ^ 2, t18 ^ 2, -0.2e1 * t18 * t16, t18 * t153, t16 ^ 2, t16 * t154, t44, 0.2e1 * t1 * t45 + 0.2e1 * t16 * t8, 0.2e1 * t18 * t8 - 0.2e1 * t2 * t45, -0.2e1 * t1 * t18 - 0.2e1 * t16 * t2, t1 ^ 2 + t2 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t133, t86, t48, -t49, 0, 0, t86, -t72, -t133, 0, 0, 0 (-pkin(2) * t90 + qJ(3) * t94) * t85, t66 + (t155 - t146) * t86, 0.2e1 * t77 + t49, -pkin(2) * t37 - qJ(3) * t35, t136, -t47 * t89 - t118, t61, t38, -t111, 0, qJ(3) * t45 + t110 * t93 + t29 * t89, qJ(3) * t47 - t110 * t89 + t29 * t93 (-t47 * t95 - t13) * t93 + (-t45 * t95 - t14) * t89, t29 * qJ(3) + t101 * t95, t92 * t119 (-t137 - t138) * t93, t118 * t92 + t28 * t89, t88 * t120, -t118 * t88 - t26 * t89, t38, t33 * t45 + t6 * t89 + (-t26 * t95 + t143) * t93, -t34 * t45 - t7 * t89 + (-t28 * t95 + t142) * t93, -t34 * t26 - t33 * t28 + (-t6 * t92 - t7 * t88) * t93, -t115 * t9 + t33 * t6 + t34 * t7, t18 * t43, -t117 * t18 - t16 * t43, t18 * t89 + t43 * t45, t16 * t117, -t117 * t45 - t16 * t89, t38, t1 * t89 + t11 * t45 + t117 * t8 + t16 * t51, -t12 * t45 + t18 * t51 - t2 * t89 + t43 * t8, -t1 * t43 - t11 * t18 - t117 * t2 - t12 * t16, t1 * t11 + t12 * t2 + t51 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t155, t148, pkin(2) ^ 2 + t96, t83, t113, 0, t81, 0, 0, t89 * t148, t93 * t148, -0.2e1 * t55, t81 * t84 + t76 + t96, t82 * t83, -0.2e1 * t83 * t128, t116 * t149, t80 * t83, t88 * t113, t81, -0.2e1 * t126 * t83 + 0.2e1 * t33 * t89, -0.2e1 * t121 * t83 - 0.2e1 * t34 * t89, 0.2e1 * (-t33 * t92 - t34 * t88) * t93, t33 ^ 2 + t34 ^ 2 + t76, t43 ^ 2, -0.2e1 * t43 * t117, t43 * t150, t117 ^ 2, -t117 * t150, t81, 0.2e1 * t11 * t89 + 0.2e1 * t117 * t51, -0.2e1 * t12 * t89 + 0.2e1 * t43 * t51, -0.2e1 * t11 * t43 - 0.2e1 * t117 * t12, t11 ^ 2 + t12 ^ 2 + t51 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, t86, 0, t37, 0, 0, 0, 0, 0, 0, t61, -t111, -t136 - t38, t101, 0, 0, 0, 0, 0, 0, -t129 * t45 - t120, -t122 * t45 - t119, t100 * t89, t102 * t89 - t9 * t93, 0, 0, 0, 0, 0, 0, -t135 * t45 - t16 * t93, -t18 * t93 - t42 * t45, t135 * t18 - t16 * t42, -t1 * t135 + t2 * t42 - t8 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t65, t55, 0, 0, 0, 0, 0, 0, -t65 * t88, -t65 * t92, 0, t83 * t95 + t89 * t99, 0, 0, 0, 0, 0, 0, -t117 * t93 - t135 * t89, -t42 * t89 - t43 * t93, -t117 * t42 + t135 * t43, -t11 * t135 + t12 * t42 - t51 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114 * t81 + t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135 ^ 2 + t42 ^ 2 + t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t45, t72, t13, -t14, 0, 0, t137, -t26 * t88 + t28 * t92, t130, -t138, t123, 0, -pkin(4) * t26 - pkin(10) * t130 - t142, -pkin(4) * t28 - pkin(10) * t123 + t143, pkin(10) * t100 + t102, -t9 * pkin(4) + pkin(10) * t102, t18 * t54, -t16 * t54 - t18 * t52, t54 * t45, t16 * t52, -t52 * t45, 0, t16 * t75 + t31 * t45 + t52 * t8, t18 * t75 - t32 * t45 + t54 * t8, -t1 * t54 - t16 * t32 - t18 * t31 - t2 * t52, t1 * t31 + t2 * t32 + t75 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, -t89, 0, t115, -t125, 0, 0, t107 (-t80 + t82) * t93, t129, -t107, t122, 0, t103 * t88 + t115 * t92, t103 * t92 - t115 * t88, t99, pkin(4) * t115 + pkin(10) * t99, t43 * t54, -t117 * t54 - t43 * t52, t135, t117 * t52, -t52 * t89, 0, t117 * t75 + t31 * t89 + t51 * t52, -t32 * t89 + t43 * t75 + t51 * t54, -t11 * t54 - t117 * t32 - t12 * t52 - t31 * t43, t11 * t31 + t12 * t32 + t51 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, -t89, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t127, t105, pkin(10) * t105 + t139, 0, 0, 0, 0, 0, 0, -t93 * t52, -t117, t135 * t54 - t42 * t52, -t135 * t31 + t32 * t42 - t75 * t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t80, 0.2e1 * t128, 0, t82, 0, 0, pkin(4) * t149, -0.2e1 * pkin(4) * t88, 0.2e1 * t114 * pkin(10), pkin(10) ^ 2 * t114 + pkin(4) ^ 2, t54 ^ 2, -0.2e1 * t54 * t52, 0, t52 ^ 2, 0, 0, t52 * t152, t54 * t152, -0.2e1 * t31 * t54 - 0.2e1 * t32 * t52, t31 ^ 2 + t32 ^ 2 + t75 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, t45, t6, -t7, 0, 0, 0, 0, t18, 0, -t16, t45, t141 * t45 + t1, -t140 + (-t4 - t145) * t87 (-t16 * t87 - t18 * t91) * pkin(5) (t1 * t91 + t2 * t87) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, -t127, t89, t33, -t34, 0, 0, 0, 0, t43, 0, -t117, t89, t141 * t89 + t11, -t124 + (-pkin(5) * t89 - t21) * t87 (-t117 * t87 - t43 * t91) * pkin(5) (t11 * t91 + t12 * t87) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t129, -t122, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t42, 0 (-t135 * t91 + t42 * t87) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, t92, 0, -t88 * pkin(10), -t92 * pkin(10), 0, 0, 0, 0, t54, 0, -t52, 0, t31, -t32 (-t52 * t87 - t54 * t91) * pkin(5) (t31 * t91 + t32 * t87) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t141, -0.2e1 * t144, 0 (t87 ^ 2 + t91 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, 0, -t16, t45, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, -t117, t89, t11, -t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t42, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, 0, t31, -t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t141, -t144, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
