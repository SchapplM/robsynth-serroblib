% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPPRRR1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:10:47
% EndTime: 2019-05-05 15:10:51
% DurationCPUTime: 1.24s
% Computational Cost: add. (1384->95), mult. (2494->170), div. (0->0), fcn. (2990->10), ass. (0->76)
t56 = sin(qJ(5));
t84 = t56 * pkin(4);
t43 = pkin(9) + t84;
t55 = sin(qJ(6));
t49 = t55 ^ 2;
t57 = cos(qJ(6));
t50 = t57 ^ 2;
t71 = t49 + t50;
t97 = t71 * t43;
t51 = sin(pkin(11));
t53 = cos(pkin(11));
t59 = cos(qJ(4));
t80 = sin(qJ(4));
t32 = -t51 * t80 + t53 * t59;
t33 = t51 * t59 + t53 * t80;
t58 = cos(qJ(5));
t27 = t32 * t56 + t33 * t58;
t96 = -0.2e1 * t27;
t52 = sin(pkin(10));
t86 = t52 * pkin(1);
t39 = qJ(3) + t86;
t81 = pkin(7) + t39;
t15 = t32 * t81;
t12 = t32 * pkin(8) + t15;
t14 = t33 * t81;
t63 = -t33 * pkin(8) - t14;
t5 = t12 * t56 - t58 * t63;
t95 = t5 ^ 2;
t25 = -t32 * t58 + t33 * t56;
t94 = t25 ^ 2;
t54 = cos(pkin(10));
t85 = t54 * pkin(1);
t42 = -pkin(2) - t85;
t34 = -pkin(3) * t53 + t42;
t28 = -pkin(4) * t32 + t34;
t93 = 0.2e1 * t28;
t92 = 0.2e1 * t33;
t91 = 0.2e1 * t51;
t90 = t25 * pkin(5);
t89 = t27 * pkin(9);
t88 = t5 * t25;
t87 = t5 * t57;
t83 = t58 * pkin(4);
t44 = -pkin(5) - t83;
t82 = pkin(5) - t44;
t18 = t55 * t25;
t79 = t55 * t27;
t78 = t55 * t57;
t77 = t57 * t27;
t73 = pkin(9) * t71;
t47 = t51 ^ 2;
t48 = t53 ^ 2;
t72 = t47 + t48;
t70 = t25 * t96;
t66 = -pkin(5) * t27 - pkin(9) * t25;
t7 = t58 * t12 + t56 * t63;
t8 = t28 - t89 + t90;
t2 = -t55 * t7 + t57 * t8;
t3 = t55 * t8 + t57 * t7;
t65 = t2 * t57 + t3 * t55;
t1 = -t2 * t55 + t3 * t57;
t64 = -t25 * t43 + t27 * t44;
t38 = 0.2e1 * t78;
t31 = t33 ^ 2;
t30 = t32 ^ 2;
t24 = t27 ^ 2;
t21 = t57 * t25;
t20 = t50 * t27;
t19 = t50 * t24;
t17 = t49 * t27;
t16 = t49 * t24;
t13 = t55 * t77;
t10 = -t17 - t20;
t9 = -t17 + t20;
t4 = t5 * t55;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t85, -0.2e1 * t86, 0 (t52 ^ 2 + t54 ^ 2) * pkin(1) ^ 2, t47, t53 * t91, 0, t48, 0, 0, -0.2e1 * t42 * t53, t42 * t91, 0.2e1 * t72 * t39, t39 ^ 2 * t72 + t42 ^ 2, t31, t32 * t92, 0, t30, 0, 0, -0.2e1 * t34 * t32, t34 * t92, 0.2e1 * t14 * t33 + 0.2e1 * t15 * t32, t14 ^ 2 + t15 ^ 2 + t34 ^ 2, t24, t70, 0, t94, 0, 0, t25 * t93, t27 * t93, -0.2e1 * t25 * t7 + 0.2e1 * t27 * t5, t28 ^ 2 + t7 ^ 2 + t95, t19, -0.2e1 * t24 * t78, 0.2e1 * t25 * t77, t16, t55 * t70, t94, 0.2e1 * t2 * t25 + 0.2e1 * t5 * t79, -0.2e1 * t25 * t3 + 0.2e1 * t5 * t77, t65 * t96, t2 ^ 2 + t3 ^ 2 + t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14 * t32 + t15 * t33, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 * t7 + t88, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t27 + t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31 + t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 + t94, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 + t16 + t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, t51, 0, t42, 0, 0, 0, 0, 0, 0, -t32, t33, 0, t34, 0, 0, 0, 0, 0, 0, t25, t27, 0, t28, 0, 0, 0, 0, 0, 0, t21, -t18, t10, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, t32, 0, -t14, -t15, 0, 0, 0, 0, t27, 0, -t25, 0, -t5, -t7 (-t25 * t56 - t27 * t58) * pkin(4) (-t5 * t58 + t56 * t7) * pkin(4), t13, t9, t18, -t13, t21, 0, t55 * t64 - t87, t57 * t64 + t4, t1, t1 * t43 + t5 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t33, 0, 0, 0, 0, 0, 0, 0, 0, -t25, -t27, 0 (-t25 * t58 + t27 * t56) * pkin(4), 0, 0, 0, 0, 0, 0, -t21, t18, -t10, t25 * t44 + t27 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t83, -0.2e1 * t84, 0 (t56 ^ 2 + t58 ^ 2) * pkin(4) ^ 2, t49, t38, 0, t50, 0, 0, -0.2e1 * t44 * t57, 0.2e1 * t44 * t55, 0.2e1 * t97, t43 ^ 2 * t71 + t44 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t25, 0, -t5, -t7, 0, 0, t13, t9, t18, -t13, t21, 0, t55 * t66 - t87, t57 * t66 + t4, t1, -t5 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, -t27, 0, 0, 0, 0, 0, 0, 0, 0, -t21, t18, -t10, t71 * t89 - t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t83, -t84, 0, 0, t49, t38, 0, t50, 0, 0, t82 * t57, -t82 * t55, t73 + t97, -t44 * pkin(5) + pkin(9) * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t49, t38, 0, t50, 0, 0, 0.2e1 * pkin(5) * t57, -0.2e1 * pkin(5) * t55, 0.2e1 * t73, pkin(9) ^ 2 * t71 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, -t79, t25, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t77, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, -t55, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t57, 0, -t55 * t43, -t57 * t43, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t57, 0, -t55 * pkin(9), -t57 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
