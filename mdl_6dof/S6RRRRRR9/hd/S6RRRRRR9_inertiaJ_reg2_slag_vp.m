% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 05:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR9_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR9_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRRR9_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 16:13:55
% EndTime: 2019-05-08 16:14:19
% DurationCPUTime: 5.71s
% Computational Cost: add. (10331->410), mult. (26989->813), div. (0->0), fcn. (31185->14), ass. (0->178)
t124 = sin(qJ(3));
t129 = cos(qJ(3));
t117 = sin(pkin(7));
t119 = cos(pkin(7));
t120 = cos(pkin(6));
t130 = cos(qJ(2));
t105 = t120 * t130 * pkin(1);
t118 = sin(pkin(6));
t125 = sin(qJ(2));
t159 = t118 * t125;
t62 = t120 * pkin(2) + t105 + (-pkin(10) * t119 - pkin(9)) * t159;
t71 = (-pkin(10) * t117 * t125 - pkin(2) * t130 - pkin(1)) * t118;
t138 = t117 * t71 + t119 * t62;
t156 = t119 * t130;
t142 = t118 * t156;
t158 = t118 * t130;
t193 = pkin(1) * t125;
t89 = pkin(9) * t158 + t120 * t193;
t56 = (t117 * t120 + t142) * pkin(10) + t89;
t29 = -t124 * t56 + t138 * t129;
t123 = sin(qJ(4));
t128 = cos(qJ(4));
t161 = t117 * t124;
t61 = t120 * t161 + (t124 * t156 + t125 * t129) * t118;
t81 = -t117 * t158 + t120 * t119;
t45 = t61 * t123 - t81 * t128;
t44 = t45 ^ 2;
t160 = t117 * t129;
t59 = -t120 * t160 + t124 * t159 - t129 * t142;
t209 = t59 ^ 2;
t83 = -t128 * t119 + t123 * t161;
t82 = t83 ^ 2;
t208 = -0.2e1 * t45;
t207 = 0.2e1 * t45;
t206 = -0.2e1 * t59;
t205 = -0.2e1 * t83;
t204 = 0.2e1 * t83;
t85 = t123 * t119 + t128 * t161;
t203 = -0.2e1 * t85;
t127 = cos(qJ(5));
t109 = -t127 * pkin(5) - pkin(4);
t202 = 0.2e1 * t109;
t201 = 0.2e1 * t117;
t200 = 0.2e1 * t118;
t199 = -0.2e1 * t123;
t198 = -0.2e1 * t128;
t197 = 0.2e1 * t128;
t196 = -pkin(13) - pkin(12);
t195 = t45 * pkin(5);
t194 = t83 * pkin(5);
t192 = pkin(2) * t124;
t191 = pkin(2) * t129;
t190 = pkin(4) * t127;
t122 = sin(qJ(5));
t189 = pkin(11) * t122;
t121 = sin(qJ(6));
t188 = t121 * pkin(5);
t187 = t123 * pkin(11);
t126 = cos(qJ(6));
t186 = t126 * pkin(5);
t47 = t81 * t123 + t61 * t128;
t32 = t47 * t122 - t59 * t127;
t42 = -t117 * t62 + t119 * t71;
t23 = t59 * pkin(3) - t61 * pkin(11) + t42;
t30 = t138 * t124 + t129 * t56;
t26 = t81 * pkin(11) + t30;
t14 = t123 * t23 + t128 * t26;
t12 = t59 * pkin(12) + t14;
t25 = -t81 * pkin(3) - t29;
t16 = t45 * pkin(4) - t47 * pkin(12) + t25;
t7 = t127 * t12 + t122 * t16;
t5 = -t32 * pkin(13) + t7;
t185 = t126 * t5;
t184 = t128 * pkin(5);
t36 = t45 * t83;
t13 = -t123 * t26 + t128 * t23;
t11 = -t59 * pkin(4) - t13;
t183 = t11 * t122;
t182 = t11 * t127;
t103 = pkin(10) * t161;
t75 = t103 + (-pkin(3) - t191) * t119;
t48 = t83 * pkin(4) - t85 * pkin(12) + t75;
t145 = pkin(10) * t160;
t76 = t145 + (pkin(11) + t192) * t119;
t77 = (-pkin(3) * t129 - pkin(11) * t124 - pkin(2)) * t117;
t52 = t123 * t77 + t128 * t76;
t50 = -pkin(12) * t160 + t52;
t28 = t122 * t48 + t127 * t50;
t63 = t122 * t85 + t127 * t160;
t22 = -t63 * pkin(13) + t28;
t181 = t126 * t22;
t151 = t128 * t127;
t146 = pkin(11) * t151;
t96 = -t128 * pkin(4) - t123 * pkin(12) - pkin(3);
t66 = t146 + (-pkin(13) * t123 + t96) * t122;
t180 = t126 * t66;
t179 = t128 * t59;
t178 = t32 * t127;
t34 = t59 * t122 + t47 * t127;
t177 = t34 * t122;
t176 = t45 * t122;
t175 = t45 * t127;
t174 = t45 * t128;
t173 = t47 * t123;
t51 = -t123 * t76 + t128 * t77;
t49 = pkin(4) * t160 - t51;
t172 = t49 * t122;
t171 = t49 * t127;
t170 = t59 * t123;
t169 = t63 * t127;
t65 = -t122 * t160 + t127 * t85;
t168 = t65 * t122;
t167 = t83 * t122;
t166 = t83 * t127;
t165 = t83 * t128;
t164 = t85 * t123;
t111 = t117 ^ 2;
t163 = t111 * t129;
t112 = t118 ^ 2;
t162 = t112 * t130;
t157 = t119 * t124;
t155 = t122 * t123;
t154 = t122 * t127;
t153 = t127 * t123;
t152 = t128 * t122;
t113 = t122 ^ 2;
t115 = t127 ^ 2;
t150 = t113 + t115;
t149 = 0.2e1 * t160;
t148 = t120 * t200;
t147 = t123 * t197;
t144 = t59 * t160;
t143 = t123 * t160;
t141 = t122 * t153;
t140 = t128 * t160;
t6 = -t122 * t12 + t127 * t16;
t4 = -t34 * pkin(13) + t195 + t6;
t1 = -t121 * t5 + t126 * t4;
t27 = -t122 * t50 + t127 * t48;
t21 = -t65 * pkin(13) + t194 + t27;
t9 = -t121 * t22 + t126 * t21;
t90 = t127 * t96;
t58 = -pkin(13) * t153 + t90 + (-pkin(5) - t189) * t128;
t37 = -t121 * t66 + t126 * t58;
t139 = -t6 * t122 + t7 * t127;
t137 = -t27 * t122 + t28 * t127;
t72 = -pkin(11) * t152 + t90;
t73 = t122 * t96 + t146;
t136 = -t72 * t122 + t73 * t127;
t135 = -t13 * t123 + t14 * t128;
t134 = -t51 * t123 + t52 * t128;
t93 = t121 * t127 + t126 * t122;
t132 = pkin(11) ^ 2;
t116 = t128 ^ 2;
t114 = t123 ^ 2;
t110 = t114 * t132;
t106 = t111 * t129 ^ 2;
t100 = t196 * t127;
t99 = t196 * t122;
t95 = (pkin(5) * t122 + pkin(11)) * t123;
t91 = t121 * t122 - t126 * t127;
t88 = pkin(2) * t157 + t145;
t87 = -pkin(9) * t159 + t105;
t86 = t119 * t191 - t103;
t80 = -t121 * t155 + t126 * t153;
t78 = t93 * t123;
t69 = -t126 * t100 + t121 * t99;
t68 = t121 * t100 + t126 * t99;
t41 = -t121 * t63 + t126 * t65;
t39 = t121 * t65 + t126 * t63;
t38 = t121 * t58 + t180;
t35 = t63 * pkin(5) + t49;
t19 = -t121 * t32 + t126 * t34;
t17 = t121 * t34 + t126 * t32;
t10 = t121 * t21 + t181;
t8 = t32 * pkin(5) + t11;
t2 = t121 * t4 + t185;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t112 * t125 ^ 2, 0.2e1 * t125 * t162, t125 * t148, t112 * t130 ^ 2, t130 * t148, t120 ^ 2, 0.2e1 * pkin(1) * t162 + 0.2e1 * t87 * t120, -0.2e1 * t112 * t193 - 0.2e1 * t89 * t120 (-t125 * t87 + t130 * t89) * t200, t112 * pkin(1) ^ 2 + t87 ^ 2 + t89 ^ 2, t61 ^ 2, t61 * t206, 0.2e1 * t61 * t81, t209, t81 * t206, t81 ^ 2, 0.2e1 * t29 * t81 + 0.2e1 * t42 * t59, -0.2e1 * t30 * t81 + 0.2e1 * t42 * t61, -0.2e1 * t29 * t61 - 0.2e1 * t30 * t59, t29 ^ 2 + t30 ^ 2 + t42 ^ 2, t47 ^ 2, t47 * t208, 0.2e1 * t59 * t47, t44, t45 * t206, t209, 0.2e1 * t13 * t59 + 0.2e1 * t25 * t45, -0.2e1 * t14 * t59 + 0.2e1 * t25 * t47, -0.2e1 * t13 * t47 - 0.2e1 * t14 * t45, t13 ^ 2 + t14 ^ 2 + t25 ^ 2, t34 ^ 2, -0.2e1 * t34 * t32, t34 * t207, t32 ^ 2, t32 * t208, t44, 0.2e1 * t11 * t32 + 0.2e1 * t6 * t45, 0.2e1 * t11 * t34 - 0.2e1 * t7 * t45, -0.2e1 * t7 * t32 - 0.2e1 * t6 * t34, t11 ^ 2 + t6 ^ 2 + t7 ^ 2, t19 ^ 2, -0.2e1 * t19 * t17, t19 * t207, t17 ^ 2, t17 * t208, t44, 0.2e1 * t1 * t45 + 0.2e1 * t8 * t17, 0.2e1 * t8 * t19 - 0.2e1 * t2 * t45, -0.2e1 * t1 * t19 - 0.2e1 * t2 * t17, t1 ^ 2 + t2 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159, 0, t158, t120, t87, -t89, 0, 0, t61 * t161 (-t124 * t59 + t129 * t61) * t117, t61 * t119 + t81 * t161, -t144, -t59 * t119 + t81 * t160, t81 * t119, t29 * t119 + t86 * t81 + (-pkin(2) * t59 - t129 * t42) * t117, -t30 * t119 - t88 * t81 + (-pkin(2) * t61 + t124 * t42) * t117, -t88 * t59 - t86 * t61 + (-t124 * t29 + t129 * t30) * t117, -t42 * t117 * pkin(2) + t29 * t86 + t30 * t88, t47 * t85, -t45 * t85 - t83 * t47, -t47 * t160 + t59 * t85, t36, t45 * t160 - t83 * t59, -t144, -t13 * t160 + t25 * t83 + t75 * t45 + t51 * t59, t14 * t160 + t25 * t85 + t75 * t47 - t52 * t59, -t13 * t85 - t14 * t83 - t52 * t45 - t51 * t47, t13 * t51 + t14 * t52 + t25 * t75, t34 * t65, -t65 * t32 - t34 * t63, t83 * t34 + t45 * t65, t32 * t63, -t83 * t32 - t45 * t63, t36, t11 * t63 + t27 * t45 + t49 * t32 + t6 * t83, t11 * t65 - t28 * t45 + t49 * t34 - t7 * t83, -t27 * t34 - t28 * t32 - t6 * t65 - t7 * t63, t11 * t49 + t6 * t27 + t7 * t28, t19 * t41, -t41 * t17 - t19 * t39, t19 * t83 + t41 * t45, t17 * t39, -t17 * t83 - t39 * t45, t36, t1 * t83 + t35 * t17 + t8 * t39 + t9 * t45, -t10 * t45 + t35 * t19 - t2 * t83 + t8 * t41, -t1 * t41 - t10 * t17 - t9 * t19 - t2 * t39, t1 * t9 + t2 * t10 + t8 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t111 * t124 ^ 2, 0.2e1 * t124 * t163, t157 * t201, t106, t119 * t149, t119 ^ 2, 0.2e1 * pkin(2) * t163 + 0.2e1 * t86 * t119, -0.2e1 * t111 * t192 - 0.2e1 * t88 * t119 (-t124 * t86 + t129 * t88) * t201, t111 * pkin(2) ^ 2 + t86 ^ 2 + t88 ^ 2, t85 ^ 2, t83 * t203, t160 * t203, t82, t83 * t149, t106, -0.2e1 * t51 * t160 + 0.2e1 * t75 * t83, 0.2e1 * t160 * t52 + 0.2e1 * t75 * t85, -0.2e1 * t51 * t85 - 0.2e1 * t52 * t83, t51 ^ 2 + t52 ^ 2 + t75 ^ 2, t65 ^ 2, -0.2e1 * t65 * t63, t65 * t204, t63 ^ 2, t63 * t205, t82, 0.2e1 * t27 * t83 + 0.2e1 * t49 * t63, -0.2e1 * t28 * t83 + 0.2e1 * t49 * t65, -0.2e1 * t27 * t65 - 0.2e1 * t28 * t63, t27 ^ 2 + t28 ^ 2 + t49 ^ 2, t41 ^ 2, -0.2e1 * t41 * t39, t41 * t204, t39 ^ 2, t39 * t205, t82, 0.2e1 * t35 * t39 + 0.2e1 * t9 * t83, -0.2e1 * t10 * t83 + 0.2e1 * t35 * t41, -0.2e1 * t10 * t39 - 0.2e1 * t9 * t41, t10 ^ 2 + t35 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, -t59, t81, t29, -t30, 0, 0, t173, -t45 * t123 + t128 * t47, t170, -t174, t179, 0, -pkin(3) * t45 - pkin(11) * t170 - t25 * t128, -pkin(3) * t47 - pkin(11) * t179 + t25 * t123 (t173 - t174) * pkin(11) + t135, -t25 * pkin(3) + pkin(11) * t135, t34 * t153 (-t177 - t178) * t123, -t128 * t34 + t153 * t45, t32 * t155, t128 * t32 - t155 * t45, -t174, -t6 * t128 + t72 * t45 + (pkin(11) * t32 + t183) * t123, t7 * t128 - t73 * t45 + (pkin(11) * t34 + t182) * t123, -t73 * t32 - t72 * t34 + (-t122 * t7 - t127 * t6) * t123, t11 * t187 + t6 * t72 + t7 * t73, t19 * t80, -t80 * t17 - t19 * t78, -t19 * t128 + t80 * t45, t17 * t78, t17 * t128 - t78 * t45, -t174, -t1 * t128 + t95 * t17 + t37 * t45 + t8 * t78, t2 * t128 + t95 * t19 - t38 * t45 + t8 * t80, -t1 * t80 - t38 * t17 - t37 * t19 - t2 * t78, t1 * t37 + t2 * t38 + t8 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, 0, t160, t119, t86, -t88, 0, 0, t164, -t83 * t123 + t128 * t85, -t143, -t165, -t140, 0, -pkin(3) * t83 + pkin(11) * t143 - t75 * t128, -pkin(3) * t85 + pkin(11) * t140 + t75 * t123 (t164 - t165) * pkin(11) + t134, -t75 * pkin(3) + pkin(11) * t134, t65 * t153 (-t168 - t169) * t123, -t128 * t65 + t153 * t83, t63 * t155, t128 * t63 - t155 * t83, -t165, -t27 * t128 + t72 * t83 + (pkin(11) * t63 + t172) * t123, t28 * t128 - t73 * t83 + (pkin(11) * t65 + t171) * t123, -t73 * t63 - t72 * t65 + (-t122 * t28 - t127 * t27) * t123, t49 * t187 + t27 * t72 + t28 * t73, t41 * t80, -t80 * t39 - t41 * t78, -t41 * t128 + t80 * t83, t39 * t78, t39 * t128 - t78 * t83, -t165, -t9 * t128 + t35 * t78 + t37 * t83 + t95 * t39, t10 * t128 + t35 * t80 - t38 * t83 + t95 * t41, -t10 * t78 - t37 * t41 - t38 * t39 - t9 * t80, t10 * t38 + t35 * t95 + t9 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t114, t147, 0, t116, 0, 0, pkin(3) * t197, pkin(3) * t199, 0.2e1 * (t114 + t116) * pkin(11), pkin(3) ^ 2 + t116 * t132 + t110, t115 * t114, -0.2e1 * t114 * t154, t151 * t199, t113 * t114, t122 * t147, t116, 0.2e1 * t114 * t189 - 0.2e1 * t72 * t128, 0.2e1 * t114 * pkin(11) * t127 + 0.2e1 * t73 * t128, 0.2e1 * (-t122 * t73 - t127 * t72) * t123, t72 ^ 2 + t73 ^ 2 + t110, t80 ^ 2, -0.2e1 * t80 * t78, t80 * t198, t78 ^ 2, -t78 * t198, t116, -0.2e1 * t37 * t128 + 0.2e1 * t95 * t78, 0.2e1 * t38 * t128 + 0.2e1 * t95 * t80, -0.2e1 * t37 * t80 - 0.2e1 * t38 * t78, t37 ^ 2 + t38 ^ 2 + t95 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t45, t59, t13, -t14, 0, 0, t177, -t122 * t32 + t34 * t127, t176, -t178, t175, 0, -pkin(4) * t32 - pkin(12) * t176 - t182, -pkin(4) * t34 - pkin(12) * t175 + t183 (t177 - t178) * pkin(12) + t139, -t11 * pkin(4) + pkin(12) * t139, t19 * t93, -t93 * t17 - t19 * t91, t93 * t45, t17 * t91, -t91 * t45, 0, t109 * t17 + t68 * t45 + t8 * t91, t109 * t19 - t69 * t45 + t8 * t93, -t1 * t93 - t69 * t17 - t68 * t19 - t2 * t91, t1 * t68 + t8 * t109 + t2 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, -t83, -t160, t51, -t52, 0, 0, t168, -t122 * t63 + t65 * t127, t167, -t169, t166, 0, -pkin(4) * t63 - pkin(12) * t167 - t171, -pkin(4) * t65 - pkin(12) * t166 + t172 (t168 - t169) * pkin(12) + t137, -t49 * pkin(4) + pkin(12) * t137, t41 * t93, -t93 * t39 - t41 * t91, t93 * t83, t39 * t91, -t91 * t83, 0, t109 * t39 + t35 * t91 + t68 * t83, t109 * t41 + t35 * t93 - t69 * t83, -t10 * t91 - t69 * t39 - t68 * t41 - t9 * t93, t10 * t69 + t35 * t109 + t9 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, 0, t128, 0, -t187, -t128 * pkin(11), 0, 0, t141 (-t113 + t115) * t123, -t152, -t141, -t151, 0, -pkin(11) * t153 + (-pkin(4) * t123 + pkin(12) * t128) * t122, pkin(12) * t151 + (t189 - t190) * t123, t136, -pkin(4) * t187 + pkin(12) * t136, t80 * t93, -t93 * t78 - t80 * t91, -t93 * t128, t78 * t91, t91 * t128, 0, t109 * t78 - t68 * t128 + t95 * t91, t109 * t80 + t69 * t128 + t95 * t93, -t37 * t93 - t38 * t91 - t68 * t80 - t69 * t78, t95 * t109 + t37 * t68 + t38 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t113, 0.2e1 * t154, 0, t115, 0, 0, 0.2e1 * t190, -0.2e1 * pkin(4) * t122, 0.2e1 * t150 * pkin(12), pkin(12) ^ 2 * t150 + pkin(4) ^ 2, t93 ^ 2, -0.2e1 * t93 * t91, 0, t91 ^ 2, 0, 0, t91 * t202, t93 * t202, -0.2e1 * t68 * t93 - 0.2e1 * t69 * t91, t109 ^ 2 + t68 ^ 2 + t69 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t32, t45, t6, -t7, 0, 0, 0, 0, t19, 0, -t17, t45, t186 * t45 + t1, -t185 + (-t4 - t195) * t121 (-t121 * t17 - t126 * t19) * pkin(5) (t1 * t126 + t121 * t2) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, -t63, t83, t27, -t28, 0, 0, 0, 0, t41, 0, -t39, t83, t186 * t83 + t9, -t181 + (-t21 - t194) * t121 (-t121 * t39 - t126 * t41) * pkin(5) (t10 * t121 + t126 * t9) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153, 0, -t155, -t128, t72, -t73, 0, 0, 0, 0, t80, 0, -t78, -t128, -t126 * t184 + t37, -t180 + (-t58 + t184) * t121 (-t121 * t78 - t126 * t80) * pkin(5) (t121 * t38 + t126 * t37) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, t127, 0, -t122 * pkin(12), -t127 * pkin(12), 0, 0, 0, 0, t93, 0, -t91, 0, t68, -t69 (-t121 * t91 - t126 * t93) * pkin(5) (t121 * t69 + t126 * t68) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t186, -0.2e1 * t188, 0 (t121 ^ 2 + t126 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, -t17, t45, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, -t39, t83, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t78, -t128, t37, -t38, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, -t91, 0, t68, -t69, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t186, -t188, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
