% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 05:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR9_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR9_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRRR9_inertiaJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 16:13:59
% EndTime: 2019-05-08 16:14:13
% DurationCPUTime: 2.97s
% Computational Cost: add. (4728->277), mult. (12675->566), div. (0->0), fcn. (15021->14), ass. (0->158)
t111 = sin(qJ(3));
t115 = cos(qJ(3));
t104 = sin(pkin(7));
t106 = cos(pkin(7));
t107 = cos(pkin(6));
t105 = sin(pkin(6));
t112 = sin(qJ(2));
t139 = t105 * t112;
t116 = cos(qJ(2));
t94 = t107 * t116 * pkin(1);
t57 = t107 * pkin(2) + t94 + (-pkin(10) * t106 - pkin(9)) * t139;
t65 = (-pkin(10) * t104 * t112 - pkin(2) * t116 - pkin(1)) * t105;
t118 = t104 * t65 + t106 * t57;
t136 = t106 * t116;
t120 = t105 * t136;
t138 = t105 * t116;
t163 = pkin(1) * t112;
t81 = pkin(9) * t138 + t107 * t163;
t52 = (t104 * t107 + t120) * pkin(10) + t81;
t28 = -t111 * t52 + t115 * t118;
t110 = sin(qJ(4));
t114 = cos(qJ(4));
t141 = t104 * t111;
t56 = t107 * t141 + (t111 * t136 + t112 * t115) * t105;
t74 = -t104 * t138 + t106 * t107;
t42 = t110 * t56 - t114 * t74;
t177 = -0.2e1 * t42;
t176 = 0.2e1 * t42;
t140 = t104 * t115;
t55 = -t107 * t140 + t111 * t139 - t115 * t120;
t175 = -0.2e1 * t55;
t108 = sin(qJ(6));
t109 = sin(qJ(5));
t113 = cos(qJ(5));
t164 = cos(qJ(6));
t117 = -t108 * t109 + t113 * t164;
t73 = t117 * t110;
t174 = -0.2e1 * t73;
t76 = -t106 * t114 + t110 * t141;
t173 = -0.2e1 * t76;
t172 = 0.2e1 * t76;
t77 = t106 * t110 + t114 * t141;
t171 = -0.2e1 * t77;
t97 = -pkin(5) * t113 - pkin(4);
t170 = 0.2e1 * t97;
t169 = -0.2e1 * t110;
t168 = 0.2e1 * t114;
t167 = pkin(12) + pkin(13);
t166 = pkin(5) * t42;
t165 = pkin(5) * t76;
t162 = pkin(2) * t111;
t161 = pkin(2) * t115;
t160 = pkin(4) * t113;
t159 = pkin(11) * t109;
t158 = t108 * pkin(5);
t39 = -t104 * t57 + t106 * t65;
t22 = pkin(3) * t55 - pkin(11) * t56 + t39;
t29 = t111 * t118 + t115 * t52;
t25 = t74 * pkin(11) + t29;
t13 = -t110 * t25 + t114 * t22;
t11 = -pkin(4) * t55 - t13;
t157 = t109 * t11;
t126 = pkin(10) * t140;
t70 = t126 + (pkin(11) + t162) * t106;
t71 = (-pkin(3) * t115 - pkin(11) * t111 - pkin(2)) * t104;
t47 = -t110 * t70 + t114 * t71;
t45 = pkin(4) * t140 - t47;
t156 = t109 * t45;
t155 = t11 * t113;
t154 = t113 * t45;
t153 = t114 * t55;
t98 = t104 ^ 2;
t152 = t115 * t98;
t99 = t105 ^ 2;
t151 = t116 * t99;
t43 = t110 * t74 + t114 * t56;
t32 = t109 * t55 + t113 * t43;
t150 = t32 * t109;
t149 = t42 * t109;
t148 = t42 * t113;
t147 = t42 * t114;
t146 = t55 * t110;
t59 = -t109 * t140 + t113 * t77;
t145 = t59 * t109;
t144 = t76 * t109;
t143 = t76 * t113;
t142 = t76 * t114;
t137 = t106 * t111;
t135 = t109 * t110;
t134 = t109 * t113;
t133 = t113 * t110;
t132 = t114 * t109;
t131 = t114 * t113;
t130 = 0.2e1 * t140;
t129 = 0.2e1 * t105 * t107;
t128 = t110 * t168;
t127 = pkin(11) * t131;
t125 = t164 * pkin(5);
t31 = t109 * t43 - t113 * t55;
t14 = t110 * t22 + t114 * t25;
t12 = pkin(12) * t55 + t14;
t24 = -t74 * pkin(3) - t28;
t16 = t42 * pkin(4) - t43 * pkin(12) + t24;
t7 = t109 * t16 + t113 * t12;
t5 = -pkin(13) * t31 + t7;
t124 = t164 * t5;
t92 = pkin(10) * t141;
t69 = t92 + (-pkin(3) - t161) * t106;
t44 = t76 * pkin(4) - t77 * pkin(12) + t69;
t48 = t110 * t71 + t114 * t70;
t46 = -pkin(12) * t140 + t48;
t27 = t109 * t44 + t113 * t46;
t58 = t109 * t77 + t113 * t140;
t21 = -pkin(13) * t58 + t27;
t123 = t164 * t21;
t87 = -pkin(4) * t114 - pkin(12) * t110 - pkin(3);
t60 = t127 + (-pkin(13) * t110 + t87) * t109;
t122 = t164 * t60;
t121 = t110 * t140;
t119 = t114 * t140;
t6 = -t109 * t12 + t113 * t16;
t4 = -pkin(13) * t32 + t166 + t6;
t1 = -t108 * t5 + t164 * t4;
t26 = -t109 * t46 + t113 * t44;
t20 = -pkin(13) * t59 + t165 + t26;
t9 = -t108 * t21 + t164 * t20;
t82 = t113 * t87;
t54 = -pkin(13) * t133 + t82 + (-pkin(5) - t159) * t114;
t35 = -t108 * t60 + t164 * t54;
t84 = t108 * t113 + t109 * t164;
t103 = t114 ^ 2;
t102 = t113 ^ 2;
t101 = t110 ^ 2;
t100 = t109 ^ 2;
t91 = t167 * t113;
t90 = t167 * t109;
t86 = (pkin(5) * t109 + pkin(11)) * t110;
t80 = pkin(2) * t137 + t126;
t79 = -pkin(9) * t139 + t94;
t78 = t106 * t161 - t92;
t75 = t76 ^ 2;
t72 = t84 * t110;
t67 = t109 * t87 + t127;
t66 = -pkin(11) * t132 + t82;
t63 = -t108 * t90 + t164 * t91;
t62 = -t108 * t91 - t164 * t90;
t41 = t42 ^ 2;
t38 = -t108 * t58 + t164 * t59;
t37 = t108 * t59 + t164 * t58;
t36 = t108 * t54 + t122;
t34 = t42 * t76;
t33 = pkin(5) * t58 + t45;
t18 = -t108 * t31 + t164 * t32;
t17 = t108 * t32 + t164 * t31;
t10 = t108 * t20 + t123;
t8 = pkin(5) * t31 + t11;
t2 = t108 * t4 + t124;
t3 = [1, 0, 0, t99 * t112 ^ 2, 0.2e1 * t112 * t151, t112 * t129, t116 * t129, t107 ^ 2, 0.2e1 * pkin(1) * t151 + 0.2e1 * t107 * t79, -0.2e1 * t107 * t81 - 0.2e1 * t163 * t99, t56 ^ 2, t56 * t175, 0.2e1 * t56 * t74, t74 * t175, t74 ^ 2, 0.2e1 * t28 * t74 + 0.2e1 * t39 * t55, -0.2e1 * t29 * t74 + 0.2e1 * t39 * t56, t43 ^ 2, t43 * t177, 0.2e1 * t55 * t43, t42 * t175, t55 ^ 2, 0.2e1 * t13 * t55 + 0.2e1 * t24 * t42, -0.2e1 * t14 * t55 + 0.2e1 * t24 * t43, t32 ^ 2, -0.2e1 * t32 * t31, t32 * t176, t31 * t177, t41, 0.2e1 * t11 * t31 + 0.2e1 * t42 * t6, 0.2e1 * t11 * t32 - 0.2e1 * t42 * t7, t18 ^ 2, -0.2e1 * t18 * t17, t18 * t176, t17 * t177, t41, 0.2e1 * t1 * t42 + 0.2e1 * t17 * t8, 0.2e1 * t18 * t8 - 0.2e1 * t2 * t42; 0, 0, 0, 0, 0, t139, t138, t107, t79, -t81, t56 * t141 (-t111 * t55 + t115 * t56) * t104, t106 * t56 + t141 * t74, -t106 * t55 + t140 * t74, t74 * t106, t28 * t106 + t78 * t74 + (-pkin(2) * t55 - t115 * t39) * t104, -t29 * t106 - t80 * t74 + (-pkin(2) * t56 + t111 * t39) * t104, t43 * t77, -t42 * t77 - t43 * t76, -t140 * t43 + t55 * t77, t140 * t42 - t55 * t76, -t55 * t140, -t13 * t140 + t24 * t76 + t42 * t69 + t47 * t55, t14 * t140 + t24 * t77 + t43 * t69 - t48 * t55, t32 * t59, -t31 * t59 - t32 * t58, t32 * t76 + t42 * t59, -t31 * t76 - t42 * t58, t34, t11 * t58 + t26 * t42 + t31 * t45 + t6 * t76, t11 * t59 - t27 * t42 + t32 * t45 - t7 * t76, t18 * t38, -t17 * t38 - t18 * t37, t18 * t76 + t38 * t42, -t17 * t76 - t37 * t42, t34, t1 * t76 + t17 * t33 + t37 * t8 + t42 * t9, -t10 * t42 + t18 * t33 - t2 * t76 + t38 * t8; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t98 * t111 ^ 2, 0.2e1 * t111 * t152, 0.2e1 * t104 * t137, t106 * t130, t106 ^ 2, 0.2e1 * pkin(2) * t152 + 0.2e1 * t106 * t78, -0.2e1 * t106 * t80 - 0.2e1 * t162 * t98, t77 ^ 2, t76 * t171, t140 * t171, t76 * t130, t98 * t115 ^ 2, -0.2e1 * t140 * t47 + 0.2e1 * t69 * t76, 0.2e1 * t140 * t48 + 0.2e1 * t69 * t77, t59 ^ 2, -0.2e1 * t59 * t58, t59 * t172, t58 * t173, t75, 0.2e1 * t26 * t76 + 0.2e1 * t45 * t58, -0.2e1 * t27 * t76 + 0.2e1 * t45 * t59, t38 ^ 2, -0.2e1 * t38 * t37, t38 * t172, t37 * t173, t75, 0.2e1 * t33 * t37 + 0.2e1 * t76 * t9, -0.2e1 * t10 * t76 + 0.2e1 * t33 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t55, t74, t28, -t29, t43 * t110, -t110 * t42 + t114 * t43, t146, t153, 0, -pkin(3) * t42 - pkin(11) * t146 - t114 * t24, -pkin(3) * t43 - pkin(11) * t153 + t110 * t24, t32 * t133 (-t113 * t31 - t150) * t110, -t114 * t32 + t133 * t42, t114 * t31 - t135 * t42, -t147, -t6 * t114 + t66 * t42 + (pkin(11) * t31 + t157) * t110, t7 * t114 - t67 * t42 + (pkin(11) * t32 + t155) * t110, t18 * t73, -t17 * t73 - t18 * t72, -t114 * t18 + t42 * t73, t114 * t17 - t42 * t72, -t147, -t1 * t114 + t17 * t86 + t35 * t42 + t72 * t8, t114 * t2 + t18 * t86 - t36 * t42 + t73 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, t140, t106, t78, -t80, t77 * t110, -t110 * t76 + t114 * t77, -t121, -t119, 0, -pkin(3) * t76 + pkin(11) * t121 - t114 * t69, -pkin(3) * t77 + pkin(11) * t119 + t110 * t69, t59 * t133 (-t113 * t58 - t145) * t110, -t114 * t59 + t133 * t76, t114 * t58 - t135 * t76, -t142, -t26 * t114 + t66 * t76 + (pkin(11) * t58 + t156) * t110, t27 * t114 - t67 * t76 + (pkin(11) * t59 + t154) * t110, t38 * t73, -t37 * t73 - t38 * t72, -t114 * t38 + t73 * t76, t114 * t37 - t72 * t76, -t142, -t114 * t9 + t33 * t72 + t35 * t76 + t37 * t86, t10 * t114 + t33 * t73 - t36 * t76 + t38 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t101, t128, 0, 0, 0, pkin(3) * t168, pkin(3) * t169, t102 * t101, -0.2e1 * t101 * t134, t131 * t169, t109 * t128, t103, 0.2e1 * t101 * t159 - 0.2e1 * t114 * t66, 0.2e1 * pkin(11) * t101 * t113 + 0.2e1 * t114 * t67, t73 ^ 2, t72 * t174, t114 * t174, t72 * t168, t103, -0.2e1 * t114 * t35 + 0.2e1 * t72 * t86, 0.2e1 * t114 * t36 + 0.2e1 * t73 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t42, t55, t13, -t14, t150, -t109 * t31 + t113 * t32, t149, t148, 0, -pkin(4) * t31 - pkin(12) * t149 - t155, -pkin(4) * t32 - pkin(12) * t148 + t157, t18 * t84, t117 * t18 - t17 * t84, t84 * t42, t117 * t42, 0, -t117 * t8 + t17 * t97 + t42 * t62, t18 * t97 - t42 * t63 + t8 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t76, -t140, t47, -t48, t145, -t109 * t58 + t113 * t59, t144, t143, 0, -pkin(4) * t58 - pkin(12) * t144 - t154, -pkin(4) * t59 - pkin(12) * t143 + t156, t38 * t84, t117 * t38 - t37 * t84, t84 * t76, t117 * t76, 0, -t117 * t33 + t37 * t97 + t62 * t76, t33 * t84 + t38 * t97 - t63 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, t114, 0, -t110 * pkin(11), -t114 * pkin(11), t109 * t133 (-t100 + t102) * t110, -t132, -t131, 0, -pkin(11) * t133 + (-pkin(4) * t110 + pkin(12) * t114) * t109, pkin(12) * t131 + (t159 - t160) * t110, t73 * t84, t117 * t73 - t72 * t84, -t84 * t114, -t117 * t114, 0, -t114 * t62 - t117 * t86 + t72 * t97, t114 * t63 + t73 * t97 + t84 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t100, 0.2e1 * t134, 0, 0, 0, 0.2e1 * t160, -0.2e1 * pkin(4) * t109, t84 ^ 2, 0.2e1 * t84 * t117, 0, 0, 0, -t117 * t170, t84 * t170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t31, t42, t6, -t7, 0, 0, t18, -t17, t42, t125 * t42 + t1, -t124 + (-t4 - t166) * t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t58, t76, t26, -t27, 0, 0, t38, -t37, t76, t125 * t76 + t9, -t123 + (-t20 - t165) * t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, -t135, -t114, t66, -t67, 0, 0, t73, -t72, -t114, -t114 * t125 + t35, -t122 + (pkin(5) * t114 - t54) * t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, t113, 0, -t109 * pkin(12), -t113 * pkin(12), 0, 0, t84, t117, 0, t62, -t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t125, -0.2e1 * t158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, -t17, t42, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, -t37, t76, t9, -t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, -t72, -t114, t35, -t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, t117, 0, t62, -t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t125, -t158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t3;
