% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRR11_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR11_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRRRR11_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 05:39:01
% EndTime: 2019-05-06 05:39:13
% DurationCPUTime: 3.70s
% Computational Cost: add. (7179->287), mult. (19169->572), div. (0->0), fcn. (22360->14), ass. (0->140)
t101 = sin(qJ(3));
t105 = cos(qJ(3));
t92 = sin(pkin(13));
t94 = sin(pkin(6));
t140 = t92 * t94;
t97 = cos(pkin(6));
t155 = pkin(1) * t97;
t95 = cos(pkin(13));
t80 = t95 * t155;
t96 = cos(pkin(7));
t45 = t97 * pkin(2) + t80 + (-pkin(9) * t96 - qJ(2)) * t140;
t93 = sin(pkin(7));
t52 = (-pkin(9) * t92 * t93 - pkin(2) * t95 - pkin(1)) * t94;
t114 = t45 * t96 + t52 * t93;
t139 = t94 * t95;
t119 = t96 * t139;
t109 = t93 * t97 + t119;
t136 = qJ(2) * t94;
t62 = t136 * t95 + t155 * t92;
t40 = pkin(9) * t109 + t62;
t22 = -t101 * t40 + t105 * t114;
t100 = sin(qJ(4));
t104 = cos(qJ(4));
t44 = t101 * t109 + t105 * t140;
t59 = -t139 * t93 + t96 * t97;
t34 = t100 * t44 - t104 * t59;
t33 = t34 ^ 2;
t126 = t93 * t105;
t42 = t101 * t140 - t105 * t119 - t126 * t97;
t165 = t42 ^ 2;
t127 = t93 * t101;
t63 = t100 * t127 - t104 * t96;
t60 = t63 ^ 2;
t164 = -0.2e1 * t34;
t163 = 0.2e1 * t34;
t162 = -0.2e1 * t42;
t103 = cos(qJ(5));
t84 = -pkin(5) * t103 - pkin(4);
t161 = 0.2e1 * t84;
t160 = 0.2e1 * t94;
t159 = -0.2e1 * t100;
t158 = -0.2e1 * t104;
t157 = 0.2e1 * t104;
t156 = -pkin(12) - pkin(11);
t99 = sin(qJ(5));
t154 = pkin(4) * t99;
t153 = pkin(10) * t99;
t152 = t34 * pkin(5);
t32 = -t45 * t93 + t52 * t96;
t18 = pkin(3) * t42 - pkin(10) * t44 + t32;
t23 = t101 * t114 + t105 * t40;
t21 = t59 * pkin(10) + t23;
t11 = -t100 * t21 + t104 * t18;
t9 = -pkin(4) * t42 - t11;
t151 = t9 * t99;
t98 = sin(qJ(6));
t150 = t98 * pkin(5);
t149 = pkin(4) * t103;
t148 = pkin(10) * t103;
t147 = t100 * pkin(10);
t102 = cos(qJ(6));
t146 = t102 * pkin(5);
t36 = t100 * t59 + t104 * t44;
t25 = -t103 * t42 + t36 * t99;
t12 = t100 * t18 + t104 * t21;
t10 = pkin(11) * t42 + t12;
t20 = -t59 * pkin(3) - t22;
t14 = t34 * pkin(4) - t36 * pkin(11) + t20;
t7 = t10 * t103 + t14 * t99;
t5 = -pkin(12) * t25 + t7;
t145 = t102 * t5;
t144 = t104 * pkin(5);
t27 = t103 * t36 + t42 * t99;
t143 = t27 * t99;
t87 = t94 ^ 2;
t142 = t87 * t95;
t141 = t9 * t103;
t138 = t99 * t34;
t88 = t99 ^ 2;
t90 = t103 ^ 2;
t137 = t88 + t90;
t135 = t100 * t42;
t121 = t103 * t104;
t117 = pkin(10) * t121;
t72 = -pkin(4) * t104 - pkin(11) * t100 - pkin(3);
t48 = t117 + (-pkin(12) * t100 + t72) * t99;
t134 = t102 * t48;
t133 = t103 * t34;
t132 = t104 * t42;
t131 = t25 * t103;
t130 = t34 * t104;
t129 = t36 * t100;
t128 = t63 * t100;
t125 = t99 * t100;
t124 = t99 * t103;
t123 = t99 * t104;
t122 = t103 * t100;
t120 = t97 * t160;
t118 = t100 * t157;
t116 = t99 * t122;
t6 = -t10 * t99 + t103 * t14;
t4 = -pkin(12) * t27 + t152 + t6;
t1 = t102 * t4 - t5 * t98;
t66 = t103 * t72;
t41 = -pkin(12) * t122 + t66 + (-pkin(5) - t153) * t104;
t28 = t102 * t41 - t48 * t98;
t115 = t7 * t103 - t6 * t99;
t65 = t100 * t96 + t104 * t127;
t46 = -t103 * t126 - t65 * t99;
t47 = t103 * t65 - t126 * t99;
t113 = t103 * t47 - t46 * t99;
t53 = -pkin(10) * t123 + t66;
t54 = t72 * t99 + t117;
t112 = t103 * t54 - t53 * t99;
t111 = -t11 * t100 + t12 * t104;
t110 = t104 * t65 + t128;
t69 = t102 * t99 + t103 * t98;
t107 = pkin(10) ^ 2;
t91 = t104 ^ 2;
t89 = t100 ^ 2;
t86 = t93 ^ 2;
t85 = t89 * t107;
t81 = t86 * t105 ^ 2;
t76 = t156 * t103;
t75 = t156 * t99;
t71 = (pkin(5) * t99 + pkin(10)) * t100;
t67 = -t102 * t103 + t98 * t99;
t61 = -t136 * t92 + t80;
t58 = t102 * t122 - t125 * t98;
t56 = t69 * t100;
t51 = -t102 * t76 + t75 * t98;
t50 = t102 * t75 + t76 * t98;
t31 = t102 * t47 + t46 * t98;
t30 = t102 * t46 - t47 * t98;
t29 = t41 * t98 + t134;
t17 = t102 * t27 - t25 * t98;
t15 = t102 * t25 + t27 * t98;
t8 = pkin(5) * t25 + t9;
t2 = t4 * t98 + t145;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t87 * t92 ^ 2, 0.2e1 * t92 * t142, t92 * t120, t87 * t95 ^ 2, t95 * t120, t97 ^ 2, 0.2e1 * pkin(1) * t142 + 0.2e1 * t61 * t97, -0.2e1 * pkin(1) * t87 * t92 - 0.2e1 * t62 * t97 (-t61 * t92 + t62 * t95) * t160, pkin(1) ^ 2 * t87 + t61 ^ 2 + t62 ^ 2, t44 ^ 2, t44 * t162, 0.2e1 * t44 * t59, t165, t59 * t162, t59 ^ 2, 0.2e1 * t22 * t59 + 0.2e1 * t32 * t42, -0.2e1 * t23 * t59 + 0.2e1 * t32 * t44, -0.2e1 * t22 * t44 - 0.2e1 * t23 * t42, t22 ^ 2 + t23 ^ 2 + t32 ^ 2, t36 ^ 2, t36 * t164, 0.2e1 * t36 * t42, t33, t34 * t162, t165, 0.2e1 * t11 * t42 + 0.2e1 * t20 * t34, -0.2e1 * t12 * t42 + 0.2e1 * t20 * t36, -0.2e1 * t11 * t36 - 0.2e1 * t12 * t34, t11 ^ 2 + t12 ^ 2 + t20 ^ 2, t27 ^ 2, -0.2e1 * t27 * t25, t27 * t163, t25 ^ 2, t25 * t164, t33, 0.2e1 * t25 * t9 + 0.2e1 * t34 * t6, 0.2e1 * t27 * t9 - 0.2e1 * t34 * t7, -0.2e1 * t25 * t7 - 0.2e1 * t27 * t6, t6 ^ 2 + t7 ^ 2 + t9 ^ 2, t17 ^ 2, -0.2e1 * t17 * t15, t17 * t163, t15 ^ 2, t15 * t164, t33, 0.2e1 * t1 * t34 + 0.2e1 * t15 * t8, 0.2e1 * t17 * t8 - 0.2e1 * t2 * t34, -0.2e1 * t1 * t17 - 0.2e1 * t15 * t2, t1 ^ 2 + t2 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t139, t140, 0, -t94 * pkin(1), 0, 0, 0, 0, 0, 0, t126 * t59 + t42 * t96, -t127 * t59 + t44 * t96 (-t101 * t42 - t105 * t44) * t93, t32 * t96 + (t101 * t23 + t105 * t22) * t93, 0, 0, 0, 0, 0, 0, -t126 * t34 - t42 * t63, -t126 * t36 - t42 * t65, -t34 * t65 + t36 * t63, -t11 * t63 + t12 * t65 - t126 * t20, 0, 0, 0, 0, 0, 0, t25 * t63 + t34 * t46, t27 * t63 - t34 * t47, -t25 * t47 - t27 * t46, t46 * t6 + t47 * t7 + t63 * t9, 0, 0, 0, 0, 0, 0, t15 * t63 + t30 * t34, t17 * t63 - t31 * t34, -t15 * t31 - t17 * t30, t1 * t30 + t2 * t31 + t63 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101 ^ 2 * t86 + t96 ^ 2 + t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65 ^ 2 + t60 + t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46 ^ 2 + t47 ^ 2 + t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30 ^ 2 + t31 ^ 2 + t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, -t42, t59, t22, -t23, 0, 0, t129, -t100 * t34 + t104 * t36, t135, -t130, t132, 0, -pkin(3) * t34 - pkin(10) * t135 - t104 * t20, -pkin(3) * t36 - pkin(10) * t132 + t100 * t20 (t129 - t130) * pkin(10) + t111, -t20 * pkin(3) + pkin(10) * t111, t27 * t122 (-t131 - t143) * t100, -t104 * t27 + t122 * t34, t25 * t125, t104 * t25 - t125 * t34, -t130, -t6 * t104 + t53 * t34 + (pkin(10) * t25 + t151) * t100, t7 * t104 - t54 * t34 + (pkin(10) * t27 + t141) * t100, -t54 * t25 - t53 * t27 + (-t103 * t6 - t7 * t99) * t100, t147 * t9 + t53 * t6 + t54 * t7, t17 * t58, -t15 * t58 - t17 * t56, -t104 * t17 + t34 * t58, t15 * t56, t104 * t15 - t34 * t56, -t130, -t1 * t104 + t15 * t71 + t28 * t34 + t56 * t8, t104 * t2 + t17 * t71 - t29 * t34 + t58 * t8, -t1 * t58 - t15 * t29 - t17 * t28 - t2 * t56, t1 * t28 + t2 * t29 + t71 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, -t127, 0, 0, 0, 0, 0, 0, 0, 0, t104 * t126, -t100 * t126, t110, pkin(3) * t126 + pkin(10) * t110, 0, 0, 0, 0, 0, 0, -t104 * t46 + t125 * t63, t104 * t47 + t122 * t63 (-t103 * t46 - t47 * t99) * t100, pkin(10) * t128 + t46 * t53 + t47 * t54, 0, 0, 0, 0, 0, 0, -t104 * t30 + t56 * t63, t104 * t31 + t58 * t63, -t30 * t58 - t31 * t56, t28 * t30 + t29 * t31 + t63 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t89, t118, 0, t91, 0, 0, pkin(3) * t157, pkin(3) * t159, 0.2e1 * (t89 + t91) * pkin(10), pkin(3) ^ 2 + t107 * t91 + t85, t90 * t89, -0.2e1 * t89 * t124, t121 * t159, t88 * t89, t99 * t118, t91, -0.2e1 * t104 * t53 + 0.2e1 * t153 * t89, 0.2e1 * t104 * t54 + 0.2e1 * t148 * t89, 0.2e1 * (-t103 * t53 - t54 * t99) * t100, t53 ^ 2 + t54 ^ 2 + t85, t58 ^ 2, -0.2e1 * t58 * t56, t58 * t158, t56 ^ 2, -t56 * t158, t91, -0.2e1 * t104 * t28 + 0.2e1 * t56 * t71, 0.2e1 * t104 * t29 + 0.2e1 * t58 * t71, -0.2e1 * t28 * t58 - 0.2e1 * t29 * t56, t28 ^ 2 + t29 ^ 2 + t71 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, t42, t11, -t12, 0, 0, t143, t103 * t27 - t25 * t99, t138, -t131, t133, 0, -pkin(4) * t25 - pkin(11) * t138 - t141, -pkin(4) * t27 - pkin(11) * t133 + t151 (-t131 + t143) * pkin(11) + t115, -t9 * pkin(4) + pkin(11) * t115, t17 * t69, -t15 * t69 - t17 * t67, t69 * t34, t15 * t67, -t67 * t34, 0, t15 * t84 + t34 * t50 + t67 * t8, t17 * t84 - t34 * t51 + t69 * t8, -t1 * t69 - t15 * t51 - t17 * t50 - t2 * t67, t1 * t50 + t2 * t51 + t8 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, -t65, 0, 0, 0, 0, 0, 0, 0, 0, -t63 * t103, t63 * t99, t113, -t63 * pkin(4) + pkin(11) * t113, 0, 0, 0, 0, 0, 0, t63 * t67, t63 * t69, -t30 * t69 - t31 * t67, t30 * t50 + t31 * t51 + t63 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, t104, 0, -t147, -t104 * pkin(10), 0, 0, t116 (-t88 + t90) * t100, -t123, -t116, -t121, 0, pkin(11) * t123 + (-t148 - t154) * t100, pkin(11) * t121 + (-t149 + t153) * t100, t112, -pkin(4) * t147 + pkin(11) * t112, t58 * t69, -t56 * t69 - t58 * t67, -t69 * t104, t56 * t67, t67 * t104, 0, -t104 * t50 + t56 * t84 + t67 * t71, t104 * t51 + t58 * t84 + t69 * t71, -t28 * t69 - t29 * t67 - t50 * t58 - t51 * t56, t28 * t50 + t29 * t51 + t71 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88, 0.2e1 * t124, 0, t90, 0, 0, 0.2e1 * t149, -0.2e1 * t154, 0.2e1 * t137 * pkin(11), pkin(11) ^ 2 * t137 + pkin(4) ^ 2, t69 ^ 2, -0.2e1 * t69 * t67, 0, t67 ^ 2, 0, 0, t67 * t161, t69 * t161, -0.2e1 * t50 * t69 - 0.2e1 * t51 * t67, t50 ^ 2 + t51 ^ 2 + t84 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t25, t34, t6, -t7, 0, 0, 0, 0, t17, 0, -t15, t34, t146 * t34 + t1, -t145 + (-t4 - t152) * t98 (-t102 * t17 - t15 * t98) * pkin(5) (t1 * t102 + t2 * t98) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t47, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t31, 0 (t102 * t30 + t31 * t98) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, -t125, -t104, t53, -t54, 0, 0, 0, 0, t58, 0, -t56, -t104, -t102 * t144 + t28, -t134 + (-t41 + t144) * t98 (-t102 * t58 - t56 * t98) * pkin(5) (t102 * t28 + t29 * t98) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, t103, 0, -t99 * pkin(11), -t103 * pkin(11), 0, 0, 0, 0, t69, 0, -t67, 0, t50, -t51 (-t102 * t69 - t67 * t98) * pkin(5) (t102 * t50 + t51 * t98) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t146, -0.2e1 * t150, 0 (t102 ^ 2 + t98 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, -t15, t34, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t31, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, -t56, -t104, t28, -t29, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, -t67, 0, t50, -t51, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t146, -t150, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
