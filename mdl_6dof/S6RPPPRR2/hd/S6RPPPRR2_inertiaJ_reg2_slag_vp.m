% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d5,d6,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPPRR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPPRR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPPRR2_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 13:36:14
% EndTime: 2019-05-05 13:36:18
% DurationCPUTime: 0.88s
% Computational Cost: add. (589->68), mult. (966->116), div. (0->0), fcn. (1093->8), ass. (0->62)
t38 = sin(pkin(10));
t40 = cos(pkin(10));
t64 = cos(qJ(5));
t53 = t64 * t40;
t63 = sin(qJ(5));
t22 = -t63 * t38 + t53;
t19 = t22 ^ 2;
t52 = t63 * t40;
t20 = t64 * t38 + t52;
t74 = t20 ^ 2;
t76 = t74 + t19;
t41 = cos(pkin(9));
t66 = t41 * pkin(1);
t31 = -pkin(2) - t66;
t27 = -qJ(4) + t31;
t65 = -pkin(7) + t27;
t16 = t65 * t38;
t4 = t63 * t16 - t65 * t53;
t75 = t4 ^ 2;
t39 = sin(pkin(9));
t33 = t39 * pkin(1);
t28 = t33 + qJ(3);
t73 = t28 ^ 2;
t24 = t38 * pkin(4) + t28;
t72 = 0.2e1 * t24;
t71 = 0.2e1 * t28;
t70 = t20 * pkin(5);
t69 = t22 * pkin(5);
t68 = t4 * t20;
t67 = t4 * t22;
t8 = t22 * t20;
t42 = sin(qJ(6));
t36 = t42 ^ 2;
t62 = t36 * t22;
t12 = t42 * t20;
t61 = t42 * t22;
t43 = cos(qJ(6));
t60 = t42 * t43;
t59 = t43 * t22;
t34 = t38 ^ 2;
t35 = t40 ^ 2;
t58 = t34 + t35;
t37 = t43 ^ 2;
t57 = t36 + t37;
t56 = t42 * t59;
t54 = t57 * pkin(8);
t50 = t57 * t20;
t49 = -pkin(8) * t20 - t69;
t3 = -t22 * pkin(8) + t24 + t70;
t6 = t64 * t16 + t65 * t52;
t1 = t43 * t3 - t42 * t6;
t2 = t42 * t3 + t43 * t6;
t48 = t1 * t43 + t2 * t42;
t47 = -t1 * t42 + t2 * t43;
t46 = t6 * t20 - t67;
t15 = t43 * t20;
t14 = t37 * t22;
t13 = t37 * t19;
t11 = t36 * t19;
t9 = t58 * t27;
t7 = -t14 - t62;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t66, -0.2e1 * t33, 0 (t39 ^ 2 + t41 ^ 2) * pkin(1) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t31, t71, t31 ^ 2 + t73, t35, -0.2e1 * t40 * t38, 0, t34, 0, 0, t38 * t71, t40 * t71, -0.2e1 * t9, t58 * t27 ^ 2 + t73, t19, -0.2e1 * t8, 0, t74, 0, 0, t20 * t72, t22 * t72, -0.2e1 * t46, t24 ^ 2 + t6 ^ 2 + t75, t13, -0.2e1 * t19 * t60, 0.2e1 * t20 * t59, t11, -0.2e1 * t20 * t61, t74, 0.2e1 * t1 * t20 + 0.2e1 * t4 * t61, -0.2e1 * t2 * t20 + 0.2e1 * t4 * t59, -0.2e1 * t48 * t22, t1 ^ 2 + t2 ^ 2 + t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6 * t22 + t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47 * t22 + t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 + t11 + t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t31, 0, 0, 0, 0, 0, 0, 0, 0, -t58, t9, 0, 0, 0, 0, 0, 0, 0, 0, -t76, t46, 0, 0, 0, 0, 0, 0, -t76 * t42, -t76 * t43, 0, t47 * t20 - t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t57) * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * t74 + t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t40, 0, t28, 0, 0, 0, 0, 0, 0, t20, t22, 0, t24, 0, 0, 0, 0, 0, 0, t15, -t12, t7, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, -t20, 0, -t4, -t6, 0, 0, t56, t14 - t62, t12, -t56, t15, 0, -t4 * t43 + t49 * t42, t4 * t42 + t49 * t43, t47, -t4 * pkin(5) + t47 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, -t22, 0, 0, 0, 0, 0, 0, 0, 0, -t15, t12, -t7, t22 * t54 - t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, -t20, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t61, t50, pkin(8) * t50 + t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t36, 0.2e1 * t60, 0, t37, 0, 0, 0.2e1 * pkin(5) * t43, -0.2e1 * pkin(5) * t42, 0.2e1 * t54, t57 * pkin(8) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t61, t20, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, -t59, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, -t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t42, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, t43, 0, -t42 * pkin(8), -t43 * pkin(8), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
