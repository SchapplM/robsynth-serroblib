% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPRP5_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:11:05
% EndTime: 2019-05-05 04:11:08
% DurationCPUTime: 1.30s
% Computational Cost: add. (493->116), mult. (1031->178), div. (0->0), fcn. (1115->8), ass. (0->87)
t65 = sin(qJ(5));
t58 = t65 ^ 2;
t68 = cos(qJ(5));
t60 = t68 ^ 2;
t41 = t58 + t60;
t66 = sin(qJ(3));
t59 = t66 ^ 2;
t69 = cos(qJ(3));
t61 = t69 ^ 2;
t109 = t59 + t61;
t63 = sin(pkin(6));
t67 = sin(qJ(2));
t102 = t63 * t67;
t64 = cos(pkin(6));
t24 = t69 * t102 + t64 * t66;
t21 = t24 ^ 2;
t22 = t66 * t102 - t64 * t69;
t57 = t63 ^ 2;
t70 = cos(qJ(2));
t43 = t57 * t70 ^ 2;
t108 = t22 ^ 2 + t21 + t43;
t107 = -0.2e1 * t66;
t106 = 0.2e1 * t69;
t105 = 2 * qJ(4);
t71 = -pkin(3) - pkin(9);
t104 = t66 * pkin(5);
t103 = t24 * t68;
t101 = t63 * t70;
t100 = t65 * t69;
t99 = t65 * t71;
t98 = t66 * t69;
t97 = t66 * t71;
t96 = t68 * t65;
t95 = t68 * t69;
t51 = t68 * t71;
t84 = -t66 * qJ(4) - pkin(2);
t27 = t71 * t69 + t84;
t53 = t66 * pkin(8);
t37 = t66 * pkin(4) + t53;
t10 = t68 * t27 + t65 * t37;
t94 = t41 * t71 ^ 2;
t93 = t109 * pkin(8) ^ 2;
t55 = t69 * pkin(8);
t38 = t69 * pkin(4) + t55;
t92 = qJ(4) * t69;
t91 = t24 * qJ(4);
t90 = t66 * qJ(6);
t88 = t66 * t101;
t87 = t69 * t101;
t86 = t61 * t96;
t85 = t66 * t95;
t12 = t65 * t101 + t22 * t68;
t83 = t12 * t66 + t24 * t95;
t82 = t65 * t27 - t68 * t37;
t14 = t68 * t101 - t22 * t65;
t81 = t12 ^ 2 + t14 ^ 2 + t21;
t80 = t12 * t51 - t14 * t99;
t6 = t90 + t10;
t7 = t82 - t104;
t1 = t6 * t65 - t7 * t68;
t2 = t10 * t65 - t68 * t82;
t79 = -pkin(3) * t66 + t92;
t35 = pkin(5) * t68 + t65 * qJ(6);
t78 = t65 * pkin(5) - t68 * qJ(6);
t77 = t12 * t68 - t14 * t65;
t76 = t22 * t66 + t24 * t69;
t75 = t76 * pkin(8);
t74 = (t12 * t65 + t14 * t68) * t69;
t72 = qJ(4) ^ 2;
t48 = t68 * t66;
t47 = t60 * t61;
t46 = t65 * t66;
t45 = t58 * t61;
t42 = 0.2e1 * t98;
t40 = t66 * t51;
t39 = t65 * t95;
t36 = -0.2e1 * t65 * t98;
t34 = -t69 * pkin(3) + t84;
t33 = qJ(4) + t78;
t32 = 0.2e1 * t109 * pkin(8);
t31 = t41 * t71;
t28 = (-t58 + t60) * t69;
t26 = 0.2e1 * t31;
t19 = t24 * t65;
t16 = t35 * t69 + t38;
t5 = t24 * t100 - t14 * t66;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * t67 ^ 2 + t64 ^ 2 + t43, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, -t102, 0, 0, 0, 0, 0, 0, 0, 0, t87, -t88, t76, pkin(2) * t101 + t75, 0, 0, 0, 0, 0, 0, t76, -t87, t88, -t101 * t34 + t75, 0, 0, 0, 0, 0, 0, t83, -t5, t74, -t14 * t10 - t12 * t82 + t24 * t38, 0, 0, 0, 0, 0, 0, t83, t74, t5, -t12 * t7 - t14 * t6 + t24 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t59, t42, 0, t61, 0, 0, pkin(2) * t106, pkin(2) * t107, t32, pkin(2) ^ 2 + t93, 0, 0, 0, t59, t42, t61, t32, t34 * t106, t34 * t107, t34 ^ 2 + t93, t45, 0.2e1 * t86, t36, t47, -0.2e1 * t85, t59, 0.2e1 * t38 * t95 - 0.2e1 * t66 * t82, -0.2e1 * t10 * t66 - 0.2e1 * t100 * t38 (-t10 * t68 - t65 * t82) * t106, t10 ^ 2 + t38 ^ 2 + t82 ^ 2, t45, t36, -0.2e1 * t86, t59, 0.2e1 * t85, t47, 0.2e1 * t16 * t95 - 0.2e1 * t7 * t66 (-t6 * t68 - t65 * t7) * t106, 0.2e1 * t100 * t16 + 0.2e1 * t6 * t66, t16 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, -t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, t24, -t22 * pkin(3) + t91, 0, 0, 0, 0, 0, 0, t19, t103, -t77, t80 + t91, 0, 0, 0, 0, 0, 0, t19, -t77, -t103, t24 * t33 + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, t69, 0, -t53, -t55, 0, 0, 0, -t66, -t69, 0, 0, 0, t79, t53, t55, t79 * pkin(8), -t39, -t28, t48, t39, -t46, 0, t38 * t65 + t68 * t92 + t40, t38 * t68 + (-t92 - t97) * t65, -t2, t38 * qJ(4) + t2 * t71, -t39, t48, t28, 0, t46, t39, t16 * t65 + t33 * t95 + t40, -t1, -t16 * t68 + (t33 * t69 + t97) * t65, t1 * t71 + t16 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t105, pkin(3) ^ 2 + t72, t60, -0.2e1 * t96, 0, t58, 0, 0, t65 * t105, t68 * t105, -t26, t72 + t94, t60, 0, 0.2e1 * t96, 0, 0, t58, 0.2e1 * t33 * t65, -t26, -0.2e1 * t33 * t68, t33 ^ 2 + t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, 0, t53, 0, 0, 0, 0, 0, 0, t48, -t46, 0, t2, 0, 0, 0, 0, 0, 0, t48, 0, t46, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t41, t31, 0, 0, 0, 0, 0, 0, 0, -t41, 0, t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, t14, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, -t14, t12 * pkin(5) - t14 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, 0, -t95, t66, -t82, -t10, 0, 0, 0, -t100, 0, t66, t95, 0, -t82 + 0.2e1 * t104, t78 * t69, 0.2e1 * t90 + t10, -t7 * pkin(5) + t6 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t65, 0, t51, -t99, 0, 0, 0, t68, 0, 0, t65, 0, t51, -t35, t99, t35 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, -t65, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t65, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, -t100, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
