% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRR5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRR5_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:50:36
% EndTime: 2019-05-05 15:50:40
% DurationCPUTime: 1.10s
% Computational Cost: add. (587->91), mult. (966->142), div. (0->0), fcn. (1060->6), ass. (0->66)
t45 = sin(qJ(5));
t75 = t45 * pkin(4);
t32 = pkin(9) + t75;
t44 = sin(qJ(6));
t37 = t44 ^ 2;
t47 = cos(qJ(6));
t39 = t47 ^ 2;
t63 = t37 + t39;
t83 = t63 * t32;
t46 = sin(qJ(4));
t48 = cos(qJ(5));
t49 = cos(qJ(4));
t20 = t45 * t49 + t48 * t46;
t22 = -t45 * t46 + t48 * t49;
t82 = (t20 * t45 + t22 * t48) * pkin(4);
t17 = t20 ^ 2;
t18 = t22 ^ 2;
t81 = t17 + t18;
t41 = -pkin(7) + qJ(2);
t70 = -pkin(8) + t41;
t24 = t70 * t46;
t60 = t70 * t49;
t8 = t45 * t24 - t48 * t60;
t80 = t8 ^ 2;
t42 = pkin(1) + qJ(3);
t79 = (t42 ^ 2);
t28 = t46 * pkin(4) + t42;
t78 = 0.2e1 * t28;
t77 = 0.2e1 * t42;
t76 = t22 * pkin(5);
t74 = t48 * pkin(4);
t73 = t8 * t22;
t72 = t8 * t47;
t33 = -pkin(5) - t74;
t71 = pkin(5) - t33;
t69 = t22 * t33;
t68 = t37 * t22;
t12 = t44 * t20;
t15 = t44 * t22;
t67 = t44 * t47;
t66 = t47 * t22;
t64 = pkin(9) * t63;
t38 = t46 ^ 2;
t40 = t49 ^ 2;
t27 = t38 + t40;
t62 = -0.2e1 * t22 * t20;
t7 = t63 * t20;
t58 = -pkin(9) * t20 - t76;
t10 = t48 * t24 + t45 * t60;
t4 = t20 * pkin(5) - t22 * pkin(9) + t28;
t2 = -t44 * t10 + t47 * t4;
t3 = t47 * t10 + t44 * t4;
t57 = -t2 * t47 - t3 * t44;
t1 = -t2 * t44 + t3 * t47;
t56 = t10 * t20 - t73;
t55 = -t20 * t32 + t69;
t51 = (qJ(2) ^ 2);
t50 = 2 * qJ(2);
t29 = 0.2e1 * t67;
t19 = t27 * t41;
t14 = t47 * t20;
t13 = t39 * t22;
t11 = t44 * t66;
t6 = t13 - t68;
t5 = t8 * t44;
t9 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t50, pkin(1) ^ 2 + t51, 1, 0, 0, 0, 0, 0, 0, t50, t77, t51 + t79, t40, -0.2e1 * t49 * t46, 0, t38, 0, 0, t46 * t77, t49 * t77, -0.2e1 * t19, t27 * t41 ^ 2 + t79, t18, t62, 0, t17, 0, 0, t20 * t78, t22 * t78, -0.2e1 * t56, t10 ^ 2 + t28 ^ 2 + t80, t39 * t18, -0.2e1 * t18 * t67, 0.2e1 * t20 * t66, t37 * t18, t44 * t62, t17, 0.2e1 * t15 * t8 + 0.2e1 * t2 * t20, -0.2e1 * t3 * t20 + 0.2e1 * t66 * t8, 0.2e1 * t57 * t22, t2 ^ 2 + t3 ^ 2 + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -1, -t42, 0, 0, 0, 0, 0, 0, -t46, -t49, 0, -t42, 0, 0, 0, 0, 0, 0, -t20, -t22, 0, -t28, 0, 0, 0, 0, 0, 0, -t14, t12, t13 + t68, t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, qJ(2), 0, 0, 0, 0, 0, 0, 0, 0, -t27, t19, 0, 0, 0, 0, 0, 0, 0, 0, -t81, t56, 0, 0, 0, 0, 0, 0, -t81 * t44, -t81 * t47, 0, t1 * t20 - t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t63 + t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t46, 0, t49 * t41, -t46 * t41, 0, 0, 0, 0, t22, 0, -t20, 0, -t8, -t10, -t82 (t10 * t45 - t48 * t8) * pkin(4), t11, t6, t12, -t11, t14, 0, t44 * t55 - t72, t47 * t55 + t5, t1, t1 * t32 + t8 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t46, 0, 0, 0, 0, 0, 0, 0, 0, t22, -t20, 0, t82, 0, 0, 0, 0, 0, 0, t66, -t15, t7, t20 * t83 - t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t74, -0.2e1 * t75, 0 (t45 ^ 2 + t48 ^ 2) * pkin(4) ^ 2, t37, t29, 0, t39, 0, 0, -0.2e1 * t33 * t47, 0.2e1 * t33 * t44, 0.2e1 * t83, t32 ^ 2 * t63 + t33 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, -t20, 0, -t8, -t10, 0, 0, t11, t6, t12, -t11, t14, 0, t44 * t58 - t72, t47 * t58 + t5, t1, -t8 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, -t20, 0, 0, 0, 0, 0, 0, 0, 0, t66, -t15, t7, pkin(9) * t7 + t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t74, -t75, 0, 0, t37, t29, 0, t39, 0, 0, t71 * t47, -t71 * t44, t64 + t83, -t33 * pkin(5) + pkin(9) * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t37, t29, 0, t39, 0, 0, 0.2e1 * pkin(5) * t47, -0.2e1 * pkin(5) * t44, 0.2e1 * t64, pkin(9) ^ 2 * t63 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, -t15, t20, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, t44, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, -t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, t47, 0, -t44 * t32, -t47 * t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, t47, 0, -t44 * pkin(9), -t47 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t9;
