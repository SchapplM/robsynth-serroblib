% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRPRRR7_inertiaJ_reg2_slag_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 01:55:41
% EndTime: 2019-05-05 01:55:50
% DurationCPUTime: 2.60s
% Computational Cost: add. (3869->235), mult. (10852->471), div. (0->0), fcn. (12958->16), ass. (0->128)
t74 = sin(pkin(7));
t102 = qJ(3) * t74;
t78 = cos(pkin(7));
t138 = pkin(2) * t78;
t72 = sin(pkin(14));
t76 = cos(pkin(14));
t51 = t76 * t102 + t72 * t138;
t73 = sin(pkin(8));
t77 = cos(pkin(8));
t115 = t76 * t77;
t99 = t74 * t115;
t33 = (t73 * t78 + t99) * pkin(10) + t51;
t82 = sin(qJ(4));
t86 = cos(qJ(4));
t122 = t72 * t74;
t61 = t76 * t138;
t39 = t78 * pkin(3) + t61 + (-pkin(10) * t77 - qJ(3)) * t122;
t43 = (-pkin(10) * t72 * t73 - pkin(3) * t76 - pkin(2)) * t74;
t93 = t39 * t77 + t43 * t73;
t16 = -t82 * t33 + t93 * t86;
t87 = cos(qJ(2));
t114 = t78 * t87;
t79 = cos(pkin(6));
t118 = t74 * t79;
t75 = sin(pkin(6));
t83 = sin(qJ(2));
t34 = t76 * t118 + (t76 * t114 - t72 * t83) * t75;
t125 = t34 * t77;
t117 = t75 * t83;
t35 = t76 * t117 + (t75 * t114 + t118) * t72;
t116 = t75 * t87;
t49 = -t74 * t116 + t79 * t78;
t20 = t35 * t86 + (t49 * t73 + t125) * t82;
t26 = -t34 * t73 + t49 * t77;
t81 = sin(qJ(5));
t85 = cos(qJ(5));
t10 = t20 * t81 - t26 * t85;
t148 = t10 ^ 2;
t120 = t73 * t86;
t18 = -t49 * t120 - t86 * t125 + t35 * t82;
t147 = t18 ^ 2;
t121 = t73 * t82;
t38 = t78 * t121 + (t82 * t115 + t72 * t86) * t74;
t119 = t74 * t76;
t48 = -t73 * t119 + t77 * t78;
t27 = t81 * t38 - t85 * t48;
t146 = t27 ^ 2;
t36 = -t78 * t120 + t82 * t122 - t86 * t99;
t145 = t36 ^ 2;
t52 = t81 * t121 - t85 * t77;
t144 = t52 ^ 2;
t143 = -0.2e1 * t27;
t142 = -0.2e1 * t36;
t141 = 0.2e1 * t74;
t140 = -0.2e1 * t81;
t139 = 0.2e1 * t85;
t84 = cos(qJ(6));
t137 = pkin(5) * t84;
t24 = -t73 * t39 + t77 * t43;
t13 = t36 * pkin(4) - t38 * pkin(11) + t24;
t17 = t86 * t33 + t93 * t82;
t15 = t48 * pkin(11) + t17;
t7 = t85 * t13 - t81 * t15;
t3 = -t36 * pkin(5) - t7;
t80 = sin(qJ(6));
t136 = t3 * t80;
t135 = t3 * t84;
t69 = t81 ^ 2;
t134 = t69 * pkin(11);
t133 = t74 * pkin(2);
t132 = t81 * pkin(11);
t131 = t10 * t52;
t130 = t10 * t81;
t29 = t85 * t38 + t81 * t48;
t21 = t80 * t29 - t84 * t36;
t129 = t21 * t84;
t23 = t84 * t29 + t80 * t36;
t128 = t23 * t80;
t127 = t27 * t85;
t126 = t29 * t81;
t124 = t52 * t81;
t66 = t74 ^ 2;
t123 = t66 * t76;
t113 = t80 * t27;
t112 = t80 * t81;
t111 = t80 * t84;
t110 = t80 * t85;
t109 = t81 * t27;
t108 = t81 * t36;
t107 = t84 * t27;
t106 = t84 * t81;
t105 = t84 * t85;
t104 = t85 * t36;
t68 = t80 ^ 2;
t70 = t84 ^ 2;
t103 = t68 + t70;
t101 = t78 * t141;
t100 = t81 * t139;
t98 = t80 * t106;
t8 = t81 * t13 + t85 * t15;
t4 = t36 * pkin(12) + t8;
t14 = -t48 * pkin(4) - t16;
t9 = t27 * pkin(5) - t29 * pkin(12) + t14;
t1 = -t80 * t4 + t84 * t9;
t2 = t84 * t4 + t80 * t9;
t97 = -t1 * t80 + t2 * t84;
t12 = t20 * t85 + t26 * t81;
t5 = -t12 * t80 + t18 * t84;
t6 = t12 * t84 + t18 * t80;
t96 = -t5 * t80 + t6 * t84;
t95 = -t7 * t81 + t8 * t85;
t94 = t12 * t85 + t130;
t54 = t85 * t121 + t81 * t77;
t40 = -t84 * t120 - t80 * t54;
t41 = -t80 * t120 + t84 * t54;
t92 = -t40 * t80 + t41 * t84;
t56 = -t85 * pkin(5) - t81 * pkin(12) - pkin(4);
t45 = -pkin(11) * t110 + t84 * t56;
t46 = pkin(11) * t105 + t80 * t56;
t91 = -t45 * t80 + t46 * t84;
t90 = t54 * t85 + t124;
t89 = pkin(11) ^ 2;
t71 = t85 ^ 2;
t65 = t73 ^ 2;
t64 = t69 * t89;
t62 = t65 * t86 ^ 2;
t50 = -t72 * t102 + t61;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79 ^ 2 + (t83 ^ 2 + t87 ^ 2) * t75 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 ^ 2 + t35 ^ 2 + t49 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 ^ 2 + t26 ^ 2 + t147, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 ^ 2 + t147 + t148, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 ^ 2 + t6 ^ 2 + t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, -t117, 0, 0, 0, 0, 0, 0, 0, 0, -t49 * t119 + t34 * t78, t49 * t122 - t35 * t78 (-t34 * t72 + t35 * t76) * t74, -t49 * t133 + t34 * t50 + t35 * t51, 0, 0, 0, 0, 0, 0, -t18 * t48 + t26 * t36, -t20 * t48 + t26 * t38, t18 * t38 - t20 * t36, -t18 * t16 + t20 * t17 + t26 * t24, 0, 0, 0, 0, 0, 0, -t10 * t36 + t18 * t27, -t12 * t36 + t18 * t29, t10 * t29 - t12 * t27, -t10 * t7 + t12 * t8 + t18 * t14, 0, 0, 0, 0, 0, 0, t10 * t21 + t5 * t27, t10 * t23 - t6 * t27, -t6 * t21 - t5 * t23, t5 * t1 + t10 * t3 + t6 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t66 * t72 ^ 2, 0.2e1 * t72 * t123, t72 * t101, t66 * t76 ^ 2, t76 * t101, t78 ^ 2, 0.2e1 * pkin(2) * t123 + 0.2e1 * t50 * t78, -0.2e1 * t66 * pkin(2) * t72 - 0.2e1 * t51 * t78 (-t50 * t72 + t51 * t76) * t141, t66 * pkin(2) ^ 2 + t50 ^ 2 + t51 ^ 2, t38 ^ 2, t38 * t142, 0.2e1 * t48 * t38, t145, t48 * t142, t48 ^ 2, 0.2e1 * t16 * t48 + 0.2e1 * t24 * t36, -0.2e1 * t17 * t48 + 0.2e1 * t24 * t38, -0.2e1 * t16 * t38 - 0.2e1 * t17 * t36, t16 ^ 2 + t17 ^ 2 + t24 ^ 2, t29 ^ 2, t29 * t143, 0.2e1 * t29 * t36, t146, t27 * t142, t145, 0.2e1 * t14 * t27 + 0.2e1 * t7 * t36, 0.2e1 * t14 * t29 - 0.2e1 * t8 * t36, -0.2e1 * t8 * t27 - 0.2e1 * t7 * t29, t14 ^ 2 + t7 ^ 2 + t8 ^ 2, t23 ^ 2, -0.2e1 * t23 * t21, 0.2e1 * t23 * t27, t21 ^ 2, t21 * t143, t146, 0.2e1 * t1 * t27 + 0.2e1 * t3 * t21, -0.2e1 * t2 * t27 + 0.2e1 * t3 * t23, -0.2e1 * t1 * t23 - 0.2e1 * t2 * t21, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * t77 + (-t18 * t86 + t20 * t82) * t73, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 * t54 - t18 * t120 + t131, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 * t40 + t6 * t41 + t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, t122, 0, -t133, 0, 0, 0, 0, 0, 0, t48 * t120 + t77 * t36, -t48 * t121 + t77 * t38 (-t36 * t82 - t38 * t86) * t73, t24 * t77 + (t16 * t86 + t17 * t82) * t73, 0, 0, 0, 0, 0, 0, -t27 * t120 - t52 * t36, -t29 * t120 - t54 * t36, -t54 * t27 + t52 * t29, -t14 * t120 - t7 * t52 + t8 * t54, 0, 0, 0, 0, 0, 0, t52 * t21 + t40 * t27, t52 * t23 - t41 * t27, -t41 * t21 - t40 * t23, t1 * t40 + t2 * t41 + t3 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65 * t82 ^ 2 + t77 ^ 2 + t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54 ^ 2 + t144 + t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 ^ 2 + t41 ^ 2 + t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, -t20, 0, 0, 0, 0, 0, 0, 0, 0, -t18 * t85, t18 * t81, t94, -t18 * pkin(4) + t94 * pkin(11), 0, 0, 0, 0, 0, 0, t10 * t112 - t5 * t85, t10 * t106 + t6 * t85 (-t5 * t84 - t6 * t80) * t81, pkin(11) * t130 + t5 * t45 + t6 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, -t36, t48, t16, -t17, 0, 0, t126, t29 * t85 - t109, t108, -t127, t104, 0, -pkin(4) * t27 - pkin(11) * t108 - t14 * t85, -pkin(4) * t29 - pkin(11) * t104 + t14 * t81 (t126 - t127) * pkin(11) + t95, -t14 * pkin(4) + t95 * pkin(11), t23 * t106 (-t128 - t129) * t81, t27 * t106 - t23 * t85, t21 * t112, -t80 * t109 + t21 * t85, -t127, -t1 * t85 + t45 * t27 + (pkin(11) * t21 + t136) * t81, t2 * t85 - t46 * t27 + (pkin(11) * t23 + t135) * t81, -t46 * t21 - t45 * t23 + (-t1 * t84 - t2 * t80) * t81, t1 * t45 + t3 * t132 + t2 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, -t121, 0, 0, 0, 0, 0, 0, 0, 0, t85 * t120, -t81 * t120, t90, pkin(4) * t120 + t90 * pkin(11), 0, 0, 0, 0, 0, 0, t52 * t112 - t40 * t85, t52 * t106 + t41 * t85 (-t40 * t84 - t41 * t80) * t81, pkin(11) * t124 + t40 * t45 + t41 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, t100, 0, t71, 0, 0, pkin(4) * t139, pkin(4) * t140, 0.2e1 * (t69 + t71) * pkin(11), pkin(4) ^ 2 + t71 * t89 + t64, t70 * t69, -0.2e1 * t69 * t111, t105 * t140, t68 * t69, t80 * t100, t71, 0.2e1 * t80 * t134 - 0.2e1 * t45 * t85, 0.2e1 * t84 * t134 + 0.2e1 * t46 * t85, 0.2e1 * (-t45 * t84 - t46 * t80) * t81, t45 ^ 2 + t46 ^ 2 + t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10, -t12, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t84, t10 * t80, t96, -t10 * pkin(5) + pkin(12) * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t27, t36, t7, -t8, 0, 0, t128, -t80 * t21 + t23 * t84, t113, -t129, t107, 0, -pkin(5) * t21 - pkin(12) * t113 - t135, -pkin(5) * t23 - pkin(12) * t107 + t136 (t128 - t129) * pkin(12) + t97, -t3 * pkin(5) + pkin(12) * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t52, -t54, 0, 0, 0, 0, 0, 0, 0, 0, -t52 * t84, t52 * t80, t92, -t52 * pkin(5) + pkin(12) * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, t85, 0, -t132, -t85 * pkin(11), 0, 0, t98 (-t68 + t70) * t81, -t110, -t98, -t105, 0, -pkin(11) * t106 + (-pkin(5) * t81 + pkin(12) * t85) * t80, pkin(12) * t105 + (pkin(11) * t80 - t137) * t81, t91, -pkin(5) * t132 + pkin(12) * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t68, 0.2e1 * t111, 0, t70, 0, 0, 0.2e1 * t137, -0.2e1 * pkin(5) * t80, 0.2e1 * t103 * pkin(12), pkin(12) ^ 2 * t103 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t21, t27, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t41, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, -t112, -t85, t45, -t46, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t84, 0, -t80 * pkin(12), -t84 * pkin(12), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
