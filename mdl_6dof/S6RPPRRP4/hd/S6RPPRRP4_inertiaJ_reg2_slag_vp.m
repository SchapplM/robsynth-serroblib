% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRP4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPPRRP4_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:55:13
% EndTime: 2019-05-05 14:55:15
% DurationCPUTime: 1.26s
% Computational Cost: add. (617->119), mult. (968->185), div. (0->0), fcn. (969->6), ass. (0->90)
t57 = cos(pkin(9));
t58 = sin(qJ(5));
t60 = cos(qJ(5));
t56 = sin(pkin(9));
t61 = cos(qJ(4));
t84 = t61 * t56;
t20 = -t57 * t58 + t60 * t84;
t18 = t57 * t60 + t58 * t84;
t96 = t18 * t58;
t74 = t20 * t60 + t96;
t54 = t60 ^ 2;
t59 = sin(qJ(4));
t44 = t54 * t59;
t52 = t58 ^ 2;
t93 = t52 * t59;
t26 = t44 + t93;
t106 = t52 + t54;
t105 = 2 * pkin(5);
t104 = -0.2e1 * t58;
t103 = -0.2e1 * t59;
t102 = 0.2e1 * t59;
t101 = pkin(4) * t60;
t100 = pkin(5) * t58;
t99 = pkin(8) * t61;
t98 = t58 * pkin(8);
t97 = t60 * pkin(8);
t62 = -pkin(1) - pkin(2);
t27 = qJ(2) * t56 - t57 * t62;
t23 = pkin(3) + t27;
t49 = t61 * pkin(4);
t11 = pkin(8) * t59 + t23 + t49;
t29 = qJ(2) * t57 + t56 * t62;
t24 = -pkin(7) + t29;
t85 = t61 * t24;
t4 = t11 * t58 + t60 * t85;
t95 = t24 * t56;
t94 = t24 * t58;
t53 = t59 ^ 2;
t92 = t53 * t58;
t91 = t53 * t60;
t41 = t58 * t59;
t90 = t58 * t60;
t89 = t59 * t24;
t88 = t59 * t56;
t87 = t59 * t61;
t86 = t60 * t59;
t45 = t60 * t61;
t83 = t26 * pkin(8);
t82 = t106 * pkin(8) ^ 2;
t55 = t61 ^ 2;
t81 = t53 + t55;
t80 = t60 * qJ(6);
t79 = t61 * qJ(6);
t78 = t58 * t87;
t77 = t58 * t88;
t76 = t56 * t86;
t75 = t53 * t90;
t50 = t56 ^ 2;
t37 = t53 * t50;
t73 = t18 ^ 2 + t20 ^ 2 + t37;
t72 = t74 * pkin(8);
t71 = -t18 * t86 + t20 * t41;
t1 = t79 + t4;
t8 = t60 * t11;
t2 = -t8 + (-pkin(5) + t94) * t61;
t70 = t1 * t60 + t2 * t58;
t3 = -t58 * t85 + t8;
t69 = -t3 * t58 + t4 * t60;
t67 = pkin(5) * t60 + qJ(6) * t58;
t31 = -pkin(4) - t67;
t68 = t31 * t59 + t99;
t66 = t80 - t100;
t65 = -t18 * t61 - t56 * t92;
t64 = t20 * t86 + (-t84 + t96) * t59;
t51 = t57 ^ 2;
t43 = t54 * t53;
t42 = t58 * t61;
t40 = t52 * t53;
t34 = t59 * t80;
t33 = t58 * t86;
t32 = t45 * t103;
t30 = 0.2e1 * t106 * pkin(8);
t25 = -t44 + t93;
t22 = t24 ^ 2;
t21 = t53 * t22;
t17 = t43 + t40 + t55;
t14 = t53 * t95;
t6 = t20 * t61 + t56 * t91;
t5 = t34 + (t24 - t100) * t59;
t7 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2 * pkin(1), 0, 0.2e1 * qJ(2) (pkin(1) ^ 2) + qJ(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t27, 0.2e1 * t29, 0, t27 ^ 2 + t29 ^ 2, t53, 0.2e1 * t87, 0, t55, 0, 0, 0.2e1 * t23 * t61, t23 * t103, -0.2e1 * t81 * t24, t22 * t55 + t23 ^ 2 + t21, t43, -0.2e1 * t75, t32, t40, 0.2e1 * t78, t55, -0.2e1 * t24 * t92 + 0.2e1 * t3 * t61, -0.2e1 * t24 * t91 - 0.2e1 * t4 * t61 (t3 * t60 + t4 * t58) * t102, t3 ^ 2 + t4 ^ 2 + t21, t43, t32, 0.2e1 * t75, t55, -0.2e1 * t78, t40, -0.2e1 * t2 * t61 - 0.2e1 * t41 * t5 (t1 * t58 - t2 * t60) * t102, 0.2e1 * t1 * t61 + 0.2e1 * t5 * t86, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(1), 0, 0, 0, 0, 0, 0, -t57, t56, 0, -t27 * t57 + t29 * t56, 0, 0, 0, 0, 0, 0, -t57 * t61, t59 * t57, -t81 * t56, -t23 * t57 + t55 * t95 + t14, 0, 0, 0, 0, 0, 0, t65, -t6, t71, -t18 * t3 + t20 * t4 + t14, 0, 0, 0, 0, 0, 0, t65, t71, t6, t1 * t20 + t18 * t2 + t5 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50 + t51, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50 * t55 + t37 + t51, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t69 - t85) * t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t5 * t61 + t59 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, 0, -t61, 0, -t89, -t85, 0, 0, -t33, t25, t42, t33, t45, 0, -t24 * t86 + (pkin(4) * t59 - t99) * t58, -pkin(8) * t45 + (t94 + t101) * t59, t69, -pkin(4) * t89 + pkin(8) * t69, -t33, t42, -t25, 0, -t45, t33, -t5 * t60 - t58 * t68, t70, -t5 * t58 + t60 * t68, pkin(8) * t70 + t5 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, -t84, 0, 0, 0, 0, 0, 0, 0, 0, -t76, t77, t74, -pkin(4) * t88 + t72, 0, 0, 0, 0, 0, 0, -t76, t74, -t77, t31 * t88 + t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, -t59, 0, 0, 0, 0, 0, 0, 0, 0, t45, -t42, t26, t49 + t83, 0, 0, 0, 0, 0, 0, t45, t26, t42, -t31 * t61 + t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t52, 0.2e1 * t90, 0, t54, 0, 0, 0.2e1 * t101, pkin(4) * t104, t30, pkin(4) ^ 2 + t82, t52, 0, -0.2e1 * t90, 0, 0, t54, -0.2e1 * t31 * t60, t30, t31 * t104, t31 ^ 2 + t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t86, 0, t41, t61, t3, -t4, 0, 0, 0, -t86, 0, t61, -t41, 0, t8 + (t105 - t94) * t61, t67 * t59, 0.2e1 * t79 + t4, -pkin(5) * t2 + qJ(6) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, -t20, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, t20, -pkin(5) * t18 + qJ(6) * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, -t86, 0, 0, 0, 0, 0, 0, 0, 0, -t41, 0, t86, -pkin(5) * t41 + t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t60, 0, -t98, -t97, 0, 0, 0, t58, 0, 0, -t60, 0, -t98, t66, t97, t66 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t105, 0, 0.2e1 * qJ(6) (pkin(5) ^ 2) + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, -t86, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t7;
