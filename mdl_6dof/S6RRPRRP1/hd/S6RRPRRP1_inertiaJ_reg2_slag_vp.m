% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP1_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:19:17
% EndTime: 2019-05-06 17:19:25
% DurationCPUTime: 2.14s
% Computational Cost: add. (2043->140), mult. (3848->247), div. (0->0), fcn. (4614->8), ass. (0->99)
t102 = cos(qJ(4));
t69 = sin(pkin(10));
t108 = t69 * pkin(2);
t70 = cos(pkin(10));
t107 = t70 * pkin(2);
t60 = pkin(3) + t107;
t72 = sin(qJ(4));
t47 = t102 * t108 + t72 * t60;
t45 = pkin(9) + t47;
t71 = sin(qJ(5));
t65 = t71 ^ 2;
t74 = cos(qJ(5));
t67 = t74 ^ 2;
t56 = t65 + t67;
t93 = t56 * t45;
t73 = sin(qJ(2));
t75 = cos(qJ(2));
t49 = -t69 * t73 + t70 * t75;
t50 = t69 * t75 + t70 * t73;
t33 = t102 * t50 + t72 * t49;
t116 = -0.2e1 * t33;
t96 = -qJ(3) - pkin(7);
t53 = t96 * t73;
t55 = t96 * t75;
t36 = t53 * t69 - t55 * t70;
t20 = pkin(8) * t49 + t36;
t35 = t53 * t70 + t55 * t69;
t79 = -pkin(8) * t50 + t35;
t12 = -t102 * t79 + t20 * t72;
t115 = t12 ^ 2;
t31 = -t102 * t49 + t50 * t72;
t29 = t31 ^ 2;
t62 = -pkin(2) * t75 - pkin(1);
t42 = -pkin(3) * t49 + t62;
t114 = 0.2e1 * t42;
t113 = 0.2e1 * t50;
t112 = 0.2e1 * t71;
t111 = -0.2e1 * t74;
t110 = 0.2e1 * t75;
t109 = pkin(5) * t31;
t106 = t71 * pkin(5);
t105 = t74 * pkin(5);
t99 = t71 * t33;
t8 = pkin(5) * t99 + t12;
t104 = t74 * t8;
t46 = t102 * t60 - t72 * t108;
t44 = -pkin(4) - t46;
t103 = pkin(4) - t44;
t101 = t12 * t74;
t100 = t71 * t31;
t98 = t71 * t74;
t14 = t102 * t20 + t72 * t79;
t97 = t74 * t14;
t28 = t74 * t33;
t95 = -qJ(6) - pkin(9);
t39 = t44 - t105;
t61 = -pkin(4) - t105;
t94 = t39 + t61;
t92 = t56 * pkin(9);
t66 = t73 ^ 2;
t68 = t75 ^ 2;
t91 = t66 + t68;
t90 = qJ(6) * t33;
t89 = qJ(6) + t45;
t88 = t31 * t116;
t11 = pkin(4) * t31 - pkin(9) * t33 + t42;
t5 = t74 * t11 - t14 * t71;
t80 = -t74 * t90 + t5;
t2 = t80 + t109;
t4 = t97 + (t11 - t90) * t71;
t87 = -t2 * t71 + t4 * t74;
t86 = -pkin(4) * t33 - pkin(9) * t31;
t85 = t2 * t74 + t4 * t71;
t6 = t11 * t71 + t97;
t84 = t5 * t74 + t6 * t71;
t1 = -t5 * t71 + t6 * t74;
t83 = -t31 * t45 + t33 * t44;
t37 = t89 * t71;
t38 = t89 * t74;
t82 = -t37 * t74 + t38 * t71;
t52 = t95 * t71;
t54 = t95 * t74;
t81 = t52 * t74 - t54 * t71;
t58 = 0.2e1 * t98;
t51 = t54 * t74;
t34 = t38 * t74;
t30 = t33 ^ 2;
t27 = t74 * t31;
t26 = t67 * t30;
t23 = t65 * t30;
t22 = t71 * t28;
t21 = -0.2e1 * t30 * t98;
t18 = 0.2e1 * t31 * t28;
t17 = t71 * t88;
t16 = t56 * t33;
t15 = (-t65 + t67) * t33;
t10 = t12 * t71;
t7 = t8 * t71;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t66, t73 * t110, 0, t68, 0, 0, pkin(1) * t110, -0.2e1 * pkin(1) * t73, 0.2e1 * t91 * pkin(7), t91 * pkin(7) ^ 2 + pkin(1) ^ 2, t50 ^ 2, t49 * t113, 0, t49 ^ 2, 0, 0, -0.2e1 * t62 * t49, t62 * t113, -0.2e1 * t35 * t50 + 0.2e1 * t36 * t49, t35 ^ 2 + t36 ^ 2 + t62 ^ 2, t30, t88, 0, t29, 0, 0, t31 * t114, t33 * t114, 0.2e1 * t12 * t33 - 0.2e1 * t14 * t31, t14 ^ 2 + t42 ^ 2 + t115, t26, t21, t18, t23, t17, t29, 0.2e1 * t12 * t99 + 0.2e1 * t31 * t5, 0.2e1 * t12 * t28 - 0.2e1 * t31 * t6, t84 * t116, t5 ^ 2 + t6 ^ 2 + t115, t26, t21, t18, t23, t17, t29, 0.2e1 * t2 * t31 + 0.2e1 * t8 * t99, 0.2e1 * t8 * t28 - 0.2e1 * t31 * t4, t85 * t116, t2 ^ 2 + t4 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t75, 0, -t73 * pkin(7), -t75 * pkin(7), 0, 0, 0, 0, t50, 0, t49, 0, t35, -t36 (t49 * t69 - t50 * t70) * pkin(2) (t35 * t70 + t36 * t69) * pkin(2), 0, 0, t33, 0, -t31, 0, -t12, -t14, -t31 * t47 - t33 * t46, -t12 * t46 + t14 * t47, t22, t15, t100, -t22, t27, 0, t83 * t71 - t101, t83 * t74 + t10, t1, t1 * t45 + t12 * t44, t22, t15, t100, -t22, t27, 0, -t31 * t37 + t39 * t99 - t104, t39 * t28 - t31 * t38 + t7, -t82 * t33 + t87, -t2 * t37 + t38 * t4 + t39 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t107, -0.2e1 * t108, 0 (t69 ^ 2 + t70 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t46, -0.2e1 * t47, 0, t46 ^ 2 + t47 ^ 2, t65, t58, 0, t67, 0, 0, t44 * t111, t44 * t112, 0.2e1 * t93, t56 * t45 ^ 2 + t44 ^ 2, t65, t58, 0, t67, 0, 0, t39 * t111, t39 * t112, 0.2e1 * t37 * t71 + 0.2e1 * t34, t37 ^ 2 + t38 ^ 2 + t39 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, t50, 0, t62, 0, 0, 0, 0, 0, 0, t31, t33, 0, t42, 0, 0, 0, 0, 0, 0, t27, -t100, -t16, t84, 0, 0, 0, 0, 0, 0, t27, -t100, -t16, t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, -t31, 0, -t12, -t14, 0, 0, t22, t15, t100, -t22, t27, 0, t86 * t71 - t101, t86 * t74 + t10, t1, -t12 * pkin(4) + t1 * pkin(9), t22, t15, t100, -t22, t27, 0, t31 * t52 + t61 * t99 - t104, t61 * t28 + t31 * t54 + t7, -t81 * t33 + t87, t2 * t52 - t4 * t54 + t61 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t46, -t47, 0, 0, t65, t58, 0, t67, 0, 0, t103 * t74, -t103 * t71, t92 + t93, -t44 * pkin(4) + pkin(9) * t93, t65, t58, 0, t67, 0, 0, -t94 * t74, t94 * t71, t34 - t51 + (t37 - t52) * t71, -t37 * t52 - t38 * t54 + t39 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, t58, 0, t67, 0, 0, 0.2e1 * pkin(4) * t74, -0.2e1 * pkin(4) * t71, 0.2e1 * t92, t56 * pkin(9) ^ 2 + pkin(4) ^ 2, t65, t58, 0, t67, 0, 0, t61 * t111, t61 * t112, -0.2e1 * t52 * t71 - 0.2e1 * t51, t52 ^ 2 + t54 ^ 2 + t61 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t99, t31, t5, -t6, 0, 0, 0, 0, t28, 0, -t99, t31, t80 + 0.2e1 * t109, -t4, -pkin(5) * t28, t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t71 * t45, -t74 * t45, 0, 0, 0, 0, t71, 0, t74, 0, -t37, -t38, -t106, -t37 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t71, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t71, 0, t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t71 * pkin(9), -t74 * pkin(9), 0, 0, 0, 0, t71, 0, t74, 0, t52, t54, -t106, t52 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t28, 0, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, t71, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, t71, 0, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
