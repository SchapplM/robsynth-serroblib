% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRPR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRRPR4_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 07:46:25
% EndTime: 2019-05-05 07:46:31
% DurationCPUTime: 1.93s
% Computational Cost: add. (1716->185), mult. (3809->359), div. (0->0), fcn. (4463->12), ass. (0->92)
t72 = cos(pkin(6));
t75 = sin(qJ(3));
t78 = cos(qJ(3));
t70 = sin(pkin(6));
t76 = sin(qJ(2));
t98 = t70 * t76;
t43 = -t72 * t78 + t75 * t98;
t42 = t43 ^ 2;
t69 = sin(pkin(12));
t71 = cos(pkin(12));
t74 = sin(qJ(4));
t77 = cos(qJ(4));
t46 = t69 * t74 - t71 * t77;
t61 = -pkin(4) * t77 - pkin(3);
t35 = pkin(5) * t46 + t61;
t109 = 0.2e1 * t35;
t108 = 0.2e1 * t61;
t107 = -0.2e1 * t75;
t106 = -0.2e1 * t78;
t105 = 0.2e1 * t78;
t104 = pkin(3) * t77;
t103 = pkin(8) * t74;
t102 = t69 * pkin(4);
t101 = t71 * pkin(4);
t63 = t75 * pkin(8);
t100 = cos(qJ(6));
t99 = t43 * t75;
t79 = cos(qJ(2));
t97 = t70 * t79;
t96 = t74 * t75;
t95 = t74 * t77;
t94 = t74 * t78;
t93 = t77 * t75;
t92 = t77 * t78;
t91 = -qJ(5) - pkin(9);
t52 = -pkin(3) * t78 - pkin(9) * t75 - pkin(2);
t49 = t77 * t52;
t89 = qJ(5) * t75;
t24 = -t77 * t89 + t49 + (-pkin(4) - t103) * t78;
t87 = pkin(8) * t92;
t29 = t87 + (t52 - t89) * t74;
t11 = t69 * t24 + t71 * t29;
t51 = pkin(4) * t96 + t63;
t65 = t74 ^ 2;
t67 = t77 ^ 2;
t90 = t65 + t67;
t88 = t75 * t105;
t86 = t74 * t93;
t10 = t71 * t24 - t29 * t69;
t38 = -t69 * t96 + t71 * t93;
t6 = -pkin(5) * t78 - pkin(10) * t38 + t10;
t73 = sin(qJ(6));
t48 = t69 * t77 + t71 * t74;
t36 = t48 * t75;
t9 = -pkin(10) * t36 + t11;
t1 = t100 * t6 - t73 * t9;
t53 = t91 * t74;
t54 = t91 * t77;
t30 = t71 * t53 + t54 * t69;
t45 = t72 * t75 + t78 * t98;
t27 = -t45 * t74 - t77 * t97;
t28 = t45 * t77 - t74 * t97;
t85 = -t27 * t74 + t28 * t77;
t33 = -pkin(8) * t94 + t49;
t34 = t52 * t74 + t87;
t84 = -t33 * t74 + t34 * t77;
t83 = t45 * t78 + t99;
t31 = t53 * t69 - t54 * t71;
t2 = t100 * t9 + t73 * t6;
t81 = pkin(8) ^ 2;
t68 = t78 ^ 2;
t66 = t75 ^ 2;
t64 = t70 ^ 2;
t62 = t66 * t81;
t60 = pkin(5) + t101;
t57 = t64 * t79 ^ 2;
t40 = t100 * t102 + t73 * t60;
t39 = t100 * t60 - t73 * t102;
t25 = pkin(5) * t36 + t51;
t23 = t100 * t48 - t73 * t46;
t21 = t100 * t46 + t73 * t48;
t18 = -pkin(10) * t46 + t31;
t17 = -pkin(10) * t48 + t30;
t16 = t100 * t38 - t73 * t36;
t14 = t100 * t36 + t73 * t38;
t13 = t27 * t69 + t28 * t71;
t12 = t27 * t71 - t28 * t69;
t8 = t100 * t18 + t73 * t17;
t7 = t100 * t17 - t73 * t18;
t4 = t100 * t13 + t73 * t12;
t3 = t100 * t12 - t73 * t13;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64 * t76 ^ 2 + t72 ^ 2 + t57, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 ^ 2 + t42 + t57, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 ^ 2 + t28 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 ^ 2 + t13 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t98, 0, 0, 0, 0, 0, 0, 0, 0, t78 * t97, -t75 * t97, t83, pkin(2) * t97 + t83 * pkin(8), 0, 0, 0, 0, 0, 0, -t27 * t78 + t43 * t96, t28 * t78 + t43 * t93 (-t27 * t77 - t28 * t74) * t75, pkin(8) * t99 + t27 * t33 + t28 * t34, 0, 0, 0, 0, 0, 0, -t12 * t78 + t36 * t43, t13 * t78 + t38 * t43, -t12 * t38 - t13 * t36, t10 * t12 + t11 * t13 + t43 * t51, 0, 0, 0, 0, 0, 0, t14 * t43 - t3 * t78, t16 * t43 + t4 * t78, -t14 * t4 - t16 * t3, t1 * t3 + t2 * t4 + t25 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t66, t88, 0, t68, 0, 0, pkin(2) * t105, pkin(2) * t107, 0.2e1 * (t66 + t68) * pkin(8), pkin(2) ^ 2 + t68 * t81 + t62, t67 * t66, -0.2e1 * t66 * t95, t92 * t107, t65 * t66, t74 * t88, t68, 0.2e1 * t66 * t103 - 0.2e1 * t33 * t78, 0.2e1 * pkin(8) * t66 * t77 + 0.2e1 * t34 * t78, 0.2e1 * (-t33 * t77 - t34 * t74) * t75, t33 ^ 2 + t34 ^ 2 + t62, t38 ^ 2, -0.2e1 * t38 * t36, t38 * t106, t36 ^ 2, -t36 * t106, t68, -0.2e1 * t10 * t78 + 0.2e1 * t36 * t51, 0.2e1 * t11 * t78 + 0.2e1 * t38 * t51, -0.2e1 * t10 * t38 - 0.2e1 * t11 * t36, t10 ^ 2 + t11 ^ 2 + t51 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, t16 * t106, t14 ^ 2, t14 * t105, t68, -0.2e1 * t1 * t78 + 0.2e1 * t14 * t25, 0.2e1 * t16 * t25 + 0.2e1 * t2 * t78, -0.2e1 * t1 * t16 - 0.2e1 * t14 * t2, t1 ^ 2 + t2 ^ 2 + t25 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, -t45, 0, 0, 0, 0, 0, 0, 0, 0, -t43 * t77, t43 * t74, t85, -t43 * pkin(3) + pkin(9) * t85, 0, 0, 0, 0, 0, 0, t43 * t46, t43 * t48, -t12 * t48 - t13 * t46, t12 * t30 + t13 * t31 + t43 * t61, 0, 0, 0, 0, 0, 0, t43 * t21, t43 * t23, -t21 * t4 - t23 * t3, t3 * t7 + t35 * t43 + t4 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, t78, 0, -t63, -t78 * pkin(8), 0, 0, t86 (-t65 + t67) * t75, -t94, -t86, -t92, 0, -pkin(8) * t93 + (-pkin(3) * t75 + pkin(9) * t78) * t74, pkin(9) * t92 + (t103 - t104) * t75, t84, -pkin(3) * t63 + pkin(9) * t84, t38 * t48, -t36 * t48 - t38 * t46, -t48 * t78, t36 * t46, t46 * t78, 0, -t30 * t78 + t36 * t61 + t46 * t51, t31 * t78 + t38 * t61 + t48 * t51, -t10 * t48 - t11 * t46 - t30 * t38 - t31 * t36, t10 * t30 + t11 * t31 + t51 * t61, t16 * t23, -t14 * t23 - t16 * t21, -t23 * t78, t14 * t21, t21 * t78, 0, t14 * t35 + t21 * t25 - t7 * t78, t16 * t35 + t23 * t25 + t78 * t8, -t1 * t23 - t14 * t8 - t16 * t7 - t2 * t21, t1 * t7 + t2 * t8 + t25 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, 0.2e1 * t95, 0, t67, 0, 0, 0.2e1 * t104, -0.2e1 * pkin(3) * t74, 0.2e1 * t90 * pkin(9), pkin(9) ^ 2 * t90 + pkin(3) ^ 2, t48 ^ 2, -0.2e1 * t48 * t46, 0, t46 ^ 2, 0, 0, t46 * t108, t48 * t108, -0.2e1 * t30 * t48 - 0.2e1 * t31 * t46, t30 ^ 2 + t31 ^ 2 + t61 ^ 2, t23 ^ 2, -0.2e1 * t23 * t21, 0, t21 ^ 2, 0, 0, t21 * t109, t23 * t109, -0.2e1 * t21 * t8 - 0.2e1 * t23 * t7, t35 ^ 2 + t7 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t28, 0, 0, 0, 0, 0, 0, 0, 0, t12, -t13, 0 (t12 * t71 + t13 * t69) * pkin(4), 0, 0, 0, 0, 0, 0, t3, -t4, 0, t3 * t39 + t4 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, -t96, -t78, t33, -t34, 0, 0, 0, 0, t38, 0, -t36, -t78, -t101 * t78 + t10, t102 * t78 - t11 (-t36 * t69 - t38 * t71) * pkin(4) (t10 * t71 + t11 * t69) * pkin(4), 0, 0, t16, 0, -t14, -t78, -t39 * t78 + t1, t40 * t78 - t2, -t14 * t40 - t16 * t39, t1 * t39 + t2 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t77, 0, -t74 * pkin(9), -t77 * pkin(9), 0, 0, 0, 0, t48, 0, -t46, 0, t30, -t31 (-t46 * t69 - t48 * t71) * pkin(4) (t30 * t71 + t31 * t69) * pkin(4), 0, 0, t23, 0, -t21, 0, t7, -t8, -t21 * t40 - t23 * t39, t39 * t7 + t40 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t101, -0.2e1 * t102, 0 (t69 ^ 2 + t71 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t39, -0.2e1 * t40, 0, t39 ^ 2 + t40 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t38, 0, t51, 0, 0, 0, 0, 0, 0, t14, t16, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, t48, 0, t61, 0, 0, 0, 0, 0, 0, t21, t23, 0, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, -t78, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t21, 0, t7, -t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t39, -t40, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
