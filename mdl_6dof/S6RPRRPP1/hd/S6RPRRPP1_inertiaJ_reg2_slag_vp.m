% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRPP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPP1_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:17:25
% EndTime: 2019-05-05 21:17:30
% DurationCPUTime: 1.65s
% Computational Cost: add. (1059->147), mult. (2065->254), div. (0->0), fcn. (2205->8), ass. (0->97)
t60 = sin(pkin(10));
t62 = cos(pkin(10));
t64 = sin(qJ(4));
t66 = cos(qJ(4));
t38 = t60 * t66 + t62 * t64;
t65 = sin(qJ(3));
t29 = t38 * t65;
t102 = t38 * t29;
t93 = t66 * t65;
t96 = t64 * t65;
t31 = -t60 * t96 + t62 * t93;
t36 = t60 * t64 - t62 * t66;
t16 = t31 * t36;
t121 = -t16 + t102;
t120 = t16 + t102;
t118 = t29 ^ 2;
t28 = t31 ^ 2;
t67 = cos(qJ(3));
t59 = t67 ^ 2;
t119 = t118 + t28 + t59;
t117 = t36 ^ 2;
t55 = -pkin(4) * t66 - pkin(3);
t116 = 0.2e1 * t55;
t115 = 0.2e1 * t65;
t114 = -0.2e1 * t67;
t113 = pkin(3) * t66;
t112 = t60 * pkin(4);
t61 = sin(pkin(9));
t111 = t61 * pkin(1);
t110 = t62 * pkin(4);
t63 = cos(pkin(9));
t109 = t63 * pkin(1);
t108 = t67 * pkin(3);
t107 = t67 * pkin(4);
t51 = -pkin(2) - t109;
t34 = -pkin(8) * t65 - t108 + t51;
t32 = t66 * t34;
t83 = qJ(5) * t65;
t48 = pkin(7) + t111;
t99 = t48 * t64;
t10 = -t66 * t83 + t32 + (-pkin(4) - t99) * t67;
t89 = t67 * t48;
t79 = t66 * t89;
t13 = t79 + (t34 - t83) * t64;
t4 = t10 * t60 + t13 * t62;
t87 = -qJ(5) - pkin(8);
t40 = t87 * t66;
t74 = t87 * t64;
t22 = -t40 * t60 - t62 * t74;
t106 = t22 * t67;
t24 = -t62 * t40 + t60 * t74;
t105 = t24 * t67;
t104 = t29 * t36;
t103 = t31 * t29;
t101 = t38 * t36;
t100 = t38 * t67;
t56 = t64 ^ 2;
t98 = t56 * t65;
t57 = t65 ^ 2;
t97 = t57 * t48;
t95 = t64 * t66;
t94 = t64 * t67;
t42 = t65 * t48;
t92 = t66 * t67;
t91 = t67 * t29;
t90 = t67 * t36;
t88 = t67 * t65;
t33 = pkin(4) * t96 + t42;
t58 = t66 ^ 2;
t85 = t56 + t58;
t84 = t57 + t59;
t82 = 0.2e1 * t88;
t81 = t22 ^ 2 + t24 ^ 2;
t80 = t64 * t93;
t78 = t85 * pkin(8);
t77 = -t10 * t62 + t60 * t13;
t76 = t22 * t29 + t24 * t31;
t75 = t22 * t31 - t24 * t29;
t19 = -t64 * t89 + t32;
t20 = t34 * t64 + t79;
t72 = -t19 * t64 + t20 * t66;
t71 = 0.2e1 * t22 * t38 - 0.2e1 * t24 * t36;
t54 = t58 * t65;
t53 = t58 * t57;
t52 = t56 * t57;
t49 = pkin(5) + t110;
t46 = qJ(6) + t112;
t45 = t48 ^ 2;
t41 = t57 * t45;
t35 = t38 ^ 2;
t25 = t31 * t114;
t17 = t31 * t38;
t15 = pkin(5) * t36 - qJ(6) * t38 + t55;
t5 = pkin(5) * t29 - qJ(6) * t31 + t33;
t2 = pkin(5) * t67 + t77;
t1 = -qJ(6) * t67 + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t109, -0.2e1 * t111, 0 (t61 ^ 2 + t63 ^ 2) * pkin(1) ^ 2, t57, t82, 0, t59, 0, 0, t51 * t114, t51 * t115, 0.2e1 * t84 * t48, t45 * t59 + t51 ^ 2 + t41, t53, -0.2e1 * t57 * t95, -0.2e1 * t66 * t88, t52, t64 * t82, t59, -0.2e1 * t19 * t67 + 0.2e1 * t64 * t97, 0.2e1 * t20 * t67 + 0.2e1 * t66 * t97 (-t19 * t66 - t20 * t64) * t115, t19 ^ 2 + t20 ^ 2 + t41, t28, -0.2e1 * t103, t25, t118, 0.2e1 * t91, t59, 0.2e1 * t29 * t33 + 0.2e1 * t67 * t77, 0.2e1 * t31 * t33 + 0.2e1 * t4 * t67, -0.2e1 * t29 * t4 + 0.2e1 * t31 * t77, t33 ^ 2 + t4 ^ 2 + t77 ^ 2, t28, t25, 0.2e1 * t103, t59, -0.2e1 * t91, t118, 0.2e1 * t2 * t67 + 0.2e1 * t29 * t5, -0.2e1 * t1 * t29 + 0.2e1 * t2 * t31, -0.2e1 * t1 * t67 - 0.2e1 * t31 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t72 - t89) * t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29 * t77 + t31 * t4 - t33 * t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t31 + t2 * t29 - t5 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53 + t52 + t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t67, 0, -t42, -t89, 0, 0, t80, t54 - t98, -t94, -t80, -t92, 0, -t48 * t93 + (-pkin(3) * t65 + pkin(8) * t67) * t64, pkin(8) * t92 + (t99 - t113) * t65, t72, -pkin(3) * t42 + pkin(8) * t72, t17, -t120, -t100, t104, t90, 0, t29 * t55 + t33 * t36 + t106, t31 * t55 + t33 * t38 + t105, -t36 * t4 + t38 * t77 + t75, t22 * t77 + t24 * t4 + t33 * t55, t17, -t100, t120, 0, -t90, t104, t15 * t29 + t36 * t5 + t106, -t1 * t36 + t2 * t38 + t75, -t15 * t31 - t38 * t5 - t105, t1 * t24 + t15 * t5 + t2 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t65, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t94, t54 + t98, t65 * t78 + t108, 0, 0, 0, 0, 0, 0, -t90, -t100, t121, -t55 * t67 + t76, 0, 0, 0, 0, 0, 0, -t90, t121, t100, -t15 * t67 + t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t56, 0.2e1 * t95, 0, t58, 0, 0, 0.2e1 * t113, -0.2e1 * pkin(3) * t64, 0.2e1 * t78, pkin(8) ^ 2 * t85 + pkin(3) ^ 2, t35, -0.2e1 * t101, 0, t117, 0, 0, t36 * t116, t38 * t116, t71, t55 ^ 2 + t81, t35, 0, 0.2e1 * t101, 0, 0, t117, 0.2e1 * t15 * t36, t71, -0.2e1 * t15 * t38, t15 ^ 2 + t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, -t96, -t67, t19, -t20, 0, 0, 0, 0, t31, 0, -t29, -t67, -t107 * t62 - t77, t107 * t60 - t4 (-t29 * t60 - t31 * t62) * pkin(4) (t4 * t60 - t62 * t77) * pkin(4), 0, t31, 0, -t67, t29, 0 (-pkin(5) - t49) * t67 - t77, -t29 * t46 - t31 * t49 (-qJ(6) - t46) * t67 + t4, t1 * t46 - t2 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t93, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t31, 0 (-t29 * t62 + t31 * t60) * pkin(4), 0, 0, 0, 0, 0, 0, -t29, 0, t31, -t29 * t49 + t31 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t66, 0, -t64 * pkin(8), -t66 * pkin(8), 0, 0, 0, 0, t38, 0, -t36, 0, -t22, -t24 (-t36 * t60 - t38 * t62) * pkin(4) (-t22 * t62 + t24 * t60) * pkin(4), 0, t38, 0, 0, t36, 0, -t22, -t36 * t46 - t38 * t49, t24, -t22 * t49 + t24 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t110, -0.2e1 * t112, 0 (t60 ^ 2 + t62 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t49, 0, 0.2e1 * t46, t46 ^ 2 + t49 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, t31, 0, t33, 0, 0, 0, 0, 0, 0, t29, 0, -t31, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t38, 0, t55, 0, 0, 0, 0, 0, 0, t36, 0, -t38, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, t31, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
