% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR4_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:41:33
% EndTime: 2019-05-05 15:41:38
% DurationCPUTime: 1.46s
% Computational Cost: add. (1031->156), mult. (1706->266), div. (0->0), fcn. (1855->8), ass. (0->88)
t54 = sin(qJ(6));
t55 = sin(qJ(5));
t57 = cos(qJ(6));
t58 = cos(qJ(5));
t28 = t54 * t58 + t55 * t57;
t56 = sin(qJ(4));
t16 = t28 * t56;
t99 = t16 ^ 2;
t74 = t58 * t56;
t79 = t55 * t56;
t18 = -t54 * t79 + t57 * t74;
t98 = t18 ^ 2;
t43 = -pkin(5) * t58 - pkin(4);
t97 = 0.2e1 * t43;
t96 = -0.2e1 * t56;
t59 = cos(qJ(4));
t95 = -0.2e1 * t59;
t94 = 0.2e1 * t59;
t93 = -pkin(9) - pkin(8);
t92 = pkin(4) * t58;
t91 = t54 * pkin(5);
t90 = t57 * pkin(5);
t52 = sin(pkin(10));
t53 = cos(pkin(10));
t60 = -pkin(1) - pkin(2);
t29 = qJ(2) * t52 - t53 * t60;
t24 = pkin(3) + t29;
t45 = t59 * pkin(4);
t14 = pkin(8) * t56 + t24 + t45;
t31 = qJ(2) * t53 + t52 * t60;
t25 = -pkin(7) + t31;
t73 = t59 * t25;
t66 = t58 * t73;
t5 = t66 + (pkin(9) * t56 + t14) * t55;
t89 = t57 * t5;
t88 = t59 * pkin(5);
t26 = t54 * t55 - t57 * t58;
t87 = t18 * t26;
t86 = t25 * t52;
t85 = t25 * t55;
t84 = t28 * t16;
t83 = t28 * t59;
t49 = t56 ^ 2;
t82 = t49 * t55;
t81 = t49 * t58;
t50 = t58 ^ 2;
t80 = t50 * t56;
t78 = t55 * t58;
t77 = t55 * t59;
t76 = t56 * t25;
t75 = t56 * t52;
t42 = t58 * t59;
t72 = t59 * t26;
t71 = t59 * t52;
t48 = t55 ^ 2;
t70 = t48 + t50;
t51 = t59 ^ 2;
t69 = t49 + t51;
t68 = t56 * t94;
t67 = t55 * t74;
t12 = t58 * t14;
t4 = pkin(9) * t74 + t12 + (pkin(5) - t85) * t59;
t1 = t4 * t57 - t5 * t54;
t65 = t70 * pkin(8);
t6 = -t55 * t73 + t12;
t7 = t14 * t55 + t66;
t64 = -t55 * t6 + t58 * t7;
t20 = -t53 * t58 - t55 * t71;
t21 = -t53 * t55 + t58 * t71;
t63 = -t20 * t55 + t21 * t58;
t47 = t53 ^ 2;
t46 = t52 ^ 2;
t41 = t50 * t49;
t39 = t48 * t56;
t38 = t48 * t49;
t35 = t49 * t46;
t33 = t93 * t58;
t32 = t93 * t55;
t23 = t25 ^ 2;
t22 = t49 * t23;
t15 = t49 * t86;
t13 = (-pkin(5) * t55 + t25) * t56;
t11 = t32 * t54 - t33 * t57;
t10 = t32 * t57 + t33 * t54;
t9 = t20 * t54 + t21 * t57;
t8 = t20 * t57 - t21 * t54;
t2 = t4 * t54 + t89;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2 * pkin(1), 0, 0.2e1 * qJ(2) (pkin(1) ^ 2) + qJ(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t29, 0.2e1 * t31, 0, t29 ^ 2 + t31 ^ 2, t49, t68, 0, t51, 0, 0, t24 * t94, t24 * t96, -0.2e1 * t69 * t25, t23 * t51 + t24 ^ 2 + t22, t41, -0.2e1 * t49 * t78, t42 * t96, t38, t55 * t68, t51, -0.2e1 * t25 * t82 + 0.2e1 * t59 * t6, -0.2e1 * t25 * t81 - 0.2e1 * t59 * t7, 0.2e1 * (t55 * t7 + t58 * t6) * t56, t6 ^ 2 + t7 ^ 2 + t22, t98, -0.2e1 * t18 * t16, t18 * t95, t99, -t16 * t95, t51, 0.2e1 * t1 * t59 - 0.2e1 * t13 * t16, -0.2e1 * t13 * t18 - 0.2e1 * t2 * t59, 0.2e1 * t1 * t18 + 0.2e1 * t16 * t2, t1 ^ 2 + t13 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(1), 0, 0, 0, 0, 0, 0, -t53, t52, 0, -t29 * t53 + t31 * t52, 0, 0, 0, 0, 0, 0, -t53 * t59, t56 * t53, -t69 * t52, -t24 * t53 + t51 * t86 + t15, 0, 0, 0, 0, 0, 0, t20 * t59 - t52 * t82, -t21 * t59 - t52 * t81 (t20 * t58 + t21 * t55) * t56, t20 * t6 + t21 * t7 + t15, 0, 0, 0, 0, 0, 0, -t16 * t75 + t59 * t8, -t18 * t75 - t59 * t9, t16 * t9 + t18 * t8, t1 * t8 + t13 * t75 + t2 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46 + t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46 * t51 + t35 + t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 ^ 2 + t21 ^ 2 + t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 ^ 2 + t9 ^ 2 + t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t64 - t73) * t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t16 - t13 * t59 + t18 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t63 - t71) * t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16 * t8 + t18 * t9 - t56 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 + t38 + t51, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51 + t98 + t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, 0, -t59, 0, -t76, -t73, 0, 0, -t67, t39 - t80, t77, t67, t42, 0, -t25 * t74 + (pkin(4) * t56 - pkin(8) * t59) * t55, -pkin(8) * t42 + (t85 + t92) * t56, t64, -pkin(4) * t76 + pkin(8) * t64, -t18 * t28, t84 + t87, t83, -t16 * t26, -t72, 0, t10 * t59 + t13 * t26 - t16 * t43, -t11 * t59 + t13 * t28 - t18 * t43, -t1 * t28 + t10 * t18 + t11 * t16 - t2 * t26, t1 * t10 + t11 * t2 + t13 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, -t71, 0, 0, 0, 0, 0, 0, 0, 0, -t52 * t74, t55 * t75, t63, -pkin(4) * t75 + pkin(8) * t63, 0, 0, 0, 0, 0, 0, t26 * t75, t28 * t75, -t26 * t9 - t28 * t8, t10 * t8 + t11 * t9 + t43 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t56, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t77, t39 + t80, t56 * t65 + t45, 0, 0, 0, 0, 0, 0, -t72, -t83, t84 - t87, -t10 * t16 + t11 * t18 - t43 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t48, 0.2e1 * t78, 0, t50, 0, 0, 0.2e1 * t92, -0.2e1 * pkin(4) * t55, 0.2e1 * t65, pkin(8) ^ 2 * t70 + pkin(4) ^ 2, t28 ^ 2, -0.2e1 * t28 * t26, 0, t26 ^ 2, 0, 0, t26 * t97, t28 * t97, -0.2e1 * t10 * t28 - 0.2e1 * t11 * t26, t10 ^ 2 + t11 ^ 2 + t43 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, 0, t79, t59, t6, -t7, 0, 0, 0, 0, -t18, 0, t16, t59, t57 * t88 + t1, -t89 + (-t4 - t88) * t54 (t16 * t54 + t18 * t57) * pkin(5) (t1 * t57 + t2 * t54) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, -t21, 0, 0, 0, 0, 0, 0, 0, 0, t8, -t9, 0 (t54 * t9 + t57 * t8) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t74, 0, 0, 0, 0, 0, 0, 0, 0, -t16, -t18, 0 (-t16 * t57 + t18 * t54) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t58, 0, -t55 * pkin(8), -t58 * pkin(8), 0, 0, 0, 0, t28, 0, -t26, 0, t10, -t11 (-t26 * t54 - t28 * t57) * pkin(5) (t10 * t57 + t11 * t54) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t90, -0.2e1 * t91, 0 (t54 ^ 2 + t57 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, t16, t59, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, -t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, -t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, 0, t10, -t11, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t90, -t91, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
