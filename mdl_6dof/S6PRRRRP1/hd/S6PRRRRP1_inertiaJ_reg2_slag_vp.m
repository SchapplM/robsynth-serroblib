% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:00
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRRP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRRP1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 09:31:25
% EndTime: 2019-05-05 09:31:31
% DurationCPUTime: 1.92s
% Computational Cost: add. (1144->165), mult. (2456->277), div. (0->0), fcn. (2907->10), ass. (0->104)
t74 = sin(qJ(4));
t110 = t74 * pkin(3);
t60 = pkin(10) + t110;
t73 = sin(qJ(5));
t67 = t73 ^ 2;
t77 = cos(qJ(5));
t69 = t77 ^ 2;
t94 = t67 + t69;
t96 = t94 * t60;
t71 = sin(pkin(6));
t76 = sin(qJ(2));
t103 = t71 * t76;
t72 = cos(pkin(6));
t75 = sin(qJ(3));
t79 = cos(qJ(3));
t33 = -t103 * t75 + t72 * t79;
t34 = t103 * t79 + t72 * t75;
t78 = cos(qJ(4));
t17 = -t33 * t78 + t34 * t74;
t120 = t17 ^ 2;
t113 = -pkin(9) - pkin(8);
t52 = t113 * t79;
t89 = t113 * t75;
t26 = -t52 * t74 - t78 * t89;
t119 = t26 ^ 2;
t45 = t74 * t75 - t78 * t79;
t42 = t45 ^ 2;
t47 = t74 * t79 + t75 * t78;
t118 = 0.2e1 * t47;
t63 = -pkin(3) * t79 - pkin(2);
t117 = 0.2e1 * t63;
t116 = 0.2e1 * t73;
t115 = -0.2e1 * t77;
t114 = 0.2e1 * t79;
t112 = t45 * pkin(5);
t111 = t73 * pkin(5);
t109 = t78 * pkin(3);
t61 = -pkin(4) - t109;
t108 = pkin(4) - t61;
t101 = t73 * t47;
t16 = pkin(5) * t101 + t26;
t107 = t16 * t77;
t106 = t17 * t26;
t105 = t17 * t77;
t104 = t26 * t77;
t80 = cos(qJ(2));
t102 = t71 * t80;
t100 = t73 * t77;
t28 = -t78 * t52 + t74 * t89;
t99 = t77 * t28;
t39 = t77 * t47;
t98 = -qJ(6) - pkin(10);
t62 = -pkin(5) * t77 - pkin(4);
t49 = t62 - t109;
t97 = t49 + t62;
t95 = t94 * pkin(10);
t68 = t75 ^ 2;
t70 = t79 ^ 2;
t93 = t68 + t70;
t92 = qJ(6) * t47;
t91 = qJ(6) + t60;
t90 = -0.2e1 * t47 * t45;
t21 = pkin(4) * t45 - pkin(10) * t47 + t63;
t10 = t21 * t77 - t28 * t73;
t84 = -t77 * t92 + t10;
t7 = t84 + t112;
t9 = t99 + (t21 - t92) * t73;
t88 = -t7 * t73 + t77 * t9;
t87 = -pkin(4) * t47 - pkin(10) * t45;
t11 = t21 * t73 + t99;
t2 = -t10 * t73 + t11 * t77;
t19 = t33 * t74 + t34 * t78;
t12 = -t102 * t77 - t19 * t73;
t13 = -t102 * t73 + t19 * t77;
t6 = -t12 * t73 + t13 * t77;
t86 = -t33 * t75 + t34 * t79;
t85 = -t45 * t60 + t47 * t61;
t66 = t71 ^ 2;
t58 = t66 * t80 ^ 2;
t56 = 0.2e1 * t100;
t51 = t98 * t77;
t50 = t98 * t73;
t44 = t51 * t77;
t43 = t47 ^ 2;
t41 = t91 * t77;
t40 = t91 * t73;
t38 = t77 * t45;
t37 = t69 * t43;
t36 = t73 * t45;
t35 = t67 * t43;
t32 = t41 * t77;
t31 = t73 * t39;
t29 = -0.2e1 * t43 * t100;
t25 = t26 * t73;
t24 = 0.2e1 * t45 * t39;
t23 = t73 * t90;
t22 = (-t67 + t69) * t47;
t15 = t17 * t73;
t14 = t16 * t73;
t5 = -t13 * t45 + t17 * t39;
t4 = t101 * t17 + t12 * t45;
t3 = (-t12 * t77 - t13 * t73) * t47;
t1 = t12 ^ 2 + t13 ^ 2 + t120;
t8 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 * t76 ^ 2 + t72 ^ 2 + t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 ^ 2 + t34 ^ 2 + t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 ^ 2 + t120 + t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, -t103, 0, 0, 0, 0, 0, 0, 0, 0, t79 * t102, -t75 * t102, t86, pkin(2) * t102 + pkin(8) * t86, 0, 0, 0, 0, 0, 0, -t45 * t102, -t47 * t102, t17 * t47 - t19 * t45, -t102 * t63 + t19 * t28 + t106, 0, 0, 0, 0, 0, 0, t4, t5, t3, t10 * t12 + t11 * t13 + t106, 0, 0, 0, 0, 0, 0, t4, t5, t3, t12 * t7 + t13 * t9 + t16 * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t68, t75 * t114, 0, t70, 0, 0, pkin(2) * t114, -0.2e1 * pkin(2) * t75, 0.2e1 * t93 * pkin(8), pkin(8) ^ 2 * t93 + pkin(2) ^ 2, t43, t90, 0, t42, 0, 0, t45 * t117, t47 * t117, 0.2e1 * t26 * t47 - 0.2e1 * t28 * t45, t28 ^ 2 + t63 ^ 2 + t119, t37, t29, t24, t35, t23, t42, 0.2e1 * t10 * t45 + 0.2e1 * t101 * t26, -0.2e1 * t11 * t45 + 0.2e1 * t26 * t39 (-t10 * t77 - t11 * t73) * t118, t10 ^ 2 + t11 ^ 2 + t119, t37, t29, t24, t35, t23, t42, 0.2e1 * t101 * t16 + 0.2e1 * t45 * t7, 0.2e1 * t16 * t39 - 0.2e1 * t45 * t9 (-t7 * t77 - t73 * t9) * t118, t16 ^ 2 + t7 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t34, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0 (-t17 * t78 + t19 * t74) * pkin(3), 0, 0, 0, 0, 0, 0, -t105, t15, t6, t17 * t61 + t6 * t60, 0, 0, 0, 0, 0, 0, -t105, t15, t6, -t12 * t40 + t13 * t41 + t17 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, t79, 0, -t75 * pkin(8), -t79 * pkin(8), 0, 0, 0, 0, t47, 0, -t45, 0, -t26, -t28 (-t45 * t74 - t47 * t78) * pkin(3) (-t26 * t78 + t28 * t74) * pkin(3), t31, t22, t36, -t31, t38, 0, t73 * t85 - t104, t77 * t85 + t25, t2, t2 * t60 + t26 * t61, t31, t22, t36, -t31, t38, 0, t101 * t49 - t40 * t45 - t107, t39 * t49 - t41 * t45 + t14 (t40 * t77 - t41 * t73) * t47 + t88, t16 * t49 - t40 * t7 + t41 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t109, -0.2e1 * t110, 0 (t74 ^ 2 + t78 ^ 2) * pkin(3) ^ 2, t67, t56, 0, t69, 0, 0, t61 * t115, t61 * t116, 0.2e1 * t96, t60 ^ 2 * t94 + t61 ^ 2, t67, t56, 0, t69, 0, 0, t49 * t115, t49 * t116, 0.2e1 * t40 * t73 + 0.2e1 * t32, t40 ^ 2 + t41 ^ 2 + t49 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0, 0, 0, 0, 0, 0, 0, 0, -t105, t15, t6, -t17 * pkin(4) + pkin(10) * t6, 0, 0, 0, 0, 0, 0, -t105, t15, t6, t12 * t50 - t13 * t51 + t17 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t45, 0, -t26, -t28, 0, 0, t31, t22, t36, -t31, t38, 0, t73 * t87 - t104, t77 * t87 + t25, t2, -t26 * pkin(4) + pkin(10) * t2, t31, t22, t36, -t31, t38, 0, t101 * t62 + t45 * t50 - t107, t39 * t62 + t45 * t51 + t14 (-t50 * t77 + t51 * t73) * t47 + t88, t16 * t62 + t50 * t7 - t51 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t109, -t110, 0, 0, t67, t56, 0, t69, 0, 0, t108 * t77, -t108 * t73, t95 + t96, -t61 * pkin(4) + pkin(10) * t96, t67, t56, 0, t69, 0, 0, -t97 * t77, t97 * t73, t32 - t44 + (t40 - t50) * t73, -t40 * t50 - t41 * t51 + t49 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t67, t56, 0, t69, 0, 0, 0.2e1 * pkin(4) * t77, -0.2e1 * pkin(4) * t73, 0.2e1 * t95, pkin(10) ^ 2 * t94 + pkin(4) ^ 2, t67, t56, 0, t69, 0, 0, t62 * t115, t62 * t116, -0.2e1 * t50 * t73 - 0.2e1 * t44, t50 ^ 2 + t51 ^ 2 + t62 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, -t13, 0, 0, 0, 0, 0, 0, 0, 0, t12, -t13, 0, t12 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, -t101, t45, t10, -t11, 0, 0, 0, 0, t39, 0, -t101, t45, t84 + 0.2e1 * t112, -t9, -pkin(5) * t39, t7 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t77, 0, -t73 * t60, -t77 * t60, 0, 0, 0, 0, t73, 0, t77, 0, -t40, -t41, -t111, -t40 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t77, 0, -t73 * pkin(10), -t77 * pkin(10), 0, 0, 0, 0, t73, 0, t77, 0, t50, t51, -t111, t50 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, t39, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, t73, 0, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, t73, 0, t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t8;
