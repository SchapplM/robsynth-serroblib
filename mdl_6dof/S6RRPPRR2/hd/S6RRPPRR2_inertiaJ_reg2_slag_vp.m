% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPRR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPPRR2_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:47:03
% EndTime: 2019-05-06 09:47:08
% DurationCPUTime: 1.84s
% Computational Cost: add. (2702->146), mult. (5167->295), div. (0->0), fcn. (6229->10), ass. (0->96)
t74 = sin(pkin(11));
t76 = cos(pkin(11));
t79 = sin(qJ(5));
t82 = cos(qJ(5));
t120 = -t79 * t74 + t82 * t76;
t83 = cos(qJ(2));
t95 = -qJ(3) - pkin(7);
t64 = t95 * t83;
t75 = sin(pkin(10));
t77 = cos(pkin(10));
t80 = sin(qJ(2));
t90 = t95 * t80;
t41 = -t75 * t64 - t77 * t90;
t119 = t41 ^ 2;
t56 = t75 * t80 - t77 * t83;
t52 = t56 ^ 2;
t110 = t77 * pkin(2);
t68 = -pkin(3) - t110;
t63 = -t76 * pkin(4) + t68;
t44 = -pkin(5) * t120 + t63;
t118 = 0.2e1 * t44;
t117 = -0.2e1 * t56;
t116 = 0.2e1 * t56;
t115 = 0.2e1 * t63;
t69 = -t83 * pkin(2) - pkin(1);
t114 = 0.2e1 * t69;
t113 = 0.2e1 * t83;
t112 = t56 * pkin(5);
t111 = t75 * pkin(2);
t78 = sin(qJ(6));
t109 = t78 * pkin(5);
t81 = cos(qJ(6));
t108 = t81 * pkin(5);
t60 = t75 * t83 + t77 * t80;
t61 = t82 * t74 + t79 * t76;
t26 = t61 * t60;
t33 = t56 * pkin(3) - t60 * qJ(4) + t69;
t43 = -t77 * t64 + t75 * t90;
t18 = t76 * t33 - t74 * t43;
t98 = t76 * t60;
t12 = t56 * pkin(4) - pkin(8) * t98 + t18;
t100 = t74 * t60;
t19 = t74 * t33 + t76 * t43;
t13 = -pkin(8) * t100 + t19;
t7 = t79 * t12 + t82 * t13;
t5 = -t26 * pkin(9) + t7;
t107 = t81 * t5;
t66 = qJ(4) + t111;
t106 = pkin(8) + t66;
t28 = t120 * t60;
t16 = -t78 * t26 + t81 * t28;
t36 = -t120 * t81 + t78 * t61;
t105 = t16 * t36;
t104 = t28 * t120;
t38 = t120 * t78 + t81 * t61;
t103 = t38 * t56;
t102 = t61 * t56;
t101 = t74 * t56;
t99 = t74 * t76;
t70 = t74 ^ 2;
t71 = t76 ^ 2;
t94 = t70 + t71;
t72 = t80 ^ 2;
t73 = t83 ^ 2;
t93 = t72 + t73;
t92 = t60 * t117;
t91 = t74 * t98;
t6 = t82 * t12 - t79 * t13;
t4 = -t28 * pkin(9) + t112 + t6;
t1 = t81 * t4 - t78 * t5;
t50 = t106 * t74;
t51 = t106 * t76;
t31 = -t82 * t50 - t79 * t51;
t24 = pkin(4) * t100 + t41;
t89 = t18 * t76 + t19 * t74;
t88 = -t18 * t74 + t19 * t76;
t32 = -t79 * t50 + t82 * t51;
t87 = -t56 * t66 + t60 * t68;
t55 = t61 ^ 2;
t54 = t60 ^ 2;
t53 = t120 ^ 2;
t48 = t76 * t56;
t40 = t120 * t56;
t35 = t38 ^ 2;
t34 = t36 ^ 2;
t23 = t36 * t56;
t22 = pkin(9) * t120 + t32;
t21 = -t61 * pkin(9) + t31;
t20 = t61 * t26;
t17 = t26 * pkin(5) + t24;
t14 = t81 * t26 + t78 * t28;
t10 = t78 * t21 + t81 * t22;
t9 = t81 * t21 - t78 * t22;
t8 = t38 * t14;
t2 = t78 * t4 + t107;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t72, t80 * t113, 0, t73, 0, 0, pkin(1) * t113, -0.2e1 * pkin(1) * t80, 0.2e1 * t93 * pkin(7), pkin(7) ^ 2 * t93 + pkin(1) ^ 2, t54, t92, 0, t52, 0, 0, t56 * t114, t60 * t114, 0.2e1 * t41 * t60 - 0.2e1 * t43 * t56, t43 ^ 2 + t69 ^ 2 + t119, t71 * t54, -0.2e1 * t54 * t99, t98 * t116, t70 * t54, t74 * t92, t52, 0.2e1 * t100 * t41 + 0.2e1 * t18 * t56, -0.2e1 * t19 * t56 + 0.2e1 * t41 * t98, -0.2e1 * t89 * t60, t18 ^ 2 + t19 ^ 2 + t119, t28 ^ 2, -0.2e1 * t28 * t26, t28 * t116, t26 ^ 2, -t26 * t116, t52, 0.2e1 * t24 * t26 + 0.2e1 * t6 * t56, 0.2e1 * t24 * t28 - 0.2e1 * t7 * t56, -0.2e1 * t7 * t26 - 0.2e1 * t6 * t28, t24 ^ 2 + t6 ^ 2 + t7 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, t16 * t116, t14 ^ 2, t14 * t117, t52, 0.2e1 * t1 * t56 + 0.2e1 * t17 * t14, 0.2e1 * t17 * t16 - 0.2e1 * t2 * t56, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t17 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t83, 0, -t80 * pkin(7), -t83 * pkin(7), 0, 0, 0, 0, t60, 0, -t56, 0, -t41, -t43 (-t56 * t75 - t60 * t77) * pkin(2) (-t41 * t77 + t43 * t75) * pkin(2), t91 (-t70 + t71) * t60, t101, -t91, t48, 0, -t41 * t76 + t74 * t87, t41 * t74 + t76 * t87, t88, t41 * t68 + t66 * t88, t28 * t61, -t20 + t104, t102, -t26 * t120, t40, 0, -t120 * t24 + t63 * t26 + t31 * t56, t24 * t61 + t63 * t28 - t32 * t56, t120 * t7 - t32 * t26 - t31 * t28 - t6 * t61, t24 * t63 + t6 * t31 + t7 * t32, t16 * t38, -t8 - t105, t103, t14 * t36, -t23, 0, t44 * t14 + t17 * t36 + t9 * t56, -t10 * t56 + t44 * t16 + t17 * t38, -t1 * t38 - t10 * t14 - t9 * t16 - t2 * t36, t1 * t9 + t2 * t10 + t17 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t110, -0.2e1 * t111, 0 (t75 ^ 2 + t77 ^ 2) * pkin(2) ^ 2, t70, 0.2e1 * t99, 0, t71, 0, 0, -0.2e1 * t68 * t76, 0.2e1 * t68 * t74, 0.2e1 * t94 * t66, t66 ^ 2 * t94 + t68 ^ 2, t55, 0.2e1 * t61 * t120, 0, t53, 0, 0, -t120 * t115, t61 * t115, 0.2e1 * t120 * t32 - 0.2e1 * t31 * t61, t31 ^ 2 + t32 ^ 2 + t63 ^ 2, t35, -0.2e1 * t38 * t36, 0, t34, 0, 0, t36 * t118, t38 * t118, -0.2e1 * t10 * t36 - 0.2e1 * t9 * t38, t10 ^ 2 + t44 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t60, 0, t69, 0, 0, 0, 0, 0, 0, t48, -t101, -t94 * t60, t89, 0, 0, 0, 0, 0, 0, t40, -t102, -t20 - t104, t120 * t6 + t7 * t61, 0, 0, 0, 0, 0, 0, -t23, -t103, -t8 + t105, -t1 * t36 + t2 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120 * t31 + t32 * t61, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t38 - t9 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55 + t53, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35 + t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, t98, 0, t41, 0, 0, 0, 0, 0, 0, t26, t28, 0, t24, 0, 0, 0, 0, 0, 0, t14, t16, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, t74, 0, t68, 0, 0, 0, 0, 0, 0, -t120, t61, 0, t63, 0, 0, 0, 0, 0, 0, t36, t38, 0, t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, t56, t6, -t7, 0, 0, 0, 0, t16, 0, -t14, t56, t108 * t56 + t1, -t107 + (-t4 - t112) * t78 (-t14 * t78 - t16 * t81) * pkin(5) (t1 * t81 + t2 * t78) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, t120, 0, t31, -t32, 0, 0, 0, 0, t38, 0, -t36, 0, t9, -t10 (-t36 * t78 - t38 * t81) * pkin(5) (t10 * t78 + t81 * t9) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, -t61, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, 0 (-t36 * t81 + t38 * t78) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t109, 0 (t78 ^ 2 + t81 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, t56, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, -t36, 0, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t108, -t109, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
