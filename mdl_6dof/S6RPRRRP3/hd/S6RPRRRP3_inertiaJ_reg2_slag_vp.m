% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:20:05
% EndTime: 2019-05-06 01:20:11
% DurationCPUTime: 1.94s
% Computational Cost: add. (1174->167), mult. (2267->270), div. (0->0), fcn. (2403->8), ass. (0->101)
t63 = sin(qJ(5));
t64 = sin(qJ(4));
t66 = cos(qJ(5));
t67 = cos(qJ(4));
t38 = t63 * t67 + t66 * t64;
t65 = sin(qJ(3));
t29 = t38 * t65;
t105 = t38 * t29;
t96 = t67 * t65;
t99 = t64 * t65;
t31 = -t63 * t99 + t66 * t96;
t36 = t63 * t64 - t66 * t67;
t16 = t31 * t36;
t125 = -t16 + t105;
t124 = t16 + t105;
t122 = t29 ^ 2;
t28 = t31 ^ 2;
t68 = cos(qJ(3));
t60 = t68 ^ 2;
t123 = t122 + t28 + t60;
t121 = t36 ^ 2;
t55 = -t67 * pkin(4) - pkin(3);
t120 = 0.2e1 * t55;
t119 = 0.2e1 * t65;
t118 = -0.2e1 * t68;
t117 = -pkin(9) - pkin(8);
t116 = pkin(3) * t67;
t61 = sin(pkin(10));
t115 = t61 * pkin(1);
t62 = cos(pkin(10));
t114 = t62 * pkin(1);
t113 = t66 * pkin(4);
t112 = t68 * pkin(3);
t111 = t68 * pkin(4);
t110 = t68 * pkin(5);
t46 = pkin(7) + t115;
t102 = t46 * t64;
t48 = -pkin(2) - t114;
t34 = -t65 * pkin(8) - t112 + t48;
t32 = t67 * t34;
t10 = -pkin(9) * t96 + t32 + (-pkin(4) - t102) * t68;
t92 = t68 * t46;
t83 = t67 * t92;
t13 = t83 + (-pkin(9) * t65 + t34) * t64;
t4 = t63 * t10 + t66 * t13;
t42 = t117 * t67;
t82 = t117 * t64;
t22 = -t63 * t42 - t66 * t82;
t109 = t22 * t68;
t24 = -t66 * t42 + t63 * t82;
t108 = t24 * t68;
t107 = t29 * t36;
t106 = t31 * t29;
t104 = t38 * t36;
t103 = t38 * t68;
t57 = t64 ^ 2;
t101 = t57 * t65;
t58 = t65 ^ 2;
t100 = t58 * t46;
t98 = t64 * t67;
t97 = t64 * t68;
t41 = t65 * t46;
t95 = t67 * t68;
t94 = t68 * t29;
t93 = t68 * t36;
t91 = t68 * t65;
t33 = pkin(4) * t99 + t41;
t59 = t67 ^ 2;
t89 = t57 + t59;
t88 = t58 + t60;
t87 = t68 * qJ(6);
t86 = 0.2e1 * t91;
t85 = t22 ^ 2 + t24 ^ 2;
t84 = t64 * t96;
t81 = t89 * pkin(8);
t80 = -t66 * t10 + t63 * t13;
t79 = t29 * t22 + t31 * t24;
t78 = t22 * t31 - t24 * t29;
t76 = -t29 * pkin(5) + t31 * qJ(6);
t19 = -t64 * t92 + t32;
t20 = t64 * t34 + t83;
t75 = -t19 * t64 + t20 * t67;
t74 = 0.2e1 * t22 * t38 - 0.2e1 * t24 * t36;
t70 = 0.2e1 * pkin(5);
t69 = 0.2e1 * qJ(6);
t56 = t63 * pkin(4);
t53 = pkin(5) + t113;
t52 = t59 * t65;
t51 = t59 * t58;
t49 = t57 * t58;
t47 = t56 + qJ(6);
t45 = t46 ^ 2;
t40 = t58 * t45;
t35 = t38 ^ 2;
t25 = t31 * t118;
t17 = t31 * t38;
t15 = t36 * pkin(5) - t38 * qJ(6) + t55;
t5 = -t76 + t33;
t2 = t80 + t110;
t1 = -t87 + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t114, -0.2e1 * t115, 0 (t61 ^ 2 + t62 ^ 2) * pkin(1) ^ 2, t58, t86, 0, t60, 0, 0, t48 * t118, t48 * t119, 0.2e1 * t88 * t46, t60 * t45 + t48 ^ 2 + t40, t51, -0.2e1 * t58 * t98, -0.2e1 * t67 * t91, t49, t64 * t86, t60, 0.2e1 * t64 * t100 - 0.2e1 * t19 * t68, 0.2e1 * t67 * t100 + 0.2e1 * t20 * t68 (-t19 * t67 - t20 * t64) * t119, t19 ^ 2 + t20 ^ 2 + t40, t28, -0.2e1 * t106, t25, t122, 0.2e1 * t94, t60, 0.2e1 * t33 * t29 + 0.2e1 * t68 * t80, 0.2e1 * t33 * t31 + 0.2e1 * t4 * t68, -0.2e1 * t4 * t29 + 0.2e1 * t31 * t80, t33 ^ 2 + t4 ^ 2 + t80 ^ 2, t28, t25, 0.2e1 * t106, t60, -0.2e1 * t94, t122, 0.2e1 * t2 * t68 + 0.2e1 * t5 * t29, -0.2e1 * t1 * t29 + 0.2e1 * t2 * t31, -0.2e1 * t1 * t68 - 0.2e1 * t5 * t31, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t75 - t92) * t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29 * t80 + t4 * t31 - t33 * t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t31 + t2 * t29 - t5 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51 + t49 + t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t68, 0, -t41, -t92, 0, 0, t84, t52 - t101, -t97, -t84, -t95, 0, -t46 * t96 + (-pkin(3) * t65 + pkin(8) * t68) * t64, pkin(8) * t95 + (t102 - t116) * t65, t75, -pkin(3) * t41 + t75 * pkin(8), t17, -t124, -t103, t107, t93, 0, t55 * t29 + t33 * t36 + t109, t55 * t31 + t33 * t38 + t108, -t4 * t36 + t38 * t80 + t78, t22 * t80 + t4 * t24 + t33 * t55, t17, -t103, t124, 0, -t93, t107, t15 * t29 + t5 * t36 + t109, -t1 * t36 + t2 * t38 + t78, -t15 * t31 - t5 * t38 - t108, t1 * t24 + t5 * t15 + t2 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, -t65, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t97, t52 + t101, t65 * t81 + t112, 0, 0, 0, 0, 0, 0, -t93, -t103, t125, -t68 * t55 + t79, 0, 0, 0, 0, 0, 0, -t93, t125, t103, -t68 * t15 + t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, 0.2e1 * t98, 0, t59, 0, 0, 0.2e1 * t116, -0.2e1 * pkin(3) * t64, 0.2e1 * t81, t89 * pkin(8) ^ 2 + pkin(3) ^ 2, t35, -0.2e1 * t104, 0, t121, 0, 0, t36 * t120, t38 * t120, t74, t55 ^ 2 + t85, t35, 0, 0.2e1 * t104, 0, 0, t121, 0.2e1 * t15 * t36, t74, -0.2e1 * t15 * t38, t15 ^ 2 + t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, -t99, -t68, t19, -t20, 0, 0, 0, 0, t31, 0, -t29, -t68, -t66 * t111 - t80, t63 * t111 - t4 (-t29 * t63 - t31 * t66) * pkin(4) (t4 * t63 - t66 * t80) * pkin(4), 0, t31, 0, -t68, t29, 0 (-pkin(5) - t53) * t68 - t80, -t47 * t29 - t53 * t31 (-qJ(6) - t47) * t68 + t4, t1 * t47 - t2 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, -t96, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t31, 0 (-t29 * t66 + t31 * t63) * pkin(4), 0, 0, 0, 0, 0, 0, -t29, 0, t31, -t29 * t53 + t31 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t67, 0, -t64 * pkin(8), -t67 * pkin(8), 0, 0, 0, 0, t38, 0, -t36, 0, -t22, -t24 (-t36 * t63 - t38 * t66) * pkin(4) (-t22 * t66 + t24 * t63) * pkin(4), 0, t38, 0, 0, t36, 0, -t22, -t47 * t36 - t53 * t38, t24, -t22 * t53 + t24 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t113, -0.2e1 * t56, 0 (t63 ^ 2 + t66 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t53, 0, 0.2e1 * t47, t47 ^ 2 + t53 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t29, -t68, -t80, -t4, 0, 0, 0, t31, 0, -t68, t29, 0, -t80 - 0.2e1 * t110, -pkin(5) * t31 - t29 * qJ(6), -0.2e1 * t87 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, -t31, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, t31, t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, -t36, 0, -t22, -t24, 0, 0, 0, t38, 0, 0, t36, 0, -t22, -pkin(5) * t38 - t36 * qJ(6), t24, -t22 * pkin(5) + t24 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t113, -t56, 0, 0, 0, 0, 0, 1, 0, 0, t70 + t113, 0, t69 + t56, t53 * pkin(5) + t47 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t70, 0, t69, pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, t31, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
