% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:08
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRPR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPR3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:17:59
% EndTime: 2019-05-05 22:18:04
% DurationCPUTime: 1.73s
% Computational Cost: add. (893->152), mult. (1662->256), div. (0->0), fcn. (1695->8), ass. (0->95)
t73 = cos(qJ(4));
t65 = t73 ^ 2;
t71 = sin(qJ(3));
t55 = t65 * t71;
t70 = sin(qJ(4));
t63 = t70 ^ 2;
t99 = t63 * t71;
t30 = t55 + t99;
t113 = t63 + t65;
t108 = pkin(4) + pkin(5);
t86 = t70 * qJ(5);
t25 = t108 * t73 + pkin(3) + t86;
t112 = 0.2e1 * t25;
t78 = -t73 * pkin(4) - t86;
t38 = -pkin(3) + t78;
t111 = -0.2e1 * t38;
t110 = 0.2e1 * t71;
t74 = cos(qJ(3));
t109 = -0.2e1 * t74;
t107 = pkin(3) * t70;
t106 = pkin(3) * t73;
t105 = pkin(4) * t70;
t67 = sin(pkin(10));
t104 = t67 * pkin(1);
t68 = cos(pkin(10));
t103 = t68 * pkin(1);
t102 = t70 * pkin(8);
t101 = t74 * pkin(3);
t56 = t73 * t71;
t69 = sin(qJ(6));
t72 = cos(qJ(6));
t93 = t72 * t70;
t17 = t69 * t56 - t71 * t93;
t29 = -t69 * t73 + t93;
t100 = t29 * t17;
t49 = pkin(7) + t104;
t64 = t71 ^ 2;
t98 = t64 * t49;
t53 = t70 * t71;
t97 = t70 * t73;
t96 = t70 * t74;
t95 = t71 * t49;
t94 = t71 * t74;
t57 = t73 * t74;
t26 = t69 * t70 + t72 * t73;
t92 = t74 * t26;
t91 = t74 * t49;
t50 = -pkin(2) - t103;
t24 = -t71 * pkin(8) - t101 + t50;
t90 = -t73 * t24 + t70 * t91;
t10 = t70 * t24 + t73 * t91;
t89 = t30 * pkin(8);
t88 = t113 * pkin(8) ^ 2;
t66 = t74 ^ 2;
t87 = t64 + t66;
t85 = t73 * qJ(5);
t84 = t74 * qJ(5);
t83 = t70 * t94;
t82 = t64 * t97;
t62 = t74 * pkin(4);
t6 = t62 + t90;
t81 = (pkin(8) - pkin(9)) * t70;
t5 = -t84 + t10;
t3 = t74 * pkin(5) - pkin(9) * t56 + t6;
t4 = pkin(9) * t53 + t5;
t1 = t72 * t3 - t69 * t4;
t2 = t69 * t3 + t72 * t4;
t80 = t5 * t73 + t6 * t70;
t79 = t10 * t73 + t70 * t90;
t77 = t85 - t105;
t61 = t73 * pkin(8);
t54 = t65 * t64;
t52 = t63 * t64;
t48 = t49 ^ 2;
t46 = pkin(8) * t96;
t44 = t71 * t85;
t43 = t70 * t56;
t41 = -t73 * pkin(9) + t61;
t40 = -0.2e1 * t71 * t57;
t39 = t64 * t48;
t37 = t72 * qJ(5) - t69 * t108;
t35 = t69 * qJ(5) + t72 * t108;
t34 = 0.2e1 * t113 * pkin(8);
t28 = -t55 + t99;
t23 = t29 * t74;
t22 = t54 + t52 + t66;
t19 = t26 * t71;
t16 = t19 ^ 2;
t15 = t17 ^ 2;
t14 = -t44 + (t49 + t105) * t71;
t13 = t72 * t41 + t69 * t81;
t11 = t69 * t41 - t72 * t81;
t8 = t44 + (-t108 * t70 - t49) * t71;
t7 = t19 * t26;
t9 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t103, -0.2e1 * t104, 0 (t67 ^ 2 + t68 ^ 2) * pkin(1) ^ 2, t64, 0.2e1 * t94, 0, t66, 0, 0, t50 * t109, t50 * t110, 0.2e1 * t87 * t49, t66 * t48 + t50 ^ 2 + t39, t54, -0.2e1 * t82, t40, t52, 0.2e1 * t83, t66, 0.2e1 * t70 * t98 + 0.2e1 * t74 * t90, 0.2e1 * t10 * t74 + 0.2e1 * t73 * t98 (-t10 * t70 + t73 * t90) * t110, t10 ^ 2 + t90 ^ 2 + t39, t54, t40, 0.2e1 * t82, t66, -0.2e1 * t83, t52, 0.2e1 * t14 * t53 + 0.2e1 * t6 * t74 (-t5 * t70 + t6 * t73) * t110, -0.2e1 * t14 * t56 - 0.2e1 * t5 * t74, t14 ^ 2 + t5 ^ 2 + t6 ^ 2, t16, -0.2e1 * t19 * t17, 0.2e1 * t19 * t74, t15, t17 * t109, t66, 0.2e1 * t1 * t74 + 0.2e1 * t8 * t17, 0.2e1 * t8 * t19 - 0.2e1 * t2 * t74, -0.2e1 * t1 * t19 - 0.2e1 * t2 * t17, t1 ^ 2 + t2 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t79 - t91) * t71, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14 * t74 + t80 * t71, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t17 + t2 * t19 + t8 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 + t15 + t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t95, -t91, 0, 0, t43, -t28, -t96, -t43, -t57, 0, t46 + (-t49 * t73 - t107) * t71, pkin(8) * t57 + (t49 * t70 - t106) * t71, t79, -pkin(3) * t95 + pkin(8) * t79, t43, -t96, t28, 0, t57, -t43, -t14 * t73 + t38 * t53 + t46, t80, -t14 * t70 + (-pkin(8) * t74 - t38 * t71) * t73, t80 * pkin(8) + t14 * t38, t19 * t29, -t7 - t100, t23, t17 * t26, -t92, 0, -t11 * t74 + t25 * t17 + t8 * t26, -t13 * t74 + t25 * t19 + t8 * t29, -t1 * t29 + t11 * t19 - t13 * t17 - t2 * t26, -t1 * t11 + t2 * t13 + t8 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t71, 0, 0, 0, 0, 0, 0, 0, 0, t57, -t96, t30, t89 + t101, 0, 0, 0, 0, 0, 0, t57, t30, t96, -t74 * t38 + t89, 0, 0, 0, 0, 0, 0, t92, t23, -t7 + t100, t17 * t11 + t19 * t13 + t74 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t63, 0.2e1 * t97, 0, t65, 0, 0, 0.2e1 * t106, -0.2e1 * t107, t34, pkin(3) ^ 2 + t88, t63, 0, -0.2e1 * t97, 0, 0, t65, t73 * t111, t34, t70 * t111, t38 ^ 2 + t88, t29 ^ 2, -0.2e1 * t29 * t26, 0, t26 ^ 2, 0, 0, t26 * t112, t29 * t112, 0.2e1 * t11 * t29 - 0.2e1 * t13 * t26, t11 ^ 2 + t13 ^ 2 + t25 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, -t53, -t74, -t90, -t10, 0, 0, 0, t56, 0, -t74, t53, 0, -0.2e1 * t62 - t90, t78 * t71, -0.2e1 * t84 + t10, -t6 * pkin(4) + t5 * qJ(5), 0, 0, -t19, 0, t17, -t74, -t35 * t74 - t1, -t37 * t74 + t2, -t37 * t17 + t35 * t19, -t1 * t35 + t2 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t56, 0, 0, 0, 0, 0, 0, 0, 0, -t53, 0, t56, -pkin(4) * t53 + t44, 0, 0, 0, 0, 0, 0, t17, t19, 0, t17 * t35 + t19 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t73, 0, -t102, -t61, 0, 0, 0, t70, 0, 0, -t73, 0, -t102, t77, t61, t77 * pkin(8), 0, 0, -t29, 0, t26, 0, t11, t13, -t37 * t26 + t35 * t29, t11 * t35 + t13 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(4), 0, 0.2e1 * qJ(5), pkin(4) ^ 2 + qJ(5) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t35, 0.2e1 * t37, 0, t35 ^ 2 + t37 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t56, 0, t6, 0, 0, 0, 0, 0, 0, t72 * t74, -t69 * t74, -t69 * t17 - t72 * t19, t1 * t72 + t2 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17 * t72 + t19 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t102, 0, 0, 0, 0, 0, 0, 0, 0, -t69 * t26 - t72 * t29, -t11 * t72 + t13 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(4), 0, 0, 0, 0, 0, 0, -t72, t69, 0, -t35 * t72 + t37 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69 ^ 2 + t72 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, -t17, t74, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t26, 0, -t11, -t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t35, -t37, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, -t69, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t9;
