% Calculate inertial parameters regressor of joint inertia matrix for
% S6PPRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,d6,theta1,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PPRRRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRRRR1_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 20:40:27
% EndTime: 2019-05-04 20:40:32
% DurationCPUTime: 1.62s
% Computational Cost: add. (1188->153), mult. (3048->271), div. (0->0), fcn. (3880->14), ass. (0->93)
t70 = sin(qJ(5));
t102 = t70 * pkin(4);
t52 = pkin(11) + t102;
t69 = sin(qJ(6));
t59 = t69 ^ 2;
t73 = cos(qJ(6));
t61 = t73 ^ 2;
t88 = t59 + t61;
t90 = t88 * t52;
t63 = sin(pkin(13));
t65 = sin(pkin(6));
t68 = cos(pkin(6));
t72 = sin(qJ(3));
t76 = cos(qJ(3));
t66 = cos(pkin(13));
t67 = cos(pkin(7));
t94 = t66 * t67;
t64 = sin(pkin(7));
t96 = t64 * t72;
t26 = t68 * t96 + (t63 * t76 + t72 * t94) * t65;
t33 = -t65 * t66 * t64 + t68 * t67;
t71 = sin(qJ(4));
t75 = cos(qJ(4));
t13 = -t26 * t71 + t33 * t75;
t14 = t26 * t75 + t33 * t71;
t74 = cos(qJ(5));
t6 = -t74 * t13 + t70 * t14;
t112 = t6 ^ 2;
t34 = t75 * t67 - t71 * t96;
t35 = t71 * t67 + t75 * t96;
t18 = -t74 * t34 + t70 * t35;
t111 = t18 ^ 2;
t95 = t64 * t76;
t24 = -t68 * t95 + (t63 * t72 - t76 * t94) * t65;
t23 = t24 ^ 2;
t106 = -pkin(10) - pkin(9);
t45 = t106 * t75;
t84 = t106 * t71;
t28 = -t70 * t45 - t74 * t84;
t110 = t28 ^ 2;
t39 = t70 * t71 - t74 * t75;
t109 = t39 ^ 2;
t54 = -t75 * pkin(4) - pkin(3);
t108 = 0.2e1 * t54;
t107 = 0.2e1 * t75;
t105 = t6 * t18;
t104 = t6 * t28;
t103 = t6 * t73;
t101 = t74 * pkin(4);
t53 = -pkin(5) - t101;
t100 = pkin(5) - t53;
t99 = t18 * t28;
t98 = t18 * t73;
t97 = t28 * t73;
t41 = t70 * t75 + t74 * t71;
t93 = t69 * t41;
t92 = t69 * t73;
t91 = t73 * t41;
t89 = t88 * pkin(11);
t60 = t71 ^ 2;
t62 = t75 ^ 2;
t87 = t60 + t62;
t86 = -0.2e1 * t41 * t39;
t85 = t24 * t95;
t83 = -pkin(5) * t41 - pkin(11) * t39;
t8 = t70 * t13 + t74 * t14;
t2 = t24 * t73 - t69 * t8;
t3 = t24 * t69 + t73 * t8;
t1 = -t2 * t69 + t3 * t73;
t21 = t39 * pkin(5) - t41 * pkin(11) + t54;
t30 = -t74 * t45 + t70 * t84;
t10 = t73 * t21 - t69 * t30;
t11 = t69 * t21 + t73 * t30;
t4 = -t10 * t69 + t11 * t73;
t82 = -t13 * t71 + t14 * t75;
t20 = t70 * t34 + t74 * t35;
t15 = -t69 * t20 - t73 * t95;
t16 = t73 * t20 - t69 * t95;
t9 = -t15 * t69 + t16 * t73;
t81 = -t34 * t71 + t35 * t75;
t80 = -t39 * t52 + t41 * t53;
t57 = t64 ^ 2;
t50 = t57 * t76 ^ 2;
t48 = 0.2e1 * t92;
t38 = t41 ^ 2;
t37 = t73 * t39;
t36 = t69 * t39;
t32 = t69 * t91;
t27 = t28 * t69;
t22 = (-t59 + t61) * t41;
t17 = t18 * t69;
t5 = t6 * t69;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 ^ 2 + (t63 ^ 2 + t66 ^ 2) * t65 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 ^ 2 + t33 ^ 2 + t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 ^ 2 + t14 ^ 2 + t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 ^ 2 + t112 + t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2 ^ 2 + t3 ^ 2 + t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 * t67 + (-t24 * t76 + t26 * t72) * t64, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * t34 + t14 * t35 - t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 * t20 + t105 - t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2 * t15 + t3 * t16 + t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * t72 ^ 2 + t67 ^ 2 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 ^ 2 + t35 ^ 2 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 ^ 2 + t111 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15 ^ 2 + t16 ^ 2 + t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t26, 0, 0, 0, 0, 0, 0, 0, 0, -t24 * t75, t24 * t71, t82, -t24 * pkin(3) + t82 * pkin(9), 0, 0, 0, 0, 0, 0, t24 * t39, t24 * t41, -t8 * t39 + t6 * t41, t24 * t54 + t8 * t30 + t104, 0, 0, 0, 0, 0, 0, t2 * t39 + t6 * t93, -t3 * t39 + t6 * t91 (-t2 * t73 - t3 * t69) * t41, t2 * t10 + t3 * t11 + t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t96, 0, 0, 0, 0, 0, 0, 0, 0, t75 * t95, -t71 * t95, t81, pkin(3) * t95 + t81 * pkin(9), 0, 0, 0, 0, 0, 0, -t39 * t95, -t41 * t95, t18 * t41 - t20 * t39, t20 * t30 - t54 * t95 + t99, 0, 0, 0, 0, 0, 0, t15 * t39 + t18 * t93, -t16 * t39 + t18 * t91 (-t15 * t73 - t16 * t69) * t41, t15 * t10 + t16 * t11 + t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t60, t71 * t107, 0, t62, 0, 0, pkin(3) * t107, -0.2e1 * pkin(3) * t71, 0.2e1 * t87 * pkin(9), t87 * pkin(9) ^ 2 + pkin(3) ^ 2, t38, t86, 0, t109, 0, 0, t39 * t108, t41 * t108, 0.2e1 * t28 * t41 - 0.2e1 * t30 * t39, t30 ^ 2 + t54 ^ 2 + t110, t61 * t38, -0.2e1 * t38 * t92, 0.2e1 * t39 * t91, t59 * t38, t69 * t86, t109, 0.2e1 * t10 * t39 + 0.2e1 * t28 * t93, -0.2e1 * t11 * t39 + 0.2e1 * t28 * t91, 0.2e1 * (-t10 * t73 - t11 * t69) * t41, t10 ^ 2 + t11 ^ 2 + t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, -t14, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t8, 0 (-t6 * t74 + t70 * t8) * pkin(4), 0, 0, 0, 0, 0, 0, -t103, t5, t1, t1 * t52 + t6 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t35, 0, 0, 0, 0, 0, 0, 0, 0, -t18, -t20, 0 (-t18 * t74 + t20 * t70) * pkin(4), 0, 0, 0, 0, 0, 0, -t98, t17, t9, t18 * t53 + t9 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t75, 0, -t71 * pkin(9), -t75 * pkin(9), 0, 0, 0, 0, t41, 0, -t39, 0, -t28, -t30 (-t39 * t70 - t41 * t74) * pkin(4) (-t28 * t74 + t30 * t70) * pkin(4), t32, t22, t36, -t32, t37, 0, t80 * t69 - t97, t80 * t73 + t27, t4, t28 * t53 + t4 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t101, -0.2e1 * t102, 0 (t70 ^ 2 + t74 ^ 2) * pkin(4) ^ 2, t59, t48, 0, t61, 0, 0, -0.2e1 * t53 * t73, 0.2e1 * t53 * t69, 0.2e1 * t90, t88 * t52 ^ 2 + t53 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t8, 0, 0, 0, 0, 0, 0, 0, 0, -t103, t5, t1, -t6 * pkin(5) + t1 * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, -t20, 0, 0, 0, 0, 0, 0, 0, 0, -t98, t17, t9, -t18 * pkin(5) + t9 * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, -t39, 0, -t28, -t30, 0, 0, t32, t22, t36, -t32, t37, 0, t83 * t69 - t97, t83 * t73 + t27, t4, -t28 * pkin(5) + t4 * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t101, -t102, 0, 0, t59, t48, 0, t61, 0, 0, t100 * t73, -t100 * t69, t89 + t90, -t53 * pkin(5) + pkin(11) * t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t59, t48, 0, t61, 0, 0, 0.2e1 * pkin(5) * t73, -0.2e1 * pkin(5) * t69, 0.2e1 * t89, t88 * pkin(11) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, -t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, -t93, t39, t10, -t11, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, t73, 0, -t69 * t52, -t73 * t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, t73, 0, -t69 * pkin(11), -t73 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t7;
