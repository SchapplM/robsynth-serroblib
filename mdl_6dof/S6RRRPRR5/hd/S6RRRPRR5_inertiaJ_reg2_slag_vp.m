% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:24
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRR5_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 10:43:28
% EndTime: 2019-05-07 10:43:35
% DurationCPUTime: 2.16s
% Computational Cost: add. (1921->171), mult. (3384->281), div. (0->0), fcn. (3928->8), ass. (0->118)
t87 = sin(qJ(6));
t88 = sin(qJ(5));
t91 = cos(qJ(6));
t92 = cos(qJ(5));
t55 = t87 * t92 + t88 * t91;
t59 = -t87 * t88 + t91 * t92;
t34 = (t55 * t87 + t59 * t91) * pkin(5);
t93 = cos(qJ(3));
t126 = t93 * pkin(2);
t78 = -pkin(3) - t126;
t71 = -pkin(9) + t78;
t49 = (-pkin(10) + t71) * t88;
t131 = pkin(10) * t92;
t67 = t92 * t71;
t50 = t67 - t131;
t31 = -t49 * t87 + t50 * t91;
t32 = t49 * t91 + t50 * t87;
t145 = t31 * t59 + t32 * t55;
t135 = pkin(3) + pkin(9);
t64 = (-pkin(10) - t135) * t88;
t80 = t92 * t135;
t65 = -t80 - t131;
t36 = -t64 * t87 + t65 * t91;
t37 = t64 * t91 + t65 * t87;
t144 = t36 * t59 + t37 * t55;
t51 = t55 ^ 2;
t53 = t59 ^ 2;
t143 = t53 + t51;
t89 = sin(qJ(3));
t90 = sin(qJ(2));
t94 = cos(qJ(2));
t57 = t89 * t90 - t93 * t94;
t52 = t57 ^ 2;
t60 = t89 * t94 + t90 * t93;
t54 = t60 ^ 2;
t128 = t89 * pkin(2);
t73 = qJ(4) + t128;
t142 = t73 ^ 2;
t141 = -0.2e1 * t60;
t81 = t88 * pkin(5);
t66 = t73 + t81;
t140 = 0.2e1 * t66;
t139 = 0.2e1 * t73;
t75 = qJ(4) + t81;
t138 = 0.2e1 * t75;
t79 = -pkin(2) * t94 - pkin(1);
t137 = 0.2e1 * t79;
t136 = 0.2e1 * t94;
t96 = 0.2e1 * qJ(4);
t134 = -pkin(8) - pkin(7);
t103 = -qJ(4) * t60 + t79;
t20 = t135 * t57 + t103;
t107 = pkin(10) * t57 + t20;
t132 = pkin(5) * t60;
t109 = t134 * t90;
t68 = t134 * t94;
t41 = -t93 * t109 - t68 * t89;
t26 = pkin(4) * t60 + t41;
t21 = t92 * t26;
t7 = -t107 * t88 + t132 + t21;
t125 = t26 * t88;
t8 = t107 * t92 + t125;
t3 = t91 * t7 - t8 * t87;
t130 = t8 * t91;
t4 = t7 * t87 + t130;
t133 = -t3 * t59 - t4 * t55;
t129 = t87 * pkin(5);
t127 = t91 * pkin(5);
t30 = t55 * t57;
t17 = t30 * t59;
t120 = t92 * t57;
t122 = t88 * t57;
t28 = -t91 * t120 + t87 * t122;
t16 = t55 * t28;
t39 = t55 * t60;
t124 = t57 * t73;
t123 = t60 * t57;
t121 = t88 * t60;
t119 = t92 * t88;
t116 = t66 + t75;
t82 = t88 ^ 2;
t84 = t92 ^ 2;
t69 = t82 + t84;
t83 = t90 ^ 2;
t85 = t94 ^ 2;
t115 = t83 + t85;
t114 = qJ(4) * t57;
t113 = qJ(4) * t73;
t112 = qJ(4) + t73;
t111 = -0.2e1 * t123;
t110 = 0.2e1 * t123;
t43 = t89 * t109 - t93 * t68;
t108 = t41 ^ 2 + t43 ^ 2;
t63 = t69 * t135;
t10 = -t20 * t88 + t21;
t11 = t20 * t92 + t125;
t5 = t10 * t92 + t11 * t88;
t105 = -t60 * t71 + t124;
t104 = t135 * t60 + t114;
t102 = 0.2e1 * t41 * t60 - 0.2e1 * t43 * t57;
t98 = -0.2e1 * pkin(3);
t97 = qJ(4) ^ 2;
t72 = -0.2e1 * t119;
t48 = t92 * t60;
t46 = t57 * t119;
t45 = t69 * t71;
t40 = t59 * t60;
t38 = -0.2e1 * t59 * t55;
t35 = (-t82 + t84) * t57;
t33 = pkin(3) * t57 + t103;
t27 = -t57 * pkin(4) + t43;
t23 = t27 * t92;
t22 = t27 * t88;
t14 = (-pkin(5) * t92 - pkin(4)) * t57 + t43;
t13 = t14 * t59;
t12 = t14 * t55;
t9 = -t28 * t59 - t30 * t55;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83, t90 * t136, 0, t85, 0, 0, pkin(1) * t136, -0.2e1 * pkin(1) * t90, 0.2e1 * t115 * pkin(7), t115 * pkin(7) ^ 2 + pkin(1) ^ 2, t54, t111, 0, t52, 0, 0, t57 * t137, t60 * t137, t102, t79 ^ 2 + t108, 0, 0, 0, t54, t111, t52, t102, -0.2e1 * t33 * t57, t33 * t141, t33 ^ 2 + t108, t82 * t52, 0.2e1 * t52 * t119, t88 * t110, t84 * t52, t92 * t110, t54, 0.2e1 * t10 * t60 - 0.2e1 * t27 * t120, -0.2e1 * t11 * t60 + 0.2e1 * t27 * t122, 0.2e1 * (-t10 * t88 + t11 * t92) * t57, t10 ^ 2 + t11 ^ 2 + t27 ^ 2, t30 ^ 2, -0.2e1 * t30 * t28, 0.2e1 * t30 * t60, t28 ^ 2, t28 * t141, t54, 0.2e1 * t14 * t28 + 0.2e1 * t3 * t60, 0.2e1 * t14 * t30 - 0.2e1 * t4 * t60, -0.2e1 * t28 * t4 - 0.2e1 * t3 * t30, t14 ^ 2 + t3 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, 0, t94, 0, -t90 * pkin(7), -t94 * pkin(7), 0, 0, 0, 0, t60, 0, -t57, 0, -t41, -t43 (-t57 * t89 - t60 * t93) * pkin(2) (-t41 * t93 + t43 * t89) * pkin(2), 0, -t60, t57, 0, 0, 0, t60 * t78 - t124, t41, t43, t41 * t78 + t43 * t73, t46, t35, t48, -t46, -t121, 0, -t105 * t92 + t22, t105 * t88 + t23, -t5, t27 * t73 + t5 * t71, t17, t9, t40, t16, -t39, 0, t28 * t66 + t31 * t60 + t12, t30 * t66 - t32 * t60 + t13, -t28 * t32 - t30 * t31 + t133, t14 * t66 + t3 * t31 + t32 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t126, -0.2e1 * t128, 0 (t89 ^ 2 + t93 ^ 2) * pkin(2) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t78, t139, t78 ^ 2 + t142, t84, t72, 0, t82, 0, 0, t88 * t139, t92 * t139, -0.2e1 * t45, t69 * t71 ^ 2 + t142, t53, t38, 0, t51, 0, 0, t55 * t140, t59 * t140, -0.2e1 * t145, t31 ^ 2 + t32 ^ 2 + t66 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, -t57, 0, -t41, -t43, 0, 0, 0, -t60, t57, 0, 0, 0, -pkin(3) * t60 - t114, t41, t43, -pkin(3) * t41 + qJ(4) * t43, t46, t35, t48, -t46, -t121, 0, -t104 * t92 + t22, t104 * t88 + t23, -t5, qJ(4) * t27 - t135 * t5, t17, t9, t40, t16, -t39, 0, t28 * t75 + t36 * t60 + t12, t30 * t75 - t37 * t60 + t13, -t28 * t37 - t30 * t36 + t133, t14 * t75 + t3 * t36 + t37 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t126, -t128, 0, 0, 1, 0, 0, 0, 0, 0, 0, t98 - t126, t96 + t128, -pkin(3) * t78 + t113, t84, t72, 0, t82, 0, 0, t112 * t88, t112 * t92 (-t71 + t135) * t69, -t63 * t71 + t113, t53, t38, 0, t51, 0, 0, t116 * t55, t116 * t59, -t144 - t145, t31 * t36 + t32 * t37 + t66 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t98, t96, pkin(3) ^ 2 + t97, t84, t72, 0, t82, 0, 0, t88 * t96, t92 * t96, 0.2e1 * t63, t135 ^ 2 * t69 + t97, t53, t38, 0, t51, 0, 0, t55 * t138, t59 * t138, -0.2e1 * t144, t36 ^ 2 + t37 ^ 2 + t75 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, t41, 0, 0, 0, 0, 0, 0, t48, -t121, 0, t5, 0, 0, 0, 0, 0, 0, t40, -t39, -t16 - t17, -t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t78, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t45, 0, 0, 0, 0, 0, 0, 0, 0, -t143, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t69, -t63, 0, 0, 0, 0, 0, 0, 0, 0, -t143, t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, t120, t60, t10, -t11, 0, 0, 0, 0, t30, 0, -t28, t60, t127 * t60 + t3, -t130 + (-t7 - t132) * t87 (-t28 * t87 - t30 * t91) * pkin(5) (t3 * t91 + t4 * t87) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t88, 0, t67, -t88 * t71, 0, 0, 0, 0, t59, 0, -t55, 0, t31, -t32, -t34 (t31 * t91 + t32 * t87) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t88, 0, -t80, t88 * t135, 0, 0, 0, 0, t59, 0, -t55, 0, t36, -t37, -t34 (t36 * t91 + t37 * t87) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t88, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t55, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t127, -0.2e1 * t129, 0 (t87 ^ 2 + t91 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, -t28, t60, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t55, 0, t31, -t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t55, 0, t36, -t37, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t55, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t127, -t129, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
