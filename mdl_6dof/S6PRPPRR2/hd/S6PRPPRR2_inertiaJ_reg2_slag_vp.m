% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d5,d6,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPPRR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPPRR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPPRR2_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 21:52:41
% EndTime: 2019-05-04 21:52:44
% DurationCPUTime: 0.94s
% Computational Cost: add. (377->91), mult. (854->149), div. (0->0), fcn. (981->10), ass. (0->70)
t36 = sin(pkin(11));
t37 = sin(pkin(6));
t38 = cos(pkin(11));
t42 = sin(qJ(2));
t45 = cos(qJ(2));
t14 = (-t36 * t45 - t38 * t42) * t37;
t11 = t14 ^ 2;
t64 = t37 * t45;
t65 = t37 * t42;
t12 = t36 * t65 - t38 * t64;
t39 = cos(pkin(6));
t31 = t39 ^ 2;
t80 = t12 ^ 2 + t11 + t31;
t41 = sin(qJ(5));
t44 = cos(qJ(5));
t6 = -t12 * t44 + t39 * t41;
t79 = t6 ^ 2;
t74 = t36 * pkin(2);
t22 = qJ(4) + t74;
t78 = t22 ^ 2;
t77 = 0.2e1 * t22;
t43 = cos(qJ(6));
t76 = 0.2e1 * t43;
t75 = 0.2e1 * t44;
t73 = t38 * pkin(2);
t72 = t41 * pkin(5);
t71 = t44 * pkin(5);
t70 = t6 * t41;
t69 = t6 * t44;
t68 = t14 * t22;
t40 = sin(qJ(6));
t32 = t40 ^ 2;
t67 = t32 * t44;
t24 = -pkin(3) - t73;
t21 = -pkin(8) + t24;
t35 = t44 ^ 2;
t66 = t35 * t21;
t63 = t40 * t43;
t62 = t40 * t44;
t61 = t41 * t21;
t60 = t43 * t41;
t29 = t43 * t44;
t59 = t44 * t21;
t58 = t44 * t41;
t34 = t43 ^ 2;
t57 = t32 + t34;
t33 = t41 ^ 2;
t56 = t33 + t35;
t55 = -0.2e1 * t58;
t53 = t40 * t29;
t52 = t57 * pkin(9);
t51 = t57 * t41;
t50 = -pkin(9) * t41 - t71;
t8 = t12 * t41 + t39 * t44;
t2 = -t14 * t43 - t8 * t40;
t3 = -t14 * t40 + t8 * t43;
t49 = -t2 * t40 + t3 * t43;
t16 = -t44 * pkin(9) + t22 + t72;
t4 = t43 * t16 - t40 * t61;
t5 = t40 * t16 + t21 * t60;
t48 = -t4 * t40 + t5 * t43;
t1 = t8 * t41 - t69;
t28 = t34 * t44;
t27 = t34 * t35;
t26 = t40 * t41;
t25 = t32 * t35;
t19 = t21 ^ 2;
t17 = t35 * t19;
t10 = t56 * t21;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31 + (t42 ^ 2 + t45 ^ 2) * t37 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 ^ 2 + t11 + t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2 ^ 2 + t3 ^ 2 + t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t65, 0, 0, 0, 0, 0, 0, 0, 0, -t12, t14, 0 (-t12 * t38 - t14 * t36) * pkin(2), 0, 0, 0, 0, 0, 0, 0, t12, -t14, t12 * t24 - t68, 0, 0, 0, 0, 0, 0, -t14 * t41, -t14 * t44, -t1, t1 * t21 - t68, 0, 0, 0, 0, 0, 0, t2 * t41 + t6 * t62, t6 * t29 - t3 * t41 (-t2 * t43 - t3 * t40) * t44, t2 * t4 + t3 * t5 - t6 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t73, -0.2e1 * t74, 0 (t36 ^ 2 + t38 ^ 2) * pkin(2) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t24, t77, t24 ^ 2 + t78, t35, t55, 0, t33, 0, 0, t41 * t77, t22 * t75, -0.2e1 * t10, t33 * t19 + t17 + t78, t27, -0.2e1 * t35 * t63, t58 * t76, t25, t40 * t55, t33, 0.2e1 * t4 * t41 - 0.2e1 * t40 * t66, -0.2e1 * t5 * t41 - 0.2e1 * t43 * t66 (-t4 * t43 - t40 * t5) * t75, t4 ^ 2 + t5 ^ 2 + t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 * t44 + t70, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * t44 + t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t48 - t61) * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 + t25 + t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * t41 - t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, -t56, t10, 0, 0, 0, 0, 0, 0, -t56 * t40, -t56 * t43, 0, t48 * t41 + t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t57) * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * t33 + t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t8, 0, 0, 0, 0, 0, 0, 0, 0, -t6 * t43, t6 * t40, t49, -t6 * pkin(5) + t49 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, -t41, 0, t59, -t61, 0, 0, t53, t28 - t67, t26, -t53, t60, 0, t50 * t40 + t43 * t59, -t40 * t59 + t50 * t43, t48, pkin(5) * t59 + t48 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, -t44, 0, 0, 0, 0, 0, 0, 0, 0, -t60, t26, t28 + t67, t44 * t52 - t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t41, 0, 0, 0, 0, 0, 0, 0, 0, t29, -t62, t51, pkin(9) * t51 + t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t32, 0.2e1 * t63, 0, t34, 0, 0, pkin(5) * t76, -0.2e1 * pkin(5) * t40, 0.2e1 * t52, t57 * pkin(9) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t62, t41, t4, -t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, -t29, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, -t60, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, t43, 0, -t40 * pkin(9), -t43 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t7;
