% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:50
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR12_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR12_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR12_inertiaJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 15:06:46
% EndTime: 2019-05-07 15:06:51
% DurationCPUTime: 1.46s
% Computational Cost: add. (2587->206), mult. (6101->399), div. (0->0), fcn. (7197->12), ass. (0->117)
t91 = sin(pkin(12));
t93 = cos(pkin(12));
t96 = sin(qJ(5));
t99 = cos(qJ(5));
t71 = t96 * t91 - t99 * t93;
t84 = -t93 * pkin(4) - pkin(3);
t56 = t71 * pkin(5) + t84;
t139 = 0.2e1 * t56;
t100 = cos(qJ(3));
t92 = sin(pkin(6));
t98 = sin(qJ(2));
t121 = t92 * t98;
t94 = cos(pkin(6));
t97 = sin(qJ(3));
t64 = -t94 * t100 + t97 * t121;
t138 = -0.2e1 * t64;
t137 = 0.2e1 * t64;
t65 = t100 * t121 + t94 * t97;
t136 = -0.2e1 * t65;
t135 = 0.2e1 * t84;
t134 = -0.2e1 * t100;
t133 = 0.2e1 * t100;
t132 = pkin(1) * t98;
t131 = pkin(9) * t91;
t130 = t64 * pkin(5);
t95 = sin(qJ(6));
t129 = t95 * pkin(5);
t85 = t97 * pkin(9);
t128 = cos(qJ(6));
t101 = cos(qJ(2));
t127 = pkin(1) * t101;
t126 = t100 * pkin(5);
t125 = t100 * pkin(9);
t113 = t92 * t101;
t111 = pkin(8) * t113;
t58 = t111 + (pkin(9) + t132) * t94;
t59 = (-pkin(2) * t101 - pkin(9) * t98 - pkin(1)) * t92;
t35 = t100 * t59 - t97 * t58;
t34 = pkin(3) * t113 - t35;
t124 = t34 * t91;
t123 = t34 * t93;
t122 = t91 * t97;
t120 = t93 * t97;
t119 = t94 * t98;
t118 = pkin(10) + qJ(4);
t79 = pkin(8) * t121;
t57 = t79 + (-pkin(2) - t127) * t94;
t32 = t64 * pkin(3) - t65 * qJ(4) + t57;
t36 = t100 * t58 + t97 * t59;
t33 = -qJ(4) * t113 + t36;
t17 = t91 * t32 + t93 * t33;
t74 = -t100 * pkin(3) - t97 * qJ(4) - pkin(2);
t54 = t93 * t125 + t91 * t74;
t73 = pkin(4) * t122 + t85;
t117 = t91 ^ 2 + t93 ^ 2;
t116 = qJ(4) * t64;
t87 = t92 ^ 2;
t115 = t101 * t87;
t114 = t64 * t100;
t112 = 0.2e1 * t113;
t110 = t97 * t113;
t109 = t128 * pkin(5);
t47 = t93 * t113 + t65 * t91;
t48 = -t91 * t113 + t65 * t93;
t27 = t99 * t47 + t96 * t48;
t16 = t93 * t32 - t91 * t33;
t11 = t64 * pkin(4) - t48 * pkin(10) + t16;
t13 = -t47 * pkin(10) + t17;
t7 = t96 * t11 + t99 * t13;
t5 = -t27 * pkin(11) + t7;
t108 = t128 * t5;
t107 = t100 * t113;
t28 = -t96 * t47 + t99 * t48;
t6 = t99 * t11 - t96 * t13;
t4 = -t28 * pkin(11) + t130 + t6;
t1 = t128 * t4 - t95 * t5;
t69 = t93 * t74;
t44 = -pkin(10) * t120 + t69 + (-pkin(4) - t131) * t100;
t49 = -pkin(10) * t122 + t54;
t26 = t96 * t44 + t99 * t49;
t72 = t99 * t91 + t96 * t93;
t60 = t72 * t97;
t22 = -t60 * pkin(11) + t26;
t106 = t128 * t22;
t25 = t99 * t44 - t96 * t49;
t61 = t71 * t97;
t19 = t61 * pkin(11) - t126 + t25;
t8 = t128 * t19 - t95 * t22;
t75 = t118 * t91;
t76 = t118 * t93;
t50 = -t99 * t75 - t96 * t76;
t105 = -t16 * t91 + t17 * t93;
t53 = -t91 * t125 + t69;
t104 = -t53 * t91 + t54 * t93;
t51 = -t96 * t75 + t99 * t76;
t103 = -pkin(3) * t97 + qJ(4) * t100;
t23 = t47 * pkin(4) + t34;
t90 = t100 ^ 2;
t89 = t97 ^ 2;
t67 = pkin(1) * t119 + t111;
t66 = t94 * t127 - t79;
t63 = t64 ^ 2;
t46 = t60 * pkin(5) + t73;
t43 = t128 * t72 - t95 * t71;
t42 = t128 * t71 + t95 * t72;
t40 = -t71 * pkin(11) + t51;
t39 = -t72 * pkin(11) + t50;
t38 = -t128 * t61 - t95 * t60;
t37 = t128 * t60 - t95 * t61;
t21 = t128 * t40 + t95 * t39;
t20 = t128 * t39 - t95 * t40;
t15 = t128 * t28 - t95 * t27;
t14 = t128 * t27 + t95 * t28;
t12 = t27 * pkin(5) + t23;
t9 = t95 * t19 + t106;
t2 = t95 * t4 + t108;
t3 = [1, 0, 0, t87 * t98 ^ 2, 0.2e1 * t98 * t115, 0.2e1 * t92 * t119, t94 * t112, t94 ^ 2, 0.2e1 * pkin(1) * t115 + 0.2e1 * t66 * t94, -0.2e1 * t87 * t132 - 0.2e1 * t67 * t94, t65 ^ 2, t64 * t136, t113 * t136, t64 * t112, t87 * t101 ^ 2, -0.2e1 * t35 * t113 + 0.2e1 * t57 * t64, 0.2e1 * t36 * t113 + 0.2e1 * t57 * t65, 0.2e1 * t16 * t64 + 0.2e1 * t34 * t47, -0.2e1 * t17 * t64 + 0.2e1 * t34 * t48, -0.2e1 * t16 * t48 - 0.2e1 * t17 * t47, t16 ^ 2 + t17 ^ 2 + t34 ^ 2, t28 ^ 2, -0.2e1 * t28 * t27, t28 * t137, t27 * t138, t63, 0.2e1 * t23 * t27 + 0.2e1 * t6 * t64, 0.2e1 * t23 * t28 - 0.2e1 * t7 * t64, t15 ^ 2, -0.2e1 * t15 * t14, t15 * t137, t14 * t138, t63, 0.2e1 * t1 * t64 + 0.2e1 * t12 * t14, 0.2e1 * t12 * t15 - 0.2e1 * t2 * t64; 0, 0, 0, 0, 0, t121, t113, t94, t66, -t67, t65 * t97, t65 * t100 - t97 * t64, -t110, -t107, 0, -pkin(2) * t64 + pkin(9) * t110 - t57 * t100, -pkin(2) * t65 + pkin(9) * t107 + t57 * t97, -t16 * t100 + t53 * t64 + (pkin(9) * t47 + t124) * t97, t17 * t100 - t54 * t64 + (pkin(9) * t48 + t123) * t97, -t54 * t47 - t53 * t48 + (-t16 * t93 - t17 * t91) * t97, t16 * t53 + t17 * t54 + t34 * t85, -t28 * t61, t61 * t27 - t28 * t60, -t28 * t100 - t61 * t64, t27 * t100 - t60 * t64, -t114, -t6 * t100 + t23 * t60 + t25 * t64 + t73 * t27, t7 * t100 - t23 * t61 - t26 * t64 + t73 * t28, t15 * t38, -t38 * t14 - t15 * t37, -t15 * t100 + t38 * t64, t14 * t100 - t37 * t64, -t114, -t1 * t100 + t12 * t37 + t46 * t14 + t8 * t64, t2 * t100 + t12 * t38 + t46 * t15 - t9 * t64; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t89, t97 * t133, 0, 0, 0, pkin(2) * t133, -0.2e1 * pkin(2) * t97, -0.2e1 * t53 * t100 + 0.2e1 * t89 * t131, 0.2e1 * t89 * pkin(9) * t93 + 0.2e1 * t54 * t100, 0.2e1 * (-t53 * t93 - t54 * t91) * t97, t89 * pkin(9) ^ 2 + t53 ^ 2 + t54 ^ 2, t61 ^ 2, 0.2e1 * t61 * t60, -t61 * t134, t60 * t133, t90, -0.2e1 * t25 * t100 + 0.2e1 * t73 * t60, 0.2e1 * t26 * t100 - 0.2e1 * t73 * t61, t38 ^ 2, -0.2e1 * t38 * t37, t38 * t134, t37 * t133, t90, -0.2e1 * t8 * t100 + 0.2e1 * t46 * t37, 0.2e1 * t9 * t100 + 0.2e1 * t46 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t64, -t113, t35, -t36, -pkin(3) * t47 - t91 * t116 - t123, -pkin(3) * t48 - t93 * t116 + t124 (-t47 * t93 + t48 * t91) * qJ(4) + t105, -t34 * pkin(3) + t105 * qJ(4), t28 * t72, -t72 * t27 - t28 * t71, t72 * t64, -t71 * t64, 0, t23 * t71 + t84 * t27 + t50 * t64, t23 * t72 + t84 * t28 - t51 * t64, t15 * t43, -t43 * t14 - t15 * t42, t43 * t64, -t42 * t64, 0, t12 * t42 + t56 * t14 + t20 * t64, t12 * t43 + t56 * t15 - t21 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t100, 0, -t85, -t125, -pkin(9) * t120 + t103 * t91, pkin(9) * t122 + t103 * t93, t104, -pkin(3) * t85 + t104 * qJ(4), -t61 * t72, -t72 * t60 + t61 * t71, -t72 * t100, t71 * t100, 0, -t50 * t100 + t84 * t60 + t73 * t71, t51 * t100 - t84 * t61 + t73 * t72, t38 * t43, -t43 * t37 - t38 * t42, -t43 * t100, t42 * t100, 0, -t20 * t100 + t56 * t37 + t46 * t42, t21 * t100 + t56 * t38 + t46 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(3) * t93, -0.2e1 * pkin(3) * t91, 0.2e1 * t117 * qJ(4), t117 * qJ(4) ^ 2 + pkin(3) ^ 2, t72 ^ 2, -0.2e1 * t72 * t71, 0, 0, 0, t71 * t135, t72 * t135, t43 ^ 2, -0.2e1 * t43 * t42, 0, 0, 0, t42 * t139, t43 * t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, t48, 0, t34, 0, 0, 0, 0, 0, t27, t28, 0, 0, 0, 0, 0, t14, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, t120, 0, t85, 0, 0, 0, 0, 0, t60, -t61, 0, 0, 0, 0, 0, t37, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, t91, 0, -pkin(3), 0, 0, 0, 0, 0, t71, t72, 0, 0, 0, 0, 0, t42, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t27, t64, t6, -t7, 0, 0, t15, -t14, t64, t109 * t64 + t1, -t108 + (-t4 - t130) * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, -t60, -t100, t25, -t26, 0, 0, t38, -t37, -t100, -t100 * t109 + t8, -t106 + (-t19 + t126) * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, -t71, 0, t50, -t51, 0, 0, t43, -t42, 0, t20, -t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t109, -0.2e1 * t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, -t14, t64, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, -t37, -t100, t8, -t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t42, 0, t20, -t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t109, -t129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t3;
