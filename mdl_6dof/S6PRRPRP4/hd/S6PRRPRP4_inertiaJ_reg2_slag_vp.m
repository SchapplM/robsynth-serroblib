% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:44
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRP4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRPRP4_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:04:30
% EndTime: 2019-05-05 04:04:34
% DurationCPUTime: 1.33s
% Computational Cost: add. (489->113), mult. (1026->182), div. (0->0), fcn. (1118->8), ass. (0->88)
t63 = sin(qJ(3));
t56 = t63 ^ 2;
t66 = cos(qJ(3));
t58 = t66 ^ 2;
t100 = t56 + t58;
t61 = cos(pkin(6));
t60 = sin(pkin(6));
t64 = sin(qJ(2));
t92 = t60 * t64;
t22 = t61 * t63 + t66 * t92;
t18 = t22 ^ 2;
t20 = -t61 * t66 + t63 * t92;
t54 = t60 ^ 2;
t67 = cos(qJ(2));
t42 = t54 * t67 ^ 2;
t99 = t20 ^ 2 + t18 + t42;
t62 = sin(qJ(5));
t44 = t62 * pkin(5) + qJ(4);
t98 = 0.2e1 * t44;
t97 = -0.2e1 * t63;
t96 = 0.2e1 * t66;
t95 = 0.2e1 * qJ(4);
t68 = -pkin(3) - pkin(9);
t94 = t63 * pkin(5);
t65 = cos(qJ(5));
t93 = t65 * pkin(5);
t91 = t60 * t67;
t50 = t63 * pkin(8);
t35 = t63 * pkin(4) + t50;
t90 = t62 * t35;
t89 = t62 * t63;
t88 = t62 * t66;
t87 = t63 * t66;
t86 = t65 * t62;
t85 = t65 * t66;
t84 = t100 * pkin(8) ^ 2;
t52 = t66 * pkin(8);
t36 = t66 * pkin(4) + t52;
t55 = t62 ^ 2;
t57 = t65 ^ 2;
t38 = t55 + t57;
t83 = qJ(4) * t66;
t82 = qJ(6) * t66;
t81 = t22 * qJ(4);
t80 = -0.2e1 * t87;
t78 = t63 * t91;
t77 = t66 * t91;
t76 = -t63 * qJ(4) - pkin(2);
t24 = t68 * t66 + t76;
t9 = -t62 * t24 + t65 * t35;
t75 = t62 * t82 + t9;
t10 = t65 * t24 + t90;
t3 = t10 * t62 + t9 * t65;
t74 = -pkin(3) * t63 + t83;
t12 = t20 * t65 + t62 * t91;
t13 = -t20 * t62 + t65 * t91;
t4 = t12 * t65 - t13 * t62;
t73 = t20 * t63 + t22 * t66;
t72 = t63 * t68 + t83;
t71 = t73 * pkin(8);
t69 = qJ(4) ^ 2;
t48 = t65 * t68;
t47 = t65 * t63;
t46 = t57 * t58;
t45 = t55 * t58;
t41 = -0.2e1 * t86;
t40 = 0.2e1 * t87;
t37 = t62 * t85;
t34 = t65 * t80;
t33 = t62 * t80;
t32 = 0.2e1 * t58 * t86;
t31 = -t66 * pkin(3) + t76;
t30 = -t65 * qJ(6) + t48;
t29 = (-qJ(6) + t68) * t62;
t28 = 0.2e1 * t100 * pkin(8);
t27 = t38 * t68;
t25 = (t55 - t57) * t66;
t19 = pkin(5) * t85 + t36;
t17 = t22 * t65;
t16 = t22 * t62;
t11 = t29 * t62 + t30 * t65;
t8 = t90 + (t24 - t82) * t65;
t7 = t75 + t94;
t6 = t13 * t63 - t22 * t88;
t5 = t12 * t63 + t22 * t85;
t2 = (t12 * t62 + t13 * t65) * t66;
t1 = t12 ^ 2 + t13 ^ 2 + t18;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54 * t64 ^ 2 + t61 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t92, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t78, t73, pkin(2) * t91 + t71, 0, 0, 0, 0, 0, 0, t73, -t77, t78, -t31 * t91 + t71, 0, 0, 0, 0, 0, 0, t5, t6, t2, -t13 * t10 + t12 * t9 + t22 * t36, 0, 0, 0, 0, 0, 0, t5, t6, t2, t12 * t7 - t13 * t8 + t22 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t56, t40, 0, t58, 0, 0, pkin(2) * t96, pkin(2) * t97, t28, pkin(2) ^ 2 + t84, 0, 0, 0, t56, t40, t58, t28, t31 * t96, t31 * t97, t31 ^ 2 + t84, t45, t32, t33, t46, t34, t56, 0.2e1 * t36 * t85 + 0.2e1 * t9 * t63, -0.2e1 * t10 * t63 - 0.2e1 * t36 * t88 (-t10 * t65 + t62 * t9) * t96, t10 ^ 2 + t36 ^ 2 + t9 ^ 2, t45, t32, t33, t46, t34, t56, 0.2e1 * t19 * t85 + 0.2e1 * t7 * t63, -0.2e1 * t19 * t88 - 0.2e1 * t8 * t63 (t62 * t7 - t65 * t8) * t96, t19 ^ 2 + t7 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, -t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, t22, -t20 * pkin(3) + t81, 0, 0, 0, 0, 0, 0, t16, t17, -t4, t4 * t68 + t81, 0, 0, 0, 0, 0, 0, t16, t17, -t4, t12 * t30 - t13 * t29 + t22 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t66, 0, -t50, -t52, 0, 0, 0, -t63, -t66, 0, 0, 0, t74, t50, t52, t74 * pkin(8), -t37, t25, t47, t37, -t89, 0, t36 * t62 + t72 * t65, t36 * t65 - t72 * t62, -t3, t36 * qJ(4) + t3 * t68, -t37, t25, t47, t37, -t89, 0, t19 * t62 + t30 * t63 + t44 * t85, t19 * t65 - t29 * t63 - t44 * t88 (-t29 * t66 - t7) * t65 + (t30 * t66 - t8) * t62, t19 * t44 + t8 * t29 + t7 * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t95, pkin(3) ^ 2 + t69, t57, t41, 0, t55, 0, 0, t62 * t95, t65 * t95, -0.2e1 * t27, t38 * t68 ^ 2 + t69, t57, t41, 0, t55, 0, 0, t62 * t98, t65 * t98, -0.2e1 * t11, t29 ^ 2 + t30 ^ 2 + t44 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, 0, t50, 0, 0, 0, 0, 0, 0, t47, -t89, 0, t3, 0, 0, 0, 0, 0, 0, t47, -t89, 0, t8 * t62 + t7 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t38, t27, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, t12, t13, 0, t12 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, 0, -t85, t63, t9, -t10, 0, 0, 0, 0, -t88, 0, -t85, t63, t75 + 0.2e1 * t94, -t8, pkin(5) * t88, t7 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, -t62, 0, t48, -t62 * t68, 0, 0, 0, 0, t65, 0, -t62, 0, t30, -t29, -t93, t30 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t62, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t62, 0, t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, -t88, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, t65, 0, t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t14;
