% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR2_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:24:52
% EndTime: 2019-05-05 00:24:57
% DurationCPUTime: 1.36s
% Computational Cost: add. (974->161), mult. (2240->276), div. (0->0), fcn. (2637->12), ass. (0->93)
t53 = sin(pkin(12));
t54 = sin(pkin(6));
t55 = cos(pkin(12));
t60 = sin(qJ(2));
t64 = cos(qJ(2));
t21 = (t53 * t64 + t55 * t60) * t54;
t56 = cos(pkin(6));
t59 = sin(qJ(4));
t63 = cos(qJ(4));
t14 = t21 * t59 - t56 * t63;
t13 = t14 ^ 2;
t85 = t54 * t64;
t86 = t54 * t60;
t19 = t53 * t86 - t55 * t85;
t105 = t19 ^ 2;
t62 = cos(qJ(5));
t46 = -pkin(5) * t62 - pkin(4);
t104 = 0.2e1 * t46;
t103 = 0.2e1 * t59;
t102 = -0.2e1 * t63;
t101 = -pkin(10) - pkin(9);
t100 = pkin(4) * t62;
t99 = t53 * pkin(2);
t98 = t55 * pkin(2);
t57 = sin(qJ(6));
t97 = t57 * pkin(5);
t61 = cos(qJ(6));
t96 = t61 * pkin(5);
t41 = -pkin(3) - t98;
t94 = t63 * pkin(4);
t29 = -pkin(9) * t59 + t41 - t94;
t58 = sin(qJ(5));
t40 = pkin(8) + t99;
t77 = t63 * t40;
t72 = t62 * t77;
t9 = t72 + (-pkin(10) * t59 + t29) * t58;
t95 = t61 * t9;
t93 = t63 * pkin(5);
t92 = t14 * t63;
t32 = t57 * t62 + t58 * t61;
t24 = t32 * t59;
t91 = t32 * t24;
t90 = t32 * t63;
t89 = t40 * t58;
t49 = t58 ^ 2;
t88 = t49 * t59;
t50 = t59 ^ 2;
t87 = t50 * t40;
t84 = t58 * t59;
t83 = t58 * t62;
t82 = t58 * t63;
t81 = t59 * t40;
t80 = t62 * t59;
t79 = t62 * t63;
t30 = t57 * t58 - t61 * t62;
t78 = t63 * t30;
t51 = t62 ^ 2;
t76 = t49 + t51;
t52 = t63 ^ 2;
t75 = t50 + t52;
t74 = t63 * t103;
t73 = t58 * t80;
t27 = t62 * t29;
t8 = -pkin(10) * t80 + t27 + (-pkin(5) - t89) * t63;
t3 = -t57 * t9 + t61 * t8;
t71 = t76 * pkin(9);
t16 = t21 * t63 + t56 * t59;
t5 = -t16 * t58 + t19 * t62;
t6 = t16 * t62 + t19 * t58;
t70 = -t5 * t58 + t6 * t62;
t11 = -t58 * t77 + t27;
t12 = t29 * t58 + t72;
t69 = -t11 * t58 + t12 * t62;
t68 = t14 * t59 + t16 * t63;
t48 = t56 ^ 2;
t45 = t51 * t59;
t44 = t51 * t50;
t42 = t49 * t50;
t38 = t40 ^ 2;
t36 = t101 * t62;
t35 = t101 * t58;
t33 = t50 * t38;
t28 = (pkin(5) * t58 + t40) * t59;
t26 = -t57 * t84 + t61 * t80;
t23 = t26 ^ 2;
t22 = t24 ^ 2;
t18 = t35 * t57 - t36 * t61;
t17 = t35 * t61 + t36 * t57;
t10 = t26 * t30;
t4 = t57 * t8 + t95;
t2 = t5 * t57 + t6 * t61;
t1 = t5 * t61 - t57 * t6;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48 + (t60 ^ 2 + t64 ^ 2) * t54 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21 ^ 2 + t105 + t48, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 ^ 2 + t105 + t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 ^ 2 + t6 ^ 2 + t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 ^ 2 + t2 ^ 2 + t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, -t86, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t21, 0 (-t19 * t55 + t21 * t53) * pkin(2), 0, 0, 0, 0, 0, 0, -t19 * t63, t19 * t59, t68, t19 * t41 + t40 * t68, 0, 0, 0, 0, 0, 0, t14 * t84 - t5 * t63, t14 * t80 + t6 * t63 (-t5 * t62 - t58 * t6) * t59, t11 * t5 + t12 * t6 + t14 * t81, 0, 0, 0, 0, 0, 0, -t1 * t63 + t14 * t24, t14 * t26 + t2 * t63, -t1 * t26 - t2 * t24, t1 * t3 + t14 * t28 + t2 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t98, -0.2e1 * t99, 0 (t53 ^ 2 + t55 ^ 2) * pkin(2) ^ 2, t50, t74, 0, t52, 0, 0, t41 * t102, t41 * t103, 0.2e1 * t75 * t40, t38 * t52 + t41 ^ 2 + t33, t44, -0.2e1 * t50 * t83, -0.2e1 * t59 * t79, t42, t58 * t74, t52, -0.2e1 * t11 * t63 + 0.2e1 * t58 * t87, 0.2e1 * t12 * t63 + 0.2e1 * t62 * t87 (-t11 * t62 - t12 * t58) * t103, t11 ^ 2 + t12 ^ 2 + t33, t23, -0.2e1 * t26 * t24, t26 * t102, t22, -t24 * t102, t52, 0.2e1 * t24 * t28 - 0.2e1 * t3 * t63, 0.2e1 * t26 * t28 + 0.2e1 * t4 * t63, -0.2e1 * t24 * t4 - 0.2e1 * t26 * t3, t28 ^ 2 + t3 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 * t59 - t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 * t70 - t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t24 + t2 * t26 - t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t69 - t77) * t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24 * t3 + t26 * t4 - t28 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44 + t42 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23 + t22 + t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t16, 0, 0, 0, 0, 0, 0, 0, 0, -t14 * t62, t14 * t58, t70, -t14 * pkin(4) + pkin(9) * t70, 0, 0, 0, 0, 0, 0, t14 * t30, t14 * t32, -t1 * t32 - t2 * t30, t1 * t17 + t14 * t46 + t18 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, t63, 0, -t81, -t77, 0, 0, t73, t45 - t88, -t82, -t73, -t79, 0, -t40 * t80 + (-pkin(4) * t59 + pkin(9) * t63) * t58, pkin(9) * t79 + (t89 - t100) * t59, t69, -pkin(4) * t81 + pkin(9) * t69, t26 * t32, -t10 - t91, -t90, t24 * t30, t78, 0, -t17 * t63 + t24 * t46 + t28 * t30, t18 * t63 + t26 * t46 + t28 * t32, -t17 * t26 - t18 * t24 - t3 * t32 - t30 * t4, t17 * t3 + t18 * t4 + t28 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, -t59, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t82, t45 + t88, t59 * t71 + t94, 0, 0, 0, 0, 0, 0, -t78, -t90, -t10 + t91, -t17 * t24 + t18 * t26 - t46 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t49, 0.2e1 * t83, 0, t51, 0, 0, 0.2e1 * t100, -0.2e1 * pkin(4) * t58, 0.2e1 * t71, pkin(9) ^ 2 * t76 + pkin(4) ^ 2, t32 ^ 2, -0.2e1 * t32 * t30, 0, t30 ^ 2, 0, 0, t30 * t104, t32 * t104, -0.2e1 * t17 * t32 - 0.2e1 * t18 * t30, t17 ^ 2 + t18 ^ 2 + t46 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0 (t1 * t61 + t2 * t57) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t84, -t63, t11, -t12, 0, 0, 0, 0, t26, 0, -t24, -t63, -t61 * t93 + t3, -t95 + (-t8 + t93) * t57 (-t24 * t57 - t26 * t61) * pkin(5) (t3 * t61 + t4 * t57) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t84, -t80, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t26, 0 (-t24 * t61 + t26 * t57) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t62, 0, -t58 * pkin(9), -t62 * pkin(9), 0, 0, 0, 0, t32, 0, -t30, 0, t17, -t18 (-t30 * t57 - t32 * t61) * pkin(5) (t17 * t61 + t18 * t57) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t96, -0.2e1 * t97, 0 (t57 ^ 2 + t61 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t24, -t63, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t26, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t30, 0, t17, -t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t96, -t97, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t7;
