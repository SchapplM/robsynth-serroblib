% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP10_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRRRP10_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:58:03
% EndTime: 2019-05-06 01:58:08
% DurationCPUTime: 1.90s
% Computational Cost: add. (1082->165), mult. (2081->281), div. (0->0), fcn. (2224->6), ass. (0->95)
t62 = sin(qJ(5));
t63 = sin(qJ(4));
t65 = cos(qJ(5));
t66 = cos(qJ(4));
t39 = t62 * t66 + t63 * t65;
t67 = cos(qJ(3));
t95 = t67 * t39;
t119 = t95 ^ 2;
t37 = t62 * t63 - t65 * t66;
t118 = t37 ^ 2;
t53 = -pkin(4) * t66 - pkin(3);
t117 = 0.2e1 * t53;
t116 = 0.2e1 * t66;
t115 = 2 * qJ(2);
t114 = -pkin(9) - pkin(8);
t56 = t62 * pkin(4);
t64 = sin(qJ(3));
t113 = t64 * pkin(5);
t112 = t65 * pkin(4);
t111 = t67 * pkin(3);
t68 = -pkin(1) - pkin(7);
t102 = t63 * t68;
t42 = pkin(3) * t64 - pkin(8) * t67 + qJ(2);
t34 = t66 * t42;
t50 = t66 * t67;
t13 = -pkin(9) * t50 + t34 + (pkin(4) - t102) * t64;
t97 = t66 * t68;
t89 = t64 * t97;
t17 = t89 + (-pkin(9) * t67 + t42) * t63;
t4 = t13 * t62 + t17 * t65;
t43 = t114 * t66;
t87 = t114 * t63;
t19 = -t43 * t62 - t65 * t87;
t110 = t19 * t64;
t21 = -t65 * t43 + t62 * t87;
t109 = t21 * t64;
t108 = t95 * t37;
t103 = t63 * t67;
t32 = -t103 * t62 + t50 * t65;
t107 = t32 * t95;
t106 = t39 * t37;
t33 = t39 * t64;
t105 = t63 * t64;
t104 = t63 * t66;
t101 = t64 * t95;
t100 = t64 * t37;
t99 = t64 * t68;
t98 = t66 * t64;
t96 = t67 * t37;
t94 = t67 * t64;
t93 = t67 * t68;
t57 = t63 ^ 2;
t59 = t66 ^ 2;
t92 = t57 + t59;
t58 = t64 ^ 2;
t60 = t67 ^ 2;
t46 = t58 + t60;
t91 = -0.2e1 * t94;
t90 = t19 ^ 2 + t21 ^ 2;
t55 = t64 * qJ(6);
t1 = t55 + t4;
t88 = t63 * t50;
t31 = -t105 * t62 + t65 * t98;
t86 = t19 * t33 + t21 * t31;
t85 = t19 * t32 - t21 * t95;
t84 = t92 * t64;
t83 = -t13 * t65 + t62 * t17;
t82 = -t31 * t95 + t32 * t33;
t81 = -t31 * t37 + t33 * t39;
t35 = pkin(4) * t103 - t93;
t80 = t31 ^ 2 + t33 ^ 2 + t60;
t79 = -pkin(8) * t64 - t111;
t22 = -t63 * t99 + t34;
t23 = t42 * t63 + t89;
t78 = -t22 * t63 + t23 * t66;
t77 = -t33 * t64 - t67 * t95;
t76 = -t32 * t37 - t39 * t95;
t75 = t31 * t64 + t32 * t67;
t74 = 0.2e1 * t19 * t39 - 0.2e1 * t21 * t37;
t71 = 0.2e1 * pkin(5);
t70 = qJ(2) ^ 2;
t69 = 0.2e1 * qJ(6);
t61 = t68 ^ 2;
t54 = t60 * t61;
t51 = pkin(5) + t112;
t48 = t56 + qJ(6);
t41 = t46 * t68;
t36 = t39 ^ 2;
t26 = t32 ^ 2;
t24 = 0.2e1 * t32 * t64;
t16 = t32 * t39;
t12 = pkin(5) * t37 - qJ(6) * t39 + t53;
t5 = pkin(5) * t95 - qJ(6) * t32 + t35;
t2 = t83 - t113;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t115, pkin(1) ^ 2 + t70, t60, t91, 0, t58, 0, 0, t64 * t115, t67 * t115, -0.2e1 * t41, t58 * t61 + t54 + t70, t59 * t60, -0.2e1 * t60 * t104, t94 * t116, t57 * t60, t63 * t91, t58, -0.2e1 * t102 * t60 + 0.2e1 * t22 * t64, -0.2e1 * t23 * t64 - 0.2e1 * t60 * t97, 0.2e1 * (-t22 * t66 - t23 * t63) * t67, t22 ^ 2 + t23 ^ 2 + t54, t26, -0.2e1 * t107, t24, t119, -0.2e1 * t101, t58, 0.2e1 * t35 * t95 - 0.2e1 * t64 * t83, 0.2e1 * t32 * t35 - 0.2e1 * t4 * t64, 0.2e1 * t32 * t83 - 0.2e1 * t4 * t95, t35 ^ 2 + t4 ^ 2 + t83 ^ 2, t26, t24, 0.2e1 * t107, t58, 0.2e1 * t101, t119, -0.2e1 * t2 * t64 + 0.2e1 * t5 * t95, -0.2e1 * t1 * t95 + 0.2e1 * t2 * t32, 0.2e1 * t1 * t64 - 0.2e1 * t32 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t46, t41, 0, 0, 0, 0, 0, 0, -t46 * t63, -t46 * t66, 0, t60 * t68 + t64 * t78, 0, 0, 0, 0, 0, 0, t77, -t75, t82, t31 * t4 + t33 * t83 - t35 * t67, 0, 0, 0, 0, 0, 0, t77, t82, t75, t1 * t31 + t2 * t33 - t5 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 * t92 + t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, -t64, 0, t93, -t99, 0, 0, t88 (-t57 + t59) * t67, t105, -t88, t98, 0, t63 * t79 + t66 * t93, -t63 * t93 + t66 * t79, t78, pkin(3) * t93 + pkin(8) * t78, t16, t76, t33, t108, -t100, 0, t35 * t37 + t53 * t95 - t110, t32 * t53 + t35 * t39 - t109, -t37 * t4 + t39 * t83 + t85, t19 * t83 + t21 * t4 + t35 * t53, t16, t33, -t76, 0, t100, t108, t12 * t95 + t37 * t5 - t110, -t1 * t37 + t2 * t39 + t85, -t12 * t32 - t39 * t5 + t109, t1 * t21 + t12 * t5 + t19 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t64, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t103, t84, pkin(8) * t84 + t111, 0, 0, 0, 0, 0, 0, -t96, -t95, t81, -t53 * t67 + t86, 0, 0, 0, 0, 0, 0, -t96, t81, t95, -t12 * t67 + t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, 0.2e1 * t104, 0, t59, 0, 0, pkin(3) * t116, -0.2e1 * pkin(3) * t63, 0.2e1 * t92 * pkin(8), pkin(8) ^ 2 * t92 + pkin(3) ^ 2, t36, -0.2e1 * t106, 0, t118, 0, 0, t37 * t117, t39 * t117, t74, t53 ^ 2 + t90, t36, 0, 0.2e1 * t106, 0, 0, t118, 0.2e1 * t12 * t37, t74, -0.2e1 * t12 * t39, t12 ^ 2 + t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, -t103, t64, t22, -t23, 0, 0, 0, 0, t32, 0, -t95, t64, t112 * t64 - t83, -t56 * t64 - t4 (-t32 * t65 - t62 * t95) * pkin(4) (t4 * t62 - t65 * t83) * pkin(4), 0, t32, 0, t64, t95, 0 (pkin(5) + t51) * t64 - t83, -t32 * t51 - t48 * t95, t48 * t64 + t1, t1 * t48 - t2 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t105, -t98, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -t31, 0 (t31 * t62 - t33 * t65) * pkin(4), 0, 0, 0, 0, 0, 0, -t33, 0, t31, t31 * t48 - t33 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t66, 0, -t63 * pkin(8), -t66 * pkin(8), 0, 0, 0, 0, t39, 0, -t37, 0, -t19, -t21 (-t37 * t62 - t39 * t65) * pkin(4) (-t19 * t65 + t21 * t62) * pkin(4), 0, t39, 0, 0, t37, 0, -t19, -t37 * t48 - t39 * t51, t21, -t19 * t51 + t21 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t112, -0.2e1 * t56, 0 (t62 ^ 2 + t65 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t51, 0, 0.2e1 * t48, t48 ^ 2 + t51 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t95, t64, -t83, -t4, 0, 0, 0, t32, 0, t64, t95, 0, -t83 + 0.2e1 * t113, -pkin(5) * t32 - qJ(6) * t95, 0.2e1 * t55 + t4, -pkin(5) * t2 + qJ(6) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -t31, 0, 0, 0, 0, 0, 0, 0, 0, -t33, 0, t31, -pkin(5) * t33 + qJ(6) * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, -t37, 0, -t19, -t21, 0, 0, 0, t39, 0, 0, t37, 0, -t19, -pkin(5) * t39 - qJ(6) * t37, t21, -pkin(5) * t19 + qJ(6) * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t112, -t56, 0, 0, 0, 0, 0, 1, 0, 0, t71 + t112, 0, t69 + t56, pkin(5) * t51 + qJ(6) * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t71, 0, t69, pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, t32, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
