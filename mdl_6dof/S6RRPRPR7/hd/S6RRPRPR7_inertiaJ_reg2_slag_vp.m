% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d6,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRPR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPR7_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 14:45:45
% EndTime: 2019-05-06 14:45:50
% DurationCPUTime: 1.74s
% Computational Cost: add. (1512->132), mult. (2593->234), div. (0->0), fcn. (3009->8), ass. (0->86)
t68 = sin(qJ(2));
t61 = t68 ^ 2;
t71 = cos(qJ(2));
t63 = t71 ^ 2;
t111 = t61 + t63;
t67 = sin(qJ(4));
t70 = cos(qJ(4));
t37 = -t68 * t67 - t71 * t70;
t38 = -t71 * t67 + t68 * t70;
t64 = sin(pkin(10));
t65 = cos(pkin(10));
t17 = t64 * t37 + t65 * t38;
t110 = -0.2e1 * t17;
t102 = pkin(7) - pkin(8);
t82 = t102 * t71;
t83 = t102 * t68;
t27 = t67 * t83 + t70 * t82;
t10 = t37 * qJ(5) + t27;
t25 = t67 * t82 - t70 * t83;
t74 = -t38 * qJ(5) - t25;
t5 = t64 * t10 - t65 * t74;
t109 = t5 ^ 2;
t15 = -t65 * t37 + t64 * t38;
t108 = t15 ^ 2;
t34 = t64 * t67 - t65 * t70;
t107 = t34 ^ 2;
t44 = -t71 * pkin(2) - t68 * qJ(3) - pkin(1);
t32 = t71 * pkin(3) - t44;
t24 = -t37 * pkin(4) + t32;
t106 = 0.2e1 * t24;
t105 = 0.2e1 * t38;
t104 = -0.2e1 * t68;
t103 = -pkin(2) - pkin(3);
t101 = t5 * t34;
t66 = sin(qJ(6));
t100 = t5 * t66;
t69 = cos(qJ(6));
t99 = t5 * t69;
t98 = t65 * pkin(4);
t97 = t68 * pkin(7);
t96 = t71 * pkin(7);
t95 = t34 * t66;
t94 = t34 * t69;
t93 = t66 * t15;
t92 = t66 * t17;
t91 = t66 * t69;
t90 = t68 * t71;
t89 = t69 * t17;
t43 = t70 * qJ(3) + t67 * t103;
t41 = t67 * qJ(3) - t70 * t103;
t80 = -pkin(4) - t41;
t21 = t64 * t43 - t65 * t80;
t19 = pkin(5) + t21;
t49 = -pkin(5) - t98;
t88 = t19 - t49;
t23 = t65 * t43 + t64 * t80;
t87 = t111 * pkin(7) ^ 2;
t60 = t66 ^ 2;
t62 = t69 ^ 2;
t86 = t60 + t62;
t85 = t15 * t110;
t84 = -0.2e1 * t91;
t36 = t64 * t70 + t65 * t67;
t13 = t86 * t36;
t54 = t64 * pkin(4);
t48 = t54 + pkin(9);
t81 = t86 * t48;
t4 = t15 * pkin(5) - t17 * pkin(9) + t24;
t7 = t65 * t10 + t64 * t74;
t2 = t69 * t4 - t66 * t7;
t3 = t66 * t4 + t69 * t7;
t79 = t2 * t69 + t3 * t66;
t1 = -t2 * t66 + t3 * t69;
t78 = -t68 * pkin(2) + t71 * qJ(3);
t20 = -pkin(9) + t23;
t77 = -t15 * t20 + t17 * t19;
t76 = -t36 * t15 + t34 * t17;
t75 = -t15 * t48 + t17 * t49;
t46 = 0.2e1 * t91;
t40 = 0.2e1 * t111 * pkin(7);
t33 = t36 ^ 2;
t14 = t17 ^ 2;
t12 = t69 * t15;
t11 = t66 * t89;
t8 = (t60 - t62) * t17;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, 0.2e1 * t90, 0, t63, 0, 0, 0.2e1 * pkin(1) * t71, pkin(1) * t104, t40, pkin(1) ^ 2 + t87, t61, 0, -0.2e1 * t90, 0, 0, t63, -0.2e1 * t44 * t71, t40, t44 * t104, t44 ^ 2 + t87, t38 ^ 2, t37 * t105, 0, t37 ^ 2, 0, 0, -0.2e1 * t32 * t37, t32 * t105, 0.2e1 * t25 * t38 + 0.2e1 * t27 * t37, t25 ^ 2 + t27 ^ 2 + t32 ^ 2, t14, t85, 0, t108, 0, 0, t15 * t106, t17 * t106, -0.2e1 * t7 * t15 + 0.2e1 * t5 * t17, t24 ^ 2 + t7 ^ 2 + t109, t62 * t14, t14 * t84, 0.2e1 * t15 * t89, t60 * t14, t66 * t85, t108, 0.2e1 * t2 * t15 + 0.2e1 * t5 * t92, -0.2e1 * t3 * t15 + 0.2e1 * t5 * t89, t79 * t110, t2 ^ 2 + t3 ^ 2 + t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t71, 0, -t97, -t96, 0, 0, 0, t68, 0, 0, -t71, 0, -t97, t78, t96, t78 * pkin(7), 0, 0, -t38, 0, -t37, 0, t25, t27, t43 * t37 + t41 * t38, t25 * t41 + t27 * t43, 0, 0, -t17, 0, t15, 0, t5, t7, -t23 * t15 + t21 * t17, t5 * t21 + t7 * t23, -t11, t8, -t93, t11, -t12, 0, t77 * t66 + t99, t77 * t69 - t100, -t1, t1 * t20 + t5 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(2), 0, 0.2e1 * qJ(3), pkin(2) ^ 2 + qJ(3) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t41, 0.2e1 * t43, 0, t41 ^ 2 + t43 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t21, 0.2e1 * t23, 0, t21 ^ 2 + t23 ^ 2, t60, t46, 0, t62, 0, 0, 0.2e1 * t19 * t69, -0.2e1 * t19 * t66, -0.2e1 * t86 * t20, t86 * t20 ^ 2 + t19 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t97, 0, 0, 0, 0, 0, 0, 0, 0, t67 * t37 - t70 * t38, -t25 * t70 + t27 * t67, 0, 0, 0, 0, 0, 0, 0, 0, t76, t7 * t36 + t101, 0, 0, 0, 0, 0, 0, t76 * t66, t76 * t69, 0, t1 * t36 + t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t70, t67, 0, -t41 * t70 + t43 * t67, 0, 0, 0, 0, 0, 0, t34, t36, 0, t21 * t34 + t23 * t36, 0, 0, 0, 0, 0, 0, t94, -t95, -t13, t20 * t13 + t19 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67 ^ 2 + t70 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 + t107, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86 * t33 + t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, t37, 0, -t25, -t27, 0, 0, 0, 0, t17, 0, -t15, 0, -t5, -t7 (-t15 * t64 - t17 * t65) * pkin(4) (-t5 * t65 + t64 * t7) * pkin(4), t11, -t8, t93, -t11, t12, 0, t75 * t66 - t99, t75 * t69 + t100, t1, t1 * t48 + t5 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t41, -t43, 0, 0, 0, 0, 0, 0, 0, -1, -t21 - t98, t54 - t23, 0 (-t21 * t65 + t23 * t64) * pkin(4), -t60, t84, 0, -t62, 0, 0, -t88 * t69, t88 * t66 (t20 - t48) * t86, t19 * t49 + t20 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, -t67, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t36, 0 (-t34 * t65 + t36 * t64) * pkin(4), 0, 0, 0, 0, 0, 0, -t94, t95, t13, t34 * t49 + t36 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t98, -0.2e1 * t54, 0 (t64 ^ 2 + t65 ^ 2) * pkin(4) ^ 2, t60, t46, 0, t62, 0, 0, -0.2e1 * t49 * t69, 0.2e1 * t49 * t66, 0.2e1 * t81, t86 * t48 ^ 2 + t49 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, t17, 0, t24, 0, 0, 0, 0, 0, 0, t12, -t93, -t86 * t17, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, -t92, t15, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, 0, -t69, 0, -t66 * t20, -t69 * t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66 * t36, -t69 * t36, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, t69, 0, -t66 * t48, -t69 * t48, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t66, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
