% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:39
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR4_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 01:00:13
% EndTime: 2019-05-05 01:00:19
% DurationCPUTime: 1.54s
% Computational Cost: add. (1428->155), mult. (3057->281), div. (0->0), fcn. (3774->12), ass. (0->91)
t58 = sin(pkin(12));
t60 = cos(pkin(12));
t64 = sin(qJ(4));
t94 = cos(qJ(4));
t39 = t94 * t58 + t64 * t60;
t105 = -0.2e1 * t39;
t61 = cos(pkin(6));
t59 = sin(pkin(6));
t65 = sin(qJ(2));
t90 = t59 * t65;
t31 = -t58 * t90 + t61 * t60;
t32 = t61 * t58 + t60 * t90;
t15 = -t94 * t31 + t64 * t32;
t14 = t15 ^ 2;
t83 = pkin(8) + qJ(3);
t45 = t83 * t60;
t78 = t83 * t58;
t23 = t64 * t45 + t94 * t78;
t104 = t23 ^ 2;
t37 = t64 * t58 - t94 * t60;
t34 = t37 ^ 2;
t103 = 0.2e1 * t37;
t50 = -t60 * pkin(3) - pkin(2);
t102 = 0.2e1 * t50;
t67 = cos(qJ(5));
t52 = -t67 * pkin(5) - pkin(4);
t101 = 0.2e1 * t52;
t100 = 0.2e1 * t60;
t99 = -pkin(10) - pkin(9);
t98 = t37 * pkin(5);
t62 = sin(qJ(6));
t97 = t62 * pkin(5);
t66 = cos(qJ(6));
t96 = t66 * pkin(5);
t22 = t37 * pkin(4) - t39 * pkin(9) + t50;
t63 = sin(qJ(5));
t25 = t94 * t45 - t64 * t78;
t85 = t67 * t25;
t7 = t85 + (-pkin(10) * t39 + t22) * t63;
t95 = t66 * t7;
t93 = t15 * t23;
t84 = t67 * t39;
t87 = t63 * t39;
t20 = -t62 * t87 + t66 * t84;
t42 = t62 * t63 - t66 * t67;
t92 = t20 * t42;
t44 = t62 * t67 + t66 * t63;
t91 = t44 * t37;
t68 = cos(qJ(2));
t89 = t59 * t68;
t88 = t63 * t37;
t86 = t63 * t67;
t53 = t58 ^ 2;
t55 = t60 ^ 2;
t82 = t53 + t55;
t56 = t63 ^ 2;
t57 = t67 ^ 2;
t81 = t56 + t57;
t80 = t37 * t105;
t79 = t63 * t84;
t8 = t67 * t22 - t63 * t25;
t6 = -pkin(10) * t84 + t8 + t98;
t1 = t66 * t6 - t62 * t7;
t77 = -pkin(4) * t39 - pkin(9) * t37;
t9 = t63 * t22 + t85;
t76 = t9 * t63 + t8 * t67;
t75 = -t8 * t63 + t9 * t67;
t17 = t64 * t31 + t94 * t32;
t10 = -t63 * t17 - t67 * t89;
t11 = t67 * t17 - t63 * t89;
t74 = t10 * t67 + t11 * t63;
t73 = -t10 * t63 + t11 * t67;
t72 = -t31 * t58 + t32 * t60;
t54 = t59 ^ 2;
t48 = t54 * t68 ^ 2;
t47 = t99 * t67;
t46 = t99 * t63;
t41 = t44 ^ 2;
t40 = t42 ^ 2;
t35 = t39 ^ 2;
t33 = t67 * t37;
t28 = t62 * t46 - t66 * t47;
t27 = t66 * t46 + t62 * t47;
t26 = t42 * t37;
t18 = t44 * t39;
t13 = pkin(5) * t87 + t23;
t12 = t44 * t18;
t4 = t62 * t10 + t66 * t11;
t3 = t66 * t10 - t62 * t11;
t2 = t62 * t6 + t95;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54 * t65 ^ 2 + t61 ^ 2 + t48, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31 ^ 2 + t32 ^ 2 + t48, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t14 + t48, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 ^ 2 + t11 ^ 2 + t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, -t90, 0, 0, 0, 0, 0, 0, 0, 0, t60 * t89, -t58 * t89, t72, pkin(2) * t89 + t72 * qJ(3), 0, 0, 0, 0, 0, 0, -t37 * t89, -t39 * t89, t15 * t39 - t17 * t37, t17 * t25 - t50 * t89 + t93, 0, 0, 0, 0, 0, 0, t10 * t37 + t15 * t87, -t11 * t37 + t15 * t84, -t74 * t39, t10 * t8 + t11 * t9 + t93, 0, 0, 0, 0, 0, 0, t15 * t18 + t3 * t37, t15 * t20 - t4 * t37, -t4 * t18 - t3 * t20, t3 * t1 + t15 * t13 + t4 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t53, t58 * t100, 0, t55, 0, 0, pkin(2) * t100, -0.2e1 * pkin(2) * t58, 0.2e1 * t82 * qJ(3), t82 * qJ(3) ^ 2 + pkin(2) ^ 2, t35, t80, 0, t34, 0, 0, t37 * t102, t39 * t102, 0.2e1 * t23 * t39 - 0.2e1 * t25 * t37, t25 ^ 2 + t50 ^ 2 + t104, t57 * t35, -0.2e1 * t35 * t86, t84 * t103, t56 * t35, t63 * t80, t34, 0.2e1 * t23 * t87 + 0.2e1 * t8 * t37, 0.2e1 * t23 * t84 - 0.2e1 * t9 * t37, t76 * t105, t8 ^ 2 + t9 ^ 2 + t104, t20 ^ 2, -0.2e1 * t20 * t18, t20 * t103, t18 ^ 2, -t18 * t103, t34, 0.2e1 * t1 * t37 + 0.2e1 * t13 * t18, 0.2e1 * t13 * t20 - 0.2e1 * t2 * t37, -0.2e1 * t1 * t20 - 0.2e1 * t2 * t18, t1 ^ 2 + t13 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3 * t42 + t4 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, t58, 0, -pkin(2), 0, 0, 0, 0, 0, 0, t37, t39, 0, t50, 0, 0, 0, 0, 0, 0, t33, -t88, -t81 * t39, t76, 0, 0, 0, 0, 0, 0, -t26, -t91, -t12 + t92, -t1 * t42 + t2 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 + t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0, 0, 0, 0, 0, 0, 0, 0, -t15 * t67, t15 * t63, t73, -t15 * pkin(4) + t73 * pkin(9), 0, 0, 0, 0, 0, 0, t15 * t42, t15 * t44, -t3 * t44 - t4 * t42, t15 * t52 + t3 * t27 + t4 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, -t37, 0, -t23, -t25, 0, 0, t79 (-t56 + t57) * t39, t88, -t79, t33, 0, -t23 * t67 + t77 * t63, t23 * t63 + t77 * t67, t75, -t23 * pkin(4) + t75 * pkin(9), t20 * t44, -t12 - t92, t91, t18 * t42, -t26, 0, t13 * t42 + t52 * t18 + t27 * t37, t13 * t44 + t52 * t20 - t28 * t37, -t1 * t44 - t28 * t18 - t2 * t42 - t27 * t20, t1 * t27 + t13 * t52 + t2 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42 * t27 + t44 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t56, 0.2e1 * t86, 0, t57, 0, 0, 0.2e1 * pkin(4) * t67, -0.2e1 * pkin(4) * t63, 0.2e1 * t81 * pkin(9), t81 * pkin(9) ^ 2 + pkin(4) ^ 2, t41, -0.2e1 * t44 * t42, 0, t40, 0, 0, t42 * t101, t44 * t101, -0.2e1 * t27 * t44 - 0.2e1 * t28 * t42, t27 ^ 2 + t28 ^ 2 + t52 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t11, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0 (t3 * t66 + t4 * t62) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t87, t37, t8, -t9, 0, 0, 0, 0, t20, 0, -t18, t37, t37 * t96 + t1, -t95 + (-t6 - t98) * t62 (-t18 * t62 - t20 * t66) * pkin(5) (t1 * t66 + t2 * t62) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t63, 0, 0, 0, 0, 0, 0, 0, 0, -t42, -t44, 0 (-t42 * t66 + t44 * t62) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t67, 0, -t63 * pkin(9), -t67 * pkin(9), 0, 0, 0, 0, t44, 0, -t42, 0, t27, -t28 (-t42 * t62 - t44 * t66) * pkin(5) (t27 * t66 + t28 * t62) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t96, -0.2e1 * t97, 0 (t62 ^ 2 + t66 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, t37, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, -t44, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, -t42, 0, t27, -t28, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t96, -t97, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
