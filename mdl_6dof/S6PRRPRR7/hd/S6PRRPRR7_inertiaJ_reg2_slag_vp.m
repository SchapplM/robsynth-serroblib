% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRR7_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:04:51
% EndTime: 2019-05-05 06:04:56
% DurationCPUTime: 1.60s
% Computational Cost: add. (869->145), mult. (1764->247), div. (0->0), fcn. (2009->10), ass. (0->100)
t65 = sin(qJ(3));
t57 = t65 ^ 2;
t69 = cos(qJ(3));
t59 = t69 ^ 2;
t117 = t57 + t59;
t63 = sin(qJ(6));
t64 = sin(qJ(5));
t67 = cos(qJ(6));
t68 = cos(qJ(5));
t30 = t63 * t68 + t67 * t64;
t32 = -t63 * t64 + t67 * t68;
t116 = (t30 * t63 + t32 * t67) * pkin(5);
t61 = sin(pkin(6));
t66 = sin(qJ(2));
t100 = t61 * t66;
t62 = cos(pkin(6));
t25 = t69 * t100 + t62 * t65;
t21 = t25 ^ 2;
t23 = t65 * t100 - t62 * t69;
t55 = t61 ^ 2;
t70 = cos(qJ(2));
t44 = t55 * t70 ^ 2;
t115 = t23 ^ 2 + t21 + t44;
t113 = t30 ^ 2;
t29 = t32 ^ 2;
t114 = t29 + t113;
t46 = t64 * pkin(5) + qJ(4);
t112 = 0.2e1 * t46;
t111 = -0.2e1 * t65;
t110 = 0.2e1 * t65;
t109 = 0.2e1 * t69;
t108 = 0.2e1 * qJ(4);
t71 = -pkin(3) - pkin(9);
t107 = t63 * pkin(5);
t106 = t65 * pkin(5);
t105 = t67 * pkin(5);
t83 = -t65 * qJ(4) - pkin(2);
t28 = t71 * t69 + t83;
t84 = pkin(10) * t69 - t28;
t51 = t65 * pkin(8);
t39 = t65 * pkin(4) + t51;
t98 = t64 * t39;
t9 = -t84 * t68 + t98;
t104 = t67 * t9;
t93 = t68 * t69;
t96 = t64 * t69;
t18 = t63 * t96 - t67 * t93;
t103 = t30 * t18;
t102 = t30 * t65;
t19 = t30 * t69;
t101 = t32 * t19;
t99 = t61 * t70;
t97 = t64 * t65;
t95 = t65 * t69;
t94 = t68 * t64;
t92 = t117 * pkin(8) ^ 2;
t53 = t69 * pkin(8);
t40 = t69 * pkin(4) + t53;
t56 = t64 ^ 2;
t58 = t68 ^ 2;
t42 = t56 + t58;
t91 = qJ(4) * t69;
t90 = t25 * qJ(4);
t89 = -0.2e1 * t95;
t87 = t65 * t99;
t86 = t69 * t99;
t85 = t64 * t93;
t33 = t68 * t39;
t8 = t84 * t64 + t106 + t33;
t1 = -t63 * t9 + t67 * t8;
t2 = t63 * t8 + t104;
t82 = t1 * t32 + t2 * t30;
t12 = t23 * t68 + t64 * t99;
t13 = -t23 * t64 + t68 * t99;
t4 = t67 * t12 + t63 * t13;
t5 = t63 * t12 - t67 * t13;
t81 = t5 * t30 + t4 * t32;
t80 = -pkin(3) * t65 + t91;
t10 = -t64 * t28 + t33;
t11 = t68 * t28 + t98;
t3 = t10 * t68 + t11 * t64;
t6 = t12 * t68 - t13 * t64;
t36 = (-pkin(10) + t71) * t64;
t49 = t68 * t71;
t37 = -t68 * pkin(10) + t49;
t15 = -t63 * t36 + t67 * t37;
t16 = t67 * t36 + t63 * t37;
t79 = t15 * t32 + t16 * t30;
t78 = t23 * t65 + t25 * t69;
t76 = t65 * t71 + t91;
t75 = t78 * pkin(8);
t72 = qJ(4) ^ 2;
t48 = t68 * t65;
t43 = 0.2e1 * t95;
t38 = -t69 * pkin(3) + t83;
t35 = 0.2e1 * t117 * pkin(8);
t34 = t42 * t71;
t27 = t32 * t65;
t22 = pkin(5) * t93 + t40;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55 * t66 ^ 2 + t62 ^ 2 + t44, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 ^ 2 + t13 ^ 2 + t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4 ^ 2 + t5 ^ 2 + t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, -t100, 0, 0, 0, 0, 0, 0, 0, 0, t86, -t87, t78, pkin(2) * t99 + t75, 0, 0, 0, 0, 0, 0, t78, -t86, t87, -t38 * t99 + t75, 0, 0, 0, 0, 0, 0, t12 * t65 + t25 * t93, t13 * t65 - t25 * t96 (t12 * t64 + t13 * t68) * t69, t12 * t10 - t13 * t11 + t25 * t40, 0, 0, 0, 0, 0, 0, -t25 * t18 + t4 * t65, -t25 * t19 - t5 * t65, t5 * t18 + t4 * t19, t4 * t1 + t5 * t2 + t25 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, t43, 0, t59, 0, 0, pkin(2) * t109, pkin(2) * t111, t35, pkin(2) ^ 2 + t92, 0, 0, 0, t57, t43, t59, t35, t38 * t109, t38 * t111, t38 ^ 2 + t92, t56 * t59, 0.2e1 * t59 * t94, t64 * t89, t58 * t59, t68 * t89, t57, 0.2e1 * t10 * t65 + 0.2e1 * t40 * t93, -0.2e1 * t11 * t65 - 0.2e1 * t40 * t96 (t10 * t64 - t11 * t68) * t109, t10 ^ 2 + t11 ^ 2 + t40 ^ 2, t19 ^ 2, -0.2e1 * t19 * t18, -t19 * t110, t18 ^ 2, t18 * t110, t57, 0.2e1 * t1 * t65 - 0.2e1 * t22 * t18, -0.2e1 * t22 * t19 - 0.2e1 * t2 * t65, 0.2e1 * t1 * t19 + 0.2e1 * t2 * t18, t1 ^ 2 + t2 ^ 2 + t22 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, -t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, t25, -t23 * pkin(3) + t90, 0, 0, 0, 0, 0, 0, t25 * t64, t25 * t68, -t6, t6 * t71 + t90, 0, 0, 0, 0, 0, 0, t25 * t30, t25 * t32, -t81, t4 * t15 + t5 * t16 + t25 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t51, -t53, 0, 0, 0, -t65, -t69, 0, 0, 0, t80, t51, t53, t80 * pkin(8), -t85 (t56 - t58) * t69, t48, t85, -t97, 0, t40 * t64 + t68 * t76, t40 * t68 - t64 * t76, -t3, t40 * qJ(4) + t3 * t71, -t101, t32 * t18 + t19 * t30, t27, -t103, -t102, 0, t15 * t65 - t46 * t18 + t22 * t30, -t16 * t65 - t46 * t19 + t22 * t32, t15 * t19 + t16 * t18 - t82, t1 * t15 + t2 * t16 + t22 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t108, pkin(3) ^ 2 + t72, t58, -0.2e1 * t94, 0, t56, 0, 0, t64 * t108, t68 * t108, -0.2e1 * t34, t42 * t71 ^ 2 + t72, t29, -0.2e1 * t32 * t30, 0, t113, 0, 0, t30 * t112, t32 * t112, -0.2e1 * t79, t15 ^ 2 + t16 ^ 2 + t46 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, 0, t51, 0, 0, 0, 0, 0, 0, t48, -t97, 0, t3, 0, 0, 0, 0, 0, 0, t27, -t102, t101 + t103, t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t42, t34, 0, 0, 0, 0, 0, 0, 0, 0, -t114, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, t13, 0, 0, 0, 0, 0, 0, 0, 0, t4, -t5, 0 (t4 * t67 + t5 * t63) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, 0, -t93, t65, t10, -t11, 0, 0, 0, 0, -t19, 0, t18, t65, t65 * t105 + t1, -t104 + (-t8 - t106) * t63 (t18 * t63 + t19 * t67) * pkin(5) (t1 * t67 + t2 * t63) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, -t64, 0, t49, -t64 * t71, 0, 0, 0, 0, t32, 0, -t30, 0, t15, -t16, -t116 (t15 * t67 + t16 * t63) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, -t64, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t30, 0, t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t105, -0.2e1 * t107, 0 (t63 ^ 2 + t67 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t4, -t5, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, t18, t65, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t30, 0, t15, -t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t30, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t105, -t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t7;
