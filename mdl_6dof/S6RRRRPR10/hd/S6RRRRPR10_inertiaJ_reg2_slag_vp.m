% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR10_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR10_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 22:59:07
% EndTime: 2019-05-07 22:59:19
% DurationCPUTime: 3.04s
% Computational Cost: add. (3243->241), mult. (7210->425), div. (0->0), fcn. (8281->10), ass. (0->147)
t89 = sin(pkin(6));
t94 = sin(qJ(2));
t148 = t89 * t94;
t90 = cos(pkin(6));
t93 = sin(qJ(3));
t97 = cos(qJ(3));
t56 = t93 * t148 - t90 * t97;
t58 = t97 * t148 + t90 * t93;
t92 = sin(qJ(4));
t96 = cos(qJ(4));
t38 = t96 * t56 + t92 * t58;
t170 = t38 ^ 2;
t40 = -t92 * t56 + t96 * t58;
t35 = t40 ^ 2;
t64 = t92 * t93 - t96 * t97;
t62 = t64 ^ 2;
t66 = t92 * t97 + t96 * t93;
t63 = t66 ^ 2;
t157 = t92 * pkin(3);
t78 = qJ(5) + t157;
t169 = t78 ^ 2;
t168 = -0.2e1 * t40;
t82 = -t97 * pkin(3) - pkin(2);
t107 = -t66 * qJ(5) + t82;
t43 = t64 * pkin(4) + t107;
t167 = -0.2e1 * t43;
t166 = -0.2e1 * t58;
t165 = 0.2e1 * t78;
t164 = 0.2e1 * t82;
t163 = 0.2e1 * t89;
t162 = 0.2e1 * t97;
t100 = 0.2e1 * qJ(5);
t161 = pkin(4) + pkin(11);
t160 = -pkin(10) - pkin(9);
t159 = pkin(1) * t94;
t98 = cos(qJ(2));
t158 = pkin(1) * t98;
t156 = t96 * pkin(3);
t147 = t89 * t98;
t91 = sin(qJ(6));
t95 = cos(qJ(6));
t25 = t91 * t147 + t95 * t38;
t155 = t25 * t91;
t154 = t38 * t64;
t24 = t40 * t66;
t153 = t56 * t97;
t152 = t58 * t93;
t151 = t66 * t64;
t150 = t78 * t64;
t83 = t89 ^ 2;
t149 = t83 * t98;
t146 = t90 * t94;
t145 = t91 * t40;
t144 = t91 * t64;
t143 = t91 * t66;
t81 = -pkin(4) - t156;
t75 = -pkin(11) + t81;
t142 = t91 * t75;
t141 = t91 * t161;
t26 = t95 * t147 - t91 * t38;
t23 = t95 * t26;
t140 = t95 * t64;
t139 = t95 * t75;
t138 = t95 * t91;
t137 = t95 * t161;
t127 = pkin(3) * t147;
t126 = pkin(8) * t147;
t52 = t126 + (pkin(9) + t159) * t90;
t53 = (-pkin(2) * t98 - pkin(9) * t94 - pkin(1)) * t89;
t29 = -t93 * t52 + t97 * t53;
t19 = -t58 * pkin(10) - t127 + t29;
t30 = t97 * t52 + t93 * t53;
t22 = -t56 * pkin(10) + t30;
t136 = -t96 * t19 + t92 * t22;
t12 = t92 * t19 + t96 * t22;
t84 = t91 ^ 2;
t86 = t95 ^ 2;
t71 = t84 + t86;
t85 = t93 ^ 2;
t87 = t97 ^ 2;
t135 = t85 + t87;
t134 = qJ(5) * t64;
t133 = t78 * qJ(5);
t132 = qJ(5) + t78;
t131 = t38 * t168;
t130 = -0.2e1 * t151;
t129 = 0.2e1 * t151;
t128 = 0.2e1 * t147;
t125 = t40 * t147;
t116 = t160 * t93;
t70 = t160 * t97;
t45 = -t96 * t116 - t92 * t70;
t124 = t45 * t147;
t47 = t92 * t116 - t96 * t70;
t123 = t47 * t147;
t122 = t66 * t147;
t121 = t38 * t147;
t120 = t64 * t147;
t119 = t93 * t147;
t118 = t97 * t147;
t74 = pkin(4) * t147;
t10 = t74 + t136;
t117 = qJ(5) * t147;
t115 = t45 ^ 2 + t47 ^ 2;
t69 = t71 * t161;
t4 = t40 * pkin(5) + pkin(11) * t147 + t10;
t73 = pkin(8) * t148;
t51 = t73 + (-pkin(2) - t158) * t90;
t42 = t56 * pkin(3) + t51;
t105 = -t40 * qJ(5) + t42;
t8 = t161 * t38 + t105;
t1 = t95 * t4 - t91 * t8;
t2 = t91 * t4 + t95 * t8;
t114 = t1 * t95 + t2 * t91;
t28 = t161 * t64 + t107;
t36 = t66 * pkin(5) + t45;
t15 = -t91 * t28 + t95 * t36;
t16 = t95 * t28 + t91 * t36;
t3 = t15 * t95 + t16 * t91;
t113 = t23 + t155;
t112 = -t29 * t93 + t30 * t97;
t111 = -t47 * t38 + t45 * t40;
t110 = -t66 * t38 - t40 * t64;
t109 = -t66 * t75 + t150;
t108 = t161 * t66 + t134;
t9 = t117 - t12;
t106 = 0.2e1 * t45 * t66 - 0.2e1 * t47 * t64;
t102 = -0.2e1 * pkin(4);
t101 = qJ(5) ^ 2;
t77 = t83 * t98 ^ 2;
t76 = -0.2e1 * t138;
t61 = pkin(1) * t146 + t126;
t60 = t90 * t158 - t73;
t59 = t95 * t66;
t55 = t64 * t138;
t50 = t71 * t75;
t44 = (-t84 + t86) * t64;
t37 = -t64 * pkin(5) + t47;
t34 = t95 * t40;
t32 = t37 * t95;
t31 = t37 * t91;
t14 = t95 * t25 + t26 * t91;
t13 = t38 * pkin(4) + t105;
t7 = -t38 * pkin(5) - t9;
t6 = t7 * t95;
t5 = t7 * t91;
t11 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83 * t94 ^ 2, 0.2e1 * t94 * t149, t146 * t163, t77, t90 * t128, t90 ^ 2, 0.2e1 * pkin(1) * t149 + 0.2e1 * t60 * t90, -0.2e1 * t83 * t159 - 0.2e1 * t61 * t90 (-t60 * t94 + t61 * t98) * t163, t83 * pkin(1) ^ 2 + t60 ^ 2 + t61 ^ 2, t58 ^ 2, t56 * t166, t147 * t166, t56 ^ 2, t56 * t128, t77, -0.2e1 * t29 * t147 + 0.2e1 * t51 * t56, 0.2e1 * t30 * t147 + 0.2e1 * t51 * t58, -0.2e1 * t29 * t58 - 0.2e1 * t30 * t56, t29 ^ 2 + t30 ^ 2 + t51 ^ 2, t35, t131, -0.2e1 * t125, t170, 0.2e1 * t121, t77, 0.2e1 * t136 * t147 + 0.2e1 * t42 * t38, 0.2e1 * t12 * t147 + 0.2e1 * t42 * t40, -0.2e1 * t12 * t38 + 0.2e1 * t136 * t40, t12 ^ 2 + t136 ^ 2 + t42 ^ 2, t77, 0.2e1 * t125, -0.2e1 * t121, t35, t131, t170, 0.2e1 * t10 * t40 + 0.2e1 * t9 * t38, -0.2e1 * t10 * t147 - 0.2e1 * t13 * t38, -0.2e1 * t13 * t40 + 0.2e1 * t9 * t147, t10 ^ 2 + t13 ^ 2 + t9 ^ 2, t26 ^ 2, -0.2e1 * t26 * t25, t26 * t168, t25 ^ 2, 0.2e1 * t25 * t40, t35, 0.2e1 * t1 * t40 - 0.2e1 * t7 * t25, -0.2e1 * t2 * t40 - 0.2e1 * t7 * t26, 0.2e1 * t1 * t26 + 0.2e1 * t2 * t25, t1 ^ 2 + t2 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t148, 0, t147, t90, t60, -t61, 0, 0, t152, -t93 * t56 + t58 * t97, -t119, -t153, -t118, 0, -pkin(2) * t56 + pkin(9) * t119 - t51 * t97, -pkin(2) * t58 + pkin(9) * t118 + t51 * t93 (t152 - t153) * pkin(9) + t112, -t51 * pkin(2) + pkin(9) * t112, t24, t110, -t122, t154, t120, 0, t82 * t38 + t42 * t64 + t124, t82 * t40 + t42 * t66 + t123, -t12 * t64 + t136 * t66 + t111, t12 * t47 + t136 * t45 + t42 * t82, 0, t122, -t120, t24, t110, t154, t10 * t66 + t9 * t64 + t111, -t13 * t64 - t43 * t38 - t124, -t13 * t66 - t43 * t40 - t123, t10 * t45 + t13 * t43 - t9 * t47, -t26 * t144 (-t23 + t155) * t64, t40 * t144 - t26 * t66, t25 * t140, t40 * t140 + t25 * t66, t24, t1 * t66 - t7 * t140 + t15 * t40 - t37 * t25, t7 * t144 - t16 * t40 - t2 * t66 - t37 * t26, t15 * t26 + t16 * t25 + (-t1 * t91 + t2 * t95) * t64, t1 * t15 + t2 * t16 + t7 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t85, t93 * t162, 0, t87, 0, 0, pkin(2) * t162, -0.2e1 * pkin(2) * t93, 0.2e1 * t135 * pkin(9), pkin(9) ^ 2 * t135 + pkin(2) ^ 2, t63, t130, 0, t62, 0, 0, t64 * t164, t66 * t164, t106, t82 ^ 2 + t115, 0, 0, 0, t63, t130, t62, t106, t64 * t167, t66 * t167, t43 ^ 2 + t115, t84 * t62, 0.2e1 * t62 * t138, t91 * t129, t86 * t62, t95 * t129, t63, -0.2e1 * t37 * t140 + 0.2e1 * t15 * t66, 0.2e1 * t37 * t144 - 0.2e1 * t16 * t66, 0.2e1 * (-t15 * t91 + t16 * t95) * t64, t15 ^ 2 + t16 ^ 2 + t37 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, -t56, -t147, t29, -t30, 0, 0, 0, 0, t40, 0, -t38, -t147, -t127 * t96 - t136, t127 * t92 - t12 (-t38 * t92 - t40 * t96) * pkin(3) (t12 * t92 - t136 * t96) * pkin(3), -t147, -t40, t38, 0, 0, 0, -t78 * t38 + t81 * t40, -t81 * t147 + t10, -t132 * t147 + t12, t10 * t81 - t9 * t78, -t23, t14, t34, -t155, -t145, 0, t139 * t40 - t78 * t25 + t5, -t40 * t142 - t78 * t26 + t6, t113 * t75 - t114, t114 * t75 + t7 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, t97, 0, -t93 * pkin(9), -t97 * pkin(9), 0, 0, 0, 0, t66, 0, -t64, 0, -t45, -t47 (-t64 * t92 - t66 * t96) * pkin(3) (-t45 * t96 + t47 * t92) * pkin(3), 0, -t66, t64, 0, 0, 0, t81 * t66 - t150, t45, t47, t45 * t81 + t47 * t78, t55, t44, t59, -t55, -t143, 0, -t109 * t95 + t31, t109 * t91 + t32, -t3, t3 * t75 + t37 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t156, -0.2e1 * t157, 0 (t92 ^ 2 + t96 ^ 2) * pkin(3) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t81, t165, t81 ^ 2 + t169, t86, t76, 0, t84, 0, 0, t91 * t165, t95 * t165, -0.2e1 * t50, t71 * t75 ^ 2 + t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, -t38, -t147, -t136, -t12, 0, 0, -t147, -t40, t38, 0, 0, 0, -pkin(4) * t40 - qJ(5) * t38, 0.2e1 * t74 + t136, -0.2e1 * t117 + t12, -t10 * pkin(4) - t9 * qJ(5), -t23, t14, t34, -t155, -t145, 0, -qJ(5) * t25 - t137 * t40 + t5, -qJ(5) * t26 + t40 * t141 + t6 (-t161 * t26 - t1) * t95 + (-t161 * t25 - t2) * t91, t7 * qJ(5) - t114 * t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, -t64, 0, -t45, -t47, 0, 0, 0, -t66, t64, 0, 0, 0, -pkin(4) * t66 - t134, t45, t47, -t45 * pkin(4) + t47 * qJ(5), t55, t44, t59, -t55, -t143, 0, -t108 * t95 + t31, t108 * t91 + t32, -t3, t37 * qJ(5) - t161 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t156, -t157, 0, 0, 1, 0, 0, 0, 0, 0, 0, t102 - t156, t100 + t157, -t81 * pkin(4) + t133, t86, t76, 0, t84, 0, 0, t132 * t91, t132 * t95 (-t75 + t161) * t71, -t69 * t75 + t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t102, t100, pkin(4) ^ 2 + t101, t86, t76, 0, t84, 0, 0, t91 * t100, t95 * t100, 0.2e1 * t69, t161 ^ 2 * t71 + t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t147, 0, t10, 0, 0, 0, 0, 0, 0, t34, -t145, t113, t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, 0, t45, 0, 0, 0, 0, 0, 0, t59, -t143, 0, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t81, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, -t71, -t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, 0, t25, t40, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, 0, t140, t66, t15, -t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t91, 0, t139, -t142, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t91, 0, -t137, t141, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t91, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
