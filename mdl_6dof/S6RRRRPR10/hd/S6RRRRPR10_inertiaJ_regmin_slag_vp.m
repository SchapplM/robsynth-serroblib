% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 23:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR10_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR10_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR10_inertiaJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 22:58:56
% EndTime: 2019-05-07 22:59:02
% DurationCPUTime: 1.37s
% Computational Cost: add. (1660->168), mult. (3794->312), div. (0->0), fcn. (4397->10), ass. (0->118)
t75 = sin(pkin(6));
t80 = sin(qJ(2));
t116 = t75 * t80;
t76 = cos(pkin(6));
t79 = sin(qJ(3));
t83 = cos(qJ(3));
t49 = t79 * t116 - t76 * t83;
t50 = t83 * t116 + t76 * t79;
t78 = sin(qJ(4));
t82 = cos(qJ(4));
t36 = -t78 * t49 + t82 * t50;
t130 = 0.2e1 * t36;
t56 = t78 * t79 - t82 * t83;
t57 = t78 * t83 + t82 * t79;
t71 = -t83 * pkin(3) - pkin(2);
t89 = -t57 * qJ(5) + t71;
t38 = t56 * pkin(4) + t89;
t129 = -0.2e1 * t38;
t121 = t78 * pkin(3);
t67 = qJ(5) + t121;
t128 = 0.2e1 * t67;
t127 = 0.2e1 * t71;
t126 = 0.2e1 * t83;
t86 = 0.2e1 * qJ(5);
t125 = pkin(4) + pkin(11);
t124 = -pkin(10) - pkin(9);
t123 = pkin(1) * t80;
t84 = cos(qJ(2));
t122 = pkin(1) * t84;
t120 = t82 * pkin(3);
t115 = t75 * t84;
t35 = t82 * t49 + t78 * t50;
t77 = sin(qJ(6));
t81 = cos(qJ(6));
t25 = -t81 * t115 + t77 * t35;
t22 = t25 * t81;
t119 = t57 * t56;
t118 = t67 * t56;
t72 = t75 ^ 2;
t117 = t72 * t84;
t114 = t76 * t80;
t113 = t77 * t36;
t112 = t77 * t56;
t111 = t77 * t57;
t70 = -pkin(4) - t120;
t63 = -pkin(11) + t70;
t110 = t77 * t63;
t109 = t77 * t125;
t108 = t81 * t56;
t107 = t81 * t63;
t106 = t81 * t77;
t105 = t81 * t125;
t97 = pkin(8) * t115;
t45 = t97 + (pkin(9) + t123) * t76;
t46 = (-pkin(2) * t84 - pkin(9) * t80 - pkin(1)) * t75;
t27 = -t79 * t45 + t83 * t46;
t98 = pkin(3) * t115;
t18 = -t50 * pkin(10) + t27 - t98;
t28 = t83 * t45 + t79 * t46;
t21 = -t49 * pkin(10) + t28;
t104 = -t82 * t18 + t78 * t21;
t11 = t78 * t18 + t82 * t21;
t103 = qJ(5) * t56;
t102 = qJ(5) + t67;
t101 = 0.2e1 * t119;
t100 = -0.2e1 * t115;
t99 = 0.2e1 * t115;
t59 = t124 * t79;
t60 = t124 * t83;
t40 = -t82 * t59 - t78 * t60;
t96 = t40 * t115;
t41 = t78 * t59 - t82 * t60;
t95 = t41 * t115;
t94 = t79 * t115;
t93 = t83 * t115;
t62 = pkin(4) * t115;
t9 = t62 + t104;
t92 = qJ(5) * t115;
t91 = -t57 * t63 + t118;
t90 = t125 * t57 + t103;
t8 = t92 - t11;
t61 = pkin(8) * t116;
t44 = t61 + (-pkin(2) - t122) * t76;
t37 = t49 * pkin(3) + t44;
t88 = -t36 * qJ(5) + t37;
t87 = -0.2e1 * pkin(4);
t74 = t81 ^ 2;
t73 = t77 ^ 2;
t65 = t72 * t84 ^ 2;
t64 = -0.2e1 * t106;
t55 = t57 ^ 2;
t54 = t56 ^ 2;
t53 = pkin(1) * t114 + t97;
t52 = t76 * t122 - t61;
t51 = t81 * t57;
t48 = t56 * t106;
t39 = (-t73 + t74) * t56;
t34 = -t56 * pkin(5) + t41;
t33 = t57 * pkin(5) + t40;
t32 = t36 ^ 2;
t31 = t81 * t36;
t30 = t34 * t81;
t29 = t34 * t77;
t26 = t125 * t56 + t89;
t24 = t77 * t115 + t81 * t35;
t23 = t36 * t57;
t15 = t81 * t26 + t77 * t33;
t14 = -t77 * t26 + t81 * t33;
t13 = t81 * t24 - t25 * t77;
t12 = t35 * pkin(4) + t88;
t7 = t125 * t35 + t88;
t6 = -t35 * pkin(5) - t8;
t5 = t6 * t81;
t4 = t6 * t77;
t3 = t36 * pkin(5) + pkin(11) * t115 + t9;
t2 = t77 * t3 + t81 * t7;
t1 = t81 * t3 - t77 * t7;
t10 = [1, 0, 0, t72 * t80 ^ 2, 0.2e1 * t80 * t117, 0.2e1 * t75 * t114, t76 * t99, t76 ^ 2, 0.2e1 * pkin(1) * t117 + 0.2e1 * t52 * t76, -0.2e1 * t72 * t123 - 0.2e1 * t53 * t76, t50 ^ 2, -0.2e1 * t50 * t49, t50 * t100, t49 * t99, t65, -0.2e1 * t27 * t115 + 0.2e1 * t44 * t49, 0.2e1 * t28 * t115 + 0.2e1 * t44 * t50, t32, -0.2e1 * t36 * t35, t36 * t100, t35 * t99, t65, 0.2e1 * t104 * t115 + 0.2e1 * t37 * t35, 0.2e1 * t11 * t115 + 0.2e1 * t37 * t36, 0.2e1 * t8 * t35 + 0.2e1 * t9 * t36, -0.2e1 * t9 * t115 - 0.2e1 * t12 * t35, 0.2e1 * t8 * t115 - 0.2e1 * t12 * t36, t12 ^ 2 + t8 ^ 2 + t9 ^ 2, t25 ^ 2, 0.2e1 * t25 * t24, t25 * t130, t24 * t130, t32, 0.2e1 * t1 * t36 - 0.2e1 * t6 * t24, -0.2e1 * t2 * t36 + 0.2e1 * t6 * t25; 0, 0, 0, 0, 0, t116, t115, t76, t52, -t53, t50 * t79, -t79 * t49 + t50 * t83, -t94, -t93, 0, -pkin(2) * t49 + pkin(9) * t94 - t44 * t83, -pkin(2) * t50 + pkin(9) * t93 + t44 * t79, t23, -t57 * t35 - t36 * t56, -t57 * t115, t56 * t115, 0, t71 * t35 + t37 * t56 + t96, t71 * t36 + t37 * t57 + t95, -t41 * t35 + t40 * t36 + t8 * t56 + t9 * t57, -t12 * t56 - t38 * t35 - t96, -t12 * t57 - t38 * t36 - t95, t12 * t38 + t9 * t40 - t8 * t41, t25 * t112 (t24 * t77 + t22) * t56, t36 * t112 + t25 * t57, t36 * t108 + t24 * t57, t23, t1 * t57 - t6 * t108 + t14 * t36 - t34 * t24, t6 * t112 - t15 * t36 - t2 * t57 + t34 * t25; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t79 ^ 2, t79 * t126, 0, 0, 0, pkin(2) * t126, -0.2e1 * pkin(2) * t79, t55, -0.2e1 * t119, 0, 0, 0, t56 * t127, t57 * t127, 0.2e1 * t40 * t57 - 0.2e1 * t41 * t56, t56 * t129, t57 * t129, t38 ^ 2 + t40 ^ 2 + t41 ^ 2, t73 * t54, 0.2e1 * t54 * t106, t77 * t101, t81 * t101, t55, -0.2e1 * t34 * t108 + 0.2e1 * t14 * t57, 0.2e1 * t34 * t112 - 0.2e1 * t15 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t49, -t115, t27, -t28, 0, 0, t36, -t35, -t115, -t82 * t98 - t104, t78 * t98 - t11, -t67 * t35 + t70 * t36, -t70 * t115 + t9, -t102 * t115 + t11, -t8 * t67 + t9 * t70, t22, t13, t31, -t113, 0, t36 * t107 - t67 * t24 + t4, -t36 * t110 + t67 * t25 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t83, 0, -t79 * pkin(9), -t83 * pkin(9), 0, 0, t57, -t56, 0, -t40, -t41, t70 * t57 - t118, t40, t41, t40 * t70 + t41 * t67, t48, t39, t51, -t111, 0, -t91 * t81 + t29, t91 * t77 + t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t120, -0.2e1 * t121, 0, 0.2e1 * t70, t128, t67 ^ 2 + t70 ^ 2, t74, t64, 0, 0, 0, t77 * t128, t81 * t128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t35, -t115, -t104, -t11, -pkin(4) * t36 - qJ(5) * t35, 0.2e1 * t62 + t104, -0.2e1 * t92 + t11, -t9 * pkin(4) - t8 * qJ(5), t22, t13, t31, -t113, 0, -qJ(5) * t24 - t36 * t105 + t4, qJ(5) * t25 + t36 * t109 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, -t56, 0, -t40, -t41, -pkin(4) * t57 - t103, t40, t41, -t40 * pkin(4) + t41 * qJ(5), t48, t39, t51, -t111, 0, -t90 * t81 + t29, t90 * t77 + t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t120, -t121, 0, t87 - t120, t86 + t121, -t70 * pkin(4) + t67 * qJ(5), t74, t64, 0, 0, 0, t102 * t77, t102 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, t87, t86, pkin(4) ^ 2 + qJ(5) ^ 2, t74, t64, 0, 0, 0, t77 * t86, t81 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t115, 0, t9, 0, 0, 0, 0, 0, t31, -t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, 0, t40, 0, 0, 0, 0, 0, t51, -t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t70, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, t24, t36, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, t108, t57, t14, -t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t77, 0, t107, -t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t77, 0, -t105, t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t10;
