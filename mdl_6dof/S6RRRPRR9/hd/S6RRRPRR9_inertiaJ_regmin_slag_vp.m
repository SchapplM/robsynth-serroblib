% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 19:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR9_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR9_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRPRR9_inertiaJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 13:11:37
% EndTime: 2019-05-07 13:11:52
% DurationCPUTime: 2.02s
% Computational Cost: add. (4036->213), mult. (11105->448), div. (0->0), fcn. (13043->14), ass. (0->134)
t100 = cos(qJ(5));
t101 = cos(qJ(3));
t102 = cos(qJ(2));
t91 = sin(pkin(6));
t115 = t91 * t102;
t93 = cos(pkin(7));
t104 = t93 * t115;
t90 = sin(pkin(7));
t116 = t90 * t101;
t98 = sin(qJ(2));
t139 = t91 * t98;
t94 = cos(pkin(6));
t97 = sin(qJ(3));
t47 = -t101 * t104 - t94 * t116 + t97 * t139;
t138 = t93 * t97;
t140 = t90 * t97;
t48 = t94 * t140 + (t101 * t98 + t102 * t138) * t91;
t89 = sin(pkin(13));
t92 = cos(pkin(13));
t35 = -t89 * t47 + t92 * t48;
t67 = t90 * t115 - t94 * t93;
t96 = sin(qJ(5));
t29 = t67 * t100 + t96 * t35;
t153 = -0.2e1 * t29;
t152 = -0.2e1 * t48;
t66 = (t101 * t89 + t92 * t97) * t90;
t53 = -t100 * t93 + t96 * t66;
t151 = -0.2e1 * t53;
t150 = 0.2e1 * t96;
t149 = pkin(1) * t98;
t99 = cos(qJ(6));
t148 = pkin(5) * t99;
t34 = t92 * t47 + t89 * t48;
t79 = t94 * t102 * pkin(1);
t52 = t94 * pkin(2) + t79 + (-pkin(10) * t93 - pkin(9)) * t139;
t61 = (-pkin(10) * t90 * t98 - pkin(2) * t102 - pkin(1)) * t91;
t38 = -t90 * t52 + t93 * t61;
t31 = t47 * pkin(3) + t38;
t14 = t34 * pkin(4) - t35 * pkin(11) + t31;
t120 = t101 * t93;
t72 = pkin(9) * t115 + t94 * t149;
t46 = (t90 * t94 + t104) * pkin(10) + t72;
t27 = t61 * t116 + t52 * t120 - t97 * t46;
t18 = -t67 * pkin(3) - t48 * qJ(4) + t27;
t28 = t101 * t46 + (t52 * t93 + t61 * t90) * t97;
t23 = -t47 * qJ(4) + t28;
t11 = t89 * t18 + t92 * t23;
t9 = -t67 * pkin(11) + t11;
t5 = t100 * t14 - t96 * t9;
t3 = -t34 * pkin(5) - t5;
t95 = sin(qJ(6));
t147 = t3 * t95;
t146 = t3 * t99;
t30 = t100 * t35 - t67 * t96;
t16 = t99 * t30 + t95 * t34;
t145 = t16 * t95;
t125 = pkin(10) + qJ(4);
t78 = pkin(2) * t120;
t56 = t93 * pkin(3) - t125 * t140 + t78;
t110 = pkin(2) * t138;
t60 = t125 * t116 + t110;
t40 = t89 * t56 + t92 * t60;
t37 = t93 * pkin(11) + t40;
t65 = -t92 * t116 + t89 * t140;
t74 = (-pkin(3) * t101 - pkin(2)) * t90;
t43 = t65 * pkin(4) - t66 * pkin(11) + t74;
t25 = t100 * t43 - t96 * t37;
t19 = -t65 * pkin(5) - t25;
t144 = t19 * t95;
t143 = t19 * t99;
t54 = t100 * t66 + t96 * t93;
t42 = t99 * t54 + t95 * t65;
t142 = t42 * t95;
t82 = t89 * pkin(3) + pkin(11);
t141 = t82 * t95;
t137 = t95 * t29;
t136 = t95 * t53;
t135 = t95 * t96;
t134 = t95 * t99;
t133 = t96 * t29;
t132 = t96 * t34;
t131 = t96 * t53;
t130 = t96 * t65;
t129 = t96 * t82;
t128 = t99 * t29;
t127 = t99 * t53;
t126 = t99 * t96;
t15 = t95 * t30 - t99 * t34;
t124 = t100 * t15;
t41 = t95 * t54 - t99 * t65;
t123 = t100 * t41;
t122 = t100 * t82;
t84 = t90 ^ 2;
t121 = t101 * t84;
t85 = t91 ^ 2;
t119 = t102 * t85;
t118 = t16 * t100;
t117 = t42 * t100;
t114 = t95 * t100;
t113 = t99 * t100;
t112 = 0.2e1 * t90 * t93;
t111 = 0.2e1 * t91 * t94;
t109 = t100 * t150;
t108 = t95 * t133;
t107 = t95 * t131;
t106 = t29 * t126;
t105 = t53 * t126;
t83 = -t92 * pkin(3) - pkin(4);
t10 = t92 * t18 - t89 * t23;
t39 = t92 * t56 - t89 * t60;
t6 = t100 * t9 + t96 * t14;
t26 = t100 * t37 + t96 * t43;
t8 = t67 * pkin(4) - t10;
t36 = -t93 * pkin(4) - t39;
t88 = t99 ^ 2;
t87 = t96 ^ 2;
t86 = t95 ^ 2;
t73 = -t100 * pkin(5) - t96 * pkin(12) + t83;
t71 = pkin(10) * t116 + t110;
t70 = -pkin(9) * t139 + t79;
t69 = -pkin(10) * t140 + t78;
t63 = t100 * t65;
t51 = t82 * t113 + t95 * t73;
t50 = -t82 * t114 + t99 * t73;
t33 = t100 * t34;
t24 = t53 * pkin(5) - t54 * pkin(12) + t36;
t20 = t65 * pkin(12) + t26;
t13 = t99 * t20 + t95 * t24;
t12 = -t95 * t20 + t99 * t24;
t7 = t29 * pkin(5) - t30 * pkin(12) + t8;
t4 = t34 * pkin(12) + t6;
t2 = t99 * t4 + t95 * t7;
t1 = -t95 * t4 + t99 * t7;
t17 = [1, 0, 0, t85 * t98 ^ 2, 0.2e1 * t98 * t119, t98 * t111, t102 * t111, t94 ^ 2, 0.2e1 * pkin(1) * t119 + 0.2e1 * t70 * t94, -0.2e1 * t85 * t149 - 0.2e1 * t72 * t94, t48 ^ 2, t47 * t152, t67 * t152, 0.2e1 * t47 * t67, t67 ^ 2, -0.2e1 * t27 * t67 + 0.2e1 * t38 * t47, 0.2e1 * t28 * t67 + 0.2e1 * t38 * t48, -0.2e1 * t10 * t35 - 0.2e1 * t11 * t34, t10 ^ 2 + t11 ^ 2 + t31 ^ 2, t30 ^ 2, t30 * t153, 0.2e1 * t30 * t34, t34 * t153, t34 ^ 2, 0.2e1 * t8 * t29 + 0.2e1 * t5 * t34, 0.2e1 * t8 * t30 - 0.2e1 * t6 * t34, t16 ^ 2, -0.2e1 * t16 * t15, 0.2e1 * t16 * t29, t15 * t153, t29 ^ 2, 0.2e1 * t1 * t29 + 0.2e1 * t3 * t15, 0.2e1 * t3 * t16 - 0.2e1 * t2 * t29; 0, 0, 0, 0, 0, t139, t115, t94, t70, -t72, t48 * t140 (t101 * t48 - t47 * t97) * t90, -t67 * t140 + t48 * t93, -t67 * t116 - t47 * t93, -t67 * t93, t27 * t93 - t69 * t67 + (-pkin(2) * t47 - t101 * t38) * t90, -t28 * t93 + t71 * t67 + (-pkin(2) * t48 + t38 * t97) * t90, -t10 * t66 - t11 * t65 - t40 * t34 - t39 * t35, t10 * t39 + t11 * t40 + t31 * t74, t30 * t54, -t54 * t29 - t30 * t53, t30 * t65 + t54 * t34, -t29 * t65 - t53 * t34, t34 * t65, t25 * t34 + t36 * t29 + t5 * t65 + t8 * t53, -t26 * t34 + t36 * t30 + t8 * t54 - t6 * t65, t16 * t42, -t42 * t15 - t16 * t41, t16 * t53 + t42 * t29, -t15 * t53 - t41 * t29, t29 * t53, t1 * t53 + t12 * t29 + t19 * t15 + t3 * t41, -t13 * t29 + t19 * t16 - t2 * t53 + t3 * t42; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t84 * t97 ^ 2, 0.2e1 * t97 * t121, t97 * t112, t101 * t112, t93 ^ 2, 0.2e1 * pkin(2) * t121 + 0.2e1 * t69 * t93, -0.2e1 * t84 * pkin(2) * t97 - 0.2e1 * t71 * t93, -0.2e1 * t39 * t66 - 0.2e1 * t40 * t65, t39 ^ 2 + t40 ^ 2 + t74 ^ 2, t54 ^ 2, t54 * t151, 0.2e1 * t54 * t65, t65 * t151, t65 ^ 2, 0.2e1 * t25 * t65 + 0.2e1 * t36 * t53, -0.2e1 * t26 * t65 + 0.2e1 * t36 * t54, t42 ^ 2, -0.2e1 * t42 * t41, 0.2e1 * t42 * t53, t41 * t151, t53 ^ 2, 0.2e1 * t12 * t53 + 0.2e1 * t19 * t41, -0.2e1 * t13 * t53 + 0.2e1 * t19 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, -t47, -t67, t27, -t28 (-t34 * t89 - t35 * t92) * pkin(3) (t10 * t92 + t11 * t89) * pkin(3), t30 * t96, t30 * t100 - t133, t132, t33, 0, -t8 * t100 - t34 * t129 + t83 * t29, -t34 * t122 + t83 * t30 + t8 * t96, t16 * t126 (-t15 * t99 - t145) * t96, t106 - t118, -t108 + t124, -t29 * t100, -t1 * t100 + t50 * t29 + (t15 * t82 + t147) * t96, t2 * t100 - t51 * t29 + (t16 * t82 + t146) * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140, t116, t93, t69, -t71 (-t65 * t89 - t66 * t92) * pkin(3) (t39 * t92 + t40 * t89) * pkin(3), t54 * t96, t54 * t100 - t131, t130, t63, 0, -t36 * t100 - t65 * t129 + t83 * t53, -t65 * t122 + t36 * t96 + t83 * t54, t42 * t126 (-t41 * t99 - t142) * t96, t105 - t117, -t107 + t123, -t53 * t100, -t12 * t100 + t50 * t53 + (t41 * t82 + t144) * t96, t13 * t100 - t51 * t53 + (t42 * t82 + t143) * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 (t89 ^ 2 + t92 ^ 2) * pkin(3) ^ 2, t87, t109, 0, 0, 0, -0.2e1 * t83 * t100, t83 * t150, t88 * t87, -0.2e1 * t87 * t134, -0.2e1 * t96 * t113, t95 * t109, t100 ^ 2, -0.2e1 * t50 * t100 + 0.2e1 * t87 * t141, 0.2e1 * t87 * t82 * t99 + 0.2e1 * t51 * t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, 0, 0, 0, 0, t33, -t132, 0, 0, 0, 0, 0, -t108 - t124, -t106 - t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, 0, 0, 0, 0, t63, -t130, 0, 0, 0, 0, 0, -t107 - t123, -t105 - t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t29, t34, t5, -t6, t145, -t95 * t15 + t16 * t99, t137, t128, 0, -pkin(5) * t15 - pkin(12) * t137 - t146, -pkin(5) * t16 - pkin(12) * t128 + t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t53, t65, t25, -t26, t142, -t95 * t41 + t42 * t99, t136, t127, 0, -pkin(5) * t41 - pkin(12) * t136 - t143, -pkin(5) * t42 - pkin(12) * t127 + t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, t100, 0, -t129, -t122, t95 * t126 (-t86 + t88) * t96, -t114, -t113, 0, -t82 * t126 + (-pkin(5) * t96 + pkin(12) * t100) * t95, pkin(12) * t113 + (t141 - t148) * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, -t96, 0, 0, 0, 0, 0, t113, -t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t86, 0.2e1 * t134, 0, 0, 0, 0.2e1 * t148, -0.2e1 * pkin(5) * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, -t15, t29, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t41, t53, t12, -t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, -t135, -t100, t50, -t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, t99, 0, -t95 * pkin(12), -t99 * pkin(12); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t17;
