% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:57
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPPR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPPR7_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:16:33
% EndTime: 2019-05-05 17:16:36
% DurationCPUTime: 1.04s
% Computational Cost: add. (684->85), mult. (1109->132), div. (0->0), fcn. (1270->6), ass. (0->66)
t46 = sin(pkin(9));
t47 = cos(pkin(9));
t49 = sin(qJ(3));
t51 = cos(qJ(3));
t25 = t46 * t51 + t47 * t49;
t27 = -t46 * t49 + t47 * t51;
t85 = (t25 * t46 + t27 * t47) * pkin(3);
t81 = t27 ^ 2;
t82 = t25 ^ 2;
t84 = t82 + t81;
t39 = t49 * pkin(3) + qJ(2);
t60 = -t27 * qJ(5) + t39;
t8 = t25 * pkin(4) + t60;
t83 = -0.2e1 * t8;
t76 = t46 * pkin(3);
t35 = qJ(5) + t76;
t80 = t35 ^ 2;
t79 = 0.2e1 * t35;
t78 = 0.2e1 * t39;
t77 = 0.2e1 * qJ(2);
t75 = t47 * pkin(3);
t74 = t25 * t35;
t73 = t27 * t25;
t48 = sin(qJ(6));
t41 = t48 ^ 2;
t72 = t41 * t25;
t15 = t48 * t25;
t71 = t48 * t27;
t50 = cos(qJ(6));
t17 = t50 * t25;
t70 = t50 * t27;
t69 = t50 * t48;
t43 = t50 ^ 2;
t68 = t41 + t43;
t42 = t49 ^ 2;
t44 = t51 ^ 2;
t33 = t42 + t44;
t52 = -pkin(1) - pkin(7);
t67 = -qJ(4) + t52;
t66 = -0.2e1 * t73;
t65 = 0.2e1 * t73;
t64 = t25 * t69;
t30 = t67 * t49;
t62 = t67 * t51;
t10 = t46 * t30 - t47 * t62;
t12 = t47 * t30 + t46 * t62;
t63 = t10 ^ 2 + t12 ^ 2;
t38 = -pkin(4) - t75;
t9 = t68 * t27;
t5 = (pkin(4) + pkin(8)) * t25 + t60;
t6 = t27 * pkin(5) + t10;
t2 = -t48 * t5 + t50 * t6;
t3 = t48 * t6 + t50 * t5;
t1 = t2 * t50 + t3 * t48;
t61 = -t2 * t48 + t3 * t50;
t59 = t10 * t27 - t12 * t25;
t34 = -pkin(8) + t38;
t58 = -t27 * t34 + t74;
t57 = -t38 * t27 + t74;
t55 = 0.2e1 * t59;
t53 = qJ(2) ^ 2;
t29 = t33 * t52;
t16 = t43 * t25;
t14 = t68 * t34;
t7 = -t25 * pkin(5) + t12;
t4 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t77 (pkin(1) ^ 2) + t53, t44, -0.2e1 * t51 * t49, 0, t42, 0, 0, t49 * t77, t51 * t77, -0.2e1 * t29, t33 * t52 ^ 2 + t53, t81, t66, 0, t82, 0, 0, t25 * t78, t27 * t78, t55, t39 ^ 2 + t63, 0, 0, 0, t81, t66, t82, t55, t25 * t83, t27 * t83, t8 ^ 2 + t63, t41 * t82, 0.2e1 * t82 * t69, t48 * t65, t43 * t82, t50 * t65, t81, -0.2e1 * t7 * t17 + 0.2e1 * t2 * t27, 0.2e1 * t7 * t15 - 0.2e1 * t3 * t27, 0.2e1 * t61 * t25, t2 ^ 2 + t3 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t33, t29, 0, 0, 0, 0, 0, 0, 0, 0, -t84, -t59, 0, 0, 0, 0, 0, 0, -t84, 0, 0, -t59, 0, 0, 0, 0, 0, 0, -t84 * t50, t84 * t48, 0, -t1 * t27 + t7 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 * t81 + t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t49, 0, t51 * t52, -t49 * t52, 0, 0, 0, 0, t27, 0, -t25, 0, -t10, -t12, -t85 (-t10 * t47 + t12 * t46) * pkin(3), 0, -t27, t25, 0, 0, 0, -t57, t10, t12, t10 * t38 + t12 * t35, t64, t16 - t72, t70, -t64, -t71, 0, t7 * t48 - t58 * t50, t58 * t48 + t7 * t50, -t1, t1 * t34 + t7 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, -t49, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t25, 0, t85, 0, 0, 0, 0, 0, 0, 0, -t27, t25, t57, 0, 0, 0, 0, 0, 0, t15, t17, t9, -t34 * t9 + t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t75, -0.2e1 * t76, 0 (t46 ^ 2 + t47 ^ 2) * pkin(3) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t38, t79, t38 ^ 2 + t80, t43, -0.2e1 * t69, 0, t41, 0, 0, t48 * t79, t50 * t79, -0.2e1 * t14, t68 * t34 ^ 2 + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, t27, 0, t39, 0, 0, 0, 0, 0, 0, 0, -t25, -t27, t8, 0, 0, 0, 0, 0, 0, -t71, -t70, t16 + t72, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, t10, 0, 0, 0, 0, 0, 0, t70, -t71, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t38, 0, 0, 0, 0, 0, 0, 0, 0, -t68, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, t17, t27, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, t71, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, -t48, 0, t50 * t34, -t48 * t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, -t50, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t48, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t4;
