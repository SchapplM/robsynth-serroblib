% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR9_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR9_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR9_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 23:07:04
% EndTime: 2019-05-06 23:07:15
% DurationCPUTime: 3.30s
% Computational Cost: add. (5292->220), mult. (11857->437), div. (0->0), fcn. (14089->12), ass. (0->132)
t96 = sin(qJ(6));
t90 = t96 ^ 2;
t100 = cos(qJ(6));
t91 = t100 ^ 2;
t133 = t90 + t91;
t97 = sin(qJ(5));
t149 = t97 * pkin(4);
t83 = pkin(11) + t149;
t136 = t133 * t83;
t101 = cos(qJ(5));
t102 = cos(qJ(4));
t92 = sin(pkin(12));
t94 = cos(pkin(12));
t98 = sin(qJ(4));
t71 = t102 * t94 - t98 * t92;
t72 = t102 * t92 + t98 * t94;
t54 = t101 * t72 + t71 * t97;
t161 = -0.2e1 * t54;
t93 = sin(pkin(6));
t99 = sin(qJ(2));
t141 = t93 * t99;
t95 = cos(pkin(6));
t65 = t92 * t141 - t95 * t94;
t67 = t94 * t141 + t92 * t95;
t45 = -t102 * t65 - t98 * t67;
t46 = t102 * t67 - t65 * t98;
t32 = -t101 * t45 + t46 * t97;
t34 = t101 * t46 + t45 * t97;
t103 = cos(qJ(2));
t147 = pkin(1) * t103;
t76 = pkin(8) * t141;
t64 = t76 + (-pkin(2) - t147) * t95;
t48 = pkin(3) * t65 + t64;
t35 = -pkin(4) * t45 + t48;
t10 = pkin(5) * t32 - pkin(11) * t34 + t35;
t126 = t93 * t103;
t120 = pkin(8) * t126;
t151 = pkin(1) * t99;
t61 = t120 + (qJ(3) + t151) * t95;
t62 = (-pkin(2) * t103 - qJ(3) * t99 - pkin(1)) * t93;
t40 = -t61 * t92 + t94 * t62;
t38 = -pkin(3) * t126 - pkin(9) * t67 + t40;
t41 = t94 * t61 + t92 * t62;
t39 = -pkin(9) * t65 + t41;
t18 = t102 * t39 + t38 * t98;
t16 = pkin(10) * t45 + t18;
t128 = t101 * t16;
t121 = pkin(4) * t126;
t17 = t102 * t38 - t39 * t98;
t13 = -pkin(10) * t46 - t121 + t17;
t8 = t13 * t97 + t128;
t6 = -pkin(11) * t126 + t8;
t2 = t10 * t100 - t6 * t96;
t3 = t10 * t96 + t100 * t6;
t160 = t3 * t100 - t2 * t96;
t137 = pkin(9) + qJ(3);
t116 = t137 * t94;
t117 = t137 * t92;
t55 = -t102 * t117 - t98 * t116;
t107 = -t72 * pkin(10) + t55;
t56 = t102 * t116 - t98 * t117;
t44 = t71 * pkin(10) + t56;
t26 = -t101 * t107 + t44 * t97;
t159 = t26 ^ 2;
t158 = t32 ^ 2;
t52 = -t101 * t71 + t72 * t97;
t157 = t52 ^ 2;
t156 = -0.2e1 * t32;
t82 = -pkin(3) * t94 - pkin(2);
t60 = -pkin(4) * t71 + t82;
t155 = 0.2e1 * t60;
t154 = 0.2e1 * t72;
t153 = 0.2e1 * t93;
t152 = 0.2e1 * t94;
t145 = t101 * pkin(4);
t84 = -pkin(5) - t145;
t148 = pkin(5) - t84;
t115 = -t101 * t13 + t16 * t97;
t5 = pkin(5) * t126 + t115;
t146 = t100 * t5;
t24 = t100 * t34 - t96 * t126;
t21 = t24 * t96;
t144 = t32 * t52;
t143 = t65 * t94;
t142 = t67 * t92;
t140 = t95 * t99;
t30 = t96 * t32;
t49 = t96 * t52;
t139 = t96 * t54;
t138 = t96 * t83;
t135 = t133 * pkin(11);
t87 = t92 ^ 2;
t89 = t94 ^ 2;
t134 = t87 + t89;
t132 = t100 * t24;
t131 = t100 * t26;
t31 = t100 * t32;
t130 = t100 * t54;
t129 = t100 * t83;
t88 = t93 ^ 2;
t127 = t103 * t88;
t22 = t100 * t126 + t34 * t96;
t20 = t22 * t100;
t125 = t96 * t100;
t124 = t52 * t161;
t123 = -0.2e1 * t126;
t122 = 0.2e1 * t126;
t119 = qJ(3) * t126;
t114 = -pkin(5) * t54 - pkin(11) * t52;
t112 = t100 * t2 + t3 * t96;
t111 = -t40 * t92 + t41 * t94;
t110 = -t52 * t83 + t54 * t84;
t28 = t101 * t44 + t97 * t107;
t29 = pkin(5) * t52 - pkin(11) * t54 + t60;
t14 = t100 * t29 - t28 * t96;
t15 = t100 * t28 + t29 * t96;
t9 = t100 * t15 - t14 * t96;
t109 = t100 * t14 + t15 * t96;
t108 = -t20 + t21;
t81 = t88 * t103 ^ 2;
t77 = 0.2e1 * t125;
t70 = pkin(1) * t140 + t120;
t69 = t95 * t147 - t76;
t51 = t54 ^ 2;
t50 = t100 * t52;
t47 = t54 * t125;
t37 = (-t90 + t91) * t54;
t25 = t26 * t96;
t19 = t96 * t22;
t11 = -t19 + t132;
t4 = t5 * t96;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88 * t99 ^ 2, 0.2e1 * t99 * t127, t140 * t153, t81, t95 * t122, t95 ^ 2, 0.2e1 * pkin(1) * t127 + 0.2e1 * t69 * t95, -0.2e1 * t88 * t151 - 0.2e1 * t70 * t95 (t103 * t70 - t69 * t99) * t153, pkin(1) ^ 2 * t88 + t69 ^ 2 + t70 ^ 2, t67 ^ 2, -0.2e1 * t67 * t65, t67 * t123, t65 ^ 2, t65 * t122, t81, -0.2e1 * t40 * t126 + 0.2e1 * t64 * t65, 0.2e1 * t41 * t126 + 0.2e1 * t64 * t67, -0.2e1 * t40 * t67 - 0.2e1 * t41 * t65, t40 ^ 2 + t41 ^ 2 + t64 ^ 2, t46 ^ 2, 0.2e1 * t46 * t45, t46 * t123, t45 ^ 2, t45 * t123, t81, -0.2e1 * t17 * t126 - 0.2e1 * t45 * t48, 0.2e1 * t18 * t126 + 0.2e1 * t46 * t48, -0.2e1 * t17 * t46 + 0.2e1 * t18 * t45, t17 ^ 2 + t18 ^ 2 + t48 ^ 2, t34 ^ 2, t34 * t156, t34 * t123, t158, t32 * t122, t81, 0.2e1 * t115 * t126 + 0.2e1 * t32 * t35, 0.2e1 * t8 * t126 + 0.2e1 * t34 * t35, 0.2e1 * t115 * t34 - 0.2e1 * t32 * t8, t115 ^ 2 + t35 ^ 2 + t8 ^ 2, t24 ^ 2, -0.2e1 * t24 * t22, 0.2e1 * t24 * t32, t22 ^ 2, t22 * t156, t158, 0.2e1 * t2 * t32 + 0.2e1 * t22 * t5, 0.2e1 * t24 * t5 - 0.2e1 * t3 * t32, -0.2e1 * t2 * t24 - 0.2e1 * t22 * t3, t2 ^ 2 + t3 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, 0, t126, t95, t69, -t70, 0, 0, t142, -t65 * t92 + t67 * t94, -t92 * t126, -t143, -t94 * t126, 0, -pkin(2) * t65 + t92 * t119 - t64 * t94, -pkin(2) * t67 + t94 * t119 + t64 * t92 (t142 - t143) * qJ(3) + t111, -pkin(2) * t64 + t111 * qJ(3), t46 * t72, t45 * t72 + t46 * t71, -t72 * t126, t45 * t71, -t71 * t126, 0, -t55 * t126 - t45 * t82 - t48 * t71, t56 * t126 + t46 * t82 + t48 * t72, -t17 * t72 + t18 * t71 + t45 * t56 - t46 * t55, t17 * t55 + t18 * t56 + t48 * t82, t34 * t54, -t32 * t54 - t34 * t52, -t54 * t126, t144, t52 * t126, 0, t26 * t126 + t32 * t60 + t35 * t52, t28 * t126 + t34 * t60 + t35 * t54, t115 * t54 + t26 * t34 - t28 * t32 - t52 * t8, t115 * t26 + t28 * t8 + t35 * t60, t24 * t130 (-t20 - t21) * t54, t130 * t32 + t24 * t52, t22 * t139, -t139 * t32 - t22 * t52, t144, t139 * t5 + t14 * t32 + t2 * t52 + t22 * t26, t130 * t5 - t15 * t32 + t24 * t26 - t3 * t52, -t112 * t54 - t14 * t24 - t15 * t22, t14 * t2 + t15 * t3 + t26 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t87, t92 * t152, 0, t89, 0, 0, pkin(2) * t152, -0.2e1 * pkin(2) * t92, 0.2e1 * t134 * qJ(3), t134 * qJ(3) ^ 2 + pkin(2) ^ 2, t72 ^ 2, t71 * t154, 0, t71 ^ 2, 0, 0, -0.2e1 * t82 * t71, t82 * t154, -0.2e1 * t55 * t72 + 0.2e1 * t56 * t71, t55 ^ 2 + t56 ^ 2 + t82 ^ 2, t51, t124, 0, t157, 0, 0, t52 * t155, t54 * t155, 0.2e1 * t26 * t54 - 0.2e1 * t28 * t52, t28 ^ 2 + t60 ^ 2 + t159, t91 * t51, -0.2e1 * t51 * t125, 0.2e1 * t52 * t130, t90 * t51, t96 * t124, t157, 0.2e1 * t139 * t26 + 0.2e1 * t14 * t52, 0.2e1 * t130 * t26 - 0.2e1 * t15 * t52, t109 * t161, t14 ^ 2 + t15 ^ 2 + t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t67, 0, t64, 0, 0, 0, 0, 0, 0, -t45, t46, 0, t48, 0, 0, 0, 0, 0, 0, t32, t34, 0, t35, 0, 0, 0, 0, 0, 0, t31, -t30, -t19 - t132, t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94, t92, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t71, t72, 0, t82, 0, 0, 0, 0, 0, 0, t52, t54, 0, t60, 0, 0, 0, 0, 0, 0, t50, -t49, -t133 * t54, t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, t45, -t126, t17, -t18, 0, 0, 0, 0, t34, 0, -t32, -t126, -t101 * t121 - t115, -t128 + (-t13 + t121) * t97 (-t101 * t34 - t32 * t97) * pkin(4) (-t101 * t115 + t8 * t97) * pkin(4), t21, t11, t30, -t20, t31, 0, -t138 * t32 + t22 * t84 - t146, -t129 * t32 + t24 * t84 + t4, t108 * t83 + t160, t160 * t83 + t5 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t71, 0, t55, -t56, 0, 0, 0, 0, t54, 0, -t52, 0, -t26, -t28 (-t101 * t54 - t52 * t97) * pkin(4) (-t101 * t26 + t28 * t97) * pkin(4), t47, t37, t49, -t47, t50, 0, t110 * t96 - t131, t100 * t110 + t25, t9, t26 * t84 + t83 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t145, -0.2e1 * t149, 0 (t101 ^ 2 + t97 ^ 2) * pkin(4) ^ 2, t90, t77, 0, t91, 0, 0, -0.2e1 * t84 * t100, 0.2e1 * t84 * t96, 0.2e1 * t136, t133 * t83 ^ 2 + t84 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t32, -t126, -t115, -t8, 0, 0, t21, t11, t30, -t20, t31, 0, -pkin(5) * t22 - pkin(11) * t30 - t146, -pkin(5) * t24 - pkin(11) * t31 + t4, pkin(11) * t108 + t160, -pkin(5) * t5 + pkin(11) * t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, 0, -t26, -t28, 0, 0, t47, t37, t49, -t47, t50, 0, t114 * t96 - t131, t100 * t114 + t25, t9, -pkin(5) * t26 + pkin(11) * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t145, -t149, 0, 0, t90, t77, 0, t91, 0, 0, t148 * t100, -t148 * t96, t135 + t136, -pkin(5) * t84 + pkin(11) * t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t90, t77, 0, t91, 0, 0, 0.2e1 * pkin(5) * t100, -0.2e1 * pkin(5) * t96, 0.2e1 * t135, pkin(11) ^ 2 * t133 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t22, t32, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t130, 0, -t139, t52, t14, -t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, -t96, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, t100, 0, -t138, -t129, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, t100, 0, -t96 * pkin(11), -t100 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
