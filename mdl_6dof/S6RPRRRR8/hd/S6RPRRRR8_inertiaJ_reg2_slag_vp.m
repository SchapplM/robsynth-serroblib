% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:22
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRR8_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR8_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRR8_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 04:15:55
% EndTime: 2019-05-06 04:16:02
% DurationCPUTime: 2.14s
% Computational Cost: add. (1765->179), mult. (3127->292), div. (0->0), fcn. (3643->8), ass. (0->110)
t92 = sin(qJ(5));
t86 = t92 ^ 2;
t96 = cos(qJ(5));
t88 = t96 ^ 2;
t112 = t86 + t88;
t93 = sin(qJ(4));
t131 = t93 * pkin(3);
t79 = pkin(9) + t131;
t145 = t112 * t79;
t94 = sin(qJ(3));
t97 = cos(qJ(4));
t98 = cos(qJ(3));
t61 = t93 * t98 + t94 * t97;
t64 = -t93 * t94 + t97 * t98;
t144 = (t61 * t93 + t64 * t97) * pkin(3);
t141 = t64 ^ 2;
t55 = t61 ^ 2;
t143 = t55 + t141;
t99 = -pkin(1) - pkin(7);
t126 = -pkin(8) + t99;
t109 = t126 * t98;
t67 = t126 * t94;
t35 = -t97 * t109 + t67 * t93;
t142 = t35 ^ 2;
t140 = 0.2e1 * t61;
t128 = t97 * pkin(3);
t81 = -pkin(5) * t96 - pkin(4);
t68 = t81 - t128;
t139 = 0.2e1 * t68;
t76 = t94 * pkin(3) + qJ(2);
t138 = 0.2e1 * t76;
t137 = 0.2e1 * t81;
t136 = 0.2e1 * qJ(2);
t37 = t93 * t109 + t97 * t67;
t120 = t96 * t37;
t30 = pkin(4) * t61 - pkin(9) * t64 + t76;
t10 = t120 + (-pkin(10) * t64 + t30) * t92;
t11 = t96 * t30 - t37 * t92;
t119 = t96 * t64;
t134 = pkin(5) * t61;
t9 = -pkin(10) * t119 + t11 + t134;
t91 = sin(qJ(6));
t95 = cos(qJ(6));
t3 = -t10 * t91 + t95 * t9;
t121 = t95 * t10;
t4 = t9 * t91 + t121;
t59 = t91 * t92 - t95 * t96;
t63 = t91 * t96 + t92 * t95;
t135 = -t3 * t63 - t4 * t59;
t133 = t64 * pkin(4);
t132 = t91 * pkin(5);
t130 = t95 * pkin(5);
t129 = t96 * pkin(9);
t80 = -pkin(4) - t128;
t127 = pkin(4) - t80;
t125 = t35 * t64;
t124 = t35 * t96;
t40 = t63 * t61;
t42 = t64 * t63;
t123 = t64 * t80;
t48 = t92 * t61;
t50 = t92 * t64;
t122 = t92 * t96;
t49 = t96 * t61;
t118 = t96 * t79;
t51 = (-pkin(10) - t79) * t92;
t85 = t96 * pkin(10);
t52 = t85 + t118;
t28 = t51 * t95 - t52 * t91;
t29 = t51 * t91 + t52 * t95;
t117 = -t28 * t63 - t29 * t59;
t69 = (-pkin(10) - pkin(9)) * t92;
t70 = t85 + t129;
t43 = t69 * t95 - t70 * t91;
t44 = t69 * t91 + t70 * t95;
t116 = -t43 * t63 - t44 * t59;
t115 = t68 + t81;
t113 = pkin(9) * t112;
t87 = t94 ^ 2;
t89 = t98 ^ 2;
t73 = t87 + t89;
t111 = -0.2e1 * t64 * t61;
t33 = t112 * t61;
t107 = -pkin(9) * t61 - t133;
t12 = t30 * t92 + t120;
t5 = -t11 * t92 + t12 * t96;
t106 = -t37 * t61 + t125;
t105 = -t61 * t79 + t123;
t100 = qJ(2) ^ 2;
t74 = 0.2e1 * t122;
t66 = t73 * t99;
t56 = t63 ^ 2;
t54 = t59 ^ 2;
t47 = t92 * t119;
t41 = t64 * t59;
t39 = t59 * t61;
t38 = -0.2e1 * t63 * t59;
t34 = t35 * t92;
t32 = (-t86 + t88) * t64;
t31 = (-t59 * t91 - t63 * t95) * pkin(5);
t26 = t95 * t119 - t91 * t50;
t25 = -t91 * t48 + t95 * t49;
t19 = pkin(5) * t50 + t35;
t16 = t26 * t63;
t15 = t42 * t59;
t14 = t19 * t63;
t13 = t19 * t59;
t8 = -t26 * t59 - t42 * t63;
t7 = -t25 * t59 + t40 * t63;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t136 (pkin(1) ^ 2) + t100, t89, -0.2e1 * t98 * t94, 0, t87, 0, 0, t94 * t136, t98 * t136, -0.2e1 * t66, t73 * t99 ^ 2 + t100, t141, t111, 0, t55, 0, 0, t61 * t138, t64 * t138, 0.2e1 * t106, t37 ^ 2 + t76 ^ 2 + t142, t88 * t141, -0.2e1 * t141 * t122, t119 * t140, t86 * t141, t92 * t111, t55, 0.2e1 * t11 * t61 + 0.2e1 * t35 * t50, 0.2e1 * t119 * t35 - 0.2e1 * t12 * t61, 0.2e1 * (-t11 * t96 - t12 * t92) * t64, t11 ^ 2 + t12 ^ 2 + t142, t26 ^ 2, -0.2e1 * t26 * t42, t26 * t140, t42 ^ 2, -t42 * t140, t55, 0.2e1 * t19 * t42 + 0.2e1 * t3 * t61, 0.2e1 * t19 * t26 - 0.2e1 * t4 * t61, -0.2e1 * t26 * t3 - 0.2e1 * t4 * t42, t19 ^ 2 + t3 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t73, t66, 0, 0, 0, 0, 0, 0, 0, 0, -t143, -t106, 0, 0, 0, 0, 0, 0, -t143 * t92, -t143 * t96, 0, t5 * t61 - t125, 0, 0, 0, 0, 0, 0, -t40 * t61 - t42 * t64, -t25 * t61 - t26 * t64, -t25 * t42 + t26 * t40, -t19 * t64 + t25 * t4 - t3 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112 * t55 + t141, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25 ^ 2 + t40 ^ 2 + t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, -t94, 0, t98 * t99, -t94 * t99, 0, 0, 0, 0, t64, 0, -t61, 0, -t35, -t37, -t144 (-t35 * t97 + t37 * t93) * pkin(3), t47, t32, t48, -t47, t49, 0, t105 * t92 - t124, t105 * t96 + t34, t5, t35 * t80 + t5 * t79, t16, t8, t40, t15, -t39, 0, t28 * t61 + t42 * t68 + t13, t26 * t68 - t29 * t61 + t14, -t26 * t28 - t29 * t42 + t135, t19 * t68 + t28 * t3 + t29 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, -t94, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t61, 0, t144, 0, 0, 0, 0, 0, 0, t119, -t50, t33, t145 * t61 - t123, 0, 0, 0, 0, 0, 0, -t41, -t42, t7, t25 * t29 - t28 * t40 - t64 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t128, -0.2e1 * t131, 0 (t93 ^ 2 + t97 ^ 2) * pkin(3) ^ 2, t86, t74, 0, t88, 0, 0, -0.2e1 * t80 * t96, 0.2e1 * t80 * t92, 0.2e1 * t145, t112 * t79 ^ 2 + t80 ^ 2, t56, t38, 0, t54, 0, 0, t59 * t139, t63 * t139, 0.2e1 * t117, t28 ^ 2 + t29 ^ 2 + t68 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, -t61, 0, -t35, -t37, 0, 0, t47, t32, t48, -t47, t49, 0, t107 * t92 - t124, t107 * t96 + t34, t5, -t35 * pkin(4) + pkin(9) * t5, t16, t8, t40, t15, -t39, 0, t42 * t81 + t43 * t61 + t13, t26 * t81 - t44 * t61 + t14, -t26 * t43 - t42 * t44 + t135, t19 * t81 + t3 * t43 + t4 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t61, 0, 0, 0, 0, 0, 0, 0, 0, t119, -t50, t33, pkin(9) * t33 + t133, 0, 0, 0, 0, 0, 0, -t41, -t42, t7, t25 * t44 - t40 * t43 - t64 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t128, -t131, 0, 0, t86, t74, 0, t88, 0, 0, t127 * t96, -t127 * t92, t113 + t145, -t80 * pkin(4) + pkin(9) * t145, t56, t38, 0, t54, 0, 0, t115 * t59, t115 * t63, t116 + t117, t28 * t43 + t29 * t44 + t68 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t86, t74, 0, t88, 0, 0, 0.2e1 * pkin(4) * t96, -0.2e1 * pkin(4) * t92, 0.2e1 * t113, pkin(9) ^ 2 * t112 + pkin(4) ^ 2, t56, t38, 0, t54, 0, 0, t59 * t137, t63 * t137, 0.2e1 * t116, t43 ^ 2 + t44 ^ 2 + t81 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, 0, -t50, t61, t11, -t12, 0, 0, 0, 0, t26, 0, -t42, t61, t61 * t130 + t3, -t121 + (-t9 - t134) * t91 (-t26 * t95 - t42 * t91) * pkin(5) (t3 * t95 + t4 * t91) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48, -t49, 0, 0, 0, 0, 0, 0, 0, 0, -t40, -t25, 0 (t25 * t91 - t40 * t95) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t96, 0, -t92 * t79, -t118, 0, 0, 0, 0, t63, 0, -t59, 0, t28, -t29, t31 (t28 * t95 + t29 * t91) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t96, 0, -t92 * pkin(9), -t129, 0, 0, 0, 0, t63, 0, -t59, 0, t43, -t44, t31 (t43 * t95 + t44 * t91) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t130, -0.2e1 * t132, 0 (t91 ^ 2 + t95 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t42, t61, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, -t25, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, -t59, 0, t28, -t29, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, -t59, 0, t43, -t44, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t130, -t132, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
