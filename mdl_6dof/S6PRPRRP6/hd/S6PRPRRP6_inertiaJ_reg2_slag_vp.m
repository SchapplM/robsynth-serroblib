% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRP6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRRP6_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:02:08
% EndTime: 2019-05-05 00:02:12
% DurationCPUTime: 1.34s
% Computational Cost: add. (436->113), mult. (957->182), div. (0->0), fcn. (1035->8), ass. (0->91)
t58 = sin(qJ(5));
t61 = cos(qJ(5));
t57 = cos(pkin(6));
t59 = sin(qJ(4));
t62 = cos(qJ(4));
t56 = sin(pkin(6));
t63 = cos(qJ(2));
t92 = t56 * t63;
t21 = t57 * t62 - t59 * t92;
t60 = sin(qJ(2));
t93 = t56 * t60;
t7 = t21 * t58 - t61 * t93;
t9 = t21 * t61 + t58 * t93;
t78 = t58 * t7 + t61 * t9;
t51 = t58 ^ 2;
t53 = t61 ^ 2;
t82 = t51 + t53;
t106 = 2 * pkin(5);
t19 = t57 * t59 + t62 * t92;
t17 = t19 ^ 2;
t105 = -0.2e1 * t58;
t104 = 0.2e1 * t61;
t103 = 0.2e1 * t62;
t102 = 2 * qJ(3);
t101 = pkin(9) * t59;
t100 = t58 * pkin(9);
t99 = t61 * pkin(9);
t98 = t62 * pkin(4);
t96 = t19 * t58;
t95 = t19 * t61;
t94 = t19 * t62;
t42 = t58 * t59;
t91 = t58 * t61;
t43 = t58 * t62;
t64 = -pkin(2) - pkin(8);
t90 = t58 * t64;
t89 = t59 * t64;
t45 = t61 * t59;
t46 = t61 * t62;
t88 = t61 * t64;
t72 = -pkin(5) * t61 - qJ(6) * t58;
t31 = -pkin(4) + t72;
t87 = t62 * t31;
t86 = t62 * t59;
t85 = t62 * t64;
t30 = pkin(4) * t59 - pkin(9) * t62 + qJ(3);
t13 = t30 * t58 + t59 * t88;
t84 = t82 * t101;
t83 = t82 * pkin(9) ^ 2;
t52 = t59 ^ 2;
t54 = t62 ^ 2;
t37 = t52 + t54;
t81 = t59 * qJ(6);
t80 = t58 * t86;
t79 = t54 * t91;
t77 = t7 ^ 2 + t9 ^ 2 + t17;
t76 = t19 * t43 - t59 * t7;
t75 = t78 * pkin(9);
t74 = -t98 - t101;
t73 = -t87 + t101;
t71 = -pkin(5) * t58 + qJ(6) * t61;
t10 = t81 + t13;
t23 = t61 * t30;
t11 = -t23 + (-pkin(5) + t90) * t59;
t70 = t10 * t61 + t11 * t58;
t12 = -t58 * t89 + t23;
t69 = -t12 * t58 + t13 * t61;
t2 = -t21 * t59 + t94;
t68 = (-t58 * t9 + t61 * t7) * t62;
t67 = t42 * t7 + t45 * t9 - t94;
t65 = qJ(3) ^ 2;
t55 = t64 ^ 2;
t50 = t56 ^ 2;
t47 = t54 * t55;
t44 = t53 * t54;
t41 = t51 * t54;
t40 = t50 * t60 ^ 2;
t36 = qJ(3) * t93;
t34 = t58 * t46;
t32 = t86 * t104;
t29 = 0.2e1 * t82 * pkin(9);
t28 = t37 * t64;
t27 = t37 * t61;
t26 = t82 * t59;
t25 = t37 * t58;
t24 = (t51 - t53) * t62;
t18 = t52 * t82 + t54;
t16 = t50 * t63 ^ 2 + t57 ^ 2 + t40;
t15 = (-t64 - t71) * t62;
t1 = -t19 * t46 + t59 * t9;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21 ^ 2 + t17 + t40, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t93, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, t93, pkin(2) * t92 + t36, 0, 0, 0, 0, 0, 0, t59 * t93, t62 * t93, t2, -t2 * t64 + t36, 0, 0, 0, 0, 0, 0, t76, -t1, t68, -t12 * t7 + t13 * t9 - t19 * t85, 0, 0, 0, 0, 0, 0, t76, t68, t1, t10 * t9 + t11 * t7 + t15 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(2), t102, pkin(2) ^ 2 + t65, t54, -0.2e1 * t86, 0, t52, 0, 0, t59 * t102, t62 * t102, -0.2e1 * t28, t52 * t55 + t47 + t65, t44, -0.2e1 * t79, t32, t41, -0.2e1 * t80, t52, 0.2e1 * t12 * t59 - 0.2e1 * t54 * t90, -0.2e1 * t13 * t59 - 0.2e1 * t54 * t88 (-t12 * t61 - t13 * t58) * t103, t12 ^ 2 + t13 ^ 2 + t47, t44, t32, 0.2e1 * t79, t52, 0.2e1 * t80, t41, -0.2e1 * t11 * t59 + 0.2e1 * t15 * t43 (-t10 * t58 + t11 * t61) * t103, 0.2e1 * t10 * t59 - 0.2e1 * t15 * t46, t10 ^ 2 + t11 ^ 2 + t15 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t37, t28, 0, 0, 0, 0, 0, 0, -t25, -t27, 0, t54 * t64 + t59 * t69, 0, 0, 0, 0, 0, 0, -t25, 0, t27, -t15 * t62 + t59 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t21, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t96, t78, -pkin(4) * t19 + t75, 0, 0, 0, 0, 0, 0, -t95, t78, -t96, t19 * t31 + t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, -t59, 0, t85, -t89, 0, 0, t34, -t24, t42, -t34, t45, 0, t58 * t74 + t61 * t85, -t58 * t85 + t61 * t74, t69, pkin(4) * t85 + pkin(9) * t69, t34, t42, t24, 0, -t45, -t34, -t15 * t61 - t58 * t73, t70, -t15 * t58 + t61 * t73, pkin(9) * t70 + t15 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t59, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t43, t26, t84 + t98, 0, 0, 0, 0, 0, 0, t46, t26, t43, t84 - t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t51, 0.2e1 * t91, 0, t53, 0, 0, pkin(4) * t104, pkin(4) * t105, t29, pkin(4) ^ 2 + t83, t51, 0, -0.2e1 * t91, 0, 0, t53, -0.2e1 * t31 * t61, t29, t31 * t105, t31 ^ 2 + t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t7, -t9, 0, 0, 0, 0, 0, 0, 0, 0, -t7, 0, t9, -pkin(5) * t7 + qJ(6) * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t43, t59, t12, -t13, 0, 0, 0, t46, 0, t59, t43, 0, t23 + (t106 - t90) * t59, t72 * t62, 0.2e1 * t81 + t13, -pkin(5) * t11 + qJ(6) * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, -t45, 0, 0, 0, 0, 0, 0, 0, 0, -t42, 0, t45, t71 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t61, 0, -t100, -t99, 0, 0, 0, t58, 0, 0, -t61, 0, -t100, t71, t99, t71 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t106, 0, 0.2e1 * qJ(6) (pkin(5) ^ 2) + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, t46, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
