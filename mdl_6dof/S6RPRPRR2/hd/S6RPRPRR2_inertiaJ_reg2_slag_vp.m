% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:39
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPRR2_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:24:30
% EndTime: 2019-05-05 18:24:35
% DurationCPUTime: 1.49s
% Computational Cost: add. (1493->137), mult. (2736->242), div. (0->0), fcn. (3197->10), ass. (0->92)
t67 = sin(qJ(6));
t70 = cos(qJ(6));
t63 = sin(pkin(11));
t65 = cos(pkin(11));
t69 = sin(qJ(3));
t72 = cos(qJ(3));
t43 = t63 * t72 + t65 * t69;
t71 = cos(qJ(5));
t86 = t71 * t43;
t68 = sin(qJ(5));
t89 = t68 * t43;
t19 = -t67 * t89 + t70 * t86;
t46 = t67 * t68 - t70 * t71;
t10 = t19 * t46;
t48 = t67 * t71 + t70 * t68;
t17 = t48 * t43;
t91 = t48 * t17;
t109 = -t91 + t10;
t108 = -0.2e1 * t43;
t64 = sin(pkin(10));
t99 = t64 * pkin(1);
t55 = pkin(7) + t99;
t83 = qJ(4) + t55;
t35 = t83 * t72;
t79 = t83 * t69;
t20 = t63 * t35 + t65 * t79;
t107 = t20 ^ 2;
t41 = t63 * t69 - t65 * t72;
t106 = t41 ^ 2;
t105 = 0.2e1 * t41;
t98 = t65 * pkin(3);
t56 = -pkin(4) - t98;
t49 = -t71 * pkin(5) + t56;
t104 = 0.2e1 * t49;
t66 = cos(pkin(10));
t97 = t66 * pkin(1);
t57 = -pkin(2) - t97;
t50 = -t72 * pkin(3) + t57;
t103 = 0.2e1 * t50;
t102 = 0.2e1 * t69;
t101 = t41 * pkin(5);
t100 = t63 * pkin(3);
t96 = t67 * pkin(5);
t95 = t70 * pkin(5);
t14 = t41 * pkin(4) - t43 * pkin(8) + t50;
t22 = t65 * t35 - t63 * t79;
t87 = t71 * t22;
t5 = t87 + (-pkin(9) * t43 + t14) * t68;
t94 = t70 * t5;
t54 = pkin(8) + t100;
t93 = pkin(9) + t54;
t92 = t20 * t41;
t26 = t41 * t46;
t27 = t48 * t41;
t59 = t68 ^ 2;
t90 = t59 * t43;
t31 = t68 * t41;
t88 = t68 * t71;
t61 = t71 ^ 2;
t85 = t59 + t61;
t60 = t69 ^ 2;
t62 = t72 ^ 2;
t84 = t60 + t62;
t82 = t41 * t108;
t81 = t68 * t86;
t6 = t71 * t14 - t68 * t22;
t4 = -pkin(9) * t86 + t101 + t6;
t1 = t70 * t4 - t67 * t5;
t80 = t85 * t54;
t7 = t68 * t14 + t87;
t78 = t6 * t71 + t7 * t68;
t77 = -t6 * t68 + t7 * t71;
t76 = -t41 * t54 + t43 * t56;
t45 = t48 ^ 2;
t44 = t46 ^ 2;
t40 = t43 ^ 2;
t37 = t93 * t71;
t36 = t93 * t68;
t34 = t71 * t41;
t33 = t61 * t43;
t32 = t61 * t40;
t30 = t59 * t40;
t25 = -t33 - t90;
t24 = -t67 * t36 + t70 * t37;
t23 = -t70 * t36 - t67 * t37;
t16 = t19 ^ 2;
t15 = t17 ^ 2;
t11 = t19 * t48;
t9 = t17 * t46;
t8 = pkin(5) * t89 + t20;
t2 = t67 * t4 + t94;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t97, -0.2e1 * t99, 0 (t64 ^ 2 + t66 ^ 2) * pkin(1) ^ 2, t60, t72 * t102, 0, t62, 0, 0, -0.2e1 * t57 * t72, t57 * t102, 0.2e1 * t84 * t55, t84 * t55 ^ 2 + t57 ^ 2, t40, t82, 0, t106, 0, 0, t41 * t103, t43 * t103, 0.2e1 * t20 * t43 - 0.2e1 * t22 * t41, t22 ^ 2 + t50 ^ 2 + t107, t32, -0.2e1 * t40 * t88, t86 * t105, t30, t68 * t82, t106, 0.2e1 * t20 * t89 + 0.2e1 * t6 * t41, 0.2e1 * t20 * t86 - 0.2e1 * t7 * t41, t78 * t108, t6 ^ 2 + t7 ^ 2 + t107, t16, -0.2e1 * t19 * t17, t19 * t105, t15, -t17 * t105, t106, 0.2e1 * t1 * t41 + 0.2e1 * t8 * t17, 0.2e1 * t8 * t19 - 0.2e1 * t2 * t41, -0.2e1 * t1 * t19 - 0.2e1 * t2 * t17, t1 ^ 2 + t2 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 * t43 + t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77 * t43 + t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t17 + t2 * t19 + t8 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 + t106, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 + t30 + t106, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 + t15 + t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, t72, 0, -t69 * t55, -t72 * t55, 0, 0, 0, 0, t43, 0, -t41, 0, -t20, -t22 (-t41 * t63 - t43 * t65) * pkin(3) (-t20 * t65 + t22 * t63) * pkin(3), t81, t33 - t90, t31, -t81, t34, 0, -t20 * t71 + t76 * t68, t20 * t68 + t76 * t71, t77, t20 * t56 + t77 * t54, t11, -t91 - t10, t27, t9, -t26, 0, t49 * t17 + t23 * t41 + t8 * t46, t49 * t19 - t24 * t41 + t8 * t48, -t1 * t48 - t24 * t17 - t23 * t19 - t2 * t46, t1 * t23 + t2 * t24 + t8 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, -t69, 0, 0, 0, 0, 0, 0, 0, 0, -t41, -t43, 0 (-t41 * t65 + t43 * t63) * pkin(3), 0, 0, 0, 0, 0, 0, -t34, t31, -t25, t41 * t56 + t43 * t80, 0, 0, 0, 0, 0, 0, t26, t27, -t109, -t17 * t23 + t19 * t24 + t41 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t98, -0.2e1 * t100, 0 (t63 ^ 2 + t65 ^ 2) * pkin(3) ^ 2, t59, 0.2e1 * t88, 0, t61, 0, 0, -0.2e1 * t56 * t71, 0.2e1 * t56 * t68, 0.2e1 * t80, t85 * t54 ^ 2 + t56 ^ 2, t45, -0.2e1 * t48 * t46, 0, t44, 0, 0, t46 * t104, t48 * t104, -0.2e1 * t23 * t48 - 0.2e1 * t24 * t46, t23 ^ 2 + t24 ^ 2 + t49 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t43, 0, t50, 0, 0, 0, 0, 0, 0, t34, -t31, t25, t78, 0, 0, 0, 0, 0, 0, -t26, -t27, t109, -t1 * t46 + t2 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11 + t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23 * t46 + t24 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 + t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, -t89, t41, t6, -t7, 0, 0, 0, 0, t19, 0, -t17, t41, t41 * t95 + t1, -t94 + (-t4 - t101) * t67 (-t17 * t67 - t19 * t70) * pkin(5) (t1 * t70 + t2 * t67) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, -t86, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0 (-t17 * t70 + t19 * t67) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t71, 0, -t68 * t54, -t71 * t54, 0, 0, 0, 0, t48, 0, -t46, 0, t23, -t24 (-t46 * t67 - t48 * t70) * pkin(5) (t23 * t70 + t24 * t67) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t68, 0, 0, 0, 0, 0, 0, 0, 0, -t46, -t48, 0 (-t46 * t70 + t48 * t67) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t95, -0.2e1 * t96, 0 (t67 ^ 2 + t70 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, -t17, t41, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t46, 0, t23, -t24, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, -t48, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t95, -t96, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
