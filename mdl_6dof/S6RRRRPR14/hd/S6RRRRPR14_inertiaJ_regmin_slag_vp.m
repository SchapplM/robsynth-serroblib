% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRPR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d6,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR14_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR14_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRRPR14_inertiaJ_regmin_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 02:28:57
% EndTime: 2019-05-08 02:29:07
% DurationCPUTime: 2.67s
% Computational Cost: add. (5341->276), mult. (14107->567), div. (0->0), fcn. (16375->14), ass. (0->138)
t112 = sin(qJ(3));
t115 = cos(qJ(3));
t105 = sin(pkin(7));
t108 = cos(pkin(7));
t109 = cos(pkin(6));
t106 = sin(pkin(6));
t113 = sin(qJ(2));
t134 = t106 * t113;
t116 = cos(qJ(2));
t94 = t109 * t116 * pkin(1);
t55 = pkin(2) * t109 + t94 + (-pkin(10) * t108 - pkin(9)) * t134;
t63 = (-pkin(10) * t105 * t113 - pkin(2) * t116 - pkin(1)) * t106;
t119 = t105 * t63 + t108 * t55;
t130 = t108 * t116;
t126 = t106 * t130;
t133 = t106 * t116;
t154 = pkin(1) * t113;
t79 = pkin(9) * t133 + t109 * t154;
t52 = (t105 * t109 + t126) * pkin(10) + t79;
t28 = -t112 * t52 + t115 * t119;
t110 = sin(qJ(6));
t155 = cos(qJ(6));
t104 = sin(pkin(13));
t107 = cos(pkin(13));
t135 = t105 * t115;
t111 = sin(qJ(4));
t114 = cos(qJ(4));
t136 = t105 * t112;
t75 = t108 * t111 + t114 * t136;
t56 = t104 * t75 + t107 * t135;
t57 = -t104 * t135 + t107 * t75;
t36 = t110 * t57 + t155 * t56;
t163 = -0.2e1 * t36;
t54 = t109 * t136 + (t112 * t130 + t113 * t115) * t106;
t72 = t105 * t133 - t108 * t109;
t43 = t111 * t54 + t114 * t72;
t162 = -0.2e1 * t43;
t53 = -t109 * t135 + t112 * t134 - t115 * t126;
t161 = 0.2e1 * t53;
t160 = -0.2e1 * t54;
t118 = -t104 * t110 + t107 * t155;
t71 = t118 * t111;
t159 = -0.2e1 * t71;
t158 = -0.2e1 * t75;
t97 = -pkin(5) * t107 - pkin(4);
t157 = 0.2e1 * t97;
t156 = 0.2e1 * t114;
t153 = pkin(2) * t112;
t152 = pkin(2) * t115;
t151 = pkin(11) * t104;
t98 = t111 * pkin(11);
t150 = t114 * pkin(11);
t149 = pkin(12) + qJ(5);
t38 = -t105 * t55 + t108 * t63;
t22 = pkin(3) * t53 - pkin(11) * t54 + t38;
t29 = t112 * t119 + t115 * t52;
t25 = -pkin(11) * t72 + t29;
t14 = t111 * t22 + t114 * t25;
t11 = qJ(5) * t53 + t14;
t24 = pkin(3) * t72 - t28;
t44 = -t111 * t72 + t114 * t54;
t17 = pkin(4) * t43 - qJ(5) * t44 + t24;
t6 = t104 * t17 + t107 * t11;
t91 = pkin(10) * t136;
t67 = t91 + (-pkin(3) - t152) * t108;
t74 = -t108 * t114 + t111 * t136;
t42 = pkin(4) * t74 - qJ(5) * t75 + t67;
t127 = pkin(10) * t135;
t68 = t127 + (pkin(11) + t153) * t108;
t69 = (-pkin(3) * t115 - pkin(11) * t112 - pkin(2)) * t105;
t48 = t111 * t69 + t114 * t68;
t45 = -qJ(5) * t135 + t48;
t27 = t104 * t42 + t107 * t45;
t86 = -pkin(4) * t114 - qJ(5) * t111 - pkin(3);
t65 = t104 * t86 + t107 * t150;
t13 = -t111 * t25 + t114 * t22;
t12 = -pkin(4) * t53 - t13;
t148 = t104 * t12;
t47 = -t111 * t68 + t114 * t69;
t46 = pkin(4) * t135 - t47;
t147 = t104 * t46;
t146 = t107 * t12;
t145 = t107 * t46;
t144 = t111 * t53;
t143 = t114 * t53;
t142 = t104 ^ 2 + t107 ^ 2;
t141 = qJ(5) * t104;
t140 = qJ(5) * t107;
t100 = t105 ^ 2;
t139 = t100 * t115;
t101 = t106 ^ 2;
t138 = t101 * t116;
t137 = t104 * t111;
t132 = t107 * t111;
t131 = t108 * t112;
t129 = 0.2e1 * t135;
t128 = 0.2e1 * t106 * t109;
t125 = t111 * t135;
t124 = t114 * t135;
t5 = -t104 * t11 + t107 * t17;
t26 = -t104 * t45 + t107 * t42;
t123 = -t104 * t5 + t107 * t6;
t122 = -pkin(4) * t111 + qJ(5) * t114;
t121 = -t104 * t26 + t107 * t27;
t81 = t107 * t86;
t64 = -t104 * t150 + t81;
t120 = -t104 * t64 + t107 * t65;
t83 = t104 * t155 + t107 * t110;
t103 = t111 ^ 2;
t88 = t149 * t107;
t87 = t149 * t104;
t84 = pkin(5) * t137 + t98;
t78 = pkin(2) * t131 + t127;
t77 = -pkin(9) * t134 + t94;
t76 = t108 * t152 - t91;
t70 = t83 * t111;
t60 = -t110 * t87 + t155 * t88;
t59 = -t110 * t88 - t155 * t87;
t58 = -pkin(12) * t137 + t65;
t50 = -pkin(12) * t132 + t81 + (-pkin(5) - t151) * t114;
t37 = -t110 * t56 + t155 * t57;
t35 = t110 * t50 + t155 * t58;
t34 = -t110 * t58 + t155 * t50;
t33 = pkin(5) * t56 + t46;
t32 = t104 * t53 + t107 * t44;
t31 = t104 * t44 - t107 * t53;
t21 = -pkin(12) * t56 + t27;
t20 = pkin(5) * t74 - pkin(12) * t57 + t26;
t19 = -t110 * t31 + t155 * t32;
t18 = t110 * t32 + t155 * t31;
t9 = t110 * t20 + t155 * t21;
t8 = -t110 * t21 + t155 * t20;
t7 = pkin(5) * t31 + t12;
t4 = -pkin(12) * t31 + t6;
t3 = pkin(5) * t43 - pkin(12) * t32 + t5;
t2 = t110 * t3 + t155 * t4;
t1 = -t110 * t4 + t155 * t3;
t10 = [1, 0, 0, t101 * t113 ^ 2, 0.2e1 * t113 * t138, t113 * t128, t116 * t128, t109 ^ 2, 0.2e1 * pkin(1) * t138 + 0.2e1 * t109 * t77, -0.2e1 * t101 * t154 - 0.2e1 * t109 * t79, t54 ^ 2, t53 * t160, t72 * t160, t72 * t161, t72 ^ 2, -0.2e1 * t28 * t72 + 0.2e1 * t38 * t53, 0.2e1 * t29 * t72 + 0.2e1 * t38 * t54, t44 ^ 2, t44 * t162, t44 * t161, t53 * t162, t53 ^ 2, 0.2e1 * t13 * t53 + 0.2e1 * t24 * t43, -0.2e1 * t14 * t53 + 0.2e1 * t24 * t44, 0.2e1 * t12 * t31 + 0.2e1 * t43 * t5, 0.2e1 * t12 * t32 - 0.2e1 * t43 * t6, -0.2e1 * t31 * t6 - 0.2e1 * t32 * t5, t12 ^ 2 + t5 ^ 2 + t6 ^ 2, t19 ^ 2, -0.2e1 * t19 * t18, 0.2e1 * t19 * t43, t18 * t162, t43 ^ 2, 0.2e1 * t1 * t43 + 0.2e1 * t18 * t7, 0.2e1 * t19 * t7 - 0.2e1 * t2 * t43; 0, 0, 0, 0, 0, t134, t133, t109, t77, -t79, t54 * t136 (-t112 * t53 + t115 * t54) * t105, t108 * t54 - t136 * t72, -t108 * t53 - t135 * t72, -t72 * t108, t108 * t28 - t72 * t76 + (-pkin(2) * t53 - t115 * t38) * t105, -t108 * t29 + t72 * t78 + (-pkin(2) * t54 + t112 * t38) * t105, t44 * t75, -t43 * t75 - t44 * t74, -t135 * t44 + t53 * t75, t135 * t43 - t53 * t74, -t53 * t135, -t13 * t135 + t24 * t74 + t43 * t67 + t47 * t53, t135 * t14 + t24 * t75 + t44 * t67 - t48 * t53, t12 * t56 + t26 * t43 + t31 * t46 + t5 * t74, t12 * t57 - t27 * t43 + t32 * t46 - t6 * t74, -t26 * t32 - t27 * t31 - t5 * t57 - t56 * t6, t12 * t46 + t26 * t5 + t27 * t6, t19 * t37, -t18 * t37 - t19 * t36, t19 * t74 + t37 * t43, -t18 * t74 - t36 * t43, t43 * t74, t1 * t74 + t18 * t33 + t36 * t7 + t43 * t8, t19 * t33 - t2 * t74 + t37 * t7 - t43 * t9; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t100 * t112 ^ 2, 0.2e1 * t112 * t139, 0.2e1 * t105 * t131, t108 * t129, t108 ^ 2, 0.2e1 * pkin(2) * t139 + 0.2e1 * t108 * t76, -0.2e1 * t100 * t153 - 0.2e1 * t108 * t78, t75 ^ 2, t74 * t158, t135 * t158, t74 * t129, t100 * t115 ^ 2, -0.2e1 * t135 * t47 + 0.2e1 * t67 * t74, 0.2e1 * t135 * t48 + 0.2e1 * t67 * t75, 0.2e1 * t26 * t74 + 0.2e1 * t46 * t56, -0.2e1 * t27 * t74 + 0.2e1 * t46 * t57, -0.2e1 * t26 * t57 - 0.2e1 * t27 * t56, t26 ^ 2 + t27 ^ 2 + t46 ^ 2, t37 ^ 2, t37 * t163, 0.2e1 * t37 * t74, t74 * t163, t74 ^ 2, 0.2e1 * t33 * t36 + 0.2e1 * t74 * t8, 0.2e1 * t33 * t37 - 0.2e1 * t74 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t53, -t72, t28, -t29, t44 * t111, -t111 * t43 + t114 * t44, t144, t143, 0, -pkin(3) * t43 - pkin(11) * t144 - t114 * t24, -pkin(3) * t44 - pkin(11) * t143 + t111 * t24, -t114 * t5 + t43 * t64 + (pkin(11) * t31 + t148) * t111, t114 * t6 - t43 * t65 + (pkin(11) * t32 + t146) * t111, -t31 * t65 - t32 * t64 + (-t104 * t6 - t107 * t5) * t111, t12 * t98 + t5 * t64 + t6 * t65, t19 * t71, -t18 * t71 - t19 * t70, -t114 * t19 + t43 * t71, t114 * t18 - t43 * t70, -t43 * t114, -t1 * t114 + t18 * t84 + t34 * t43 + t7 * t70, t114 * t2 + t19 * t84 - t35 * t43 + t7 * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, t135, t108, t76, -t78, t75 * t111, -t111 * t74 + t114 * t75, -t125, -t124, 0, -pkin(3) * t74 + pkin(11) * t125 - t114 * t67, -pkin(3) * t75 + pkin(11) * t124 + t111 * t67, -t114 * t26 + t64 * t74 + (pkin(11) * t56 + t147) * t111, t114 * t27 - t65 * t74 + (pkin(11) * t57 + t145) * t111, -t56 * t65 - t57 * t64 + (-t104 * t27 - t107 * t26) * t111, t26 * t64 + t27 * t65 + t46 * t98, t37 * t71, -t36 * t71 - t37 * t70, -t114 * t37 + t71 * t74, t114 * t36 - t70 * t74, -t74 * t114, -t114 * t8 + t33 * t70 + t34 * t74 + t36 * t84, t114 * t9 + t33 * t71 - t35 * t74 + t37 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t103, t111 * t156, 0, 0, 0, pkin(3) * t156, -0.2e1 * pkin(3) * t111, 0.2e1 * t103 * t151 - 0.2e1 * t114 * t64, 0.2e1 * pkin(11) * t103 * t107 + 0.2e1 * t114 * t65, 0.2e1 * (-t104 * t65 - t107 * t64) * t111, pkin(11) ^ 2 * t103 + t64 ^ 2 + t65 ^ 2, t71 ^ 2, t70 * t159, t114 * t159, t70 * t156, t114 ^ 2, -0.2e1 * t114 * t34 + 0.2e1 * t70 * t84, 0.2e1 * t114 * t35 + 0.2e1 * t71 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t43, t53, t13, -t14, -pkin(4) * t31 - t141 * t43 - t146, -pkin(4) * t32 - t140 * t43 + t148 (t104 * t32 - t107 * t31) * qJ(5) + t123, -pkin(4) * t12 + qJ(5) * t123, t19 * t83, t118 * t19 - t18 * t83, t83 * t43, t118 * t43, 0, -t118 * t7 + t18 * t97 + t43 * t59, t19 * t97 - t43 * t60 + t7 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, -t74, -t135, t47, -t48, -pkin(4) * t56 - t141 * t74 - t145, -pkin(4) * t57 - t140 * t74 + t147 (t104 * t57 - t107 * t56) * qJ(5) + t121, -pkin(4) * t46 + qJ(5) * t121, t37 * t83, t118 * t37 - t36 * t83, t83 * t74, t118 * t74, 0, -t118 * t33 + t36 * t97 + t59 * t74, t33 * t83 + t37 * t97 - t60 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t111, t114, 0, -t98, -t150, -pkin(11) * t132 + t104 * t122, pkin(11) * t137 + t107 * t122, t120, -pkin(4) * t98 + qJ(5) * t120, t71 * t83, t118 * t71 - t70 * t83, -t83 * t114, -t118 * t114, 0, -t114 * t59 - t118 * t84 + t70 * t97, t114 * t60 + t71 * t97 + t83 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(4) * t107, -0.2e1 * pkin(4) * t104, 0.2e1 * t142 * qJ(5), qJ(5) ^ 2 * t142 + pkin(4) ^ 2, t83 ^ 2, 0.2e1 * t83 * t118, 0, 0, 0, -t118 * t157, t83 * t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t32, 0, t12, 0, 0, 0, 0, 0, t18, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t57, 0, t46, 0, 0, 0, 0, 0, t36, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t132, 0, t98, 0, 0, 0, 0, 0, t70, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, t104, 0, -pkin(4), 0, 0, 0, 0, 0, -t118, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t18, t43, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -t36, t74, t8, -t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t70, -t114, t34, -t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, t118, 0, t59, -t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t10;
