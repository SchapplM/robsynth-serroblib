% Calculate inertial parameters regressor of joint inertia matrix for
% S6PPRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 18:58
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PPRRRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PPRRRP2_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 20:33:59
% EndTime: 2019-05-04 20:34:03
% DurationCPUTime: 1.55s
% Computational Cost: add. (755->145), mult. (2063->239), div. (0->0), fcn. (2553->12), ass. (0->101)
t70 = sin(qJ(5));
t60 = t70 ^ 2;
t73 = cos(qJ(5));
t62 = t73 ^ 2;
t125 = t60 + t62;
t65 = sin(pkin(7));
t75 = cos(qJ(3));
t105 = t65 * t75;
t72 = sin(qJ(3));
t106 = t65 * t72;
t68 = cos(pkin(7));
t71 = sin(qJ(4));
t74 = cos(qJ(4));
t37 = t74 * t106 + t71 * t68;
t23 = t73 * t105 + t70 * t37;
t25 = -t70 * t105 + t73 * t37;
t91 = t23 * t70 + t25 * t73;
t67 = cos(pkin(12));
t104 = t67 * t68;
t64 = sin(pkin(12));
t66 = sin(pkin(6));
t69 = cos(pkin(6));
t21 = t69 * t106 + (t72 * t104 + t64 * t75) * t66;
t33 = -t66 * t67 * t65 + t69 * t68;
t12 = t21 * t71 - t33 * t74;
t11 = t12 ^ 2;
t19 = -t69 * t105 + (-t104 * t75 + t64 * t72) * t66;
t124 = t19 ^ 2;
t35 = t71 * t106 - t74 * t68;
t34 = t35 ^ 2;
t85 = -t73 * pkin(5) - t70 * qJ(6);
t43 = -pkin(4) + t85;
t123 = -0.2e1 * t43;
t122 = -0.2e1 * t71;
t121 = 0.2e1 * t71;
t120 = pkin(4) * t70;
t119 = pkin(4) * t73;
t118 = pkin(9) * t70;
t61 = t71 ^ 2;
t117 = t61 * pkin(9);
t116 = t70 * pkin(10);
t115 = t71 * pkin(9);
t114 = t73 * pkin(10);
t14 = t21 * t74 + t33 * t71;
t8 = t14 * t73 + t19 * t70;
t4 = t8 * t73;
t9 = t12 * t35;
t113 = t12 * t70;
t112 = t12 * t71;
t111 = t12 * t73;
t109 = t35 * t70;
t108 = t35 * t71;
t107 = t35 * t73;
t103 = t70 * t71;
t102 = t70 * t73;
t101 = t70 * t74;
t100 = t71 * t74;
t54 = t73 * t71;
t99 = t73 * t74;
t44 = -t74 * pkin(4) - t71 * pkin(10) - pkin(3);
t30 = pkin(9) * t99 + t70 * t44;
t98 = t125 * pkin(10) ^ 2;
t97 = t74 * qJ(6);
t96 = t70 * t100;
t95 = t61 * t102;
t6 = t14 * t70 - t19 * t73;
t94 = t6 * t70 + t4;
t93 = t6 ^ 2 + t8 ^ 2 + t11;
t92 = t12 * t103 + t6 * t74;
t90 = t35 * t103 + t23 * t74;
t89 = t23 ^ 2 + t25 ^ 2 + t34;
t88 = pkin(10) * t4 + t6 * t116;
t87 = t6 * t23 + t8 * t25 + t9;
t86 = t91 * pkin(10);
t84 = -pkin(5) * t70 + t73 * qJ(6);
t83 = t14 * t74 + t112;
t26 = -t97 + t30;
t39 = t73 * t44;
t27 = -t39 + (pkin(5) + t118) * t74;
t82 = t26 * t73 + t27 * t70;
t29 = -pkin(9) * t101 + t39;
t81 = -t29 * t70 + t30 * t73;
t80 = t37 * t74 + t108;
t79 = (t6 * t73 - t70 * t8) * t71;
t78 = (t23 * t73 - t25 * t70) * t71;
t77 = pkin(9) ^ 2;
t63 = t74 ^ 2;
t58 = t65 ^ 2;
t56 = t61 * t77;
t53 = t62 * t61;
t52 = t60 * t61;
t50 = t58 * t75 ^ 2;
t48 = pkin(10) * t101;
t47 = t70 * t54;
t45 = t99 * t122;
t42 = 0.2e1 * t125 * pkin(10);
t40 = (t60 - t62) * t71;
t32 = (pkin(9) - t84) * t71;
t15 = t25 * t74 + t35 * t54;
t1 = t12 * t54 + t8 * t74;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69 ^ 2 + (t64 ^ 2 + t67 ^ 2) * t66 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21 ^ 2 + t33 ^ 2 + t124, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 ^ 2 + t11 + t124, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 * t68 + (-t19 * t75 + t21 * t72) * t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19 * t105 + t14 * t37 + t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 * t72 ^ 2 + t68 ^ 2 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37 ^ 2 + t34 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t21, 0, 0, 0, 0, 0, 0, 0, 0, -t19 * t74, t19 * t71, t83, -t19 * pkin(3) + t83 * pkin(9), 0, 0, 0, 0, 0, 0, t92, t1, t79, pkin(9) * t112 - t6 * t29 + t8 * t30, 0, 0, 0, 0, 0, 0, t92, t79, -t1, t12 * t32 + t8 * t26 + t6 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -t106, 0, 0, 0, 0, 0, 0, 0, 0, t74 * t105, -t71 * t105, t80, pkin(3) * t105 + pkin(9) * t80, 0, 0, 0, 0, 0, 0, t90, t15, t78, pkin(9) * t108 - t23 * t29 + t25 * t30, 0, 0, 0, 0, 0, 0, t90, t78, -t15, t23 * t27 + t25 * t26 + t35 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, 0.2e1 * t100, 0, t63, 0, 0, 0.2e1 * pkin(3) * t74, pkin(3) * t122, 0.2e1 * (t61 + t63) * pkin(9), pkin(3) ^ 2 + t63 * t77 + t56, t53, -0.2e1 * t95, t45, t52, 0.2e1 * t96, t63, 0.2e1 * t70 * t117 - 0.2e1 * t29 * t74, 0.2e1 * t73 * t117 + 0.2e1 * t30 * t74 (-t29 * t73 - t30 * t70) * t121, t29 ^ 2 + t30 ^ 2 + t56, t53, t45, 0.2e1 * t95, t63, -0.2e1 * t96, t52, 0.2e1 * t32 * t103 + 0.2e1 * t27 * t74 (-t26 * t70 + t27 * t73) * t121, -0.2e1 * t26 * t74 - 0.2e1 * t32 * t54, t26 ^ 2 + t27 ^ 2 + t32 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, -t14, 0, 0, 0, 0, 0, 0, 0, 0, -t111, t113, t94, -t12 * pkin(4) + t88, 0, 0, 0, 0, 0, 0, -t111, t94, -t113, t12 * t43 + t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t37, 0, 0, 0, 0, 0, 0, 0, 0, -t107, t109, t91, -t35 * pkin(4) + t86, 0, 0, 0, 0, 0, 0, -t107, t91, -t109, t35 * t43 + t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t115, -t74 * pkin(9), 0, 0, t47, -t40, -t101, -t47, -t99, 0, t48 + (-pkin(9) * t73 - t120) * t71, pkin(10) * t99 + (t118 - t119) * t71, t81, -pkin(4) * t115 + t81 * pkin(10), t47, -t101, t40, 0, t99, -t47, t43 * t103 - t32 * t73 + t48, t82, -t32 * t70 + (-pkin(10) * t74 - t43 * t71) * t73, t82 * pkin(10) + t32 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t60, 0.2e1 * t102, 0, t62, 0, 0, 0.2e1 * t119, -0.2e1 * t120, t42, pkin(4) ^ 2 + t98, t60, 0, -0.2e1 * t102, 0, 0, t62, t73 * t123, t42, t70 * t123, t43 ^ 2 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t8, 0, 0, 0, 0, 0, 0, 0, 0, -t6, 0, t8, -t6 * pkin(5) + t8 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, -t25, 0, 0, 0, 0, 0, 0, 0, 0, -t23, 0, t25, -t23 * pkin(5) + t25 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t103, -t74, t29, -t30, 0, 0, 0, t54, 0, -t74, t103, 0, t39 + (-0.2e1 * pkin(5) - t118) * t74, t85 * t71, -0.2e1 * t97 + t30, -t27 * pkin(5) + t26 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t73, 0, -t116, -t114, 0, 0, 0, t70, 0, 0, -t73, 0, -t116, t84, t114, t84 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t54, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t2;
