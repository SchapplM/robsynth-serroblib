% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:49
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP11_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP11_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPRRP11_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:56:39
% EndTime: 2019-05-06 18:56:46
% DurationCPUTime: 1.88s
% Computational Cost: add. (1215->156), mult. (2182->236), div. (0->0), fcn. (2334->6), ass. (0->107)
t79 = sin(qJ(2));
t73 = t79 ^ 2;
t82 = cos(qJ(2));
t75 = t82 ^ 2;
t125 = t73 + t75;
t77 = sin(qJ(5));
t78 = sin(qJ(4));
t80 = cos(qJ(5));
t81 = cos(qJ(4));
t42 = t77 * t81 + t80 * t78;
t40 = t42 ^ 2;
t44 = -t77 * t78 + t80 * t81;
t41 = t44 ^ 2;
t22 = t41 + t40;
t115 = t77 * pkin(4);
t100 = t42 * t115;
t68 = t80 * pkin(4);
t124 = t44 * t68 + t100;
t60 = t68 + pkin(5);
t123 = t44 * t60 + t100;
t57 = t78 * pkin(4) + qJ(3);
t27 = t42 * pkin(5) + t57;
t122 = 0.2e1 * t27;
t121 = 0.2e1 * t57;
t120 = -0.2e1 * t79;
t119 = 0.2e1 * t79;
t118 = 0.2e1 * t82;
t117 = 0.2e1 * qJ(3);
t83 = -pkin(2) - pkin(8);
t116 = t44 * pkin(5);
t114 = t79 * pkin(4);
t105 = t81 * t82;
t109 = t78 * t82;
t30 = -t80 * t105 + t77 * t109;
t16 = t42 * t30;
t36 = t42 * t79;
t31 = t42 * t82;
t113 = t44 * t31;
t66 = t79 * pkin(7);
t51 = t79 * pkin(3) + t66;
t111 = t78 * t51;
t110 = t78 * t79;
t108 = t79 * t82;
t96 = -t79 * qJ(3) - pkin(1);
t38 = t83 * t82 + t96;
t97 = pkin(9) * t82 - t38;
t13 = -t97 * t81 + t111;
t107 = t80 * t13;
t106 = t81 * t78;
t104 = t125 * pkin(7) ^ 2;
t70 = t82 * pkin(7);
t52 = t82 * pkin(3) + t70;
t72 = t78 ^ 2;
t74 = t81 ^ 2;
t54 = t72 + t74;
t103 = t30 * qJ(6);
t102 = t82 * qJ(3);
t101 = -0.2e1 * t108;
t98 = t78 * t105;
t35 = pkin(4) * t105 + t52;
t45 = t81 * t51;
t12 = t97 * t78 + t114 + t45;
t3 = t80 * t12 - t77 * t13;
t48 = (-pkin(9) + t83) * t78;
t61 = t81 * t83;
t49 = -t81 * pkin(9) + t61;
t20 = -t77 * t48 + t80 * t49;
t67 = t79 * pkin(5);
t89 = t31 * qJ(6) + t3;
t1 = t67 + t89;
t4 = t77 * t12 + t107;
t2 = t4 + t103;
t95 = t1 * t44 + t2 * t42;
t94 = t3 * t44 + t4 * t42;
t93 = -t79 * pkin(2) + t102;
t10 = -t44 * qJ(6) + t20;
t21 = t80 * t48 + t77 * t49;
t11 = -t42 * qJ(6) + t21;
t92 = t10 * t44 + t11 * t42;
t18 = -t78 * t38 + t45;
t19 = t81 * t38 + t111;
t5 = t18 * t81 + t19 * t78;
t91 = t20 * t44 + t21 * t42;
t90 = t79 * t83 + t102;
t88 = -t107 + (-t12 - t114) * t77;
t87 = pkin(4) ^ 2;
t85 = 0.2e1 * pkin(5);
t84 = qJ(3) ^ 2;
t63 = t77 ^ 2 * t87;
t62 = -0.2e1 * t115;
t59 = t81 * t79;
t56 = 0.2e1 * t108;
t50 = -t82 * pkin(2) + t96;
t47 = 0.2e1 * t125 * pkin(7);
t46 = t54 * t83;
t37 = t79 * t44;
t29 = t31 ^ 2;
t28 = t30 ^ 2;
t26 = t31 * t119;
t25 = t30 * t119;
t24 = t30 * t115;
t23 = -0.2e1 * t44 * t42;
t15 = -t30 * pkin(5) + t35;
t14 = -0.2e1 * t31 * t30;
t7 = t44 * t30 + t31 * t42;
t6 = t113 + t16;
t8 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t73, t56, 0, t75, 0, 0, pkin(1) * t118, pkin(1) * t120, t47, pkin(1) ^ 2 + t104, 0, 0, 0, t73, t56, t75, t47, t50 * t118, t50 * t120, t50 ^ 2 + t104, t72 * t75, 0.2e1 * t75 * t106, t78 * t101, t74 * t75, t81 * t101, t73, 0.2e1 * t52 * t105 + 0.2e1 * t18 * t79, -0.2e1 * t52 * t109 - 0.2e1 * t19 * t79 (t18 * t78 - t19 * t81) * t118, t18 ^ 2 + t19 ^ 2 + t52 ^ 2, t29, t14, -t26, t28, t25, t73, 0.2e1 * t3 * t79 - 0.2e1 * t35 * t30, -0.2e1 * t35 * t31 - 0.2e1 * t4 * t79, 0.2e1 * t3 * t31 + 0.2e1 * t4 * t30, t3 ^ 2 + t35 ^ 2 + t4 ^ 2, t29, t14, -t26, t28, t25, t73, 0.2e1 * t1 * t79 - 0.2e1 * t15 * t30, -0.2e1 * t15 * t31 - 0.2e1 * t2 * t79, 0.2e1 * t1 * t31 + 0.2e1 * t2 * t30, t1 ^ 2 + t15 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, t82, 0, -t66, -t70, 0, 0, 0, -t79, -t82, 0, 0, 0, t93, t66, t70, t93 * pkin(7), -t98 (t72 - t74) * t82, t59, t98, -t110, 0, t52 * t78 + t90 * t81, t52 * t81 - t90 * t78, -t5, t52 * qJ(3) + t5 * t83, -t113, t7, t37, -t16, -t36, 0, t20 * t79 - t57 * t30 + t35 * t42, -t21 * t79 - t57 * t31 + t35 * t44, t20 * t31 + t21 * t30 - t94, t3 * t20 + t4 * t21 + t35 * t57, -t113, t7, t37, -t16, -t36, 0, t10 * t79 + t15 * t42 - t27 * t30, -t11 * t79 + t15 * t44 - t27 * t31, t10 * t31 + t11 * t30 - t95, t1 * t10 + t2 * t11 + t15 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(2), t117, pkin(2) ^ 2 + t84, t74, -0.2e1 * t106, 0, t72, 0, 0, t78 * t117, t81 * t117, -0.2e1 * t46, t54 * t83 ^ 2 + t84, t41, t23, 0, t40, 0, 0, t42 * t121, t44 * t121, -0.2e1 * t91, t20 ^ 2 + t21 ^ 2 + t57 ^ 2, t41, t23, 0, t40, 0, 0, t42 * t122, t44 * t122, -0.2e1 * t92, t10 ^ 2 + t11 ^ 2 + t27 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, t66, 0, 0, 0, 0, 0, 0, t59, -t110, 0, t5, 0, 0, 0, 0, 0, 0, t37, -t36, t6, t94, 0, 0, 0, 0, 0, 0, t37, -t36, t6, t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t54, t46, 0, 0, 0, 0, 0, 0, 0, 0, -t22, t91, 0, 0, 0, 0, 0, 0, 0, 0, -t22, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, 0, -t105, t79, t18, -t19, 0, 0, 0, 0, -t31, 0, t30, t79, t79 * t68 + t3, t88, t31 * t68 + t24 (t3 * t80 + t4 * t77) * pkin(4), 0, 0, -t31, 0, t30, t79, t60 * t79 + t1, t88 - t103, t60 * t31 + t24, t1 * t60 + t2 * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, -t78, 0, t61, -t78 * t83, 0, 0, 0, 0, t44, 0, -t42, 0, t20, -t21, -t124 (t20 * t80 + t21 * t77) * pkin(4), 0, 0, t44, 0, -t42, 0, t10, -t11, -t123, t10 * t60 + t11 * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t78, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t42, 0, t124, 0, 0, 0, 0, 0, 0, t44, -t42, 0, t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t68, t62, 0, t80 ^ 2 * t87 + t63, 0, 0, 0, 0, 0, 1, 0.2e1 * t60, t62, 0, t60 ^ 2 + t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, t30, t79, t3, -t4, 0, 0, 0, 0, -t31, 0, t30, t79, 0.2e1 * t67 + t89, -t2, t31 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, -t42, 0, t20, -t21, 0, 0, 0, 0, t44, 0, -t42, 0, t10, -t11, -t116, t10 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t42, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t42, 0, t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t68, -t115, 0, 0, 0, 0, 0, 0, 0, 1, t85 + t68, -t115, 0, t60 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t85, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, -t31, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, t44, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t8;
