% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,d6,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 07:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRRR3_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:59:07
% EndTime: 2019-05-06 02:59:13
% DurationCPUTime: 1.84s
% Computational Cost: add. (1957->198), mult. (3812->327), div. (0->0), fcn. (4198->10), ass. (0->103)
t72 = sin(qJ(5));
t73 = sin(qJ(4));
t76 = cos(qJ(5));
t77 = cos(qJ(4));
t43 = t72 * t73 - t76 * t77;
t62 = -pkin(4) * t77 - pkin(3);
t31 = pkin(5) * t43 + t62;
t119 = 0.2e1 * t31;
t118 = 0.2e1 * t62;
t74 = sin(qJ(3));
t117 = 0.2e1 * t74;
t78 = cos(qJ(3));
t116 = -0.2e1 * t78;
t115 = 0.2e1 * t78;
t114 = -pkin(9) - pkin(8);
t113 = pkin(3) * t77;
t112 = pkin(5) * t78;
t69 = sin(pkin(11));
t111 = t69 * pkin(1);
t70 = cos(pkin(11));
t110 = t70 * pkin(1);
t71 = sin(qJ(6));
t109 = t71 * pkin(5);
t108 = t72 * pkin(4);
t75 = cos(qJ(6));
t63 = t75 * pkin(5);
t45 = t72 * t77 + t73 * t76;
t34 = t45 * t74;
t55 = pkin(7) + t111;
t101 = t55 * t73;
t106 = t78 * pkin(3);
t56 = -pkin(2) - t110;
t42 = -pkin(8) * t74 - t106 + t56;
t37 = t77 * t42;
t95 = t77 * t74;
t17 = -pkin(9) * t95 + t37 + (-pkin(4) - t101) * t78;
t91 = t78 * t55;
t85 = t77 * t91;
t20 = t85 + (-pkin(9) * t74 + t42) * t73;
t96 = t76 * t20;
t9 = t17 * t72 + t96;
t5 = -pkin(10) * t34 + t9;
t107 = t75 * t5;
t64 = t76 * pkin(4);
t99 = t73 * t74;
t36 = -t72 * t99 + t76 * t95;
t14 = t75 * t34 + t36 * t71;
t24 = -t43 * t71 + t45 * t75;
t105 = t14 * t24;
t104 = t24 * t78;
t103 = t34 * t45;
t102 = t45 * t78;
t65 = t73 ^ 2;
t100 = t65 * t74;
t98 = t73 * t77;
t97 = t73 * t78;
t48 = t74 * t55;
t94 = t77 * t78;
t22 = t75 * t43 + t45 * t71;
t93 = t78 * t22;
t92 = t78 * t43;
t38 = pkin(4) * t99 + t48;
t67 = t77 ^ 2;
t90 = t65 + t67;
t66 = t74 ^ 2;
t68 = t78 ^ 2;
t89 = t66 + t68;
t88 = t74 * t115;
t87 = t75 * t108;
t86 = t73 * t95;
t8 = t76 * t17 - t20 * t72;
t4 = -pkin(10) * t36 - t112 + t8;
t1 = t75 * t4 - t5 * t71;
t84 = t90 * pkin(8);
t49 = t114 * t73;
t50 = t114 * t77;
t28 = t76 * t49 + t50 * t72;
t61 = t64 + pkin(5);
t39 = -t71 * t108 + t75 * t61;
t2 = t4 * t71 + t107;
t26 = -t73 * t91 + t37;
t27 = t42 * t73 + t85;
t83 = -t26 * t73 + t27 * t77;
t29 = t49 * t72 - t50 * t76;
t60 = t67 * t74;
t59 = t67 * t66;
t57 = t65 * t66;
t54 = t55 ^ 2;
t47 = t66 * t54;
t40 = t61 * t71 + t87;
t33 = t36 ^ 2;
t32 = t34 ^ 2;
t25 = t36 * t43;
t21 = pkin(5) * t34 + t38;
t19 = -pkin(10) * t43 + t29;
t18 = -pkin(10) * t45 + t28;
t16 = -t34 * t71 + t36 * t75;
t13 = t16 ^ 2;
t12 = t14 ^ 2;
t10 = t16 * t22;
t7 = t18 * t71 + t19 * t75;
t6 = t18 * t75 - t19 * t71;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t110, -0.2e1 * t111, 0 (t69 ^ 2 + t70 ^ 2) * pkin(1) ^ 2, t66, t88, 0, t68, 0, 0, t56 * t116, t56 * t117, 0.2e1 * t89 * t55, t54 * t68 + t56 ^ 2 + t47, t59, -0.2e1 * t66 * t98, -0.2e1 * t74 * t94, t57, t73 * t88, t68, 0.2e1 * t66 * t101 - 0.2e1 * t26 * t78, 0.2e1 * t55 * t66 * t77 + 0.2e1 * t27 * t78 (-t26 * t77 - t27 * t73) * t117, t26 ^ 2 + t27 ^ 2 + t47, t33, -0.2e1 * t36 * t34, t36 * t116, t32, -t34 * t116, t68, 0.2e1 * t34 * t38 - 0.2e1 * t78 * t8, 0.2e1 * t36 * t38 + 0.2e1 * t78 * t9, -0.2e1 * t34 * t9 - 0.2e1 * t36 * t8, t38 ^ 2 + t8 ^ 2 + t9 ^ 2, t13, -0.2e1 * t16 * t14, t16 * t116, t12, t14 * t115, t68, -0.2e1 * t1 * t78 + 0.2e1 * t14 * t21, 0.2e1 * t16 * t21 + 0.2e1 * t2 * t78, -0.2e1 * t1 * t16 - 0.2e1 * t14 * t2, t1 ^ 2 + t2 ^ 2 + t21 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t83 - t91) * t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34 * t8 + t36 * t9 - t38 * t78, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t14 + t16 * t2 - t21 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 + t57 + t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 + t32 + t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 + t12 + t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t78, 0, -t48, -t91, 0, 0, t86, t60 - t100, -t97, -t86, -t94, 0, -t55 * t95 + (-pkin(3) * t74 + pkin(8) * t78) * t73, pkin(8) * t94 + (t101 - t113) * t74, t83, -pkin(3) * t48 + t83 * pkin(8), t36 * t45, -t25 - t103, -t102, t34 * t43, t92, 0, -t28 * t78 + t34 * t62 + t38 * t43, t29 * t78 + t36 * t62 + t38 * t45, -t28 * t36 - t29 * t34 - t43 * t9 - t45 * t8, t28 * t8 + t29 * t9 + t38 * t62, t16 * t24, -t10 - t105, -t104, t14 * t22, t93, 0, t14 * t31 + t21 * t22 - t6 * t78, t16 * t31 + t21 * t24 + t7 * t78, -t1 * t24 - t14 * t7 - t16 * t6 - t2 * t22, t1 * t6 + t2 * t7 + t21 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, -t74, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t97, t60 + t100, t74 * t84 + t106, 0, 0, 0, 0, 0, 0, -t92, -t102, -t25 + t103, -t28 * t34 + t29 * t36 - t62 * t78, 0, 0, 0, 0, 0, 0, -t93, -t104, -t10 + t105, -t14 * t6 + t16 * t7 - t31 * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, 0.2e1 * t98, 0, t67, 0, 0, 0.2e1 * t113, -0.2e1 * pkin(3) * t73, 0.2e1 * t84, t90 * pkin(8) ^ 2 + pkin(3) ^ 2, t45 ^ 2, -0.2e1 * t45 * t43, 0, t43 ^ 2, 0, 0, t43 * t118, t45 * t118, -0.2e1 * t28 * t45 - 0.2e1 * t29 * t43, t28 ^ 2 + t29 ^ 2 + t62 ^ 2, t24 ^ 2, -0.2e1 * t24 * t22, 0, t22 ^ 2, 0, 0, t22 * t119, t24 * t119, -0.2e1 * t22 * t7 - 0.2e1 * t24 * t6, t31 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t99, -t78, t26, -t27, 0, 0, 0, 0, t36, 0, -t34, -t78, -t78 * t64 + t8, -t96 + (pkin(4) * t78 - t17) * t72 (-t34 * t72 - t36 * t76) * pkin(4) (t72 * t9 + t76 * t8) * pkin(4), 0, 0, t16, 0, -t14, -t78, -t39 * t78 + t1, t40 * t78 - t2, -t14 * t40 - t16 * t39, t1 * t39 + t2 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, -t95, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t36, 0 (-t34 * t76 + t36 * t72) * pkin(4), 0, 0, 0, 0, 0, 0, -t14, -t16, 0, -t14 * t39 + t16 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t77, 0, -t73 * pkin(8), -t77 * pkin(8), 0, 0, 0, 0, t45, 0, -t43, 0, t28, -t29 (-t43 * t72 - t45 * t76) * pkin(4) (t28 * t76 + t29 * t72) * pkin(4), 0, 0, t24, 0, -t22, 0, t6, -t7, -t22 * t40 - t24 * t39, t39 * t6 + t40 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t64, -0.2e1 * t108, 0 (t72 ^ 2 + t76 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t39, -0.2e1 * t40, 0, t39 ^ 2 + t40 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, -t78, t8, -t9, 0, 0, 0, 0, t16, 0, -t14, -t78, -t78 * t63 + t1, -t107 + (-t4 + t112) * t71 (-t14 * t71 - t16 * t75) * pkin(5) (t1 * t75 + t2 * t71) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, -t36, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t16, 0 (-t14 * t75 + t16 * t71) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, -t43, 0, t28, -t29, 0, 0, 0, 0, t24, 0, -t22, 0, t6, -t7 (-t22 * t71 - t24 * t75) * pkin(5) (t6 * t75 + t7 * t71) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t64, -t108, 0, 0, 0, 0, 0, 0, 0, 1, t39 + t63, -t87 + (-pkin(5) - t61) * t71, 0 (t39 * t75 + t40 * t71) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t63, -0.2e1 * t109, 0 (t71 ^ 2 + t75 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, -t78, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t22, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t39, -t40, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t63, -t109, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
