% Calculate inertial parameters regressor of joint inertia matrix for
% S6PPRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d3,d4,d5,d6,theta1,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PPRRRR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PPRRRR2_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 20:56:22
% EndTime: 2019-05-04 20:56:27
% DurationCPUTime: 1.57s
% Computational Cost: add. (1215->180), mult. (3198->334), div. (0->0), fcn. (3994->14), ass. (0->91)
t57 = sin(pkin(13));
t59 = sin(pkin(6));
t62 = cos(pkin(6));
t66 = sin(qJ(3));
t70 = cos(qJ(3));
t60 = cos(pkin(13));
t61 = cos(pkin(7));
t90 = t60 * t61;
t58 = sin(pkin(7));
t92 = t58 * t66;
t18 = t62 * t92 + (t57 * t70 + t66 * t90) * t59;
t30 = -t59 * t60 * t58 + t62 * t61;
t65 = sin(qJ(4));
t69 = cos(qJ(4));
t11 = t18 * t65 - t30 * t69;
t10 = t11 ^ 2;
t91 = t58 * t70;
t16 = -t62 * t91 + (t57 * t66 - t70 * t90) * t59;
t105 = t16 ^ 2;
t32 = -t69 * t61 + t65 * t92;
t31 = t32 ^ 2;
t68 = cos(qJ(5));
t49 = -t68 * pkin(5) - pkin(4);
t104 = 0.2e1 * t49;
t103 = -0.2e1 * t69;
t102 = -pkin(11) - pkin(10);
t101 = pkin(4) * t68;
t64 = sin(qJ(5));
t100 = pkin(9) * t64;
t54 = t65 ^ 2;
t99 = t54 * pkin(9);
t63 = sin(qJ(6));
t98 = t63 * pkin(5);
t97 = t65 * pkin(9);
t67 = cos(qJ(6));
t96 = t67 * pkin(5);
t95 = t69 * pkin(5);
t5 = t11 * t32;
t94 = t11 * t65;
t93 = t32 * t65;
t89 = t64 * t65;
t88 = t64 * t68;
t87 = t64 * t69;
t41 = -t69 * pkin(4) - t65 * pkin(10) - pkin(3);
t84 = t68 * t69;
t80 = pkin(9) * t84;
t21 = t80 + (-pkin(11) * t65 + t41) * t64;
t86 = t67 * t21;
t85 = t68 * t65;
t83 = t69 * t65;
t53 = t64 ^ 2;
t55 = t68 ^ 2;
t82 = t53 + t55;
t81 = 0.2e1 * t83;
t79 = t64 * t85;
t35 = t68 * t41;
t15 = -pkin(11) * t85 + t35 + (-pkin(5) - t100) * t69;
t6 = t67 * t15 - t63 * t21;
t13 = t18 * t69 + t30 * t65;
t3 = -t13 * t64 + t16 * t68;
t4 = t13 * t68 + t16 * t64;
t78 = -t3 * t64 + t4 * t68;
t77 = t13 * t69 + t94;
t34 = t65 * t61 + t69 * t92;
t19 = -t64 * t34 - t68 * t91;
t20 = t68 * t34 - t64 * t91;
t76 = -t19 * t64 + t20 * t68;
t24 = -pkin(9) * t87 + t35;
t25 = t64 * t41 + t80;
t75 = -t24 * t64 + t25 * t68;
t74 = t34 * t69 + t93;
t38 = t63 * t68 + t67 * t64;
t72 = pkin(9) ^ 2;
t56 = t69 ^ 2;
t51 = t58 ^ 2;
t50 = t54 * t72;
t46 = t51 * t70 ^ 2;
t44 = t102 * t68;
t43 = t102 * t64;
t40 = (pkin(5) * t64 + pkin(9)) * t65;
t36 = t63 * t64 - t67 * t68;
t29 = -t63 * t89 + t67 * t85;
t27 = t38 * t65;
t23 = t63 * t43 - t67 * t44;
t22 = t67 * t43 + t63 * t44;
t9 = t63 * t19 + t67 * t20;
t8 = t67 * t19 - t63 * t20;
t7 = t63 * t15 + t86;
t2 = t63 * t3 + t67 * t4;
t1 = t67 * t3 - t63 * t4;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62 ^ 2 + (t57 ^ 2 + t60 ^ 2) * t59 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18 ^ 2 + t30 ^ 2 + t105, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 ^ 2 + t10 + t105, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 ^ 2 + t2 ^ 2 + t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30 * t61 + (-t16 * t70 + t18 * t66) * t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * t34 - t16 * t91 + t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 * t19 + t4 * t20 + t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t8 + t2 * t9 + t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51 * t66 ^ 2 + t61 ^ 2 + t46, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 ^ 2 + t31 + t46, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 ^ 2 + t20 ^ 2 + t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8 ^ 2 + t9 ^ 2 + t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, -t18, 0, 0, 0, 0, 0, 0, 0, 0, -t16 * t69, t16 * t65, t77, -t16 * pkin(3) + t77 * pkin(9), 0, 0, 0, 0, 0, 0, t11 * t89 - t3 * t69, t11 * t85 + t4 * t69 (-t3 * t68 - t4 * t64) * t65, pkin(9) * t94 + t3 * t24 + t4 * t25, 0, 0, 0, 0, 0, 0, -t1 * t69 + t11 * t27, t11 * t29 + t2 * t69, -t1 * t29 - t2 * t27, t1 * t6 + t11 * t40 + t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t92, 0, 0, 0, 0, 0, 0, 0, 0, t69 * t91, -t65 * t91, t74, pkin(3) * t91 + t74 * pkin(9), 0, 0, 0, 0, 0, 0, -t19 * t69 + t32 * t89, t20 * t69 + t32 * t85 (-t19 * t68 - t20 * t64) * t65, pkin(9) * t93 + t19 * t24 + t20 * t25, 0, 0, 0, 0, 0, 0, t32 * t27 - t8 * t69, t32 * t29 + t9 * t69, -t9 * t27 - t8 * t29, t32 * t40 + t8 * t6 + t9 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t54, t81, 0, t56, 0, 0, 0.2e1 * pkin(3) * t69, -0.2e1 * pkin(3) * t65, 0.2e1 * (t54 + t56) * pkin(9), pkin(3) ^ 2 + t56 * t72 + t50, t55 * t54, -0.2e1 * t54 * t88, -0.2e1 * t68 * t83, t53 * t54, t64 * t81, t56, -0.2e1 * t24 * t69 + 0.2e1 * t64 * t99, 0.2e1 * t25 * t69 + 0.2e1 * t68 * t99, 0.2e1 * (-t24 * t68 - t25 * t64) * t65, t24 ^ 2 + t25 ^ 2 + t50, t29 ^ 2, -0.2e1 * t29 * t27, t29 * t103, t27 ^ 2, -t27 * t103, t56, 0.2e1 * t40 * t27 - 0.2e1 * t6 * t69, 0.2e1 * t40 * t29 + 0.2e1 * t7 * t69, -0.2e1 * t7 * t27 - 0.2e1 * t6 * t29, t40 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, -t13, 0, 0, 0, 0, 0, 0, 0, 0, -t11 * t68, t11 * t64, t78, -t11 * pkin(4) + t78 * pkin(10), 0, 0, 0, 0, 0, 0, t11 * t36, t11 * t38, -t1 * t38 - t2 * t36, t1 * t22 + t11 * t49 + t2 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t34, 0, 0, 0, 0, 0, 0, 0, 0, -t32 * t68, t32 * t64, t76, -t32 * pkin(4) + t76 * pkin(10), 0, 0, 0, 0, 0, 0, t32 * t36, t32 * t38, -t9 * t36 - t8 * t38, t8 * t22 + t9 * t23 + t32 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t97, -t69 * pkin(9), 0, 0, t79 (-t53 + t55) * t65, -t87, -t79, -t84, 0, -pkin(9) * t85 + (-pkin(4) * t65 + pkin(10) * t69) * t64, pkin(10) * t84 + (t100 - t101) * t65, t75, -pkin(4) * t97 + t75 * pkin(10), t29 * t38, -t38 * t27 - t29 * t36, -t38 * t69, t27 * t36, t36 * t69, 0, -t22 * t69 + t49 * t27 + t40 * t36, t23 * t69 + t49 * t29 + t40 * t38, -t22 * t29 - t23 * t27 - t7 * t36 - t6 * t38, t6 * t22 + t7 * t23 + t40 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t53, 0.2e1 * t88, 0, t55, 0, 0, 0.2e1 * t101, -0.2e1 * pkin(4) * t64, 0.2e1 * t82 * pkin(10), t82 * pkin(10) ^ 2 + pkin(4) ^ 2, t38 ^ 2, -0.2e1 * t38 * t36, 0, t36 ^ 2, 0, 0, t36 * t104, t38 * t104, -0.2e1 * t22 * t38 - 0.2e1 * t23 * t36, t22 ^ 2 + t23 ^ 2 + t49 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0 (t1 * t67 + t2 * t63) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t20, 0, 0, 0, 0, 0, 0, 0, 0, t8, -t9, 0 (t63 * t9 + t67 * t8) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, -t89, -t69, t24, -t25, 0, 0, 0, 0, t29, 0, -t27, -t69, -t67 * t95 + t6, -t86 + (-t15 + t95) * t63 (-t27 * t63 - t29 * t67) * pkin(5) (t6 * t67 + t63 * t7) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t68, 0, -t64 * pkin(10), -t68 * pkin(10), 0, 0, 0, 0, t38, 0, -t36, 0, t22, -t23 (-t36 * t63 - t38 * t67) * pkin(5) (t22 * t67 + t23 * t63) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t96, -0.2e1 * t98, 0 (t63 ^ 2 + t67 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, -t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t27, -t69, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, -t36, 0, t22, -t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t96, -t98, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t12;
