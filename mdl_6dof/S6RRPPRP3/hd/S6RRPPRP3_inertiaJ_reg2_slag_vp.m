% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPRP3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RRPPRP3_inertiaJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:16:35
% EndTime: 2019-05-06 09:16:40
% DurationCPUTime: 1.19s
% Computational Cost: add. (505->107), mult. (762->155), div. (0->0), fcn. (713->4), ass. (0->74)
t51 = sin(qJ(2));
t46 = t51 ^ 2;
t53 = cos(qJ(2));
t48 = t53 ^ 2;
t83 = t46 + t48;
t36 = t53 * qJ(4);
t74 = t53 * pkin(7);
t19 = -t36 + t74;
t82 = t19 ^ 2;
t50 = sin(qJ(5));
t81 = -0.2e1 * t50;
t80 = -0.2e1 * t51;
t52 = cos(qJ(5));
t79 = 0.2e1 * t52;
t78 = -0.2e1 * t53;
t77 = 0.2e1 * t53;
t54 = -pkin(2) - pkin(3);
t76 = t50 * pkin(5);
t75 = t51 * pkin(5);
t45 = t50 ^ 2;
t73 = t45 * t53;
t72 = t50 * t51;
t71 = t50 * t52;
t31 = t50 * t53;
t70 = t51 * t53;
t38 = t51 * pkin(7);
t18 = -t51 * qJ(4) + t38;
t69 = t52 * t18;
t68 = t52 * t53;
t49 = qJ(3) + pkin(4);
t67 = t83 * pkin(7) ^ 2;
t47 = t52 ^ 2;
t25 = t47 + t45;
t66 = qJ(6) * t53;
t65 = t53 * qJ(3);
t44 = -pkin(8) + t54;
t64 = qJ(6) - t44;
t63 = -0.2e1 * t70;
t29 = 0.2e1 * t70;
t17 = -t53 * pkin(2) - t51 * qJ(3) - pkin(1);
t10 = t53 * pkin(3) - t17;
t8 = t51 * pkin(4) + t53 * pkin(8) + t10;
t4 = -t50 * t18 + t52 * t8;
t62 = t52 * t66 + t4;
t2 = t62 + t75;
t3 = t69 + (t8 + t66) * t50;
t61 = t2 * t52 + t3 * t50;
t5 = t50 * t8 + t69;
t60 = t4 * t52 + t5 * t50;
t1 = -t4 * t50 + t5 * t52;
t59 = -t51 * pkin(2) + t65;
t58 = -t44 * t51 - t49 * t53;
t56 = qJ(3) ^ 2;
t55 = 0.2e1 * qJ(3);
t39 = t52 * pkin(5);
t34 = t52 * t51;
t33 = t47 * t53;
t32 = t47 * t48;
t30 = t45 * t48;
t28 = 0.2e1 * t71;
t27 = t39 + t49;
t24 = t50 * t68;
t23 = t52 * t63;
t22 = -0.2e1 * t48 * t71;
t21 = t50 * t29;
t16 = 0.2e1 * t83 * pkin(7);
t15 = t64 * t52;
t14 = t64 * t50;
t13 = t33 - t73;
t12 = t33 + t73;
t11 = t25 * t44;
t9 = -t36 + (pkin(7) - t76) * t53;
t6 = -t14 * t50 - t15 * t52;
t7 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t46, t29, 0, t48, 0, 0, pkin(1) * t77, pkin(1) * t80, t16, pkin(1) ^ 2 + t67, t46, 0, t63, 0, 0, t48, t17 * t78, t16, t17 * t80, t17 ^ 2 + t67, t48, t29, 0, t46, 0, 0, 0.2e1 * t10 * t51, t10 * t78, -0.2e1 * t18 * t51 - 0.2e1 * t19 * t53, t10 ^ 2 + t18 ^ 2 + t82, t32, t22, t23, t30, t21, t46, -0.2e1 * t19 * t31 + 0.2e1 * t4 * t51, -0.2e1 * t19 * t68 - 0.2e1 * t5 * t51, t60 * t77, t4 ^ 2 + t5 ^ 2 + t82, t32, t22, t23, t30, t21, t46, 0.2e1 * t2 * t51 - 0.2e1 * t9 * t31, -0.2e1 * t3 * t51 - 0.2e1 * t9 * t68, t61 * t77, t2 ^ 2 + t3 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, t53, 0, -t38, -t74, 0, 0, 0, t51, 0, 0, -t53, 0, -t38, t59, t74, t59 * pkin(7), 0, 0, t53, 0, t51, 0, t19, t18, -t54 * t51 - t65, t19 * qJ(3) + t18 * t54, t24, t13, -t72, -t24, -t34, 0, t19 * t52 + t58 * t50, -t19 * t50 + t58 * t52, -t1, t1 * t44 + t19 * t49, t24, t13, -t72, -t24, -t34, 0, t14 * t51 - t27 * t31 + t9 * t52, t15 * t51 - t27 * t68 - t9 * t50 (t14 * t53 - t3) * t52 + (-t15 * t53 + t2) * t50, t2 * t14 - t3 * t15 + t9 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(2), 0, t55, pkin(2) ^ 2 + t56, 0, 0, 0, 0, 0, 1, t55, 0.2e1 * t54, 0, t54 ^ 2 + t56, t45, t28, 0, t47, 0, 0, t49 * t79, t49 * t81, -0.2e1 * t11, t25 * t44 ^ 2 + t49 ^ 2, t45, t28, 0, t47, 0, 0, t27 * t79, t27 * t81, -0.2e1 * t6, t14 ^ 2 + t15 ^ 2 + t27 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, t38, 0, 0, 0, 0, 0, 0, 0, 0, -t51, t18, 0, 0, 0, 0, 0, 0, -t72, -t34, 0, t1, 0, 0, 0, 0, 0, 0, -t72, -t34, 0, -t2 * t50 + t3 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 1, 0, t54, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t11, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, -t53, 0, t10, 0, 0, 0, 0, 0, 0, t34, -t72, t12, t60, 0, 0, 0, 0, 0, 0, t34, -t72, t12, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 * t52 - t15 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t68, 0, t31, t51, t4, -t5, 0, 0, 0, 0, -t68, 0, t31, t51, t62 + 0.2e1 * t75, -t3, pkin(5) * t68, t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, 0, -t52, 0, -t50 * t44, -t52 * t44, 0, 0, 0, 0, -t50, 0, -t52, 0, t14, t15, t76, t14 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, -t52, 0, 0, 0, 0, 0, 0, 0, 0, -t50, -t52, 0, -t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t50, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t50, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t68, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t50, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t7;
