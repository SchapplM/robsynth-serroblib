% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:51
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPP9_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP9_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRPP9_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 19:20:40
% EndTime: 2019-05-07 19:20:50
% DurationCPUTime: 3.15s
% Computational Cost: add. (2203->266), mult. (5115->444), div. (0->0), fcn. (5612->8), ass. (0->147)
t96 = sin(qJ(4));
t88 = t96 ^ 2;
t99 = cos(qJ(4));
t90 = t99 ^ 2;
t172 = t88 + t90;
t101 = cos(qJ(2));
t92 = sin(pkin(6));
t138 = t92 * t101;
t100 = cos(qJ(3));
t98 = sin(qJ(2));
t151 = t92 * t98;
t93 = cos(pkin(6));
t97 = sin(qJ(3));
t48 = t100 * t151 + t93 * t97;
t29 = t99 * t138 + t48 * t96;
t155 = t29 * t99;
t31 = -t96 * t138 + t48 * t99;
t26 = t31 * t96;
t107 = (t26 + t155) * t97;
t79 = qJ(5) * t99;
t171 = -pkin(4) * t96 + t79;
t137 = t96 * qJ(5);
t94 = pkin(4) + qJ(6);
t170 = -t94 * t99 - t137;
t27 = t29 ^ 2;
t28 = t31 ^ 2;
t46 = -t93 * t100 + t97 * t151;
t45 = t46 ^ 2;
t169 = -0.2e1 * t48;
t168 = 0.2e1 * t92;
t167 = -0.2e1 * t96;
t166 = 0.2e1 * t97;
t165 = pkin(1) * t98;
t164 = pkin(3) * t99;
t162 = t46 * pkin(4);
t89 = t97 ^ 2;
t161 = t89 * pkin(9);
t83 = t97 * pkin(9);
t160 = pkin(1) * t101;
t65 = pkin(8) * t151;
t39 = t65 + (-pkin(2) - t160) * t93;
t15 = t46 * pkin(3) - t48 * pkin(10) + t39;
t127 = pkin(8) * t138;
t40 = t127 + (pkin(9) + t165) * t93;
t41 = (-pkin(2) * t101 - pkin(9) * t98 - pkin(1)) * t92;
t19 = t100 * t40 + t97 * t41;
t17 = -pkin(10) * t138 + t19;
t7 = t96 * t15 + t99 * t17;
t159 = pkin(10) * t100;
t18 = t100 * t41 - t97 * t40;
t16 = pkin(3) * t138 - t18;
t158 = t16 * t96;
t157 = t16 * t99;
t156 = t29 * t31;
t154 = t31 * t46;
t153 = t46 * t29;
t152 = t48 * t97;
t150 = t93 * t98;
t42 = t96 * t46;
t74 = t96 * t97;
t148 = t96 * t99;
t147 = t97 * t46;
t146 = t99 * t46;
t76 = t99 * t97;
t145 = -t99 * t15 + t96 * t17;
t144 = pkin(4) * t74 + t83;
t136 = t96 * t100;
t57 = -t100 * pkin(3) - t97 * pkin(10) - pkin(2);
t143 = pkin(9) * t136 - t99 * t57;
t77 = t99 * t100;
t38 = pkin(9) * t77 + t96 * t57;
t142 = t172 * pkin(10) ^ 2;
t141 = qJ(5) * t29;
t87 = t92 ^ 2;
t140 = t101 * t87;
t44 = t46 * qJ(5);
t139 = t46 * t100;
t135 = t97 * t100;
t134 = -qJ(6) - t94;
t133 = t100 * qJ(5);
t132 = -0.2e1 * t156;
t131 = pkin(10) * t42;
t130 = pkin(10) * t146;
t129 = 0.2e1 * t138;
t128 = t44 + t7;
t23 = t29 * t74;
t24 = t31 * t76;
t126 = t89 * t148;
t86 = t100 * pkin(4);
t35 = t86 + t143;
t125 = t97 * t138;
t124 = t96 * t135;
t123 = t97 * t77;
t122 = t100 * t138;
t121 = -t29 * pkin(5) + t7;
t120 = -t31 * pkin(5) - t145;
t5 = t145 - t162;
t119 = t128 * t99 + t5 * t96;
t118 = t145 * t96 + t7 * t99;
t117 = -t99 * pkin(4) - t137;
t56 = -pkin(3) + t117;
t116 = -t56 * t97 - t159;
t114 = t96 * t29 - t31 * t99;
t34 = t133 - t38;
t113 = -t34 * t99 + t35 * t96;
t112 = t143 * t96 + t38 * t99;
t111 = t19 * t100 - t18 * t97;
t110 = -pkin(5) * t74 + t38;
t14 = -t100 * t29 + t96 * t147;
t13 = -t31 * t100 + t46 * t76;
t109 = -pkin(5) * t76 - t35;
t108 = (t26 - t155) * pkin(10);
t106 = -t31 * qJ(5) + t16;
t105 = pkin(9) ^ 2;
t103 = qJ(5) ^ 2;
t102 = 0.2e1 * qJ(5);
t91 = t100 ^ 2;
t85 = t99 * pkin(10);
t82 = t89 * t105;
t81 = t96 * pkin(10);
t78 = -0.2e1 * t133;
t75 = t90 * t89;
t73 = t88 * t89;
t71 = t87 * t101 ^ 2;
t70 = 0.2e1 * t148;
t64 = t96 * t76;
t62 = t99 * pkin(5) + t85;
t61 = t96 * pkin(5) + t81;
t60 = -0.2e1 * t123;
t59 = -0.2e1 * t126;
t58 = -0.2e1 * t124;
t55 = 0.2e1 * t172 * pkin(10);
t54 = (-t88 + t90) * t97;
t51 = -pkin(3) + t170;
t50 = pkin(1) * t150 + t127;
t49 = t93 * t160 - t65;
t43 = -t97 * t79 + t144;
t33 = (qJ(6) * t96 - t79) * t97 + t144;
t25 = t110 - t133;
t22 = t100 * qJ(6) - t109;
t21 = 0.2e1 * t154;
t20 = 0.2e1 * t153;
t8 = t29 * pkin(4) + t106;
t3 = t94 * t29 + t106;
t2 = t121 + t44;
t1 = -t94 * t46 - t120;
t4 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t87 * t98 ^ 2, 0.2e1 * t98 * t140, t150 * t168, t71, t93 * t129, t93 ^ 2, 0.2e1 * pkin(1) * t140 + 0.2e1 * t49 * t93, -0.2e1 * t87 * t165 - 0.2e1 * t50 * t93 (t101 * t50 - t49 * t98) * t168, t87 * pkin(1) ^ 2 + t49 ^ 2 + t50 ^ 2, t48 ^ 2, t46 * t169, t138 * t169, t45, t46 * t129, t71, -0.2e1 * t18 * t138 + 0.2e1 * t39 * t46, 0.2e1 * t19 * t138 + 0.2e1 * t39 * t48, -0.2e1 * t18 * t48 - 0.2e1 * t19 * t46, t18 ^ 2 + t19 ^ 2 + t39 ^ 2, t28, t132, t21, t27, -0.2e1 * t153, t45, -0.2e1 * t145 * t46 + 0.2e1 * t16 * t29, 0.2e1 * t16 * t31 - 0.2e1 * t7 * t46, 0.2e1 * t145 * t31 - 0.2e1 * t7 * t29, t145 ^ 2 + t16 ^ 2 + t7 ^ 2, t45, -0.2e1 * t154, t20, t28, t132, t27, -0.2e1 * t128 * t29 + 0.2e1 * t5 * t31, -0.2e1 * t8 * t29 + 0.2e1 * t5 * t46, 0.2e1 * t128 * t46 - 0.2e1 * t8 * t31, t128 ^ 2 + t5 ^ 2 + t8 ^ 2, t45, t20, t21, t27, 0.2e1 * t156, t28, 0.2e1 * t1 * t31 - 0.2e1 * t2 * t29, 0.2e1 * t2 * t46 - 0.2e1 * t3 * t31, -0.2e1 * t1 * t46 + 0.2e1 * t3 * t29, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, 0, t138, t93, t49, -t50, 0, 0, t152, t48 * t100 - t147, -t125, -t139, -t122, 0, -pkin(2) * t46 + pkin(9) * t125 - t39 * t100, -pkin(2) * t48 + pkin(9) * t122 + t39 * t97 (-t139 + t152) * pkin(9) + t111, -t39 * pkin(2) + t111 * pkin(9), t24, -t107, t13, t23, -t14, -t139, t145 * t100 - t143 * t46 + (pkin(9) * t29 + t158) * t97, t7 * t100 - t38 * t46 + (pkin(9) * t31 + t157) * t97, -t38 * t29 + t143 * t31 + (t145 * t99 - t7 * t96) * t97, t143 * t145 + t16 * t83 + t7 * t38, -t139, -t13, t14, t24, -t107, t23, t34 * t29 + t35 * t31 + (-t128 * t96 + t5 * t99) * t97, -t5 * t100 - t43 * t29 + t35 * t46 - t8 * t74, -t100 * t128 - t43 * t31 - t34 * t46 - t8 * t76, -t128 * t34 + t5 * t35 + t8 * t43, -t139, t14, t13, t23, t107, t24, t22 * t31 - t25 * t29 + (t1 * t99 - t2 * t96) * t97, -t2 * t100 + t25 * t46 - t3 * t76 - t33 * t31, t1 * t100 - t22 * t46 + t33 * t29 + t3 * t74, t1 * t22 + t2 * t25 + t3 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t89, 0.2e1 * t135, 0, t91, 0, 0, 0.2e1 * pkin(2) * t100, -0.2e1 * pkin(2) * t97, 0.2e1 * (t89 + t91) * pkin(9), pkin(2) ^ 2 + t91 * t105 + t82, t75, t59, t60, t73, 0.2e1 * t124, t91, 0.2e1 * t100 * t143 + 0.2e1 * t96 * t161, 0.2e1 * t38 * t100 + 0.2e1 * t99 * t161 (t143 * t99 - t38 * t96) * t166, t143 ^ 2 + t38 ^ 2 + t82, t91, 0.2e1 * t123, t58, t75, t59, t73 (t34 * t96 + t35 * t99) * t166, -0.2e1 * t35 * t100 - 0.2e1 * t43 * t74, 0.2e1 * t34 * t100 - 0.2e1 * t43 * t76, t34 ^ 2 + t35 ^ 2 + t43 ^ 2, t91, t58, t60, t73, 0.2e1 * t126, t75 (t22 * t99 - t25 * t96) * t166, -0.2e1 * t25 * t100 - 0.2e1 * t33 * t76, 0.2e1 * t22 * t100 + 0.2e1 * t33 * t74, t22 ^ 2 + t25 ^ 2 + t33 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t46, -t138, t18, -t19, 0, 0, t26, -t114, t42, -t155, t146, 0, -pkin(3) * t29 - t131 - t157, -pkin(3) * t31 - t130 + t158, t108 + t118, -t16 * pkin(3) + t118 * pkin(10), 0, -t42, -t146, t26, -t114, -t155, t108 + t119, -t56 * t29 + t8 * t99 + t131, -t56 * t31 - t8 * t96 + t130, t119 * pkin(10) + t8 * t56, 0, -t146, t42, -t155, t114, t26, t1 * t96 + t2 * t99 - t62 * t29 + t61 * t31, -t3 * t96 - t51 * t31 + t62 * t46, t51 * t29 - t3 * t99 - t61 * t46, t1 * t61 + t2 * t62 + t3 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, t100, 0, -t83, -t100 * pkin(9), 0, 0, t64, t54, -t136, -t64, -t77, 0, -pkin(9) * t76 + (-pkin(3) * t97 + t159) * t96, pkin(10) * t77 + (pkin(9) * t96 - t164) * t97, t112, -pkin(3) * t83 + t112 * pkin(10), 0, t136, t77, t64, t54, -t64, t113, t116 * t96 + t43 * t99, t116 * t99 - t43 * t96, t113 * pkin(10) + t43 * t56, 0, t77, -t136, -t64, -t54, t64 (t61 * t97 + t25) * t99 + (-t62 * t97 + t22) * t96, -t62 * t100 - t33 * t96 - t51 * t76, t61 * t100 - t33 * t99 + t51 * t74, t22 * t61 + t25 * t62 + t33 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88, t70, 0, t90, 0, 0, 0.2e1 * t164, pkin(3) * t167, t55, pkin(3) ^ 2 + t142, 0, 0, 0, t88, t70, t90, t55, 0.2e1 * t56 * t99, t56 * t167, t56 ^ 2 + t142, 0, 0, 0, t90, -0.2e1 * t148, t88, 0.2e1 * t61 * t96 + 0.2e1 * t62 * t99, t51 * t167, -0.2e1 * t51 * t99, t51 ^ 2 + t61 ^ 2 + t62 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t29, t46, -t145, -t7, 0, 0, t46, -t31, t29, 0, 0, 0, -t31 * pkin(4) - t141, t145 - 0.2e1 * t162, t128 + t44, -t5 * pkin(4) + qJ(5) * t128, t46, t29, t31, 0, 0, 0, -t94 * t31 - t141, t121 + 0.2e1 * t44 (pkin(4) - t134) * t46 + t120, t2 * qJ(5) - t1 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, -t74, -t100, -t143, -t38, 0, 0, -t100, -t76, t74, 0, 0, 0, t117 * t97, 0.2e1 * t86 + t143, t78 + t38, -t35 * pkin(4) - t34 * qJ(5), -t100, t74, t76, 0, 0, 0, t170 * t97, t110 + t78, t134 * t100 + t109, t25 * qJ(5) - t22 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, t99, 0, -t81, -t85, 0, 0, 0, -t96, -t99, 0, 0, 0, t171, t81, t85, t171 * pkin(10), 0, -t99, t96, 0, 0, 0, -t94 * t96 + t79, t62, -t61, t62 * qJ(5) - t61 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(4), t102, pkin(4) ^ 2 + t103, 1, 0, 0, 0, 0, 0, 0, t102, 0.2e1 * t94, t94 ^ 2 + t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t46, 0, t5, 0, 0, 0, 0, 0, 0, t31, 0, -t46, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, -t100, 0, t35, 0, 0, 0, 0, 0, 0, t76, 0, t100, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, 0, t81, 0, 0, 0, 0, 0, 0, t96, 0, 0, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, -1, -t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, t46, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, -t100, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, qJ(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t4;
