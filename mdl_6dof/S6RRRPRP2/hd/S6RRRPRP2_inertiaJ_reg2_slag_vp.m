% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:38
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP2_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:32:56
% EndTime: 2019-05-07 07:33:03
% DurationCPUTime: 2.15s
% Computational Cost: add. (2139->138), mult. (3995->242), div. (0->0), fcn. (4751->8), ass. (0->110)
t77 = sin(qJ(5));
t71 = t77 ^ 2;
t80 = cos(qJ(5));
t73 = t80 ^ 2;
t61 = t71 + t73;
t75 = sin(pkin(10));
t124 = t75 * pkin(3);
t66 = pkin(9) + t124;
t105 = t61 * t66;
t78 = sin(qJ(3));
t79 = sin(qJ(2));
t81 = cos(qJ(3));
t82 = cos(qJ(2));
t53 = -t78 * t79 + t81 * t82;
t54 = t78 * t82 + t81 * t79;
t76 = cos(pkin(10));
t34 = t53 * t75 + t54 * t76;
t136 = -0.2e1 * t34;
t128 = -pkin(8) - pkin(7);
t97 = t128 * t79;
t98 = t128 * t82;
t39 = t78 * t97 - t81 * t98;
t22 = t53 * qJ(4) + t39;
t38 = t78 * t98 + t81 * t97;
t86 = -t54 * qJ(4) + t38;
t13 = t22 * t75 - t76 * t86;
t135 = t13 ^ 2;
t32 = -t76 * t53 + t54 * t75;
t30 = t32 ^ 2;
t69 = -pkin(2) * t82 - pkin(1);
t45 = -pkin(3) * t53 + t69;
t134 = 0.2e1 * t45;
t133 = 0.2e1 * t54;
t132 = -0.2e1 * t77;
t131 = 0.2e1 * t77;
t130 = -0.2e1 * t80;
t129 = 0.2e1 * t82;
t127 = pkin(5) * t32;
t92 = pkin(5) * t77 - qJ(6) * t80;
t7 = t92 * t34 + t13;
t126 = t7 * t77;
t125 = t7 * t80;
t123 = t76 * pkin(3);
t122 = t78 * pkin(2);
t12 = pkin(4) * t32 - pkin(9) * t34 + t45;
t15 = t76 * t22 + t75 * t86;
t6 = t77 * t12 + t80 * t15;
t121 = t13 * t80;
t101 = t76 * t122;
t70 = t81 * pkin(2);
t68 = t70 + pkin(3);
t50 = t68 * t75 + t101;
t48 = pkin(9) + t50;
t120 = t32 * t48;
t119 = t32 * t66;
t118 = t34 * t71;
t25 = t77 * t32;
t117 = t77 * t34;
t116 = t77 * t48;
t115 = t77 * t66;
t114 = t77 * t80;
t28 = t80 * t32;
t29 = t80 * t34;
t113 = t80 * t48;
t112 = t80 * t66;
t111 = t105 * t48;
t104 = t75 * t122 - t76 * t68;
t93 = pkin(5) * t80 + qJ(6) * t77;
t87 = -pkin(4) - t93;
t37 = t87 + t104;
t52 = t87 - t123;
t110 = -t37 - t52;
t109 = t61 * t48 ^ 2;
t108 = t61 * t48;
t47 = -pkin(4) + t104;
t67 = -pkin(4) - t123;
t107 = t47 + t67;
t106 = t61 * t66 ^ 2;
t72 = t79 ^ 2;
t74 = t82 ^ 2;
t103 = t72 + t74;
t102 = qJ(6) * t32;
t100 = t32 * t117;
t31 = t34 ^ 2;
t99 = t31 * t114;
t96 = -t80 * t12 + t15 * t77;
t3 = t102 + t6;
t4 = t96 - t127;
t1 = t3 * t80 + t4 * t77;
t95 = t3 * t77 - t4 * t80;
t94 = t6 * t77 - t80 * t96;
t2 = t6 * t80 + t77 * t96;
t91 = -t34 * t37 + t120;
t90 = t34 * t47 - t120;
t89 = -t34 * t52 + t119;
t88 = t34 * t67 - t119;
t65 = -0.2e1 * t114;
t64 = 0.2e1 * t114;
t40 = 0.2e1 * t105;
t27 = t73 * t34;
t26 = t73 * t31;
t24 = t71 * t31;
t23 = t77 * t29;
t20 = 0.2e1 * t108;
t19 = t105 + t108;
t18 = 0.2e1 * t32 * t29;
t17 = -t27 - t118;
t16 = -t27 + t118;
t11 = t13 * t77;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t72, t79 * t129, 0, t74, 0, 0, pkin(1) * t129, -0.2e1 * pkin(1) * t79, 0.2e1 * t103 * pkin(7), t103 * pkin(7) ^ 2 + pkin(1) ^ 2, t54 ^ 2, t53 * t133, 0, t53 ^ 2, 0, 0, -0.2e1 * t69 * t53, t69 * t133, -0.2e1 * t38 * t54 + 0.2e1 * t39 * t53, t38 ^ 2 + t39 ^ 2 + t69 ^ 2, t31, t32 * t136, 0, t30, 0, 0, t32 * t134, t34 * t134, 0.2e1 * t13 * t34 - 0.2e1 * t15 * t32, t15 ^ 2 + t45 ^ 2 + t135, t26, -0.2e1 * t99, t18, t24, -0.2e1 * t100, t30, 0.2e1 * t13 * t117 - 0.2e1 * t32 * t96, 0.2e1 * t13 * t29 - 0.2e1 * t32 * t6, t94 * t136, t6 ^ 2 + t96 ^ 2 + t135, t26, t18, 0.2e1 * t99, t30, 0.2e1 * t100, t24, 0.2e1 * t7 * t117 - 0.2e1 * t32 * t4, t95 * t136, -0.2e1 * t7 * t29 + 0.2e1 * t3 * t32, t3 ^ 2 + t4 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, t82, 0, -t79 * pkin(7), -t82 * pkin(7), 0, 0, 0, 0, t54, 0, t53, 0, t38, -t39 (t53 * t78 - t54 * t81) * pkin(2) (t38 * t81 + t39 * t78) * pkin(2), 0, 0, t34, 0, -t32, 0, -t13, -t15, t104 * t34 - t32 * t50, t104 * t13 + t15 * t50, t23, -t16, t25, -t23, t28, 0, t90 * t77 - t121, t90 * t80 + t11, t2, t13 * t47 + t2 * t48, t23, t25, t16, 0, -t28, -t23, -t91 * t77 - t125, t1, t91 * t80 - t126, t1 * t48 + t37 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t70, -0.2e1 * t122, 0 (t78 ^ 2 + t81 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t104, -0.2e1 * t50, 0, t104 ^ 2 + t50 ^ 2, t71, t64, 0, t73, 0, 0, t47 * t130, t47 * t131, t20, t47 ^ 2 + t109, t71, 0, t65, 0, 0, t73, t37 * t130, t20, t37 * t132, t37 ^ 2 + t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t53, 0, t38, -t39, 0, 0, 0, 0, t34, 0, -t32, 0, -t13, -t15 (-t32 * t75 - t34 * t76) * pkin(3) (-t13 * t76 + t15 * t75) * pkin(3), t23, -t16, t25, -t23, t28, 0, t88 * t77 - t121, t88 * t80 + t11, t2, t13 * t67 + t2 * t66, t23, t25, t16, 0, -t28, -t23, -t89 * t77 - t125, t1, t89 * t80 - t126, t1 * t66 + t52 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t70, -t122, 0, 0, 0, 0, 0, 0, 0, 1, -t104 + t123, -t101 + (-pkin(3) - t68) * t75, 0 (-t104 * t76 + t50 * t75) * pkin(3), t71, t64, 0, t73, 0, 0, -t107 * t80, t107 * t77, t19, t47 * t67 + t111, t71, 0, t65, 0, 0, t73, t110 * t80, t19, t110 * t77, t37 * t52 + t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t123, -0.2e1 * t124, 0 (t75 ^ 2 + t76 ^ 2) * pkin(3) ^ 2, t71, t64, 0, t73, 0, 0, t67 * t130, t67 * t131, t40, t67 ^ 2 + t106, t71, 0, t65, 0, 0, t73, t52 * t130, t40, t52 * t132, t52 ^ 2 + t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, t34, 0, t45, 0, 0, 0, 0, 0, 0, t28, -t25, t17, t94, 0, 0, 0, 0, 0, 0, t28, t17, t25, t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t117, t32, -t96, -t6, 0, 0, 0, t29, 0, t32, t117, 0, -t96 + 0.2e1 * t127, -t93 * t34, 0.2e1 * t102 + t6, -pkin(5) * t4 + qJ(6) * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t80, 0, -t116, -t113, 0, 0, 0, t77, 0, 0, -t80, 0, -t116, -t92, t113, -t92 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t80, 0, -t115, -t112, 0, 0, 0, t77, 0, 0, -t80, 0, -t115, -t92, t112, -t92 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -t77, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t77, t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t29, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
