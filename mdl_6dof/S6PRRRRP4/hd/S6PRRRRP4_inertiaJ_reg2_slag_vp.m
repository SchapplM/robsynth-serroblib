% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 00:19
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRRP4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRP4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRRP4_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 09:55:42
% EndTime: 2019-05-05 09:55:48
% DurationCPUTime: 1.97s
% Computational Cost: add. (1182->186), mult. (2646->317), div. (0->0), fcn. (3024->10), ass. (0->106)
t70 = sin(qJ(5));
t71 = sin(qJ(4));
t74 = cos(qJ(5));
t75 = cos(qJ(4));
t46 = t70 * t75 + t74 * t71;
t72 = sin(qJ(3));
t35 = t46 * t72;
t131 = t35 ^ 2;
t68 = sin(pkin(6));
t73 = sin(qJ(2));
t111 = t68 * t73;
t69 = cos(pkin(6));
t76 = cos(qJ(3));
t39 = t72 * t111 - t69 * t76;
t38 = t39 ^ 2;
t44 = t70 * t71 - t74 * t75;
t130 = t44 ^ 2;
t59 = -t75 * pkin(4) - pkin(3);
t129 = 0.2e1 * t59;
t128 = -0.2e1 * t72;
t127 = 0.2e1 * t76;
t126 = -pkin(10) - pkin(9);
t125 = pkin(3) * t75;
t124 = pkin(8) * t71;
t65 = t72 ^ 2;
t123 = t65 * pkin(8);
t62 = t72 * pkin(8);
t122 = t74 * pkin(4);
t121 = t76 * pkin(4);
t120 = t76 * pkin(5);
t50 = t126 * t75;
t96 = t126 * t71;
t28 = -t70 * t50 - t74 * t96;
t119 = t28 * t76;
t30 = -t74 * t50 + t70 * t96;
t118 = t30 * t76;
t117 = t35 * t44;
t106 = t75 * t72;
t109 = t71 * t72;
t37 = t74 * t106 - t70 * t109;
t116 = t37 * t35;
t115 = t39 * t46;
t114 = t39 * t72;
t113 = t46 * t44;
t112 = t46 * t76;
t77 = cos(qJ(2));
t110 = t68 * t77;
t108 = t71 * t75;
t107 = t71 * t76;
t105 = t75 * t76;
t104 = t76 * t35;
t103 = t76 * t44;
t49 = -t76 * pkin(3) - t72 * pkin(9) - pkin(2);
t42 = t75 * t49;
t20 = -pkin(10) * t106 + t42 + (-pkin(4) - t124) * t76;
t98 = pkin(8) * t105;
t26 = t98 + (-pkin(10) * t72 + t49) * t71;
t7 = t70 * t20 + t74 * t26;
t48 = pkin(4) * t109 + t62;
t64 = t71 ^ 2;
t66 = t75 ^ 2;
t102 = t64 + t66;
t101 = t76 * qJ(6);
t100 = t72 * t127;
t99 = t28 ^ 2 + t30 ^ 2;
t97 = t71 * t106;
t41 = t76 * t111 + t69 * t72;
t24 = -t75 * t110 - t41 * t71;
t25 = -t71 * t110 + t41 * t75;
t11 = t70 * t24 + t74 * t25;
t9 = -t74 * t24 + t70 * t25;
t95 = t11 * t30 + t9 * t28;
t94 = -t11 * t35 + t9 * t37;
t93 = -t11 * t44 + t9 * t46;
t92 = t11 ^ 2 + t9 ^ 2 + t38;
t91 = t39 * t35 + t9 * t76;
t90 = t28 * t37 - t30 * t35;
t89 = -t74 * t20 + t70 * t26;
t88 = t11 * t76 + t39 * t37;
t87 = -t24 * t71 + t25 * t75;
t32 = -pkin(8) * t107 + t42;
t33 = t71 * t49 + t98;
t86 = -t32 * t71 + t33 * t75;
t85 = -t46 * t35 - t37 * t44;
t84 = t41 * t76 + t114;
t83 = 0.2e1 * t28 * t46 - 0.2e1 * t30 * t44;
t81 = pkin(8) ^ 2;
t79 = 0.2e1 * pkin(5);
t78 = 0.2e1 * qJ(6);
t67 = t76 ^ 2;
t63 = t68 ^ 2;
t61 = t65 * t81;
t60 = t70 * pkin(4);
t57 = pkin(5) + t122;
t55 = t60 + qJ(6);
t53 = t63 * t77 ^ 2;
t43 = t46 ^ 2;
t34 = t37 ^ 2;
t31 = -0.2e1 * t37 * t76;
t23 = t39 * t44;
t21 = t37 * t46;
t17 = t44 * pkin(5) - t46 * qJ(6) + t59;
t12 = t35 * pkin(5) - t37 * qJ(6) + t48;
t5 = t89 + t120;
t4 = -t101 + t7;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63 * t73 ^ 2 + t69 ^ 2 + t53, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 ^ 2 + t38 + t53, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 ^ 2 + t25 ^ 2 + t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, -t111, 0, 0, 0, 0, 0, 0, 0, 0, t76 * t110, -t72 * t110, t84, pkin(2) * t110 + t84 * pkin(8), 0, 0, 0, 0, 0, 0, t39 * t109 - t24 * t76, t106 * t39 + t25 * t76 (-t24 * t75 - t25 * t71) * t72, pkin(8) * t114 + t24 * t32 + t25 * t33, 0, 0, 0, 0, 0, 0, t91, t88, t94, t11 * t7 + t39 * t48 + t89 * t9, 0, 0, 0, 0, 0, 0, t91, t94, -t88, t11 * t4 + t39 * t12 + t9 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, t100, 0, t67, 0, 0, pkin(2) * t127, pkin(2) * t128, 0.2e1 * (t65 + t67) * pkin(8), pkin(2) ^ 2 + t67 * t81 + t61, t66 * t65, -0.2e1 * t65 * t108, t105 * t128, t64 * t65, t71 * t100, t67, 0.2e1 * t71 * t123 - 0.2e1 * t32 * t76, 0.2e1 * t123 * t75 + 0.2e1 * t33 * t76, 0.2e1 * (-t32 * t75 - t33 * t71) * t72, t32 ^ 2 + t33 ^ 2 + t61, t34, -0.2e1 * t116, t31, t131, 0.2e1 * t104, t67, 0.2e1 * t48 * t35 + 0.2e1 * t76 * t89, 0.2e1 * t48 * t37 + 0.2e1 * t7 * t76, -0.2e1 * t7 * t35 + 0.2e1 * t37 * t89, t48 ^ 2 + t7 ^ 2 + t89 ^ 2, t34, t31, 0.2e1 * t116, t67, -0.2e1 * t104, t131, 0.2e1 * t12 * t35 + 0.2e1 * t5 * t76, -0.2e1 * t4 * t35 + 0.2e1 * t5 * t37, -0.2e1 * t12 * t37 - 0.2e1 * t4 * t76, t12 ^ 2 + t4 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39, -t41, 0, 0, 0, 0, 0, 0, 0, 0, -t39 * t75, t39 * t71, t87, -t39 * pkin(3) + pkin(9) * t87, 0, 0, 0, 0, 0, 0, t23, t115, t93, t39 * t59 + t95, 0, 0, 0, 0, 0, 0, t23, t93, -t115, t39 * t17 + t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t76, 0, -t62, -t76 * pkin(8), 0, 0, t97 (-t64 + t66) * t72, -t107, -t97, -t105, 0, -pkin(8) * t106 + (-pkin(3) * t72 + pkin(9) * t76) * t71, pkin(9) * t105 + (t124 - t125) * t72, t86, -pkin(3) * t62 + pkin(9) * t86, t21, t85, -t112, t117, t103, 0, t59 * t35 + t48 * t44 + t119, t59 * t37 + t48 * t46 + t118, -t7 * t44 + t46 * t89 + t90, t28 * t89 + t7 * t30 + t48 * t59, t21, -t112, -t85, 0, -t103, t117, t12 * t44 + t17 * t35 + t119, -t4 * t44 + t5 * t46 + t90, -t12 * t46 - t17 * t37 - t118, t12 * t17 + t5 * t28 + t4 * t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64, 0.2e1 * t108, 0, t66, 0, 0, 0.2e1 * t125, -0.2e1 * pkin(3) * t71, 0.2e1 * t102 * pkin(9), pkin(9) ^ 2 * t102 + pkin(3) ^ 2, t43, -0.2e1 * t113, 0, t130, 0, 0, t44 * t129, t46 * t129, t83, t59 ^ 2 + t99, t43, 0, 0.2e1 * t113, 0, 0, t130, 0.2e1 * t17 * t44, t83, -0.2e1 * t17 * t46, t17 ^ 2 + t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, -t25, 0, 0, 0, 0, 0, 0, 0, 0, -t9, -t11, 0 (t11 * t70 - t74 * t9) * pkin(4), 0, 0, 0, 0, 0, 0, -t9, 0, t11, t11 * t55 - t9 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, -t109, -t76, t32, -t33, 0, 0, 0, 0, t37, 0, -t35, -t76, -t121 * t74 - t89, t121 * t70 - t7 (-t35 * t70 - t37 * t74) * pkin(4) (t7 * t70 - t74 * t89) * pkin(4), 0, t37, 0, -t76, t35, 0 (-pkin(5) - t57) * t76 - t89, -t55 * t35 - t57 * t37 (-qJ(6) - t55) * t76 + t7, t4 * t55 - t5 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t75, 0, -t71 * pkin(9), -t75 * pkin(9), 0, 0, 0, 0, t46, 0, -t44, 0, -t28, -t30 (-t44 * t70 - t46 * t74) * pkin(4) (-t28 * t74 + t30 * t70) * pkin(4), 0, t46, 0, 0, t44, 0, -t28, -t55 * t44 - t57 * t46, t30, -t28 * t57 + t30 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t122, -0.2e1 * t60, 0 (t70 ^ 2 + t74 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t57, 0, 0.2e1 * t55, t55 ^ 2 + t57 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t9, -t11, 0, 0, 0, 0, 0, 0, 0, 0, -t9, 0, t11, -t9 * pkin(5) + t11 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, -t35, -t76, -t89, -t7, 0, 0, 0, t37, 0, -t76, t35, 0, -t89 - 0.2e1 * t120, -pkin(5) * t37 - t35 * qJ(6), -0.2e1 * t101 + t7, -t5 * pkin(5) + t4 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t44, 0, -t28, -t30, 0, 0, 0, t46, 0, 0, t44, 0, -t28, -pkin(5) * t46 - t44 * qJ(6), t30, -t28 * pkin(5) + t30 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t122, -t60, 0, 0, 0, 0, 0, 1, 0, 0, t79 + t122, 0, t78 + t60, t57 * pkin(5) + t55 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t79, 0, t78, pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, t37, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t1;
