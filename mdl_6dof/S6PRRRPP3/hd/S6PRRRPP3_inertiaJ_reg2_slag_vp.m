% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRPP3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPP3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRRRPP3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 06:53:59
% EndTime: 2019-05-05 06:54:03
% DurationCPUTime: 1.59s
% Computational Cost: add. (564->147), mult. (1290->234), div. (0->0), fcn. (1391->8), ass. (0->93)
t67 = sin(qJ(4));
t59 = t67 ^ 2;
t70 = cos(qJ(4));
t61 = t70 ^ 2;
t115 = t59 + t61;
t63 = sin(pkin(6));
t69 = sin(qJ(2));
t100 = t63 * t69;
t64 = cos(pkin(6));
t68 = sin(qJ(3));
t71 = cos(qJ(3));
t23 = t71 * t100 + t64 * t68;
t72 = cos(qJ(2));
t99 = t63 * t72;
t10 = t23 * t67 + t70 * t99;
t12 = t23 * t70 - t67 * t99;
t21 = t68 * t100 - t64 * t71;
t20 = t21 ^ 2;
t114 = t10 ^ 2 + t12 ^ 2 + t20;
t65 = pkin(4) + qJ(6);
t90 = t67 * qJ(5);
t113 = -t65 * t70 - t90;
t50 = qJ(5) * t70;
t112 = -pkin(4) * t67 + t50;
t111 = -0.2e1 * t67;
t110 = 0.2e1 * t68;
t109 = t10 * t67 + t12 * t70;
t108 = pkin(3) * t70;
t106 = pkin(9) * t71;
t60 = t68 ^ 2;
t105 = t60 * pkin(8);
t54 = t68 * pkin(8);
t103 = t21 * t67;
t102 = t21 * t68;
t101 = t21 * t70;
t45 = t67 * t68;
t97 = t67 * t70;
t96 = t67 * t71;
t95 = t68 * t71;
t47 = t70 * t68;
t48 = t70 * t71;
t94 = pkin(4) * t45 + t54;
t30 = -t71 * pkin(3) - t68 * pkin(9) - pkin(2);
t93 = pkin(8) * t96 - t70 * t30;
t18 = pkin(8) * t48 + t67 * t30;
t92 = t115 * pkin(9) ^ 2;
t91 = t12 * qJ(5);
t89 = t71 * qJ(5);
t88 = t67 * t95;
t87 = t60 * t97;
t86 = t68 * t48;
t57 = t71 * pkin(4);
t16 = t57 + t93;
t85 = t10 * t47 - t12 * t45;
t83 = -t70 * pkin(4) - t90;
t29 = -pkin(3) + t83;
t84 = -t29 * t68 - t106;
t15 = t89 - t18;
t82 = -t15 * t70 + t16 * t67;
t81 = t18 * t70 + t67 * t93;
t80 = t23 * t71 + t102;
t79 = -pkin(5) * t45 + t18;
t1 = t10 * t71 + t21 * t45;
t2 = -t12 * t71 - t21 * t47;
t78 = -pkin(5) * t47 - t16;
t77 = t109 * pkin(9);
t76 = pkin(8) ^ 2;
t74 = qJ(5) ^ 2;
t73 = 0.2e1 * qJ(5);
t62 = t71 ^ 2;
t58 = t63 ^ 2;
t56 = t70 * pkin(9);
t53 = t60 * t76;
t52 = t67 * pkin(9);
t49 = -0.2e1 * t89;
t46 = t61 * t60;
t44 = t59 * t60;
t42 = t58 * t72 ^ 2;
t41 = 0.2e1 * t97;
t37 = t67 * t47;
t35 = t70 * pkin(5) + t56;
t34 = t67 * pkin(5) + t52;
t33 = -0.2e1 * t86;
t32 = -0.2e1 * t87;
t31 = -0.2e1 * t88;
t28 = 0.2e1 * t115 * pkin(9);
t27 = (-t59 + t61) * t68;
t24 = -pkin(3) + t113;
t19 = -t68 * t50 + t94;
t14 = (qJ(6) * t67 - t50) * t68 + t94;
t5 = t79 - t89;
t3 = t71 * qJ(6) - t78;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 * t69 ^ 2 + t64 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23 ^ 2 + t20 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, -t100, 0, 0, 0, 0, 0, 0, 0, 0, t71 * t99, -t68 * t99, t80, pkin(2) * t99 + t80 * pkin(8), 0, 0, 0, 0, 0, 0, t1, -t2 (t10 * t70 - t12 * t67) * t68, pkin(8) * t102 + t10 * t93 + t12 * t18, 0, 0, 0, 0, 0, 0, t85, -t1, t2, t10 * t16 - t12 * t15 + t21 * t19, 0, 0, 0, 0, 0, 0, t85, t2, t1, t10 * t3 + t12 * t5 + t21 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t60, 0.2e1 * t95, 0, t62, 0, 0, 0.2e1 * pkin(2) * t71, -0.2e1 * pkin(2) * t68, 0.2e1 * (t60 + t62) * pkin(8), pkin(2) ^ 2 + t62 * t76 + t53, t46, t32, t33, t44, 0.2e1 * t88, t62, 0.2e1 * t67 * t105 + 0.2e1 * t71 * t93, 0.2e1 * t70 * t105 + 0.2e1 * t18 * t71 (-t18 * t67 + t70 * t93) * t110, t18 ^ 2 + t93 ^ 2 + t53, t62, 0.2e1 * t86, t31, t46, t32, t44 (t15 * t67 + t16 * t70) * t110, -0.2e1 * t16 * t71 - 0.2e1 * t19 * t45, 0.2e1 * t15 * t71 - 0.2e1 * t19 * t47, t15 ^ 2 + t16 ^ 2 + t19 ^ 2, t62, t31, t33, t44, 0.2e1 * t87, t46 (t3 * t70 - t5 * t67) * t110, -0.2e1 * t14 * t47 - 0.2e1 * t5 * t71, 0.2e1 * t14 * t45 + 0.2e1 * t3 * t71, t14 ^ 2 + t3 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t21, -t23, 0, 0, 0, 0, 0, 0, 0, 0, -t101, t103, t109, -t21 * pkin(3) + t77, 0, 0, 0, 0, 0, 0, t109, t101, -t103, t21 * t29 + t77, 0, 0, 0, 0, 0, 0, t109, -t103, -t101, t10 * t34 + t12 * t35 + t21 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t71, 0, -t54, -t71 * pkin(8), 0, 0, t37, t27, -t96, -t37, -t48, 0, -pkin(8) * t47 + (-pkin(3) * t68 + t106) * t67, pkin(9) * t48 + (pkin(8) * t67 - t108) * t68, t81, -pkin(3) * t54 + pkin(9) * t81, 0, t96, t48, t37, t27, -t37, t82, t19 * t70 + t67 * t84, -t19 * t67 + t70 * t84, pkin(9) * t82 + t19 * t29, 0, t48, -t96, -t37, -t27, t37 (t34 * t68 + t5) * t70 + (-t35 * t68 + t3) * t67, -t14 * t67 - t24 * t47 - t35 * t71, -t14 * t70 + t24 * t45 + t34 * t71, t14 * t24 + t3 * t34 + t5 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t59, t41, 0, t61, 0, 0, 0.2e1 * t108, pkin(3) * t111, t28, pkin(3) ^ 2 + t92, 0, 0, 0, t59, t41, t61, t28, 0.2e1 * t29 * t70, t29 * t111, t29 ^ 2 + t92, 0, 0, 0, t61, -0.2e1 * t97, t59, 0.2e1 * t34 * t67 + 0.2e1 * t35 * t70, t24 * t111, -0.2e1 * t24 * t70, t24 ^ 2 + t34 ^ 2 + t35 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10, -t12, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, t12, -t10 * pkin(4) + t91, 0, 0, 0, 0, 0, 0, 0, t12, -t10, -t10 * t65 + t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t45, -t71, -t93, -t18, 0, 0, -t71, -t47, t45, 0, 0, 0, t83 * t68, 0.2e1 * t57 + t93, t49 + t18, -t16 * pkin(4) - t15 * qJ(5), -t71, t45, t47, 0, 0, 0, t113 * t68, t49 + t79 (-qJ(6) - t65) * t71 + t78, t5 * qJ(5) - t3 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t70, 0, -t52, -t56, 0, 0, 0, -t67, -t70, 0, 0, 0, t112, t52, t56, t112 * pkin(9), 0, -t70, t67, 0, 0, 0, -t65 * t67 + t50, t35, -t34, t35 * qJ(5) - t34 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(4), t73, pkin(4) ^ 2 + t74, 1, 0, 0, 0, 0, 0, 0, t73, 0.2e1 * t65, t65 ^ 2 + t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, -t71, 0, t16, 0, 0, 0, 0, 0, 0, t47, 0, t71, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, 0, t52, 0, 0, 0, 0, 0, 0, t67, 0, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, -1, -t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, -t71, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, 0, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, qJ(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t4;
