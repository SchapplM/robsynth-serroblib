% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d6,theta2,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:45
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRPR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRPR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRPR3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:09:50
% EndTime: 2019-05-05 14:09:53
% DurationCPUTime: 0.97s
% Computational Cost: add. (644->80), mult. (1045->137), div. (0->0), fcn. (1174->8), ass. (0->64)
t41 = sin(pkin(10));
t43 = cos(pkin(10));
t46 = sin(qJ(4));
t48 = cos(qJ(4));
t20 = t41 * t48 + t43 * t46;
t22 = -t41 * t46 + t43 * t48;
t80 = (t20 * t41 + t22 * t43) * pkin(4);
t19 = t22 ^ 2;
t77 = t20 ^ 2;
t79 = t77 + t19;
t44 = cos(pkin(9));
t69 = t44 * pkin(1);
t34 = -pkin(2) - t69;
t27 = -pkin(7) + t34;
t61 = -qJ(5) + t27;
t16 = t61 * t46;
t56 = t61 * t48;
t4 = t41 * t16 - t43 * t56;
t78 = t4 ^ 2;
t42 = sin(pkin(9));
t35 = t42 * pkin(1);
t29 = t35 + qJ(3);
t76 = t29 ^ 2;
t24 = t46 * pkin(4) + t29;
t75 = 0.2e1 * t24;
t74 = 0.2e1 * t29;
t73 = t4 * t20;
t72 = t4 * t22;
t71 = t41 * pkin(4);
t70 = t43 * pkin(4);
t8 = t22 * t20;
t33 = -pkin(5) - t70;
t68 = t22 * t33;
t45 = sin(qJ(6));
t37 = t45 ^ 2;
t67 = t37 * t22;
t12 = t45 * t20;
t66 = t45 * t22;
t47 = cos(qJ(6));
t65 = t45 * t47;
t64 = t47 * t22;
t39 = t47 ^ 2;
t63 = t37 + t39;
t38 = t46 ^ 2;
t40 = t48 ^ 2;
t62 = t38 + t40;
t60 = t45 * t64;
t32 = pkin(8) + t71;
t57 = t63 * t32;
t3 = t20 * pkin(5) - t22 * pkin(8) + t24;
t6 = t43 * t16 + t41 * t56;
t1 = t47 * t3 - t45 * t6;
t2 = t45 * t3 + t47 * t6;
t55 = t1 * t47 + t2 * t45;
t54 = -t1 * t45 + t2 * t47;
t53 = t6 * t20 - t72;
t52 = -t20 * t32 + t68;
t15 = t47 * t20;
t14 = t39 * t22;
t13 = t39 * t19;
t11 = t37 * t19;
t9 = t62 * t27;
t7 = -t14 - t67;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t69, -0.2e1 * t35, 0 (t42 ^ 2 + t44 ^ 2) * pkin(1) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t34, t74, t34 ^ 2 + t76, t40, -0.2e1 * t48 * t46, 0, t38, 0, 0, t46 * t74, t48 * t74, -0.2e1 * t9, t62 * t27 ^ 2 + t76, t19, -0.2e1 * t8, 0, t77, 0, 0, t20 * t75, t22 * t75, -0.2e1 * t53, t24 ^ 2 + t6 ^ 2 + t78, t13, -0.2e1 * t19 * t65, 0.2e1 * t20 * t64, t11, -0.2e1 * t20 * t66, t77, 0.2e1 * t1 * t20 + 0.2e1 * t4 * t66, -0.2e1 * t2 * t20 + 0.2e1 * t4 * t64, -0.2e1 * t55 * t22, t1 ^ 2 + t2 ^ 2 + t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6 * t22 + t73, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54 * t22 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 + t11 + t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t34, 0, 0, 0, 0, 0, 0, 0, 0, -t62, t9, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t53, 0, 0, 0, 0, 0, 0, -t79 * t45, -t79 * t47, 0, t54 * t20 - t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t63) * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63 * t77 + t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t46, 0, t48 * t27, -t46 * t27, 0, 0, 0, 0, t22, 0, -t20, 0, -t4, -t6, -t80 (-t4 * t43 + t41 * t6) * pkin(4), t60, t14 - t67, t12, -t60, t15, 0, -t4 * t47 + t52 * t45, t4 * t45 + t52 * t47, t54, t54 * t32 + t4 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, -t48, 0, 0, 0, 0, 0, 0, 0, 0, -t20, -t22, 0 (-t20 * t43 + t22 * t41) * pkin(4), 0, 0, 0, 0, 0, 0, -t15, t12, -t7, t20 * t33 + t22 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, -t46, 0, 0, 0, 0, 0, 0, 0, 0, t22, -t20, 0, t80, 0, 0, 0, 0, 0, 0, t64, -t66, t63 * t20, t20 * t57 - t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t70, -0.2e1 * t71, 0 (t41 ^ 2 + t43 ^ 2) * pkin(4) ^ 2, t37, 0.2e1 * t65, 0, t39, 0, 0, -0.2e1 * t33 * t47, 0.2e1 * t33 * t45, 0.2e1 * t57, t63 * t32 ^ 2 + t33 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, t22, 0, t24, 0, 0, 0, 0, 0, 0, t15, -t12, t7, t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, -t66, t20, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66, -t64, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, -t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, t47, 0, -t45 * t32, -t47 * t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, -t45, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
