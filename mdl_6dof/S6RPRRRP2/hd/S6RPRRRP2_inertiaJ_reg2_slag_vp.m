% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:01
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP2_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:15:07
% EndTime: 2019-05-06 01:15:12
% DurationCPUTime: 1.67s
% Computational Cost: add. (1165->170), mult. (2291->259), div. (0->0), fcn. (2459->8), ass. (0->103)
t70 = sin(qJ(5));
t71 = sin(qJ(4));
t73 = cos(qJ(5));
t74 = cos(qJ(4));
t41 = t70 * t71 - t73 * t74;
t60 = -t74 * pkin(4) - pkin(3);
t29 = t41 * pkin(5) + t60;
t113 = 0.2e1 * t29;
t112 = 0.2e1 * t60;
t72 = sin(qJ(3));
t111 = 0.2e1 * t72;
t75 = cos(qJ(3));
t110 = -0.2e1 * t75;
t109 = -pkin(9) - pkin(8);
t108 = pkin(3) * t74;
t43 = t70 * t74 + t73 * t71;
t32 = t43 * t72;
t107 = t32 * pkin(5);
t68 = sin(pkin(10));
t106 = t68 * pkin(1);
t69 = cos(pkin(10));
t105 = t69 * pkin(1);
t104 = t70 * pkin(4);
t63 = t73 * pkin(4);
t103 = t75 * pkin(3);
t102 = t75 * pkin(4);
t101 = t75 * pkin(5);
t100 = t43 * t32;
t99 = t43 * t75;
t53 = pkin(7) + t106;
t98 = t53 * t71;
t64 = t71 ^ 2;
t97 = t64 * t72;
t65 = t72 ^ 2;
t96 = t65 * t53;
t95 = t71 * t72;
t94 = t71 * t74;
t93 = t71 * t75;
t46 = t72 * t53;
t92 = t74 * t72;
t91 = t74 * t75;
t90 = t75 * t41;
t89 = t75 * t53;
t88 = t75 * t72;
t36 = pkin(4) * t95 + t46;
t66 = t74 ^ 2;
t87 = t64 + t66;
t67 = t75 ^ 2;
t86 = t65 + t67;
t85 = 0.2e1 * t88;
t84 = t71 * t92;
t83 = t74 * t89;
t54 = -pkin(2) - t105;
t82 = t87 * pkin(8);
t38 = -t72 * pkin(8) - t103 + t54;
t35 = t74 * t38;
t10 = -pkin(9) * t92 + t35 + (-pkin(4) - t98) * t75;
t14 = t83 + (-pkin(9) * t72 + t38) * t71;
t3 = t73 * t10 - t70 * t14;
t47 = t109 * t71;
t48 = t109 * t74;
t23 = t73 * t47 + t70 * t48;
t4 = t70 * t10 + t73 * t14;
t20 = -t71 * t89 + t35;
t21 = t71 * t38 + t83;
t81 = -t20 * t71 + t21 * t74;
t24 = t70 * t47 - t73 * t48;
t34 = -t70 * t95 + t73 * t92;
t80 = -t34 * qJ(6) + t3;
t2 = -t32 * qJ(6) + t4;
t78 = pkin(4) ^ 2;
t76 = 0.2e1 * pkin(5);
t62 = t70 ^ 2 * t78;
t61 = -0.2e1 * t104;
t59 = t63 + pkin(5);
t58 = t66 * t72;
t57 = t66 * t65;
t55 = t64 * t65;
t52 = t53 ^ 2;
t50 = t70 * t102;
t45 = t65 * t52;
t40 = t43 ^ 2;
t39 = t41 ^ 2;
t37 = t41 * t104;
t31 = t34 ^ 2;
t30 = t32 ^ 2;
t28 = t34 * t110;
t27 = t32 * t110;
t26 = t34 * t104;
t25 = t32 * t104;
t22 = -0.2e1 * t43 * t41;
t19 = t34 * t43;
t18 = t34 * t41;
t17 = t32 * t41;
t16 = t36 + t107;
t15 = -0.2e1 * t34 * t32;
t13 = -t41 * qJ(6) + t24;
t12 = -t43 * qJ(6) + t23;
t11 = t31 + t30 + t67;
t7 = -t18 - t100;
t6 = -t18 + t100;
t1 = t80 - t101;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t105, -0.2e1 * t106, 0 (t68 ^ 2 + t69 ^ 2) * pkin(1) ^ 2, t65, t85, 0, t67, 0, 0, t54 * t110, t54 * t111, 0.2e1 * t86 * t53, t67 * t52 + t54 ^ 2 + t45, t57, -0.2e1 * t65 * t94, -0.2e1 * t74 * t88, t55, t71 * t85, t67, -0.2e1 * t20 * t75 + 0.2e1 * t71 * t96, 0.2e1 * t21 * t75 + 0.2e1 * t74 * t96 (-t20 * t74 - t21 * t71) * t111, t20 ^ 2 + t21 ^ 2 + t45, t31, t15, t28, t30, -t27, t67, -0.2e1 * t3 * t75 + 0.2e1 * t36 * t32, 0.2e1 * t36 * t34 + 0.2e1 * t4 * t75, -0.2e1 * t3 * t34 - 0.2e1 * t4 * t32, t3 ^ 2 + t36 ^ 2 + t4 ^ 2, t31, t15, t28, t30, -t27, t67, -0.2e1 * t1 * t75 + 0.2e1 * t16 * t32, 0.2e1 * t16 * t34 + 0.2e1 * t2 * t75, -0.2e1 * t1 * t34 - 0.2e1 * t2 * t32, t1 ^ 2 + t16 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t81 - t89) * t72, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3 * t32 + t4 * t34 - t36 * t75, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t32 - t16 * t75 + t2 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 + t55 + t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t75, 0, -t46, -t89, 0, 0, t84, t58 - t97, -t93, -t84, -t91, 0, -t53 * t92 + (-pkin(3) * t72 + pkin(8) * t75) * t71, pkin(8) * t91 + (t98 - t108) * t72, t81, -pkin(3) * t46 + t81 * pkin(8), t19, t7, -t99, t17, t90, 0, -t23 * t75 + t60 * t32 + t36 * t41, t24 * t75 + t60 * t34 + t36 * t43, -t23 * t34 - t24 * t32 - t3 * t43 - t4 * t41, t3 * t23 + t4 * t24 + t36 * t60, t19, t7, -t99, t17, t90, 0, -t12 * t75 + t16 * t41 + t29 * t32, t13 * t75 + t16 * t43 + t29 * t34, -t1 * t43 - t12 * t34 - t13 * t32 - t2 * t41, t1 * t12 + t2 * t13 + t16 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, -t72, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t93, t58 + t97, t72 * t82 + t103, 0, 0, 0, 0, 0, 0, -t90, -t99, t6, -t32 * t23 + t34 * t24 - t75 * t60, 0, 0, 0, 0, 0, 0, -t90, -t99, t6, -t32 * t12 + t34 * t13 - t75 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64, 0.2e1 * t94, 0, t66, 0, 0, 0.2e1 * t108, -0.2e1 * pkin(3) * t71, 0.2e1 * t82, t87 * pkin(8) ^ 2 + pkin(3) ^ 2, t40, t22, 0, t39, 0, 0, t41 * t112, t43 * t112, -0.2e1 * t23 * t43 - 0.2e1 * t24 * t41, t23 ^ 2 + t24 ^ 2 + t60 ^ 2, t40, t22, 0, t39, 0, 0, t41 * t113, t43 * t113, -0.2e1 * t12 * t43 - 0.2e1 * t13 * t41, t12 ^ 2 + t13 ^ 2 + t29 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t95, -t75, t20, -t21, 0, 0, 0, 0, t34, 0, -t32, -t75, -t73 * t102 + t3, -t4 + t50, -t34 * t63 - t25 (t3 * t73 + t4 * t70) * pkin(4), 0, 0, t34, 0, -t32, -t75 (-pkin(5) - t59) * t75 + t80, -t2 + t50, -t59 * t34 - t25, t1 * t59 + t2 * t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t95, -t92, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t34, 0, -t32 * t63 + t26, 0, 0, 0, 0, 0, 0, -t32, -t34, 0, -t32 * t59 + t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t71 * pkin(8), -t74 * pkin(8), 0, 0, 0, 0, t43, 0, -t41, 0, t23, -t24, -t43 * t63 - t37 (t23 * t73 + t24 * t70) * pkin(4), 0, 0, t43, 0, -t41, 0, t12, -t13, -t59 * t43 - t37, t13 * t104 + t12 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t63, t61, 0, t73 ^ 2 * t78 + t62, 0, 0, 0, 0, 0, 1, 0.2e1 * t59, t61, 0, t59 ^ 2 + t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t32, -t75, t3, -t4, 0, 0, 0, 0, t34, 0, -t32, -t75, t80 - 0.2e1 * t101, -t2, -t34 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t34, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t34, 0, -t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, -t41, 0, t23, -t24, 0, 0, 0, 0, t43, 0, -t41, 0, t12, -t13, -t43 * pkin(5), t12 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t63, -t104, 0, 0, 0, 0, 0, 0, 0, 1, t76 + t63, -t104, 0, t59 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t76, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, t34, 0, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t43, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
