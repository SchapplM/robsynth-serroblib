% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:40:28
% EndTime: 2019-05-05 03:40:33
% DurationCPUTime: 1.39s
% Computational Cost: add. (931->128), mult. (2000->224), div. (0->0), fcn. (2409->10), ass. (0->93)
t62 = sin(pkin(11));
t64 = cos(pkin(11));
t67 = sin(qJ(3));
t70 = cos(qJ(3));
t44 = t62 * t70 + t64 * t67;
t105 = -0.2e1 * t44;
t65 = cos(pkin(6));
t63 = sin(pkin(6));
t68 = sin(qJ(2));
t92 = t63 * t68;
t36 = t65 * t70 - t67 * t92;
t37 = t65 * t67 + t70 * t92;
t15 = -t64 * t36 + t62 * t37;
t104 = t15 ^ 2;
t86 = -qJ(4) - pkin(8);
t47 = t86 * t70;
t81 = t86 * t67;
t24 = -t62 * t47 - t64 * t81;
t103 = t24 ^ 2;
t42 = t62 * t67 - t64 * t70;
t40 = t42 ^ 2;
t56 = -t70 * pkin(3) - pkin(2);
t102 = 0.2e1 * t56;
t66 = sin(qJ(5));
t101 = 0.2e1 * t66;
t69 = cos(qJ(5));
t100 = -0.2e1 * t69;
t99 = 0.2e1 * t70;
t98 = t42 * pkin(5);
t97 = t62 * pkin(3);
t96 = t64 * pkin(3);
t95 = t69 * pkin(5);
t94 = t15 * t24;
t93 = t15 * t69;
t71 = cos(qJ(2));
t91 = t63 * t71;
t90 = t66 * t42;
t89 = t66 * t44;
t88 = t66 * t69;
t26 = -t64 * t47 + t62 * t81;
t87 = t69 * t26;
t35 = t69 * t44;
t58 = t66 ^ 2;
t60 = t69 ^ 2;
t49 = t58 + t60;
t59 = t67 ^ 2;
t61 = t70 ^ 2;
t85 = t59 + t61;
t84 = qJ(6) * t44;
t54 = pkin(9) + t97;
t83 = qJ(6) + t54;
t82 = t42 * t105;
t55 = -pkin(4) - t96;
t19 = t42 * pkin(4) - t44 * pkin(9) + t56;
t9 = t69 * t19 - t66 * t26;
t74 = -t69 * t84 + t9;
t7 = t74 + t98;
t8 = t87 + (t19 - t84) * t66;
t80 = t8 * t66 + t7 * t69;
t10 = t66 * t19 + t87;
t79 = t10 * t69 - t9 * t66;
t78 = t10 * t66 + t9 * t69;
t17 = t62 * t36 + t64 * t37;
t11 = -t66 * t17 - t69 * t91;
t12 = t69 * t17 - t66 * t91;
t5 = t11 * t69 + t12 * t66;
t6 = -t11 * t66 + t12 * t69;
t77 = -t36 * t67 + t37 * t70;
t38 = t83 * t66;
t39 = t83 * t69;
t76 = -t38 * t69 + t39 * t66;
t75 = -t42 * t54 + t44 * t55;
t57 = t63 ^ 2;
t52 = t57 * t71 ^ 2;
t51 = 0.2e1 * t88;
t46 = t55 - t95;
t41 = t44 ^ 2;
t34 = t69 * t42;
t33 = t60 * t41;
t30 = t58 * t41;
t29 = t66 * t35;
t27 = -0.2e1 * t41 * t88;
t23 = 0.2e1 * t42 * t35;
t22 = t66 * t82;
t21 = t49 * t44;
t20 = (-t58 + t60) * t44;
t14 = t15 * t66;
t13 = pkin(5) * t89 + t24;
t4 = -t12 * t42 + t15 * t35;
t3 = t11 * t42 + t15 * t89;
t2 = t5 * t44;
t1 = t11 ^ 2 + t12 ^ 2 + t104;
t16 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * t68 ^ 2 + t65 ^ 2 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 ^ 2 + t37 ^ 2 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t104 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t92, 0, 0, 0, 0, 0, 0, 0, 0, t70 * t91, -t67 * t91, t77, pkin(2) * t91 + pkin(8) * t77, 0, 0, 0, 0, 0, 0, -t42 * t91, -t44 * t91, t15 * t44 - t17 * t42, t17 * t26 - t56 * t91 + t94, 0, 0, 0, 0, 0, 0, t3, t4, -t2, t12 * t10 + t11 * t9 + t94, 0, 0, 0, 0, 0, 0, t3, t4, -t2, t11 * t7 + t12 * t8 + t15 * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t59, t67 * t99, 0, t61, 0, 0, pkin(2) * t99, -0.2e1 * pkin(2) * t67, 0.2e1 * t85 * pkin(8), t85 * pkin(8) ^ 2 + pkin(2) ^ 2, t41, t82, 0, t40, 0, 0, t42 * t102, t44 * t102, 0.2e1 * t24 * t44 - 0.2e1 * t26 * t42, t26 ^ 2 + t56 ^ 2 + t103, t33, t27, t23, t30, t22, t40, 0.2e1 * t24 * t89 + 0.2e1 * t9 * t42, -0.2e1 * t10 * t42 + 0.2e1 * t24 * t35, t78 * t105, t10 ^ 2 + t9 ^ 2 + t103, t33, t27, t23, t30, t22, t40, 0.2e1 * t13 * t89 + 0.2e1 * t7 * t42, 0.2e1 * t13 * t35 - 0.2e1 * t8 * t42, t80 * t105, t13 ^ 2 + t7 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t37, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0 (-t15 * t64 + t17 * t62) * pkin(3), 0, 0, 0, 0, 0, 0, -t93, t14, t6, t15 * t55 + t54 * t6, 0, 0, 0, 0, 0, 0, -t93, t14, t6, -t11 * t38 + t12 * t39 + t15 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t70, 0, -t67 * pkin(8), -t70 * pkin(8), 0, 0, 0, 0, t44, 0, -t42, 0, -t24, -t26 (-t42 * t62 - t44 * t64) * pkin(3) (-t24 * t64 + t26 * t62) * pkin(3), t29, t20, t90, -t29, t34, 0, -t24 * t69 + t66 * t75, t24 * t66 + t69 * t75, t79, t24 * t55 + t54 * t79, t29, t20, t90, -t29, t34, 0, -t13 * t69 - t38 * t42 + t46 * t89, t13 * t66 + t46 * t35 - t39 * t42, -t44 * t76 - t7 * t66 + t8 * t69, t13 * t46 - t7 * t38 + t8 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t96, -0.2e1 * t97, 0 (t62 ^ 2 + t64 ^ 2) * pkin(3) ^ 2, t58, t51, 0, t60, 0, 0, t55 * t100, t55 * t101, 0.2e1 * t49 * t54, t49 * t54 ^ 2 + t55 ^ 2, t58, t51, 0, t60, 0, 0, t46 * t100, t46 * t101, 0.2e1 * t38 * t66 + 0.2e1 * t39 * t69, t38 ^ 2 + t39 ^ 2 + t46 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t91, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, t44, 0, t56, 0, 0, 0, 0, 0, 0, t34, -t90, -t21, t78, 0, 0, 0, 0, 0, 0, t34, -t90, -t21, t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, -t12, 0, 0, 0, 0, 0, 0, 0, 0, t11, -t12, 0, t11 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t89, t42, t9, -t10, 0, 0, 0, 0, t35, 0, -t89, t42, t74 + 0.2e1 * t98, -t8, -pkin(5) * t35, t7 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, t69, 0, -t66 * t54, -t69 * t54, 0, 0, 0, 0, t66, 0, t69, 0, -t38, -t39, -t66 * pkin(5), -t38 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t66, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t66, 0, t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t35, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t66, 0, t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t16;
