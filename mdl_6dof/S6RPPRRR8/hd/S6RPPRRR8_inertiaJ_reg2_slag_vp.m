% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:36
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRR8_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR8_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR8_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:14:57
% EndTime: 2019-05-05 16:15:02
% DurationCPUTime: 1.49s
% Computational Cost: add. (1350->135), mult. (2407->231), div. (0->0), fcn. (2874->8), ass. (0->80)
t54 = sin(pkin(10));
t55 = cos(pkin(10));
t61 = cos(qJ(4));
t75 = t61 * t55;
t85 = sin(qJ(4));
t33 = -t85 * t54 + t75;
t100 = -0.2e1 * t33;
t70 = t85 * t55;
t31 = t61 * t54 + t70;
t27 = t31 ^ 2;
t97 = t33 ^ 2;
t99 = t27 + t97;
t56 = -pkin(1) - qJ(3);
t86 = -pkin(7) + t56;
t40 = t86 * t54;
t17 = t85 * t40 - t86 * t75;
t98 = t17 ^ 2;
t96 = 0.2e1 * t31;
t44 = t54 * pkin(3) + qJ(2);
t95 = 0.2e1 * t44;
t60 = cos(qJ(5));
t47 = -t60 * pkin(5) - pkin(4);
t94 = 0.2e1 * t47;
t93 = 0.2e1 * qJ(2);
t92 = -pkin(9) - pkin(8);
t91 = t31 * pkin(5);
t90 = t33 * pkin(4);
t57 = sin(qJ(6));
t89 = t57 * pkin(5);
t59 = cos(qJ(6));
t88 = t59 * pkin(5);
t16 = t31 * pkin(4) - t33 * pkin(8) + t44;
t58 = sin(qJ(5));
t19 = t61 * t40 + t86 * t70;
t77 = t60 * t19;
t5 = t77 + (-pkin(9) * t33 + t16) * t58;
t87 = t59 * t5;
t76 = t60 * t33;
t79 = t58 * t33;
t15 = -t57 * t79 + t59 * t76;
t37 = t57 * t58 - t59 * t60;
t84 = t15 * t37;
t83 = t17 * t33;
t39 = t57 * t60 + t59 * t58;
t82 = t33 * t39;
t81 = t39 * t31;
t80 = t58 * t31;
t78 = t58 * t60;
t25 = t60 * t31;
t49 = t54 ^ 2;
t50 = t55 ^ 2;
t43 = t49 + t50;
t52 = t58 ^ 2;
t53 = t60 ^ 2;
t74 = t52 + t53;
t73 = t31 * t100;
t72 = t58 * t76;
t6 = t60 * t16 - t58 * t19;
t4 = -pkin(9) * t76 + t6 + t91;
t1 = t59 * t4 - t57 * t5;
t69 = t74 * t31;
t68 = -pkin(8) * t31 - t90;
t7 = t58 * t16 + t77;
t67 = t7 * t58 + t6 * t60;
t66 = -t6 * t58 + t7 * t60;
t65 = -t19 * t31 + t83;
t62 = qJ(2) ^ 2;
t42 = t92 * t60;
t41 = t92 * t58;
t36 = t39 ^ 2;
t35 = t37 ^ 2;
t30 = t43 * t56;
t22 = t57 * t41 - t59 * t42;
t21 = t59 * t41 + t57 * t42;
t20 = t37 * t31;
t14 = t59 * t25 - t57 * t80;
t9 = pkin(5) * t79 + t17;
t8 = t39 * t82;
t2 = t57 * t4 + t87;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t93 (pkin(1) ^ 2) + t62, t50, -0.2e1 * t55 * t54, 0, t49, 0, 0, t54 * t93, t55 * t93, -0.2e1 * t30, t43 * t56 ^ 2 + t62, t97, t73, 0, t27, 0, 0, t31 * t95, t33 * t95, 0.2e1 * t65, t19 ^ 2 + t44 ^ 2 + t98, t53 * t97, -0.2e1 * t97 * t78, t76 * t96, t52 * t97, t58 * t73, t27, 0.2e1 * t17 * t79 + 0.2e1 * t6 * t31, 0.2e1 * t17 * t76 - 0.2e1 * t7 * t31, t67 * t100, t6 ^ 2 + t7 ^ 2 + t98, t15 ^ 2, -0.2e1 * t15 * t82, t15 * t96, t82 ^ 2, -t82 * t96, t27, 0.2e1 * t1 * t31 + 0.2e1 * t82 * t9, 0.2e1 * t9 * t15 - 0.2e1 * t2 * t31, -0.2e1 * t1 * t15 - 0.2e1 * t2 * t82, t1 ^ 2 + t2 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t43, t30, 0, 0, 0, 0, 0, 0, 0, 0, -t99, -t65, 0, 0, 0, 0, 0, 0, -t99 * t58, -t99 * t60, 0, t66 * t31 - t83, 0, 0, 0, 0, 0, 0, -t31 * t81 - t33 * t82, -t14 * t31 - t33 * t15, -t14 * t82 + t15 * t81, -t1 * t81 + t2 * t14 - t9 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74 * t27 + t97, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 ^ 2 + t81 ^ 2 + t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, t55, 0, qJ(2), 0, 0, 0, 0, 0, 0, t31, t33, 0, t44, 0, 0, 0, 0, 0, 0, t25, -t80, -t74 * t33, t67, 0, 0, 0, 0, 0, 0, -t20, -t81, -t8 + t84, -t1 * t37 + t2 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 * t39 + t37 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 + t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, -t31, 0, -t17, -t19, 0, 0, t72 (-t52 + t53) * t33, t80, -t72, t25, 0, -t17 * t60 + t68 * t58, t17 * t58 + t68 * t60, t66, -t17 * pkin(4) + t66 * pkin(8), t15 * t39, -t8 - t84, t81, t82 * t37, -t20, 0, t21 * t31 + t9 * t37 + t47 * t82, t47 * t15 - t22 * t31 + t9 * t39, -t1 * t39 - t21 * t15 - t2 * t37 - t22 * t82, t1 * t21 + t2 * t22 + t9 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t31, 0, 0, 0, 0, 0, 0, 0, 0, t76, -t79, t69, pkin(8) * t69 + t90, 0, 0, 0, 0, 0, 0, -t33 * t37, -t82, -t14 * t37 + t39 * t81, t14 * t22 - t21 * t81 - t33 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37 * t21 + t39 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t52, 0.2e1 * t78, 0, t53, 0, 0, 0.2e1 * pkin(4) * t60, -0.2e1 * pkin(4) * t58, 0.2e1 * t74 * pkin(8), t74 * pkin(8) ^ 2 + pkin(4) ^ 2, t36, -0.2e1 * t39 * t37, 0, t35, 0, 0, t37 * t94, t39 * t94, -0.2e1 * t21 * t39 - 0.2e1 * t22 * t37, t21 ^ 2 + t22 ^ 2 + t47 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, -t79, t31, t6, -t7, 0, 0, 0, 0, t15, 0, -t82, t31, t31 * t88 + t1, -t87 + (-t4 - t91) * t57 (-t15 * t59 - t57 * t82) * pkin(5) (t1 * t59 + t2 * t57) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, -t25, 0, 0, 0, 0, 0, 0, 0, 0, -t81, -t14, 0 (t14 * t57 - t59 * t81) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t58, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t39, 0 (-t37 * t59 + t39 * t57) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t60, 0, -t58 * pkin(8), -t60 * pkin(8), 0, 0, 0, 0, t39, 0, -t37, 0, t21, -t22 (-t37 * t57 - t39 * t59) * pkin(5) (t21 * t59 + t22 * t57) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t88, -0.2e1 * t89, 0 (t57 ^ 2 + t59 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, -t82, t31, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t81, -t14, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t39, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, -t37, 0, t21, -t22, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t88, -t89, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
