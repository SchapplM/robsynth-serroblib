% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRRR6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PRRRRR6_inertiaJ_reg2_slag_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 12:41:52
% EndTime: 2019-05-05 12:42:05
% DurationCPUTime: 4.03s
% Computational Cost: add. (5317->326), mult. (14685->655), div. (0->0), fcn. (17301->16), ass. (0->157)
t86 = sin(pkin(7));
t94 = sin(qJ(3));
t140 = t86 * t94;
t89 = cos(pkin(7));
t99 = cos(qJ(3));
t74 = t89 * t99 * pkin(2);
t88 = cos(pkin(8));
t46 = t89 * pkin(3) + t74 + (-pkin(11) * t88 - pkin(10)) * t140;
t85 = sin(pkin(8));
t52 = (-pkin(11) * t85 * t94 - pkin(3) * t99 - pkin(2)) * t86;
t104 = t46 * t88 + t52 * t85;
t136 = t88 * t99;
t114 = t86 * t136;
t139 = t86 * t99;
t164 = pkin(2) * t94;
t67 = pkin(10) * t139 + t89 * t164;
t40 = (t85 * t89 + t114) * pkin(11) + t67;
t93 = sin(qJ(4));
t98 = cos(qJ(4));
t18 = t104 * t98 - t93 * t40;
t100 = cos(qJ(2));
t121 = t100 * t89;
t87 = sin(pkin(6));
t90 = cos(pkin(6));
t95 = sin(qJ(2));
t43 = t90 * t139 + (t99 * t121 - t94 * t95) * t87;
t44 = t90 * t140 + (t94 * t121 + t95 * t99) * t87;
t120 = t87 * t100;
t60 = -t86 * t120 + t90 * t89;
t22 = t44 * t98 + (t43 * t88 + t60 * t85) * t93;
t28 = -t43 * t85 + t60 * t88;
t92 = sin(qJ(5));
t97 = cos(qJ(5));
t10 = t22 * t92 - t28 * t97;
t177 = t10 ^ 2;
t137 = t88 * t98;
t141 = t85 * t98;
t20 = -t43 * t137 - t60 * t141 + t44 * t93;
t176 = t20 ^ 2;
t142 = t85 * t93;
t45 = t89 * t142 + (t93 * t136 + t94 * t98) * t86;
t59 = -t85 * t139 + t88 * t89;
t29 = t92 * t45 - t97 * t59;
t175 = t29 ^ 2;
t41 = -t98 * t114 + t93 * t140 - t89 * t141;
t174 = t41 ^ 2;
t61 = t92 * t142 - t97 * t88;
t173 = t61 ^ 2;
t172 = -0.2e1 * t29;
t171 = -0.2e1 * t41;
t63 = t97 * t142 + t92 * t88;
t91 = sin(qJ(6));
t96 = cos(qJ(6));
t47 = t96 * t141 + t91 * t63;
t170 = -0.2e1 * t47;
t169 = -0.2e1 * t63;
t168 = 0.2e1 * t85;
t167 = 0.2e1 * t86;
t166 = -0.2e1 * t92;
t165 = 0.2e1 * t97;
t163 = pkin(3) * t85;
t162 = pkin(3) * t93;
t161 = pkin(5) * t96;
t26 = -t85 * t46 + t88 * t52;
t13 = t41 * pkin(4) - t45 * pkin(12) + t26;
t19 = t104 * t93 + t98 * t40;
t15 = t59 * pkin(12) + t19;
t7 = t97 * t13 - t92 * t15;
t3 = -t41 * pkin(5) - t7;
t160 = t3 * t91;
t159 = t3 * t96;
t82 = t92 ^ 2;
t158 = t82 * pkin(12);
t157 = t92 * pkin(12);
t156 = t10 * t92;
t31 = t97 * t45 + t92 * t59;
t23 = t91 * t31 - t96 * t41;
t155 = t23 * t96;
t25 = t96 * t31 + t91 * t41;
t154 = t25 * t91;
t153 = t29 * t61;
t152 = t29 * t97;
t151 = t31 * t92;
t116 = pkin(11) * t141;
t57 = t116 + (pkin(12) + t162) * t88;
t58 = (-pkin(4) * t98 - pkin(12) * t93 - pkin(3)) * t85;
t35 = -t92 * t57 + t97 * t58;
t33 = pkin(5) * t141 - t35;
t150 = t33 * t91;
t149 = t33 * t96;
t148 = t47 * t96;
t49 = -t91 * t141 + t96 * t63;
t147 = t49 * t91;
t146 = t61 * t97;
t145 = t63 * t92;
t78 = t85 ^ 2;
t144 = t78 * t98;
t79 = t86 ^ 2;
t143 = t79 * t99;
t138 = t88 * t93;
t135 = t91 * t29;
t134 = t91 * t61;
t133 = t91 * t92;
t132 = t91 * t96;
t131 = t91 * t97;
t130 = t92 * t29;
t129 = t92 * t41;
t128 = t92 * t61;
t127 = t96 * t29;
t126 = t96 * t61;
t125 = t96 * t92;
t124 = t96 * t97;
t123 = t97 * t41;
t81 = t91 ^ 2;
t83 = t96 ^ 2;
t122 = t81 + t83;
t119 = 0.2e1 * t141;
t118 = t89 * t167;
t117 = t92 * t165;
t115 = t41 * t141;
t113 = t92 * t141;
t112 = t91 * t125;
t111 = t97 * t141;
t8 = t92 * t13 + t97 * t15;
t4 = t41 * pkin(13) + t8;
t14 = -t59 * pkin(4) - t18;
t9 = t29 * pkin(5) - t31 * pkin(13) + t14;
t1 = -t91 * t4 + t96 * t9;
t2 = t96 * t4 + t91 * t9;
t110 = -t1 * t91 + t2 * t96;
t12 = t22 * t97 + t28 * t92;
t5 = -t12 * t91 + t20 * t96;
t6 = t12 * t96 + t20 * t91;
t109 = -t5 * t91 + t6 * t96;
t108 = -t7 * t92 + t8 * t97;
t107 = t12 * t97 + t156;
t73 = pkin(11) * t142;
t56 = t73 + (-pkin(3) * t98 - pkin(4)) * t88;
t32 = t61 * pkin(5) - t63 * pkin(13) + t56;
t36 = t97 * t57 + t92 * t58;
t34 = -pkin(13) * t141 + t36;
t16 = t96 * t32 - t91 * t34;
t17 = t91 * t32 + t96 * t34;
t106 = -t16 * t91 + t17 * t96;
t105 = -t35 * t92 + t36 * t97;
t69 = -t97 * pkin(5) - t92 * pkin(13) - pkin(4);
t53 = -pkin(12) * t131 + t96 * t69;
t54 = pkin(12) * t124 + t91 * t69;
t103 = -t53 * t91 + t54 * t96;
t102 = pkin(12) ^ 2;
t84 = t97 ^ 2;
t77 = t82 * t102;
t75 = t78 * t98 ^ 2;
t66 = pkin(3) * t138 + t116;
t65 = -pkin(10) * t140 + t74;
t64 = pkin(3) * t137 - t73;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90 ^ 2 + (t100 ^ 2 + t95 ^ 2) * t87 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43 ^ 2 + t44 ^ 2 + t60 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 ^ 2 + t28 ^ 2 + t176, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 ^ 2 + t176 + t177, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 ^ 2 + t6 ^ 2 + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, -t87 * t95, 0, 0, 0, 0, 0, 0, 0, 0, -t60 * t139 + t43 * t89, t60 * t140 - t44 * t89 (-t43 * t94 + t44 * t99) * t86, -t60 * t86 * pkin(2) + t43 * t65 + t44 * t67, 0, 0, 0, 0, 0, 0, -t20 * t59 + t28 * t41, -t22 * t59 + t28 * t45, t20 * t45 - t22 * t41, -t20 * t18 + t22 * t19 + t28 * t26, 0, 0, 0, 0, 0, 0, -t10 * t41 + t20 * t29, -t12 * t41 + t20 * t31, t10 * t31 - t12 * t29, -t10 * t7 + t12 * t8 + t20 * t14, 0, 0, 0, 0, 0, 0, t10 * t23 + t5 * t29, t10 * t25 - t6 * t29, -t6 * t23 - t5 * t25, t5 * t1 + t10 * t3 + t6 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t79 * t94 ^ 2, 0.2e1 * t94 * t143, t94 * t118, t79 * t99 ^ 2, t99 * t118, t89 ^ 2, 0.2e1 * pkin(2) * t143 + 0.2e1 * t65 * t89, -0.2e1 * t79 * t164 - 0.2e1 * t67 * t89 (-t65 * t94 + t67 * t99) * t167, t79 * pkin(2) ^ 2 + t65 ^ 2 + t67 ^ 2, t45 ^ 2, t45 * t171, 0.2e1 * t59 * t45, t174, t59 * t171, t59 ^ 2, 0.2e1 * t18 * t59 + 0.2e1 * t26 * t41, -0.2e1 * t19 * t59 + 0.2e1 * t26 * t45, -0.2e1 * t18 * t45 - 0.2e1 * t19 * t41, t18 ^ 2 + t19 ^ 2 + t26 ^ 2, t31 ^ 2, t31 * t172, 0.2e1 * t31 * t41, t175, t29 * t171, t174, 0.2e1 * t14 * t29 + 0.2e1 * t7 * t41, 0.2e1 * t14 * t31 - 0.2e1 * t8 * t41, -0.2e1 * t8 * t29 - 0.2e1 * t7 * t31, t14 ^ 2 + t7 ^ 2 + t8 ^ 2, t25 ^ 2, -0.2e1 * t25 * t23, 0.2e1 * t25 * t29, t23 ^ 2, t23 * t172, t175, 0.2e1 * t1 * t29 + 0.2e1 * t3 * t23, -0.2e1 * t2 * t29 + 0.2e1 * t3 * t25, -0.2e1 * t1 * t25 - 0.2e1 * t2 * t23, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t44, 0, 0, 0, 0, 0, 0, 0, 0, -t28 * t141 - t20 * t88, t28 * t142 - t22 * t88 (t20 * t93 + t22 * t98) * t85, -t28 * t163 - t20 * t64 + t22 * t66, 0, 0, 0, 0, 0, 0, t10 * t141 + t20 * t61, t12 * t141 + t20 * t63, t10 * t63 - t12 * t61, -t10 * t35 + t12 * t36 + t20 * t56, 0, 0, 0, 0, 0, 0, t10 * t47 + t5 * t61, t10 * t49 - t6 * t61, -t6 * t47 - t5 * t49, t10 * t33 + t5 * t16 + t6 * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t140, 0, t139, t89, t65, -t67, 0, 0, t45 * t142 (-t41 * t93 + t45 * t98) * t85, t59 * t142 + t88 * t45, -t115, t59 * t141 - t88 * t41, t59 * t88, t18 * t88 + t64 * t59 + (-pkin(3) * t41 - t26 * t98) * t85, -t19 * t88 - t66 * t59 + (-pkin(3) * t45 + t26 * t93) * t85, -t66 * t41 - t64 * t45 + (-t18 * t93 + t19 * t98) * t85, -t26 * t163 + t18 * t64 + t19 * t66, t31 * t63, -t63 * t29 - t31 * t61, -t31 * t141 + t63 * t41, t153, t29 * t141 - t61 * t41, -t115, t14 * t61 - t7 * t141 + t56 * t29 + t35 * t41, t14 * t63 + t8 * t141 + t56 * t31 - t36 * t41, -t36 * t29 - t35 * t31 - t8 * t61 - t7 * t63, t14 * t56 + t7 * t35 + t8 * t36, t25 * t49, -t49 * t23 - t25 * t47, t25 * t61 + t49 * t29, t23 * t47, -t23 * t61 - t47 * t29, t153, t1 * t61 + t16 * t29 + t33 * t23 + t3 * t47, -t17 * t29 - t2 * t61 + t33 * t25 + t3 * t49, -t1 * t49 - t16 * t25 - t17 * t23 - t2 * t47, t1 * t16 + t2 * t17 + t3 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t78 * t93 ^ 2, 0.2e1 * t93 * t144, t138 * t168, t75, t88 * t119, t88 ^ 2, 0.2e1 * pkin(3) * t144 + 0.2e1 * t64 * t88, -0.2e1 * t78 * t162 - 0.2e1 * t66 * t88 (-t64 * t93 + t66 * t98) * t168, t78 * pkin(3) ^ 2 + t64 ^ 2 + t66 ^ 2, t63 ^ 2, t61 * t169, t141 * t169, t173, t61 * t119, t75, -0.2e1 * t35 * t141 + 0.2e1 * t56 * t61, 0.2e1 * t36 * t141 + 0.2e1 * t56 * t63, -0.2e1 * t35 * t63 - 0.2e1 * t36 * t61, t35 ^ 2 + t36 ^ 2 + t56 ^ 2, t49 ^ 2, t49 * t170, 0.2e1 * t49 * t61, t47 ^ 2, t61 * t170, t173, 0.2e1 * t16 * t61 + 0.2e1 * t33 * t47, -0.2e1 * t17 * t61 + 0.2e1 * t33 * t49, -0.2e1 * t16 * t49 - 0.2e1 * t17 * t47, t16 ^ 2 + t17 ^ 2 + t33 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t20, -t22, 0, 0, 0, 0, 0, 0, 0, 0, -t20 * t97, t20 * t92, t107, -t20 * pkin(4) + pkin(12) * t107, 0, 0, 0, 0, 0, 0, t10 * t133 - t5 * t97, t10 * t125 + t6 * t97 (-t5 * t96 - t6 * t91) * t92, pkin(12) * t156 + t5 * t53 + t6 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, -t41, t59, t18, -t19, 0, 0, t151, t31 * t97 - t130, t129, -t152, t123, 0, -pkin(4) * t29 - pkin(12) * t129 - t14 * t97, -pkin(4) * t31 - pkin(12) * t123 + t14 * t92 (t151 - t152) * pkin(12) + t108, -t14 * pkin(4) + pkin(12) * t108, t25 * t125 (-t154 - t155) * t92, t125 * t29 - t25 * t97, t23 * t133, -t130 * t91 + t23 * t97, -t152, -t1 * t97 + t53 * t29 + (pkin(12) * t23 + t160) * t92, t2 * t97 - t54 * t29 + (pkin(12) * t25 + t159) * t92, -t54 * t23 - t53 * t25 + (-t1 * t96 - t2 * t91) * t92, t1 * t53 + t157 * t3 + t2 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142, 0, t141, t88, t64, -t66, 0, 0, t145, t63 * t97 - t128, -t113, -t146, -t111, 0, -pkin(4) * t61 + pkin(12) * t113 - t56 * t97, -pkin(4) * t63 + pkin(12) * t111 + t56 * t92 (t145 - t146) * pkin(12) + t105, -t56 * pkin(4) + pkin(12) * t105, t49 * t125 (-t147 - t148) * t92, t125 * t61 - t49 * t97, t47 * t133, -t128 * t91 + t47 * t97, -t146, -t16 * t97 + t53 * t61 + (pkin(12) * t47 + t150) * t92, t17 * t97 - t54 * t61 + (pkin(12) * t49 + t149) * t92, -t54 * t47 - t53 * t49 + (-t16 * t96 - t17 * t91) * t92, t157 * t33 + t16 * t53 + t17 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t82, t117, 0, t84, 0, 0, pkin(4) * t165, pkin(4) * t166, 0.2e1 * (t82 + t84) * pkin(12), pkin(4) ^ 2 + t84 * t102 + t77, t83 * t82, -0.2e1 * t82 * t132, t124 * t166, t81 * t82, t91 * t117, t84, 0.2e1 * t158 * t91 - 0.2e1 * t53 * t97, 0.2e1 * t158 * t96 + 0.2e1 * t54 * t97, 0.2e1 * (-t53 * t96 - t54 * t91) * t92, t53 ^ 2 + t54 ^ 2 + t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10, -t12, 0, 0, 0, 0, 0, 0, 0, 0, -t10 * t96, t10 * t91, t109, -t10 * pkin(5) + pkin(13) * t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t29, t41, t7, -t8, 0, 0, t154, -t91 * t23 + t25 * t96, t135, -t155, t127, 0, -pkin(5) * t23 - pkin(13) * t135 - t159, -pkin(5) * t25 - pkin(13) * t127 + t160 (t154 - t155) * pkin(13) + t110, -t3 * pkin(5) + pkin(13) * t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, -t61, -t141, t35, -t36, 0, 0, t147, -t91 * t47 + t49 * t96, t134, -t148, t126, 0, -pkin(5) * t47 - pkin(13) * t134 - t149, -pkin(5) * t49 - pkin(13) * t126 + t150 (t147 - t148) * pkin(13) + t106, -t33 * pkin(5) + pkin(13) * t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t97, 0, -t157, -t97 * pkin(12), 0, 0, t112 (-t81 + t83) * t92, -t131, -t112, -t124, 0, -pkin(12) * t125 + (-pkin(5) * t92 + pkin(13) * t97) * t91, pkin(13) * t124 + (pkin(12) * t91 - t161) * t92, t103, -pkin(5) * t157 + pkin(13) * t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t81, 0.2e1 * t132, 0, t83, 0, 0, 0.2e1 * t161, -0.2e1 * pkin(5) * t91, 0.2e1 * t122 * pkin(13), pkin(13) ^ 2 * t122 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, -t23, t29, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t47, t61, t16, -t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, 0, -t133, -t97, t53, -t54, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, t96, 0, -t91 * pkin(13), -t96 * pkin(13), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
