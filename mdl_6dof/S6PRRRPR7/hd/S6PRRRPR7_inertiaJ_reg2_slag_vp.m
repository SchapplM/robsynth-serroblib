% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRPR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRPR7_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 08:47:56
% EndTime: 2019-05-05 08:48:06
% DurationCPUTime: 2.98s
% Computational Cost: add. (2697->252), mult. (6762->503), div. (0->0), fcn. (7998->14), ass. (0->123)
t138 = cos(qJ(6));
t85 = sin(pkin(13));
t88 = cos(pkin(13));
t91 = sin(qJ(6));
t149 = t138 * t88 - t91 * t85;
t89 = cos(pkin(7));
t97 = cos(qJ(2));
t119 = t89 * t97;
t86 = sin(pkin(7));
t93 = sin(qJ(3));
t126 = t86 * t93;
t87 = sin(pkin(6));
t90 = cos(pkin(6));
t94 = sin(qJ(2));
t96 = cos(qJ(3));
t33 = t90 * t126 + (t93 * t119 + t94 * t96) * t87;
t123 = t87 * t97;
t50 = -t86 * t123 + t90 * t89;
t92 = sin(qJ(4));
t95 = cos(qJ(4));
t22 = t33 * t92 - t50 * t95;
t20 = t22 ^ 2;
t124 = t87 * t94;
t125 = t86 * t96;
t31 = -t87 * t96 * t119 + t93 * t124 - t90 * t125;
t148 = t31 ^ 2;
t52 = t92 * t126 - t95 * t89;
t51 = t52 ^ 2;
t147 = -0.2e1 * t52;
t146 = 0.2e1 * t52;
t54 = t95 * t126 + t92 * t89;
t145 = -0.2e1 * t54;
t76 = -t88 * pkin(5) - pkin(4);
t144 = 0.2e1 * t76;
t143 = 0.2e1 * t86;
t142 = -0.2e1 * t95;
t141 = pkin(2) * t93;
t140 = pkin(2) * t96;
t83 = t92 ^ 2;
t139 = t83 * pkin(10);
t78 = t92 * pkin(10);
t137 = t22 * t92;
t110 = pkin(9) * t125;
t45 = t110 + (pkin(10) + t141) * t89;
t46 = (-pkin(3) * t96 - pkin(10) * t93 - pkin(2)) * t86;
t27 = -t92 * t45 + t95 * t46;
t26 = pkin(4) * t125 - t27;
t136 = t26 * t85;
t135 = t26 * t88;
t34 = t88 * t125 + t85 * t54;
t134 = t34 * t88;
t36 = -t85 * t125 + t88 * t54;
t133 = t36 * t85;
t132 = t52 * t95;
t131 = t54 * t92;
t80 = t86 ^ 2;
t130 = t80 * t96;
t129 = t85 * t88;
t128 = t85 * t92;
t127 = t85 * t95;
t122 = t88 * t92;
t121 = t88 * t95;
t120 = t89 * t93;
t117 = t92 * t52;
t116 = t92 * t95;
t115 = pkin(11) + qJ(5);
t70 = pkin(9) * t126;
t44 = t70 + (-pkin(3) - t140) * t89;
t21 = t52 * pkin(4) - t54 * qJ(5) + t44;
t28 = t95 * t45 + t92 * t46;
t25 = -qJ(5) * t125 + t28;
t8 = t85 * t21 + t88 * t25;
t64 = -t95 * pkin(4) - t92 * qJ(5) - pkin(3);
t42 = pkin(10) * t121 + t85 * t64;
t79 = t85 ^ 2;
t82 = t88 ^ 2;
t114 = t79 + t82;
t113 = qJ(5) * t52;
t112 = 0.2e1 * t125;
t111 = 0.2e1 * t116;
t109 = t85 * t122;
t108 = t92 * t125;
t107 = t95 * t125;
t7 = t88 * t21 - t85 * t25;
t105 = -t7 * t85 + t8 * t88;
t24 = t33 * t95 + t50 * t92;
t10 = t24 * t88 + t31 * t85;
t9 = -t24 * t85 + t31 * t88;
t104 = t10 * t88 - t9 * t85;
t103 = -pkin(4) * t92 + qJ(5) * t95;
t102 = t24 * t95 + t137;
t101 = -t27 * t92 + t28 * t95;
t58 = t88 * t64;
t41 = -pkin(10) * t127 + t58;
t100 = -t41 * t85 + t42 * t88;
t61 = t138 * t85 + t91 * t88;
t99 = pkin(10) ^ 2;
t84 = t95 ^ 2;
t77 = t83 * t99;
t73 = t80 * t96 ^ 2;
t66 = t115 * t88;
t65 = t115 * t85;
t62 = pkin(5) * t128 + t78;
t56 = pkin(2) * t120 + t110;
t55 = t89 * t140 - t70;
t49 = t149 * t92;
t47 = t61 * t92;
t39 = t138 * t66 - t91 * t65;
t38 = -t138 * t65 - t91 * t66;
t37 = -pkin(11) * t128 + t42;
t29 = -pkin(11) * t122 + t58 + (-pkin(10) * t85 - pkin(5)) * t95;
t16 = t138 * t36 - t91 * t34;
t14 = t138 * t34 + t91 * t36;
t13 = t138 * t37 + t91 * t29;
t12 = t138 * t29 - t91 * t37;
t11 = t34 * pkin(5) + t26;
t6 = -t34 * pkin(11) + t8;
t5 = t52 * pkin(5) - t36 * pkin(11) + t7;
t4 = t138 * t10 + t91 * t9;
t3 = -t91 * t10 + t138 * t9;
t2 = t138 * t6 + t91 * t5;
t1 = t138 * t5 - t91 * t6;
t15 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90 ^ 2 + (t94 ^ 2 + t97 ^ 2) * t87 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 ^ 2 + t50 ^ 2 + t148, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 ^ 2 + t148 + t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 ^ 2 + t9 ^ 2 + t20, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, -t124, 0, 0, 0, 0, 0, 0, 0, 0, -t50 * t125 - t31 * t89, t50 * t126 - t33 * t89 (t31 * t93 + t33 * t96) * t86, -t50 * t86 * pkin(2) - t31 * t55 + t33 * t56, 0, 0, 0, 0, 0, 0, t22 * t125 + t31 * t52, t24 * t125 + t31 * t54, t22 * t54 - t24 * t52, -t22 * t27 + t24 * t28 + t31 * t44, 0, 0, 0, 0, 0, 0, t22 * t34 + t9 * t52, -t10 * t52 + t22 * t36, -t10 * t34 - t9 * t36, t10 * t8 + t22 * t26 + t9 * t7, 0, 0, 0, 0, 0, 0, t22 * t14 + t3 * t52, t22 * t16 - t4 * t52, -t4 * t14 - t3 * t16, t3 * t1 + t22 * t11 + t4 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t80 * t93 ^ 2, 0.2e1 * t93 * t130, t120 * t143, t73, t89 * t112, t89 ^ 2, 0.2e1 * pkin(2) * t130 + 0.2e1 * t55 * t89, -0.2e1 * t80 * t141 - 0.2e1 * t56 * t89 (-t55 * t93 + t56 * t96) * t143, t80 * pkin(2) ^ 2 + t55 ^ 2 + t56 ^ 2, t54 ^ 2, t52 * t145, t125 * t145, t51, t52 * t112, t73, -0.2e1 * t27 * t125 + 0.2e1 * t44 * t52, 0.2e1 * t28 * t125 + 0.2e1 * t44 * t54, -0.2e1 * t27 * t54 - 0.2e1 * t28 * t52, t27 ^ 2 + t28 ^ 2 + t44 ^ 2, t36 ^ 2, -0.2e1 * t36 * t34, t36 * t146, t34 ^ 2, t34 * t147, t51, 0.2e1 * t26 * t34 + 0.2e1 * t7 * t52, 0.2e1 * t26 * t36 - 0.2e1 * t8 * t52, -0.2e1 * t8 * t34 - 0.2e1 * t7 * t36, t26 ^ 2 + t7 ^ 2 + t8 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, t16 * t146, t14 ^ 2, t14 * t147, t51, 0.2e1 * t1 * t52 + 0.2e1 * t11 * t14, 0.2e1 * t11 * t16 - 0.2e1 * t2 * t52, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t11 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t33, 0, 0, 0, 0, 0, 0, 0, 0, -t31 * t95, t31 * t92, t102, -t31 * pkin(3) + t102 * pkin(10), 0, 0, 0, 0, 0, 0, t128 * t22 - t9 * t95, t10 * t95 + t122 * t22 (-t10 * t85 - t88 * t9) * t92, pkin(10) * t137 + t10 * t42 + t9 * t41, 0, 0, 0, 0, 0, 0, t22 * t47 - t3 * t95, t22 * t49 + t4 * t95, -t3 * t49 - t4 * t47, t3 * t12 + t4 * t13 + t22 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, 0, t125, t89, t55, -t56, 0, 0, t131, t54 * t95 - t117, -t108, -t132, -t107, 0, -pkin(3) * t52 + pkin(10) * t108 - t44 * t95, -pkin(3) * t54 + pkin(10) * t107 + t44 * t92 (t131 - t132) * pkin(10) + t101, -t44 * pkin(3) + t101 * pkin(10), t36 * t122 (-t133 - t134) * t92, t88 * t117 - t36 * t95, t34 * t128, -t117 * t85 + t34 * t95, -t132, t41 * t52 - t7 * t95 + (pkin(10) * t34 + t136) * t92, -t42 * t52 + t8 * t95 + (pkin(10) * t36 + t135) * t92, -t42 * t34 - t41 * t36 + (-t7 * t88 - t8 * t85) * t92, t26 * t78 + t7 * t41 + t8 * t42, t16 * t49, -t49 * t14 - t16 * t47, -t16 * t95 + t49 * t52, t14 * t47, t14 * t95 - t47 * t52, -t132, -t1 * t95 + t11 * t47 + t12 * t52 + t62 * t14, t11 * t49 - t13 * t52 + t62 * t16 + t2 * t95, -t1 * t49 - t12 * t16 - t13 * t14 - t2 * t47, t1 * t12 + t11 * t62 + t2 * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83, t111, 0, t84, 0, 0, 0.2e1 * pkin(3) * t95, -0.2e1 * pkin(3) * t92, 0.2e1 * (t83 + t84) * pkin(10), pkin(3) ^ 2 + t84 * t99 + t77, t82 * t83, -0.2e1 * t83 * t129, -0.2e1 * t88 * t116, t79 * t83, t85 * t111, t84, 0.2e1 * t85 * t139 - 0.2e1 * t41 * t95, 0.2e1 * t88 * t139 + 0.2e1 * t42 * t95, 0.2e1 * (-t41 * t88 - t42 * t85) * t92, t41 ^ 2 + t42 ^ 2 + t77, t49 ^ 2, -0.2e1 * t49 * t47, t49 * t142, t47 ^ 2, -t47 * t142, t84, -0.2e1 * t12 * t95 + 0.2e1 * t62 * t47, 0.2e1 * t13 * t95 + 0.2e1 * t62 * t49, -0.2e1 * t12 * t49 - 0.2e1 * t13 * t47, t12 ^ 2 + t13 ^ 2 + t62 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, -t24, 0, 0, 0, 0, 0, 0, 0, 0, -t22 * t88, t22 * t85, t104, -t22 * pkin(4) + qJ(5) * t104, 0, 0, 0, 0, 0, 0, -t22 * t149, t22 * t61, t149 * t4 - t3 * t61, t22 * t76 + t3 * t38 + t4 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, -t125, t27, -t28, 0, 0, t133, -t85 * t34 + t36 * t88, t85 * t52, -t134, t88 * t52, 0, -pkin(4) * t34 - t113 * t85 - t135, -pkin(4) * t36 - t113 * t88 + t136 (t133 - t134) * qJ(5) + t105, -t26 * pkin(4) + qJ(5) * t105, t16 * t61, -t61 * t14 + t149 * t16, t61 * t52, -t14 * t149, t149 * t52, 0, -t11 * t149 + t76 * t14 + t38 * t52, t11 * t61 + t76 * t16 - t39 * t52, -t1 * t61 - t39 * t14 + t149 * t2 - t38 * t16, t1 * t38 + t11 * t76 + t2 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t95, 0, -t78, -t95 * pkin(10), 0, 0, t109 (-t79 + t82) * t92, -t127, -t109, -t121, 0, -pkin(10) * t122 + t103 * t85, pkin(10) * t128 + t103 * t88, t100, -pkin(4) * t78 + qJ(5) * t100, t49 * t61, t149 * t49 - t61 * t47, -t61 * t95, -t47 * t149, -t149 * t95, 0, -t149 * t62 - t38 * t95 + t76 * t47, t39 * t95 + t76 * t49 + t62 * t61, -t12 * t61 + t13 * t149 - t38 * t49 - t39 * t47, t12 * t38 + t13 * t39 + t62 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t79, 0.2e1 * t129, 0, t82, 0, 0, 0.2e1 * pkin(4) * t88, -0.2e1 * pkin(4) * t85, 0.2e1 * t114 * qJ(5), qJ(5) ^ 2 * t114 + pkin(4) ^ 2, t61 ^ 2, 0.2e1 * t61 * t149, 0, t149 ^ 2, 0, 0, -t149 * t144, t61 * t144, 0.2e1 * t149 * t39 - 0.2e1 * t38 * t61, t38 ^ 2 + t39 ^ 2 + t76 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, t36, 0, t26, 0, 0, 0, 0, 0, 0, t14, t16, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, t122, 0, t78, 0, 0, 0, 0, 0, 0, t47, t49, 0, t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, t85, 0, -pkin(4), 0, 0, 0, 0, 0, 0, -t149, t61, 0, t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, t52, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t47, -t95, t12, -t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, t149, 0, t38, -t39, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t15;
