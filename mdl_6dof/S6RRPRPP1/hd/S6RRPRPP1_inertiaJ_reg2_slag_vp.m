% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRPP1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPP1_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:19:02
% EndTime: 2019-05-06 12:19:08
% DurationCPUTime: 1.83s
% Computational Cost: add. (1827->139), mult. (3491->274), div. (0->0), fcn. (4115->8), ass. (0->96)
t71 = sin(pkin(10));
t73 = cos(pkin(10));
t75 = sin(qJ(4));
t77 = cos(qJ(4));
t53 = t71 * t77 + t73 * t75;
t72 = sin(pkin(9));
t74 = cos(pkin(9));
t76 = sin(qJ(2));
t78 = cos(qJ(2));
t54 = t72 * t78 + t74 * t76;
t23 = t53 * t54;
t105 = t53 * t23;
t100 = t77 * t54;
t103 = t75 * t54;
t25 = t100 * t73 - t103 * t71;
t49 = t71 * t75 - t73 * t77;
t15 = t25 * t49;
t125 = t15 + t105;
t124 = -0.2e1 * t54;
t123 = t15 - t105;
t119 = t49 ^ 2;
t47 = t53 ^ 2;
t122 = t47 + t119;
t121 = t23 ^ 2;
t99 = -qJ(3) - pkin(7);
t57 = t99 * t78;
t90 = t99 * t76;
t35 = -t57 * t72 - t74 * t90;
t120 = t35 ^ 2;
t51 = t72 * t76 - t74 * t78;
t46 = t51 ^ 2;
t118 = 0.2e1 * t51;
t111 = t74 * pkin(2);
t65 = -pkin(3) - t111;
t56 = -pkin(4) * t77 + t65;
t117 = 0.2e1 * t56;
t66 = -pkin(2) * t78 - pkin(1);
t116 = 0.2e1 * t66;
t115 = 0.2e1 * t78;
t37 = -t74 * t57 + t72 * t90;
t101 = t77 * t37;
t31 = pkin(3) * t51 - pkin(8) * t54 + t66;
t96 = qJ(5) * t54;
t10 = t101 + (t31 - t96) * t75;
t12 = t31 * t77 - t37 * t75;
t8 = pkin(4) * t51 - t77 * t96 + t12;
t4 = t10 * t73 + t71 * t8;
t114 = t71 * pkin(4);
t113 = t72 * pkin(2);
t112 = t73 * pkin(4);
t110 = t23 * t49;
t109 = t25 * t23;
t62 = pkin(8) + t113;
t95 = qJ(5) + t62;
t43 = t95 * t77;
t86 = t95 * t75;
t28 = t43 * t71 + t73 * t86;
t108 = t28 * t51;
t30 = t73 * t43 - t71 * t86;
t107 = t30 * t51;
t106 = t51 * t23;
t32 = t51 * t49;
t33 = t53 * t49;
t34 = t53 * t51;
t104 = t75 * t51;
t102 = t75 * t77;
t67 = t75 ^ 2;
t69 = t77 ^ 2;
t98 = t67 + t69;
t68 = t76 ^ 2;
t70 = t78 ^ 2;
t97 = t68 + t70;
t94 = t51 * t124;
t1 = qJ(6) * t51 + t4;
t93 = t28 ^ 2 + t30 ^ 2;
t92 = t75 * t100;
t91 = t71 * t10 - t73 * t8;
t89 = -t23 * t30 + t25 * t28;
t88 = t28 * t49 + t30 * t53;
t20 = pkin(4) * t103 + t35;
t13 = t31 * t75 + t101;
t85 = t12 * t77 + t13 * t75;
t84 = -t12 * t75 + t13 * t77;
t83 = -t51 * t62 + t54 * t65;
t82 = 0.2e1 * t28 * t53 - 0.2e1 * t30 * t49;
t63 = pkin(5) + t112;
t59 = qJ(6) + t114;
t48 = t54 ^ 2;
t41 = t77 * t51;
t22 = pkin(5) * t49 - qJ(6) * t53 + t56;
t21 = t25 ^ 2;
t16 = t25 * t53;
t14 = t25 * t118;
t5 = pkin(5) * t23 - qJ(6) * t25 + t20;
t2 = -pkin(5) * t51 + t91;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t68, t76 * t115, 0, t70, 0, 0, pkin(1) * t115, -0.2e1 * pkin(1) * t76, 0.2e1 * t97 * pkin(7), pkin(7) ^ 2 * t97 + pkin(1) ^ 2, t48, t94, 0, t46, 0, 0, t51 * t116, t54 * t116, 0.2e1 * t35 * t54 - 0.2e1 * t37 * t51, t37 ^ 2 + t66 ^ 2 + t120, t69 * t48, -0.2e1 * t48 * t102, t100 * t118, t67 * t48, t75 * t94, t46, 0.2e1 * t103 * t35 + 0.2e1 * t12 * t51, 0.2e1 * t100 * t35 - 0.2e1 * t13 * t51, t85 * t124, t12 ^ 2 + t13 ^ 2 + t120, t21, -0.2e1 * t109, t14, t121, -0.2e1 * t106, t46, 0.2e1 * t20 * t23 - 0.2e1 * t51 * t91, 0.2e1 * t20 * t25 - 0.2e1 * t4 * t51, -0.2e1 * t23 * t4 + 0.2e1 * t25 * t91, t20 ^ 2 + t4 ^ 2 + t91 ^ 2, t21, t14, 0.2e1 * t109, t46, 0.2e1 * t106, t121, -0.2e1 * t2 * t51 + 0.2e1 * t23 * t5, -0.2e1 * t1 * t23 + 0.2e1 * t2 * t25, 0.2e1 * t1 * t51 - 0.2e1 * t25 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t78, 0, -t76 * pkin(7), -t78 * pkin(7), 0, 0, 0, 0, t54, 0, -t51, 0, -t35, -t37 (-t51 * t72 - t54 * t74) * pkin(2) (-t35 * t74 + t37 * t72) * pkin(2), t92 (-t67 + t69) * t54, t104, -t92, t41, 0, -t35 * t77 + t75 * t83, t35 * t75 + t77 * t83, t84, t35 * t65 + t62 * t84, t16, -t125, t34, t110, -t32, 0, t20 * t49 + t23 * t56 - t108, t20 * t53 + t25 * t56 - t107, -t4 * t49 + t53 * t91 + t89, t20 * t56 + t28 * t91 + t30 * t4, t16, t34, t125, 0, t32, t110, t22 * t23 + t49 * t5 - t108, -t1 * t49 + t2 * t53 + t89, -t22 * t25 - t5 * t53 + t107, t1 * t30 + t2 * t28 + t22 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t111, -0.2e1 * t113, 0 (t72 ^ 2 + t74 ^ 2) * pkin(2) ^ 2, t67, 0.2e1 * t102, 0, t69, 0, 0, -0.2e1 * t65 * t77, 0.2e1 * t65 * t75, 0.2e1 * t98 * t62, t62 ^ 2 * t98 + t65 ^ 2, t47, -0.2e1 * t33, 0, t119, 0, 0, t49 * t117, t53 * t117, t82, t56 ^ 2 + t93, t47, 0, 0.2e1 * t33, 0, 0, t119, 0.2e1 * t22 * t49, t82, -0.2e1 * t22 * t53, t22 ^ 2 + t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, t54, 0, t66, 0, 0, 0, 0, 0, 0, t41, -t104, -t98 * t54, t85, 0, 0, 0, 0, 0, 0, -t32, -t34, t123, t4 * t53 + t49 * t91, 0, 0, 0, 0, 0, 0, -t32, t123, t34, t1 * t53 + t2 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, -t103, t51, t12, -t13, 0, 0, 0, 0, t25, 0, -t23, t51, t112 * t51 - t91, -t114 * t51 - t4 (-t23 * t71 - t25 * t73) * pkin(4) (t4 * t71 - t73 * t91) * pkin(4), 0, t25, 0, t51, t23, 0 (pkin(5) + t63) * t51 - t91, -t23 * t59 - t25 * t63, t51 * t59 + t1, t1 * t59 - t2 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, t77, 0, -t75 * t62, -t77 * t62, 0, 0, 0, 0, t53, 0, -t49, 0, -t28, -t30 (-t49 * t71 - t53 * t73) * pkin(4) (-t28 * t73 + t30 * t71) * pkin(4), 0, t53, 0, 0, t49, 0, -t28, -t49 * t59 - t53 * t63, t30, -t28 * t63 + t30 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t75, 0, 0, 0, 0, 0, 0, 0, 0, -t49, -t53, 0 (-t49 * t73 + t53 * t71) * pkin(4), 0, 0, 0, 0, 0, 0, -t49, 0, t53, -t49 * t63 + t53 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t112, -0.2e1 * t114, 0 (t71 ^ 2 + t73 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t63, 0, 0.2e1 * t59, t59 ^ 2 + t63 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, t25, 0, t20, 0, 0, 0, 0, 0, 0, t23, 0, -t25, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, t53, 0, t56, 0, 0, 0, 0, 0, 0, t49, 0, -t53, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t51, t25, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
