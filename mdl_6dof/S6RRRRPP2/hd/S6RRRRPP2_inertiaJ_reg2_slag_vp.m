% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:52
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP2_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 18:04:22
% EndTime: 2019-05-07 18:04:29
% DurationCPUTime: 2.39s
% Computational Cost: add. (1358->176), mult. (2553->271), div. (0->0), fcn. (2800->6), ass. (0->115)
t86 = sin(qJ(4));
t82 = t86 ^ 2;
t89 = cos(qJ(4));
t84 = t89 ^ 2;
t146 = t82 + t84;
t87 = sin(qJ(3));
t132 = t87 * pkin(2);
t69 = pkin(9) + t132;
t118 = t146 * t69;
t73 = t86 * qJ(5);
t145 = -pkin(4) * t89 - t73;
t114 = t89 * qJ(5);
t92 = pkin(4) + pkin(5);
t52 = t86 * t92 - t114;
t135 = -pkin(8) - pkin(7);
t88 = sin(qJ(2));
t107 = t135 * t88;
t91 = cos(qJ(2));
t59 = t135 * t91;
t90 = cos(qJ(3));
t22 = -t107 * t90 - t87 * t59;
t144 = t22 ^ 2;
t47 = t87 * t88 - t90 * t91;
t143 = t47 ^ 2;
t49 = t87 * t91 + t88 * t90;
t142 = 0.2e1 * t49;
t71 = -pkin(2) * t91 - pkin(1);
t141 = 0.2e1 * t71;
t140 = -0.2e1 * t86;
t139 = 0.2e1 * t86;
t138 = -0.2e1 * t89;
t137 = 0.2e1 * t89;
t136 = 0.2e1 * t91;
t134 = pkin(9) * t47;
t43 = t47 * pkin(4);
t133 = t86 * pkin(9);
t81 = t90 * pkin(2);
t70 = -t81 - pkin(3);
t131 = pkin(3) - t70;
t102 = pkin(4) * t86 - t114;
t12 = t102 * t49 + t22;
t130 = t12 * t86;
t129 = t12 * t89;
t128 = t22 * t89;
t127 = t47 * t69;
t126 = t86 * t47;
t125 = t86 * t49;
t124 = t86 * t69;
t123 = t86 * t89;
t35 = t89 * t47;
t36 = t89 * t49;
t15 = pkin(3) * t47 - pkin(9) * t49 + t71;
t24 = t107 * t87 - t90 * t59;
t10 = t15 * t89 - t24 * t86;
t11 = t15 * t86 + t24 * t89;
t112 = pkin(3) - t145;
t38 = -t81 - t112;
t79 = t89 * pkin(5);
t27 = t79 - t38;
t39 = t79 + t112;
t122 = t27 + t39;
t121 = -t38 + t112;
t120 = t118 * pkin(9);
t119 = t146 * t69 ^ 2;
t117 = t146 * pkin(9) ^ 2;
t116 = t146 * pkin(9);
t83 = t88 ^ 2;
t85 = t91 ^ 2;
t115 = t83 + t85;
t72 = t86 * qJ(6);
t113 = t89 * qJ(6);
t111 = t47 * t125;
t46 = t49 ^ 2;
t110 = t46 * t123;
t109 = t47 * t36;
t6 = -t43 - t10;
t40 = t47 * qJ(5);
t5 = t40 + t11;
t108 = 0.2e1 * t40 + t11;
t106 = -0.2e1 * t111;
t105 = -pkin(3) * t49 - t134;
t99 = t113 * t49 - t6;
t3 = -pkin(5) * t47 - t99;
t29 = t49 * t72;
t4 = t29 + t5;
t104 = -t3 * t86 - t4 * t89;
t1 = t5 * t89 + t6 * t86;
t103 = t112 * t49 + t134;
t2 = -t10 * t86 + t11 * t89;
t101 = t38 * t49 - t127;
t100 = t49 * t70 - t127;
t95 = qJ(5) ^ 2;
t94 = 0.2e1 * qJ(5);
t78 = t89 * pkin(9);
t66 = -0.2e1 * t123;
t65 = 0.2e1 * t123;
t64 = t89 * t69;
t58 = t78 - t113;
t56 = -t72 + t133;
t51 = 0.2e1 * t116;
t42 = t64 - t113;
t41 = -t72 + t124;
t33 = t84 * t46;
t30 = t82 * t46;
t28 = t86 * t36;
t26 = 0.2e1 * t110;
t25 = 0.2e1 * t118;
t21 = t116 + t118;
t20 = t22 * t86;
t17 = 0.2e1 * t109;
t16 = (t82 - t84) * t49;
t9 = -t49 * t52 - t22;
t8 = t9 * t89;
t7 = t9 * t86;
t13 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83, t88 * t136, 0, t85, 0, 0, pkin(1) * t136, -0.2e1 * pkin(1) * t88, 0.2e1 * t115 * pkin(7), pkin(7) ^ 2 * t115 + pkin(1) ^ 2, t46, -0.2e1 * t49 * t47, 0, t143, 0, 0, t47 * t141, t49 * t141, 0.2e1 * t22 * t49 - 0.2e1 * t24 * t47, t24 ^ 2 + t71 ^ 2 + t144, t33, -0.2e1 * t110, t17, t30, t106, t143, 0.2e1 * t10 * t47 + 0.2e1 * t125 * t22, -0.2e1 * t11 * t47 + 0.2e1 * t22 * t36 (-t10 * t89 - t11 * t86) * t142, t10 ^ 2 + t11 ^ 2 + t144, t33, t17, t26, t143, 0.2e1 * t111, t30, 0.2e1 * t12 * t125 - 0.2e1 * t47 * t6 (-t5 * t86 + t6 * t89) * t142, -0.2e1 * t12 * t36 + 0.2e1 * t47 * t5, t12 ^ 2 + t5 ^ 2 + t6 ^ 2, t33, t26, -0.2e1 * t109, t30, t106, t143, -0.2e1 * t125 * t9 - 0.2e1 * t3 * t47, 0.2e1 * t36 * t9 + 0.2e1 * t4 * t47 (-t3 * t89 + t4 * t86) * t142, t3 ^ 2 + t4 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, t91, 0, -t88 * pkin(7), -t91 * pkin(7), 0, 0, 0, 0, t49, 0, -t47, 0, -t22, -t24 (-t47 * t87 - t49 * t90) * pkin(2) (-t22 * t90 + t24 * t87) * pkin(2), t28, -t16, t126, -t28, t35, 0, t100 * t86 - t128, t100 * t89 + t20, t2, t2 * t69 + t22 * t70, t28, t126, t16, 0, -t35, -t28, t101 * t86 - t129, t1, -t101 * t89 - t130, t1 * t69 + t12 * t38, t28, t16, -t126, -t28, t35, 0, -t125 * t27 - t41 * t47 + t8, t27 * t36 + t42 * t47 + t7 (-t41 * t89 + t42 * t86) * t49 + t104, t27 * t9 + t3 * t41 + t4 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t81, -0.2e1 * t132, 0 (t87 ^ 2 + t90 ^ 2) * pkin(2) ^ 2, t82, t65, 0, t84, 0, 0, t70 * t138, t70 * t139, t25, t70 ^ 2 + t119, t82, 0, t66, 0, 0, t84, t38 * t138, t25, t38 * t140, t38 ^ 2 + t119, t82, t66, 0, t84, 0, 0, t27 * t137, t27 * t139, -0.2e1 * t41 * t86 - 0.2e1 * t42 * t89, t27 ^ 2 + t41 ^ 2 + t42 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t47, 0, -t22, -t24, 0, 0, t28, -t16, t126, -t28, t35, 0, t105 * t86 - t128, t105 * t89 + t20, t2, -t22 * pkin(3) + pkin(9) * t2, t28, t126, t16, 0, -t35, -t28, -t103 * t86 - t129, t1, t103 * t89 - t130, pkin(9) * t1 - t112 * t12, t28, t16, -t126, -t28, t35, 0, -t125 * t39 - t47 * t56 + t8, t36 * t39 + t47 * t58 + t7 (-t56 * t89 + t58 * t86) * t49 + t104, t3 * t56 + t39 * t9 + t4 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t81, -t132, 0, 0, t82, t65, 0, t84, 0, 0, t131 * t89, -t131 * t86, t21, -pkin(3) * t70 + t120, t82, 0, t66, 0, 0, t84, t121 * t89, t21, t121 * t86, -t112 * t38 + t120, t82, t66, 0, t84, 0, 0, t122 * t89, t122 * t86 (-t42 - t58) * t89 + (-t41 - t56) * t86, t27 * t39 + t41 * t56 + t42 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t82, t65, 0, t84, 0, 0, pkin(3) * t137, pkin(3) * t140, t51, pkin(3) ^ 2 + t117, t82, 0, t66, 0, 0, t84, -t112 * t138, t51, -t112 * t140, t112 ^ 2 + t117, t82, t66, 0, t84, 0, 0, t39 * t137, t39 * t139, -0.2e1 * t56 * t86 - 0.2e1 * t58 * t89, t39 ^ 2 + t56 ^ 2 + t58 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t125, t47, t10, -t11, 0, 0, 0, t36, 0, t47, t125, 0, -t6 + t43, t145 * t49, t108, -pkin(4) * t6 + qJ(5) * t5, 0, 0, -t36, 0, -t125, t47 (pkin(5) + t92) * t47 + t99, t29 + t108 (t89 * t92 + t73) * t49, qJ(5) * t4 - t3 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t89, 0, -t124, -t64, 0, 0, 0, t86, 0, 0, -t89, 0, -t124, -t102, t64, -t102 * t69, 0, 0, -t86, 0, t89, 0, -t41, t42, t52, qJ(5) * t42 - t41 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t89, 0, -t133, -t78, 0, 0, 0, t86, 0, 0, -t89, 0, -t133, -t102, t78, -t102 * pkin(9), 0, 0, -t86, 0, t89, 0, -t56, t58, t52, qJ(5) * t58 - t56 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(4), 0, t94, pkin(4) ^ 2 + t95, 0, 0, 0, 0, 0, 1, 0.2e1 * t92, t94, 0, t92 ^ 2 + t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, t36, 0, t6, 0, 0, 0, 0, 0, 0, -t47, 0, -t36, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t124, 0, 0, 0, 0, 0, 0, 0, 0, -t86, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, t133, 0, 0, 0, 0, 0, 0, 0, 0, -t86, t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(4), 0, 0, 0, 0, 0, 0, -1, 0, 0, -t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t125, t36, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t86, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t86, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t13;
