% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d6,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPPR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPPR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPPR3_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 08:35:27
% EndTime: 2019-05-06 08:35:31
% DurationCPUTime: 1.26s
% Computational Cost: add. (761->109), mult. (1200->179), div. (0->0), fcn. (1250->6), ass. (0->79)
t57 = sin(qJ(2));
t52 = t57 ^ 2;
t58 = cos(qJ(2));
t53 = t58 ^ 2;
t98 = t52 + t53;
t54 = sin(pkin(9));
t55 = cos(pkin(9));
t87 = sin(qJ(6));
t88 = cos(qJ(6));
t23 = t87 * t54 - t88 * t55;
t21 = t23 ^ 2;
t25 = t88 * t54 + t87 * t55;
t22 = t25 ^ 2;
t97 = -t22 - t21;
t42 = t58 * qJ(4);
t90 = t58 * pkin(7);
t33 = -t42 + t90;
t96 = t33 ^ 2;
t56 = qJ(3) + pkin(4);
t37 = t55 * pkin(5) + t56;
t95 = -0.2e1 * t37;
t94 = -0.2e1 * t57;
t93 = 0.2e1 * t57;
t92 = -0.2e1 * t58;
t91 = 0.2e1 * t58;
t59 = -pkin(2) - pkin(3);
t49 = -qJ(5) + t59;
t89 = pkin(8) - t49;
t14 = t25 * t58;
t86 = t14 * t23;
t15 = t23 * t58;
t85 = t15 * t23;
t84 = t23 * t57;
t83 = t25 * t14;
t82 = t25 * t15;
t18 = t25 * t57;
t50 = t54 ^ 2;
t81 = t50 * t58;
t80 = t54 * t55;
t79 = t54 * t57;
t78 = t54 * t58;
t77 = t55 * t57;
t76 = t55 * t58;
t75 = t57 * t58;
t31 = -t58 * pkin(2) - t57 * qJ(3) - pkin(1);
t20 = t58 * pkin(3) - t31;
t13 = t57 * pkin(4) + t58 * qJ(5) + t20;
t45 = t57 * pkin(7);
t32 = -t57 * qJ(4) + t45;
t7 = t54 * t13 + t55 * t32;
t74 = t98 * pkin(7) ^ 2;
t51 = t55 ^ 2;
t36 = t51 + t50;
t73 = t58 * qJ(3);
t72 = -0.2e1 * t75;
t38 = 0.2e1 * t75;
t71 = t54 * t76;
t6 = t55 * t13 - t54 * t32;
t4 = t57 * pkin(5) + pkin(8) * t76 + t6;
t5 = pkin(8) * t78 + t7;
t1 = t88 * t4 - t87 * t5;
t2 = t87 * t4 + t88 * t5;
t67 = -t1 * t25 - t2 * t23;
t28 = t89 * t54;
t29 = t89 * t55;
t8 = t88 * t28 + t87 * t29;
t9 = t87 * t28 - t88 * t29;
t66 = t9 * t23 + t8 * t25;
t65 = t7 * t54 + t6 * t55;
t3 = -t6 * t54 + t7 * t55;
t64 = -t57 * pkin(2) + t73;
t63 = -t49 * t57 - t56 * t58;
t61 = qJ(3) ^ 2;
t60 = 0.2e1 * qJ(3);
t39 = t51 * t58;
t30 = 0.2e1 * t98 * pkin(7);
t19 = t36 * t49;
t17 = -t42 + (-pkin(5) * t54 + pkin(7)) * t58;
t10 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t52, t38, 0, t53, 0, 0, pkin(1) * t91, pkin(1) * t94, t30, pkin(1) ^ 2 + t74, t52, 0, t72, 0, 0, t53, t31 * t92, t30, t31 * t94, t31 ^ 2 + t74, t53, t38, 0, t52, 0, 0, t20 * t93, t20 * t92, -0.2e1 * t32 * t57 - 0.2e1 * t33 * t58, t20 ^ 2 + t32 ^ 2 + t96, t51 * t53, -0.2e1 * t53 * t80, t55 * t72, t50 * t53, t54 * t38, t52, -0.2e1 * t33 * t78 + 0.2e1 * t6 * t57, -0.2e1 * t33 * t76 - 0.2e1 * t7 * t57, t65 * t91, t6 ^ 2 + t7 ^ 2 + t96, t15 ^ 2, 0.2e1 * t15 * t14, -t15 * t94, t14 ^ 2, t14 * t93, t52, 0.2e1 * t1 * t57 - 0.2e1 * t17 * t14, 0.2e1 * t17 * t15 - 0.2e1 * t2 * t57, -0.2e1 * t1 * t15 + 0.2e1 * t2 * t14, t1 ^ 2 + t17 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t58, 0, -t45, -t90, 0, 0, 0, t57, 0, 0, -t58, 0, -t45, t64, t90, t64 * pkin(7), 0, 0, t58, 0, t57, 0, t33, t32, -t59 * t57 - t73, t33 * qJ(3) + t32 * t59, t71, t39 - t81, -t79, -t71, -t77, 0, t33 * t55 + t54 * t63, -t33 * t54 + t55 * t63, -t3, t3 * t49 + t33 * t56, -t82, -t83 + t85, -t18, t86, t84, 0, -t37 * t14 - t17 * t23 + t8 * t57, t37 * t15 - t17 * t25 - t9 * t57, t9 * t14 - t8 * t15 - t67, t1 * t8 + t17 * t37 + t2 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(2), 0, t60, pkin(2) ^ 2 + t61, 0, 0, 0, 0, 0, 1, t60, 0.2e1 * t59, 0, t59 ^ 2 + t61, t50, 0.2e1 * t80, 0, t51, 0, 0, 0.2e1 * t56 * t55, -0.2e1 * t56 * t54, -0.2e1 * t19, t36 * t49 ^ 2 + t56 ^ 2, t22, -0.2e1 * t25 * t23, 0, t21, 0, 0, t23 * t95, t25 * t95, 0.2e1 * t66, t37 ^ 2 + t8 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t45, 0, 0, 0, 0, 0, 0, 0, 0, -t57, t32, 0, 0, 0, 0, 0, 0, -t79, -t77, 0, t3, 0, 0, 0, 0, 0, 0, -t18, t84, t82 - t86, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 1, 0, t59, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t19, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, -t58, 0, t20, 0, 0, 0, 0, 0, 0, t77, -t79, t39 + t81, t65, 0, 0, 0, 0, 0, 0, -t84, -t18, t83 + t85, -t1 * t23 + t2 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t8 * t23 + t9 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t78, -t76, 0, t33, 0, 0, 0, 0, 0, 0, -t14, t15, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t54, 0, t56, 0, 0, 0, 0, 0, 0, -t23, -t25, 0, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, t14, t57, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, 0, t23, 0, t8, -t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, -t25, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t10;
