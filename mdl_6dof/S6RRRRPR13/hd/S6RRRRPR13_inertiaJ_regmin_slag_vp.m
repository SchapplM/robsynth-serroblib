% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 00:07
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPR13_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPR13_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRRPR13_inertiaJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 01:35:33
% EndTime: 2019-05-08 01:35:39
% DurationCPUTime: 1.62s
% Computational Cost: add. (1696->209), mult. (3938->390), div. (0->0), fcn. (4453->10), ass. (0->122)
t78 = sin(pkin(6));
t83 = sin(qJ(2));
t118 = t78 * t83;
t79 = cos(pkin(6));
t82 = sin(qJ(3));
t86 = cos(qJ(3));
t45 = t82 * t118 - t79 * t86;
t142 = t45 ^ 2;
t81 = sin(qJ(4));
t84 = cos(qJ(6));
t110 = t84 * t81;
t85 = cos(qJ(4));
t69 = t85 * t82;
t80 = sin(qJ(6));
t42 = -t82 * t110 + t80 * t69;
t141 = -0.2e1 * t42;
t140 = -0.2e1 * t45;
t139 = 0.2e1 * t45;
t47 = t86 * t118 + t79 * t82;
t138 = -0.2e1 * t47;
t104 = t81 * qJ(5);
t133 = pkin(4) + pkin(5);
t50 = t133 * t85 + pkin(3) + t104;
t137 = 0.2e1 * t50;
t92 = -t85 * pkin(4) - t104;
t58 = -pkin(3) + t92;
t136 = -0.2e1 * t58;
t135 = -0.2e1 * t82;
t134 = 0.2e1 * t86;
t132 = pkin(1) * t83;
t87 = cos(qJ(2));
t131 = pkin(1) * t87;
t130 = pkin(3) * t81;
t129 = pkin(3) * t85;
t128 = pkin(9) * t81;
t127 = pkin(9) * t85;
t126 = t45 * pkin(4);
t125 = t81 * pkin(10);
t117 = t78 * t87;
t97 = pkin(8) * t117;
t39 = t97 + (pkin(9) + t132) * t79;
t40 = (-pkin(2) * t87 - pkin(9) * t83 - pkin(1)) * t78;
t22 = -t82 * t39 + t86 * t40;
t20 = pkin(3) * t117 - t22;
t124 = t20 * t81;
t123 = t20 * t85;
t27 = t85 * t117 + t47 * t81;
t122 = t27 * t85;
t28 = -t81 * t117 + t47 * t85;
t121 = t28 * t81;
t120 = t45 * t86;
t73 = t78 ^ 2;
t119 = t73 * t87;
t116 = t79 * t83;
t115 = t81 * t45;
t114 = t81 * t82;
t113 = t81 * t85;
t112 = t81 * t86;
t111 = t82 * t45;
t109 = t85 * t45;
t108 = t85 * t86;
t63 = pkin(8) * t118;
t38 = t63 + (-pkin(2) - t131) * t79;
t19 = t45 * pkin(3) - t47 * pkin(10) + t38;
t23 = t86 * t39 + t82 * t40;
t21 = -pkin(10) * t117 + t23;
t107 = -t85 * t19 + t81 * t21;
t9 = t81 * t19 + t85 * t21;
t59 = -t86 * pkin(3) - t82 * pkin(10) - pkin(2);
t106 = pkin(9) * t112 - t85 * t59;
t37 = pkin(9) * t108 + t81 * t59;
t74 = t81 ^ 2;
t76 = t85 ^ 2;
t105 = t74 + t76;
t103 = t85 * qJ(5);
t102 = t86 * qJ(5);
t101 = 0.2e1 * t117;
t100 = t82 * t134;
t99 = pkin(10) * t115;
t98 = pkin(10) * t109;
t96 = t82 * t117;
t95 = t86 * t117;
t44 = t45 * qJ(5);
t6 = t44 + t9;
t72 = t86 * pkin(4);
t33 = t72 + t106;
t94 = (pkin(10) - pkin(11)) * t81;
t32 = -t102 + t37;
t3 = -t28 * pkin(11) - t133 * t45 + t107;
t4 = t27 * pkin(11) + t6;
t1 = t84 * t3 - t80 * t4;
t2 = t80 * t3 + t84 * t4;
t7 = t107 - t126;
t93 = t6 * t85 + t7 * t81;
t91 = -pkin(4) * t81 + t103;
t24 = t86 * pkin(5) - pkin(11) * t69 + t33;
t25 = pkin(11) * t114 + t32;
t11 = t84 * t24 - t80 * t25;
t12 = t80 * t24 + t84 * t25;
t90 = t32 * t85 + t33 * t81;
t53 = t80 * t81 + t84 * t85;
t89 = t28 * qJ(5) - t20;
t77 = t86 ^ 2;
t75 = t82 ^ 2;
t71 = t85 * pkin(10);
t66 = pkin(10) * t112;
t60 = -t85 * pkin(11) + t71;
t57 = t84 * qJ(5) - t80 * t133;
t56 = t80 * qJ(5) + t84 * t133;
t54 = -t80 * t85 + t110;
t49 = pkin(1) * t116 + t97;
t48 = t79 * t131 - t63;
t43 = t53 * t82;
t41 = (pkin(9) - t91) * t82;
t31 = t84 * t60 + t80 * t94;
t30 = t80 * t60 - t84 * t94;
t29 = (-t133 * t81 - pkin(9) + t103) * t82;
t14 = t27 * t80 + t28 * t84;
t13 = -t27 * t84 + t28 * t80;
t10 = t27 * pkin(4) - t89;
t5 = -t133 * t27 + t89;
t8 = [1, 0, 0, t73 * t83 ^ 2, 0.2e1 * t83 * t119, 0.2e1 * t78 * t116, t79 * t101, t79 ^ 2, 0.2e1 * pkin(1) * t119 + 0.2e1 * t48 * t79, -0.2e1 * t73 * t132 - 0.2e1 * t49 * t79, t47 ^ 2, t45 * t138, t117 * t138, t45 * t101, t73 * t87 ^ 2, -0.2e1 * t22 * t117 + 0.2e1 * t38 * t45, 0.2e1 * t23 * t117 + 0.2e1 * t38 * t47, t28 ^ 2, -0.2e1 * t28 * t27, t28 * t139, t27 * t140, t142, -0.2e1 * t107 * t45 + 0.2e1 * t20 * t27, 0.2e1 * t20 * t28 - 0.2e1 * t9 * t45, 0.2e1 * t10 * t27 - 0.2e1 * t7 * t45, -0.2e1 * t6 * t27 + 0.2e1 * t7 * t28, -0.2e1 * t10 * t28 + 0.2e1 * t6 * t45, t10 ^ 2 + t6 ^ 2 + t7 ^ 2, t14 ^ 2, -0.2e1 * t14 * t13, t14 * t140, t13 * t139, t142, -0.2e1 * t1 * t45 + 0.2e1 * t5 * t13, 0.2e1 * t5 * t14 + 0.2e1 * t2 * t45; 0, 0, 0, 0, 0, t118, t117, t79, t48, -t49, t47 * t82, t47 * t86 - t111, -t96, -t95, 0, -pkin(2) * t45 + pkin(9) * t96 - t38 * t86, -pkin(2) * t47 + pkin(9) * t95 + t38 * t82, t28 * t69 (-t121 - t122) * t82, -t28 * t86 + t45 * t69, -t81 * t111 + t27 * t86, -t120, -t106 * t45 + t107 * t86 + (pkin(9) * t27 + t124) * t82, -t37 * t45 + t9 * t86 + (pkin(9) * t28 + t123) * t82, t10 * t114 + t41 * t27 - t33 * t45 + t7 * t86, -t32 * t27 + t33 * t28 + (-t6 * t81 + t7 * t85) * t82, -t10 * t69 - t41 * t28 + t32 * t45 - t6 * t86, t10 * t41 + t6 * t32 + t7 * t33, t14 * t43, -t43 * t13 - t14 * t42, t14 * t86 - t43 * t45, -t13 * t86 + t42 * t45, -t120, t1 * t86 - t11 * t45 + t29 * t13 + t5 * t42, t12 * t45 + t29 * t14 - t2 * t86 + t5 * t43; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t75, t100, 0, 0, 0, pkin(2) * t134, pkin(2) * t135, t76 * t75, -0.2e1 * t75 * t113, t108 * t135, t81 * t100, t77, 0.2e1 * t106 * t86 + 0.2e1 * t75 * t128, 0.2e1 * t75 * t127 + 0.2e1 * t37 * t86, 0.2e1 * t41 * t114 + 0.2e1 * t33 * t86, 0.2e1 * (-t32 * t81 + t33 * t85) * t82, -0.2e1 * t32 * t86 - 0.2e1 * t41 * t69, t32 ^ 2 + t33 ^ 2 + t41 ^ 2, t43 ^ 2, t43 * t141, t43 * t134, t86 * t141, t77, 0.2e1 * t11 * t86 + 0.2e1 * t29 * t42, -0.2e1 * t12 * t86 + 0.2e1 * t29 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, -t45, -t117, t22, -t23, t121, -t81 * t27 + t28 * t85, t115, t109, 0, -pkin(3) * t27 - t123 - t99, -pkin(3) * t28 + t124 - t98, -t10 * t85 + t58 * t27 - t99 (t121 - t122) * pkin(10) + t93, -t10 * t81 - t58 * t28 + t98, pkin(10) * t93 + t10 * t58, t14 * t54, -t54 * t13 - t14 * t53, -t54 * t45, t53 * t45, 0, t50 * t13 + t30 * t45 + t5 * t53, t50 * t14 + t31 * t45 + t5 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, t86, 0, -t82 * pkin(9), -t86 * pkin(9), t81 * t69 (-t74 + t76) * t82, -t112, -t108, 0, t66 + (-t127 - t130) * t82, pkin(10) * t108 + (t128 - t129) * t82, t58 * t114 - t41 * t85 + t66, t90, -t41 * t81 + (-pkin(10) * t86 - t58 * t82) * t85, pkin(10) * t90 + t41 * t58, t43 * t54, -t54 * t42 - t43 * t53, t54 * t86, -t53 * t86, 0, t29 * t53 - t30 * t86 + t50 * t42, t29 * t54 - t31 * t86 + t50 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t74, 0.2e1 * t113, 0, 0, 0, 0.2e1 * t129, -0.2e1 * t130, t85 * t136, 0.2e1 * t105 * pkin(10), t81 * t136, pkin(10) ^ 2 * t105 + t58 ^ 2, t54 ^ 2, -0.2e1 * t54 * t53, 0, 0, 0, t53 * t137, t54 * t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t27, t45, -t107, -t9, -t107 + 0.2e1 * t126, -t28 * pkin(4) - t27 * qJ(5), 0.2e1 * t44 + t9, -t7 * pkin(4) + t6 * qJ(5), 0, 0, -t14, t13, t45, t56 * t45 - t1, t57 * t45 + t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t114, -t86, -t106, -t37, -0.2e1 * t72 - t106, t92 * t82, -0.2e1 * t102 + t37, -t33 * pkin(4) + t32 * qJ(5), 0, 0, -t43, t42, -t86, -t56 * t86 - t11, -t57 * t86 + t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, t85, 0, -t125, -t71, -t125, t91, t71, t91 * pkin(10), 0, 0, -t54, t53, 0, t30, t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(4), 0, 0.2e1 * qJ(5), pkin(4) ^ 2 + qJ(5) ^ 2, 0, 0, 0, 0, 1, 0.2e1 * t56, 0.2e1 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, t28, 0, t7, 0, 0, 0, 0, 0, -t84 * t45, t80 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t69, 0, t33, 0, 0, 0, 0, 0, t84 * t86, -t80 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, t125, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(4), 0, 0, 0, 0, 0, -t84, t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, -t13, -t45, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t42, t86, t11, -t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t53, 0, -t30, -t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t56, -t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, -t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t8;
