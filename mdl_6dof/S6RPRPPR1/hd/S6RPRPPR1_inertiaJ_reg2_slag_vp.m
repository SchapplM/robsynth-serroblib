% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:40
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPPR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRPPR1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:25:31
% EndTime: 2019-05-05 16:25:34
% DurationCPUTime: 1.30s
% Computational Cost: add. (1295->111), mult. (2381->210), div. (0->0), fcn. (2785->10), ass. (0->87)
t64 = sin(pkin(11));
t67 = cos(pkin(11));
t70 = sin(qJ(6));
t93 = cos(qJ(6));
t105 = -t70 * t64 + t93 * t67;
t65 = sin(pkin(10));
t68 = cos(pkin(10));
t71 = sin(qJ(3));
t72 = cos(qJ(3));
t48 = t65 * t72 + t68 * t71;
t20 = t105 * t48;
t9 = t20 * t105;
t49 = t93 * t64 + t70 * t67;
t18 = t49 * t48;
t91 = t49 * t18;
t107 = t9 + t91;
t106 = -0.2e1 * t48;
t66 = sin(pkin(9));
t97 = t66 * pkin(1);
t57 = pkin(7) + t97;
t83 = qJ(4) + t57;
t38 = t83 * t72;
t78 = t83 * t71;
t23 = t65 * t38 + t68 * t78;
t104 = t23 ^ 2;
t44 = t65 * t71 - t68 * t72;
t103 = t44 ^ 2;
t102 = 0.2e1 * t44;
t96 = t68 * pkin(3);
t58 = -pkin(4) - t96;
t50 = -t67 * pkin(5) + t58;
t101 = 0.2e1 * t50;
t69 = cos(pkin(9));
t95 = t69 * pkin(1);
t59 = -pkin(2) - t95;
t51 = -t72 * pkin(3) + t59;
t100 = 0.2e1 * t51;
t99 = 0.2e1 * t71;
t98 = t65 * pkin(3);
t54 = qJ(5) + t98;
t94 = pkin(8) + t54;
t92 = t23 * t44;
t27 = t44 * t105;
t28 = t49 * t44;
t60 = t64 ^ 2;
t90 = t60 * t48;
t32 = t64 * t44;
t89 = t64 * t48;
t88 = t64 * t67;
t87 = t67 * t48;
t17 = t44 * pkin(4) - t48 * qJ(5) + t51;
t25 = t68 * t38 - t65 * t78;
t6 = t64 * t17 + t67 * t25;
t61 = t67 ^ 2;
t85 = t60 + t61;
t62 = t71 ^ 2;
t63 = t72 ^ 2;
t84 = t62 + t63;
t82 = t44 * t106;
t81 = t64 * t87;
t79 = t85 * t54;
t5 = t67 * t17 - t64 * t25;
t77 = t5 * t67 + t6 * t64;
t76 = -t5 * t64 + t6 * t67;
t75 = -t44 * t54 + t48 * t58;
t43 = t49 ^ 2;
t42 = t48 ^ 2;
t41 = t105 ^ 2;
t37 = t94 * t67;
t36 = t94 * t64;
t35 = t67 * t44;
t34 = t61 * t48;
t33 = t61 * t42;
t31 = t60 * t42;
t26 = -t34 - t90;
t22 = -t70 * t36 + t93 * t37;
t21 = -t93 * t36 - t70 * t37;
t16 = t20 ^ 2;
t15 = t18 ^ 2;
t10 = t20 * t49;
t8 = t18 * t105;
t7 = pkin(5) * t89 + t23;
t4 = -pkin(8) * t89 + t6;
t3 = t44 * pkin(5) - pkin(8) * t87 + t5;
t2 = t70 * t3 + t93 * t4;
t1 = t93 * t3 - t70 * t4;
t11 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t95, -0.2e1 * t97, 0 (t66 ^ 2 + t69 ^ 2) * pkin(1) ^ 2, t62, t72 * t99, 0, t63, 0, 0, -0.2e1 * t59 * t72, t59 * t99, 0.2e1 * t84 * t57, t84 * t57 ^ 2 + t59 ^ 2, t42, t82, 0, t103, 0, 0, t44 * t100, t48 * t100, 0.2e1 * t23 * t48 - 0.2e1 * t25 * t44, t25 ^ 2 + t51 ^ 2 + t104, t33, -0.2e1 * t42 * t88, t87 * t102, t31, t64 * t82, t103, 0.2e1 * t23 * t89 + 0.2e1 * t5 * t44, 0.2e1 * t23 * t87 - 0.2e1 * t6 * t44, t77 * t106, t5 ^ 2 + t6 ^ 2 + t104, t16, -0.2e1 * t20 * t18, t20 * t102, t15, -t18 * t102, t103, 0.2e1 * t1 * t44 + 0.2e1 * t7 * t18, -0.2e1 * t2 * t44 + 0.2e1 * t7 * t20, -0.2e1 * t1 * t20 - 0.2e1 * t2 * t18, t1 ^ 2 + t2 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25 * t48 + t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48 * t76 + t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t18 + t2 * t20 + t7 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42 + t103, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 + t31 + t103, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 + t15 + t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t72, 0, -t71 * t57, -t72 * t57, 0, 0, 0, 0, t48, 0, -t44, 0, -t23, -t25 (-t44 * t65 - t48 * t68) * pkin(3) (-t23 * t68 + t25 * t65) * pkin(3), t81, t34 - t90, t32, -t81, t35, 0, -t23 * t67 + t64 * t75, t23 * t64 + t67 * t75, t76, t23 * t58 + t76 * t54, t10, t9 - t91, t28, -t8, t27, 0, -t105 * t7 + t50 * t18 + t21 * t44, t50 * t20 - t22 * t44 + t7 * t49, -t1 * t49 + t105 * t2 - t22 * t18 - t21 * t20, t1 * t21 + t2 * t22 + t7 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, -t71, 0, 0, 0, 0, 0, 0, 0, 0, -t44, -t48, 0 (-t44 * t68 + t48 * t65) * pkin(3), 0, 0, 0, 0, 0, 0, -t35, t32, -t26, t44 * t58 + t48 * t79, 0, 0, 0, 0, 0, 0, -t27, t28, t107, -t18 * t21 + t20 * t22 + t44 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t96, -0.2e1 * t98, 0 (t65 ^ 2 + t68 ^ 2) * pkin(3) ^ 2, t60, 0.2e1 * t88, 0, t61, 0, 0, -0.2e1 * t58 * t67, 0.2e1 * t58 * t64, 0.2e1 * t79, t85 * t54 ^ 2 + t58 ^ 2, t43, 0.2e1 * t49 * t105, 0, t41, 0, 0, -t105 * t101, t49 * t101, 0.2e1 * t105 * t22 - 0.2e1 * t21 * t49, t21 ^ 2 + t22 ^ 2 + t50 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, t48, 0, t51, 0, 0, 0, 0, 0, 0, t35, -t32, t26, t77, 0, 0, 0, 0, 0, 0, t27, -t28, -t107, t1 * t105 + t2 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 - t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * t21 + t22 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43 + t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t87, 0, t23, 0, 0, 0, 0, 0, 0, t18, t20, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, t64, 0, t58, 0, 0, 0, 0, 0, 0, -t105, t49, 0, t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, t44, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, -t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, t105, 0, t21, -t22, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -t49, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t11;
