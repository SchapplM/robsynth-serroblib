% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP5_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 17:53:47
% EndTime: 2019-05-06 17:53:55
% DurationCPUTime: 2.64s
% Computational Cost: add. (2918->221), mult. (7130->406), div. (0->0), fcn. (8039->10), ass. (0->145)
t102 = cos(qJ(4));
t100 = sin(qJ(2));
t103 = cos(qJ(2));
t94 = sin(pkin(11));
t95 = sin(pkin(6));
t96 = cos(pkin(11));
t58 = (t100 * t96 + t103 * t94) * t95;
t97 = cos(pkin(6));
t99 = sin(qJ(4));
t47 = -t97 * t102 + t58 * t99;
t46 = t47 ^ 2;
t124 = t95 * t103;
t125 = t95 * t100;
t56 = -t96 * t124 + t94 * t125;
t159 = t56 ^ 2;
t158 = -0.2e1 * t47;
t157 = -0.2e1 * t56;
t156 = 0.2e1 * t97;
t155 = 0.2e1 * t99;
t154 = t47 * pkin(5);
t139 = pkin(8) + qJ(3);
t150 = t97 * pkin(2);
t76 = t97 * t103 * pkin(1);
t50 = -t139 * t125 + t150 + t76;
t148 = pkin(1) * t100;
t117 = t97 * t148;
t53 = t139 * t124 + t117;
t30 = t94 * t50 + t96 * t53;
t24 = t97 * pkin(9) + t30;
t67 = (-pkin(2) * t103 - pkin(1)) * t95;
t36 = t56 * pkin(3) - t58 * pkin(9) + t67;
t12 = t102 * t36 - t99 * t24;
t6 = -t56 * pkin(4) - t12;
t98 = sin(qJ(5));
t153 = t6 * t98;
t152 = t94 * pkin(2);
t151 = t96 * pkin(2);
t149 = t98 * pkin(5);
t147 = t102 * pkin(4);
t101 = cos(qJ(5));
t49 = t58 * t102 + t97 * t99;
t35 = t49 * t101 + t56 * t98;
t28 = t35 * t98;
t146 = t6 * t101;
t80 = pkin(9) + t152;
t145 = t80 * t98;
t90 = t98 ^ 2;
t144 = t90 * t99;
t91 = t99 ^ 2;
t143 = t91 * t80;
t39 = t98 * t47;
t142 = t98 * t99;
t40 = t99 * t47;
t141 = t99 * t56;
t140 = t99 * t80;
t138 = -qJ(6) - pkin(10);
t137 = -t96 * t50 + t94 * t53;
t92 = t101 ^ 2;
t136 = t90 + t92;
t93 = t102 ^ 2;
t135 = t91 + t93;
t41 = t101 * t47;
t85 = t101 * t99;
t33 = -t56 * t101 + t49 * t98;
t134 = t102 * t33;
t133 = t102 * t80;
t88 = t95 ^ 2;
t132 = t103 * t88;
t27 = t33 * t101;
t131 = t35 * t101;
t130 = t35 * t102;
t129 = t47 * t102;
t128 = t49 * t102;
t60 = (t80 + t149) * t99;
t127 = t60 * t101;
t87 = -t101 * pkin(5) - pkin(4);
t126 = t87 * t101;
t123 = t98 * t101;
t122 = t98 * t102;
t86 = t101 * t102;
t121 = t95 * t156;
t120 = t102 * t155;
t119 = t33 * t142;
t118 = t35 * t142;
t116 = t98 * t40;
t115 = t47 * t85;
t114 = t80 * t86;
t81 = -pkin(3) - t151;
t23 = -t97 * pkin(3) + t137;
t11 = t47 * pkin(4) - t49 * pkin(10) + t23;
t13 = t102 * t24 + t99 * t36;
t7 = t56 * pkin(10) + t13;
t3 = t101 * t11 - t98 * t7;
t113 = t136 * pkin(10);
t64 = -t99 * pkin(10) - t147 + t81;
t59 = t101 * t64;
t112 = -qJ(6) * t85 + t59;
t111 = -pkin(4) * t99 + pkin(10) * t102;
t106 = -t35 * qJ(6) + t3;
t1 = t106 + t154;
t4 = t101 * t7 + t98 * t11;
t2 = -t33 * qJ(6) + t4;
t110 = -t1 * t98 + t2 * t101;
t109 = t4 * t101 - t3 * t98;
t44 = -t80 * t122 + t59;
t45 = t98 * t64 + t114;
t108 = t45 * t101 - t44 * t98;
t68 = t138 * t98;
t69 = t138 * t101;
t107 = -t69 * t101 - t68 * t98;
t89 = t97 ^ 2;
t84 = t92 * t99;
t83 = t92 * t91;
t82 = t90 * t91;
t78 = 0.2e1 * t123;
t77 = t80 ^ 2;
t75 = t99 * t123;
t73 = -0.2e1 * t99 * t86;
t72 = -0.2e1 * t91 * t123;
t71 = t98 * t120;
t70 = t91 * t77;
t66 = t84 + t144;
t65 = t84 - t144;
t63 = pkin(8) * t124 + t117;
t62 = -pkin(8) * t125 + t76;
t61 = t83 + t82 + t93;
t54 = t102 * t56;
t38 = t114 + (-qJ(6) * t99 + t64) * t98;
t37 = (-pkin(5) - t145) * t102 + t112;
t32 = t35 ^ 2;
t31 = t33 ^ 2;
t26 = t99 * t131;
t25 = t99 * t27;
t21 = 0.2e1 * t35 * t47;
t20 = t33 * t158;
t19 = -t115 - t130;
t18 = t115 - t130;
t17 = -t116 + t134;
t16 = -t116 - t134;
t15 = -0.2e1 * t35 * t33;
t14 = -t98 * t33 + t131;
t10 = -t25 - t118;
t9 = -t25 + t118;
t5 = t33 * pkin(5) + t6;
t8 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88 * t100 ^ 2, 0.2e1 * t100 * t132, t100 * t121, t88 * t103 ^ 2, t103 * t121, t89, 0.2e1 * pkin(1) * t132 + 0.2e1 * t62 * t97, -0.2e1 * t88 * t148 - 0.2e1 * t63 * t97, 0.2e1 * (-t100 * t62 + t103 * t63) * t95, t88 * pkin(1) ^ 2 + t62 ^ 2 + t63 ^ 2, t58 ^ 2, t58 * t157, t58 * t156, t159, t97 * t157, t89, -0.2e1 * t137 * t97 + 0.2e1 * t67 * t56, -0.2e1 * t30 * t97 + 0.2e1 * t67 * t58, 0.2e1 * t137 * t58 - 0.2e1 * t30 * t56, t137 ^ 2 + t30 ^ 2 + t67 ^ 2, t49 ^ 2, t49 * t158, 0.2e1 * t49 * t56, t46, t47 * t157, t159, 0.2e1 * t12 * t56 + 0.2e1 * t23 * t47, -0.2e1 * t13 * t56 + 0.2e1 * t23 * t49, -0.2e1 * t12 * t49 - 0.2e1 * t13 * t47, t12 ^ 2 + t13 ^ 2 + t23 ^ 2, t32, t15, t21, t31, t20, t46, 0.2e1 * t3 * t47 + 0.2e1 * t6 * t33, 0.2e1 * t6 * t35 - 0.2e1 * t4 * t47, -0.2e1 * t3 * t35 - 0.2e1 * t4 * t33, t3 ^ 2 + t4 ^ 2 + t6 ^ 2, t32, t15, t21, t31, t20, t46, 0.2e1 * t1 * t47 + 0.2e1 * t5 * t33, -0.2e1 * t2 * t47 + 0.2e1 * t5 * t35, -0.2e1 * t1 * t35 - 0.2e1 * t2 * t33, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, 0, t124, t97, t62, -t63, 0, 0, 0, 0, t58, 0, -t56, t97, t96 * t150 - t137, -t94 * t150 - t30 (-t56 * t94 - t58 * t96) * pkin(2) (-t137 * t96 + t30 * t94) * pkin(2), t49 * t99, -t40 + t128, t141, -t129, t54, 0, -t23 * t102 - t56 * t140 + t81 * t47, -t56 * t133 + t23 * t99 + t81 * t49 (t49 * t80 - t12) * t99 + (-t47 * t80 + t13) * t102, t23 * t81 + (t13 * t102 - t12 * t99) * t80, t26, t10, t18, t119, t17, -t129, -t3 * t102 + t44 * t47 + (t33 * t80 + t153) * t99, t4 * t102 - t45 * t47 + (t35 * t80 + t146) * t99, -t45 * t33 - t44 * t35 + (-t101 * t3 - t4 * t98) * t99, t6 * t140 + t3 * t44 + t4 * t45, t26, t10, t18, t119, t17, -t129, -t1 * t102 + t5 * t142 + t60 * t33 + t37 * t47, t2 * t102 + t60 * t35 - t38 * t47 + t5 * t85, -t38 * t33 - t37 * t35 + (-t1 * t101 - t2 * t98) * t99, t1 * t37 + t2 * t38 + t5 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t151, -0.2e1 * t152, 0 (t94 ^ 2 + t96 ^ 2) * pkin(2) ^ 2, t91, t120, 0, t93, 0, 0, -0.2e1 * t81 * t102, t81 * t155, 0.2e1 * t135 * t80, t93 * t77 + t81 ^ 2 + t70, t83, t72, t73, t82, t71, t93, -0.2e1 * t44 * t102 + 0.2e1 * t98 * t143, 0.2e1 * t101 * t143 + 0.2e1 * t45 * t102 (-t101 * t44 - t45 * t98) * t155, t44 ^ 2 + t45 ^ 2 + t70, t83, t72, t73, t82, t71, t93, -0.2e1 * t37 * t102 + 0.2e1 * t60 * t142, 0.2e1 * t38 * t102 + 0.2e1 * t127 * t99 (-t101 * t37 - t38 * t98) * t155, t37 ^ 2 + t38 ^ 2 + t60 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, t58, 0, t67, 0, 0, 0, 0, 0, 0, t54, -t141, -t40 - t128, t12 * t102 + t13 * t99, 0, 0, 0, 0, 0, 0, t16, t19, t9, -t6 * t102 + t109 * t99, 0, 0, 0, 0, 0, 0, t16, t19, t9, -t5 * t102 + t110 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t108 - t133) * t99, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60 * t102 + (t38 * t101 - t37 * t98) * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t47, t56, t12, -t13, 0, 0, t28, t14, t39, -t27, t41, 0, -pkin(4) * t33 - pkin(10) * t39 - t146, -pkin(4) * t35 - pkin(10) * t41 + t153 (-t27 + t28) * pkin(10) + t109, -t6 * pkin(4) + pkin(10) * t109, t28, t14, t39, -t27, t41, 0, -t5 * t101 + t87 * t33 + t68 * t47, t87 * t35 + t69 * t47 + t5 * t98, t69 * t33 - t68 * t35 + t110, t1 * t68 - t2 * t69 + t5 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, t102, 0, -t140, -t133, 0, 0, t75, t65, -t122, -t75, -t86, 0, t111 * t98 - t80 * t85, t101 * t111 + t98 * t140, t108, -pkin(4) * t140 + pkin(10) * t108, t75, t65, -t122, -t75, -t86, 0, -t68 * t102 + t87 * t142 - t127, -t69 * t102 + t126 * t99 + t60 * t98 (t69 * t99 - t37) * t98 + (-t68 * t99 + t38) * t101, t37 * t68 - t38 * t69 + t60 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, -t99, 0, 0, 0, 0, 0, 0, 0, 0, t86, -t122, t66, t113 * t99 + t147, 0, 0, 0, 0, 0, 0, t86, -t122, t66, -t102 * t87 + t107 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t90, t78, 0, t92, 0, 0, 0.2e1 * pkin(4) * t101, -0.2e1 * pkin(4) * t98, 0.2e1 * t113, t136 * pkin(10) ^ 2 + pkin(4) ^ 2, t90, t78, 0, t92, 0, 0, -0.2e1 * t126, 0.2e1 * t87 * t98, 0.2e1 * t107, t68 ^ 2 + t69 ^ 2 + t87 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t33, t47, t3, -t4, 0, 0, 0, 0, t35, 0, -t33, t47, t106 + 0.2e1 * t154, -t2, -t35 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, -t142, -t102, t44, -t45, 0, 0, 0, 0, t85, 0, -t142, -t102 (-0.2e1 * pkin(5) - t145) * t102 + t112, -t38, -pkin(5) * t85, t37 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t142, -t85, 0, 0, 0, 0, 0, 0, 0, 0, -t142, -t85, 0, -pkin(5) * t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, t101, 0, -t98 * pkin(10), -t101 * pkin(10), 0, 0, 0, 0, t98, 0, t101, 0, t68, t69, -t149, t68 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, t35, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142, t85, 0, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t101, t98, 0, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t8;
