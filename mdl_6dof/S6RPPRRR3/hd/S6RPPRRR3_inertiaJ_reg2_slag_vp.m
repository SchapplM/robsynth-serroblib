% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:24
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR3_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:31:54
% EndTime: 2019-05-05 15:31:57
% DurationCPUTime: 1.35s
% Computational Cost: add. (759->136), mult. (1412->229), div. (0->0), fcn. (1491->8), ass. (0->79)
t48 = sin(pkin(10));
t85 = t48 * pkin(1);
t34 = qJ(3) + t85;
t91 = t34 ^ 2;
t54 = cos(qJ(5));
t43 = -pkin(5) * t54 - pkin(4);
t90 = 0.2e1 * t43;
t52 = sin(qJ(4));
t89 = 0.2e1 * t52;
t88 = 0.2e1 * t54;
t55 = cos(qJ(4));
t87 = 0.2e1 * t55;
t86 = -pkin(9) - pkin(8);
t49 = cos(pkin(10));
t84 = t49 * pkin(1);
t50 = sin(qJ(6));
t83 = t50 * pkin(5);
t82 = t52 * pkin(4);
t53 = cos(qJ(6));
t81 = t53 * pkin(5);
t22 = -pkin(8) * t55 + t34 + t82;
t51 = sin(qJ(5));
t36 = -pkin(2) - t84;
t33 = -pkin(7) + t36;
t71 = t54 * t52;
t64 = t33 * t71;
t5 = t64 + (-pkin(9) * t55 + t22) * t51;
t80 = t53 * t5;
t79 = t55 * pkin(4);
t25 = t50 * t54 + t51 * t53;
t70 = t55 * t25;
t78 = t25 * t70;
t21 = t25 * t52;
t44 = t51 ^ 2;
t77 = t44 * t55;
t47 = t55 ^ 2;
t76 = t47 * t33;
t38 = t51 * t52;
t75 = t51 * t54;
t74 = t51 * t55;
t23 = t50 * t51 - t53 * t54;
t73 = t52 * t23;
t72 = t52 * t33;
t42 = t54 * t55;
t69 = t55 * t33;
t68 = t55 * t52;
t46 = t54 ^ 2;
t67 = t44 + t46;
t45 = t52 ^ 2;
t66 = t45 + t47;
t65 = -0.2e1 * t68;
t63 = t51 * t42;
t14 = t54 * t22;
t4 = -pkin(9) * t42 + t14 + (-t33 * t51 + pkin(5)) * t52;
t1 = t4 * t53 - t5 * t50;
t62 = t67 * pkin(8);
t61 = t67 * t52;
t60 = -pkin(8) * t52 - t79;
t6 = -t51 * t72 + t14;
t7 = t22 * t51 + t64;
t59 = -t51 * t6 + t54 * t7;
t41 = t46 * t55;
t40 = t46 * t47;
t37 = t44 * t47;
t31 = t33 ^ 2;
t28 = t86 * t54;
t27 = t86 * t51;
t26 = t47 * t31;
t20 = (pkin(5) * t51 - t33) * t55;
t19 = t42 * t53 - t50 * t74;
t18 = -t38 * t50 + t53 * t71;
t13 = t19 ^ 2;
t12 = t70 ^ 2;
t11 = t66 * t33;
t10 = t27 * t50 - t28 * t53;
t9 = t27 * t53 + t28 * t50;
t8 = t19 * t23;
t2 = t4 * t50 + t80;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t84, -0.2e1 * t85, 0 (t48 ^ 2 + t49 ^ 2) * pkin(1) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t36, 0.2e1 * t34, t36 ^ 2 + t91, t47, t65, 0, t45, 0, 0, t34 * t89, t34 * t87, -0.2e1 * t11, t31 * t45 + t26 + t91, t40, -0.2e1 * t47 * t75, t68 * t88, t37, t51 * t65, t45, -0.2e1 * t51 * t76 + 0.2e1 * t52 * t6, -0.2e1 * t52 * t7 - 0.2e1 * t54 * t76 (-t51 * t7 - t54 * t6) * t87, t6 ^ 2 + t7 ^ 2 + t26, t13, -0.2e1 * t19 * t70, t19 * t89, t12, -t70 * t89, t45, 0.2e1 * t1 * t52 + 0.2e1 * t20 * t70, 0.2e1 * t19 * t20 - 0.2e1 * t2 * t52, -0.2e1 * t1 * t19 - 0.2e1 * t2 * t70, t1 ^ 2 + t2 ^ 2 + t20 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t59 - t72) * t55, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t70 + t19 * t2 + t20 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 + t37 + t45, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 + t12 + t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, -t66, t11, 0, 0, 0, 0, 0, 0, -t66 * t51, -t66 * t54, 0, t52 * t59 + t76, 0, 0, 0, 0, 0, 0, -t21 * t52 - t55 * t70, -t18 * t52 - t19 * t55, -t18 * t70 + t19 * t21, -t1 * t21 + t18 * t2 - t20 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (-0.1e1 + t67) * t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18 * t19 + t21 * t70 - t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 * t67 + t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18 ^ 2 + t21 ^ 2 + t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, -t52, 0, t69, -t72, 0, 0, t63, t41 - t77, t38, -t63, t71, 0, t51 * t60 + t54 * t69, -t51 * t69 + t54 * t60, t59, pkin(4) * t69 + pkin(8) * t59, t19 * t25, -t8 - t78, t21, t70 * t23, -t73, 0, t20 * t23 + t43 * t70 + t52 * t9, -t10 * t52 + t19 * t43 + t20 * t25, -t1 * t25 - t10 * t70 - t19 * t9 - t2 * t23, t1 * t9 + t10 * t2 + t20 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t52, -t55, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t38, t41 + t77, t55 * t62 - t82, 0, 0, 0, 0, 0, 0, t73, t21, -t8 + t78, t10 * t19 + t43 * t52 - t70 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t52, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t74, t61, pkin(8) * t61 + t79, 0, 0, 0, 0, 0, 0, -t55 * t23, -t70, -t18 * t23 + t21 * t25, t10 * t18 - t21 * t9 - t43 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t44, 0.2e1 * t75, 0, t46, 0, 0, pkin(4) * t88, -0.2e1 * pkin(4) * t51, 0.2e1 * t62, pkin(8) ^ 2 * t67 + pkin(4) ^ 2, t25 ^ 2, -0.2e1 * t25 * t23, 0, t23 ^ 2, 0, 0, t23 * t90, t25 * t90, -0.2e1 * t10 * t23 - 0.2e1 * t25 * t9, t10 ^ 2 + t43 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t74, t52, t6, -t7, 0, 0, 0, 0, t19, 0, -t70, t52, t52 * t81 + t1, -t80 + (-pkin(5) * t52 - t4) * t50 (-t19 * t53 - t50 * t70) * pkin(5) (t1 * t53 + t2 * t50) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, -t42, 0, 0, 0, 0, 0, 0, 0, 0, -t70, -t19, 0 (t19 * t50 - t53 * t70) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t71, 0, 0, 0, 0, 0, 0, 0, 0, -t21, -t18, 0 (t18 * t50 - t21 * t53) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, t54, 0, -t51 * pkin(8), -t54 * pkin(8), 0, 0, 0, 0, t25, 0, -t23, 0, t9, -t10 (-t23 * t50 - t25 * t53) * pkin(5) (t10 * t50 + t53 * t9) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t81, -0.2e1 * t83, 0 (t50 ^ 2 + t53 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, -t70, t52, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, -t19, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t21, -t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, -t23, 0, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t81, -t83, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
