% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP7_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:58:28
% EndTime: 2019-05-05 17:58:33
% DurationCPUTime: 1.34s
% Computational Cost: add. (874->110), mult. (1489->172), div. (0->0), fcn. (1694->6), ass. (0->83)
t54 = sin(pkin(9));
t55 = cos(pkin(9));
t57 = sin(qJ(3));
t59 = cos(qJ(3));
t35 = -t54 * t57 + t55 * t59;
t96 = -0.2e1 * t35;
t33 = t54 * t59 + t55 * t57;
t95 = (t33 * t54 + t35 * t55) * pkin(3);
t31 = t33 ^ 2;
t32 = t35 ^ 2;
t94 = t31 + t32;
t60 = -pkin(1) - pkin(7);
t78 = -qJ(4) + t60;
t38 = t78 * t57;
t73 = t78 * t59;
t16 = t54 * t38 - t55 * t73;
t93 = t16 ^ 2;
t47 = t57 * pkin(3) + qJ(2);
t92 = 0.2e1 * t47;
t56 = sin(qJ(5));
t91 = 0.2e1 * t56;
t58 = cos(qJ(5));
t90 = -0.2e1 * t58;
t89 = 0.2e1 * qJ(2);
t88 = t33 * pkin(5);
t87 = t54 * pkin(3);
t86 = t55 * pkin(3);
t85 = t58 * pkin(5);
t84 = t16 * t35;
t46 = -pkin(4) - t86;
t83 = t35 * t46;
t82 = t56 * t33;
t27 = t56 * t35;
t81 = t56 * t58;
t18 = t55 * t38 + t54 * t73;
t80 = t58 * t18;
t26 = t58 * t35;
t49 = t56 ^ 2;
t51 = t58 ^ 2;
t40 = t49 + t51;
t50 = t57 ^ 2;
t52 = t59 ^ 2;
t41 = t50 + t52;
t79 = qJ(6) * t35;
t45 = pkin(8) + t87;
t77 = qJ(6) + t45;
t76 = t33 * t96;
t10 = t33 * pkin(4) - t35 * pkin(8) + t47;
t3 = t58 * t10 - t56 * t18;
t74 = t40 * t45;
t63 = -t58 * t79 + t3;
t1 = t63 + t88;
t2 = t80 + (t10 - t79) * t56;
t72 = t1 * t58 + t2 * t56;
t71 = -t1 * t56 + t2 * t58;
t4 = t56 * t10 + t80;
t70 = t3 * t58 + t4 * t56;
t69 = -t3 * t56 + t4 * t58;
t68 = -t18 * t33 + t84;
t28 = t77 * t56;
t29 = t77 * t58;
t67 = -t28 * t58 + t29 * t56;
t66 = t28 * t56 + t29 * t58;
t65 = -t33 * t45 + t83;
t61 = qJ(2) ^ 2;
t43 = 0.2e1 * t81;
t39 = t46 - t85;
t37 = t41 * t60;
t25 = t58 * t33;
t24 = t51 * t32;
t21 = t49 * t32;
t20 = t56 * t26;
t19 = -0.2e1 * t32 * t81;
t15 = 0.2e1 * t33 * t26;
t14 = t56 * t76;
t13 = t40 * t33;
t12 = t40 * t35;
t11 = (-t49 + t51) * t35;
t8 = t94 * t56;
t7 = pkin(5) * t27 + t16;
t6 = t40 * t31 + t32;
t5 = t94 * t58;
t9 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t89 (pkin(1) ^ 2) + t61, t52, -0.2e1 * t59 * t57, 0, t50, 0, 0, t57 * t89, t59 * t89, -0.2e1 * t37, t41 * t60 ^ 2 + t61, t32, t76, 0, t31, 0, 0, t33 * t92, t35 * t92, 0.2e1 * t68, t18 ^ 2 + t47 ^ 2 + t93, t24, t19, t15, t21, t14, t31, 0.2e1 * t16 * t27 + 0.2e1 * t3 * t33, 0.2e1 * t16 * t26 - 0.2e1 * t4 * t33, t70 * t96, t3 ^ 2 + t4 ^ 2 + t93, t24, t19, t15, t21, t14, t31, 0.2e1 * t1 * t33 + 0.2e1 * t27 * t7, -0.2e1 * t2 * t33 + 0.2e1 * t26 * t7, t72 * t96, t1 ^ 2 + t2 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t41, t37, 0, 0, 0, 0, 0, 0, 0, 0, -t94, -t68, 0, 0, 0, 0, 0, 0, -t8, -t5, 0, t33 * t69 - t84, 0, 0, 0, 0, 0, 0, -t8, -t5, 0, t33 * t71 - t7 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t57, 0, t59 * t60, -t57 * t60, 0, 0, 0, 0, t35, 0, -t33, 0, -t16, -t18, -t95 (-t16 * t55 + t18 * t54) * pkin(3), t20, t11, t82, -t20, t25, 0, -t16 * t58 + t65 * t56, t16 * t56 + t65 * t58, t69, t16 * t46 + t45 * t69, t20, t11, t82, -t20, t25, 0, t27 * t39 - t28 * t33 - t7 * t58, t26 * t39 - t29 * t33 + t7 * t56, -t67 * t35 + t71, -t1 * t28 + t2 * t29 + t7 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t57, 0, 0, 0, 0, 0, 0, 0, 0, t35, -t33, 0, t95, 0, 0, 0, 0, 0, 0, t26, -t27, t13, t33 * t74 - t83, 0, 0, 0, 0, 0, 0, t26, -t27, t13, t33 * t66 - t35 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t86, -0.2e1 * t87, 0 (t54 ^ 2 + t55 ^ 2) * pkin(3) ^ 2, t49, t43, 0, t51, 0, 0, t46 * t90, t46 * t91, 0.2e1 * t74, t40 * t45 ^ 2 + t46 ^ 2, t49, t43, 0, t51, 0, 0, t39 * t90, t39 * t91, 0.2e1 * t66, t28 ^ 2 + t29 ^ 2 + t39 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, t35, 0, t47, 0, 0, 0, 0, 0, 0, t25, -t82, -t12, t70, 0, 0, 0, 0, 0, 0, t25, -t82, -t12, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t27, t33, t3, -t4, 0, 0, 0, 0, t26, 0, -t27, t33, t63 + 0.2e1 * t88, -t2, -pkin(5) * t26, t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t82, -t25, 0, 0, 0, 0, 0, 0, 0, 0, -t82, -t25, 0, -pkin(5) * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, t58, 0, -t56 * t45, -t58 * t45, 0, 0, 0, 0, t56, 0, t58, 0, -t28, -t29, -t56 * pkin(5), -t28 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, -t56, 0, 0, 0, 0, 0, 0, 0, 0, t58, -t56, 0, t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t26, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, t56, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t9;
