% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRR7_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:06:01
% EndTime: 2019-05-05 16:06:05
% DurationCPUTime: 1.31s
% Computational Cost: add. (1369->101), mult. (2302->162), div. (0->0), fcn. (2812->8), ass. (0->76)
t54 = sin(pkin(10));
t55 = cos(pkin(10));
t82 = sin(qJ(4));
t83 = cos(qJ(4));
t32 = t83 * t54 + t82 * t55;
t34 = -t82 * t54 + t83 * t55;
t58 = sin(qJ(5));
t60 = cos(qJ(5));
t19 = t58 * t32 - t60 * t34;
t65 = t60 * t32 + t58 * t34;
t111 = (t19 * t60 - t58 * t65) * pkin(4);
t56 = -pkin(1) - qJ(3);
t84 = -pkin(7) + t56;
t71 = t84 * t82;
t72 = t84 * t83;
t26 = t54 * t72 + t55 * t71;
t12 = -t32 * pkin(8) + t26;
t25 = -t54 * t71 + t55 * t72;
t64 = -t34 * pkin(8) + t25;
t7 = t60 * t12 + t58 * t64;
t5 = t58 * t12 - t60 * t64;
t89 = t5 * t19;
t110 = t65 * t7 + t89;
t101 = t65 ^ 2;
t108 = t19 ^ 2;
t109 = t101 + t108;
t107 = t19 * pkin(5);
t86 = t60 * pkin(4);
t45 = -pkin(5) - t86;
t106 = t19 * t45;
t57 = sin(qJ(6));
t105 = t19 * t57;
t59 = cos(qJ(6));
t104 = t19 * t59;
t87 = t58 * pkin(4);
t44 = pkin(9) + t87;
t52 = t57 ^ 2;
t53 = t59 ^ 2;
t75 = t52 + t53;
t103 = t75 * t44;
t100 = 0.2e1 * t19;
t14 = t57 * t65;
t15 = t59 * t65;
t30 = t34 ^ 2;
t93 = t32 ^ 2;
t97 = t30 + t93;
t96 = t5 ^ 2;
t39 = t54 * pkin(3) + qJ(2);
t27 = t32 * pkin(4) + t39;
t92 = 0.2e1 * t27;
t91 = 0.2e1 * t39;
t90 = 0.2e1 * qJ(2);
t88 = t5 * t59;
t85 = pkin(5) - t45;
t79 = t57 * t59;
t76 = pkin(9) * t75;
t49 = t54 ^ 2;
t50 = t55 ^ 2;
t37 = t49 + t50;
t74 = t65 * t100;
t10 = t75 * t65;
t70 = -pkin(9) * t65 + t107;
t8 = pkin(5) * t65 + pkin(9) * t19 + t27;
t2 = -t57 * t7 + t59 * t8;
t3 = t57 * t8 + t59 * t7;
t69 = t2 * t59 + t3 * t57;
t1 = -t2 * t57 + t3 * t59;
t67 = -t44 * t65 - t106;
t66 = t25 * t34 + t26 * t32;
t61 = qJ(2) ^ 2;
t38 = 0.2e1 * t79;
t31 = t37 * t56;
t13 = t57 * t104;
t9 = (-t52 + t53) * t19;
t4 = t5 * t57;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t90 (pkin(1) ^ 2) + t61, t50, -0.2e1 * t55 * t54, 0, t49, 0, 0, t54 * t90, t55 * t90, -0.2e1 * t31, t37 * t56 ^ 2 + t61, t30, -0.2e1 * t34 * t32, 0, t93, 0, 0, t32 * t91, t34 * t91, -0.2e1 * t66, t25 ^ 2 + t26 ^ 2 + t39 ^ 2, t108, t74, 0, t101, 0, 0, t65 * t92, -t19 * t92, -0.2e1 * t110, t27 ^ 2 + t7 ^ 2 + t96, t53 * t108, -0.2e1 * t108 * t79, -0.2e1 * t65 * t104, t52 * t108, t57 * t74, t101, -0.2e1 * t105 * t5 + 0.2e1 * t2 * t65, -0.2e1 * t104 * t5 - 0.2e1 * t3 * t65, t69 * t100, t2 ^ 2 + t3 ^ 2 + t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t37, t31, 0, 0, 0, 0, 0, 0, 0, 0, -t97, t66, 0, 0, 0, 0, 0, 0, 0, 0, -t109, t110, 0, 0, 0, 0, 0, 0, -t109 * t57, -t109 * t59, 0, t1 * t65 + t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101 * t75 + t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, t55, 0, qJ(2), 0, 0, 0, 0, 0, 0, t32, t34, 0, t39, 0, 0, 0, 0, 0, 0, t65, -t19, 0, t27, 0, 0, 0, 0, 0, 0, t15, -t14, t75 * t19, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t32, 0, t25, -t26, 0, 0, 0, 0, -t19, 0, -t65, 0, -t5, -t7, t111 (-t5 * t60 + t58 * t7) * pkin(4), -t13, -t9, t14, t13, t15, 0, t57 * t67 - t88, t59 * t67 + t4, t1, t1 * t44 + t5 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t32, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t65, 0, -t111, 0, 0, 0, 0, 0, 0, -t104, t105, t10, t103 * t65 + t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t86, -0.2e1 * t87, 0 (t58 ^ 2 + t60 ^ 2) * pkin(4) ^ 2, t52, t38, 0, t53, 0, 0, -0.2e1 * t45 * t59, 0.2e1 * t45 * t57, 0.2e1 * t103, t75 * t44 ^ 2 + t45 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, -t65, 0, -t5, -t7, 0, 0, -t13, -t9, t14, t13, t15, 0, t57 * t70 - t88, t59 * t70 + t4, t1, -t5 * pkin(5) + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, -t65, 0, 0, 0, 0, 0, 0, 0, 0, -t104, t105, t10, pkin(9) * t10 - t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t86, -t87, 0, 0, t52, t38, 0, t53, 0, 0, t85 * t59, -t85 * t57, t76 + t103, -t45 * pkin(5) + pkin(9) * t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t52, t38, 0, t53, 0, 0, 0.2e1 * pkin(5) * t59, -0.2e1 * pkin(5) * t57, 0.2e1 * t76, t75 * pkin(9) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104, 0, t105, t65, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, -t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t57, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t59, 0, -t57 * t44, -t59 * t44, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, 0, t59, 0, -t57 * pkin(9), -t59 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
