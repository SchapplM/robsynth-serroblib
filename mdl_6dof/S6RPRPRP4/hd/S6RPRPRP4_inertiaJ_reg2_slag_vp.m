% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:13
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP4_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:44:37
% EndTime: 2019-05-05 17:44:40
% DurationCPUTime: 1.20s
% Computational Cost: add. (481->98), mult. (807->145), div. (0->0), fcn. (748->6), ass. (0->72)
t53 = sin(qJ(5));
t46 = t53 ^ 2;
t55 = cos(qJ(5));
t48 = t55 ^ 2;
t30 = t46 + t48;
t54 = sin(qJ(3));
t47 = t54 ^ 2;
t56 = cos(qJ(3));
t49 = t56 ^ 2;
t31 = t47 + t49;
t22 = pkin(5) * t55 + t53 * qJ(6);
t83 = t22 * t56;
t57 = -pkin(3) - pkin(8);
t82 = t57 * t56;
t81 = 0.2e1 * t56;
t80 = 2 * qJ(4);
t51 = sin(pkin(9));
t79 = t51 * pkin(1);
t52 = cos(pkin(9));
t78 = t52 * pkin(1);
t77 = t54 * pkin(5);
t76 = t56 * pkin(3);
t35 = -pkin(2) - t78;
t44 = t54 * qJ(4);
t63 = t35 - t44;
t10 = t63 + t82;
t34 = pkin(7) + t79;
t24 = t54 * t34;
t16 = t54 * pkin(4) + t24;
t6 = t55 * t10 + t53 * t16;
t75 = t53 * t56;
t74 = t53 * t57;
t73 = t54 * t56;
t72 = t54 * t57;
t71 = t55 * t53;
t40 = t55 * t56;
t43 = t55 * t57;
t70 = t31 * t34 ^ 2;
t26 = t56 * t34;
t17 = t56 * pkin(4) + t26;
t69 = t30 * t57 ^ 2;
t68 = t54 * qJ(6);
t67 = t56 * qJ(4);
t66 = t49 * t71;
t65 = t54 * t40;
t64 = t53 * t10 - t55 * t16;
t62 = t30 * t82;
t3 = t68 + t6;
t4 = t64 - t77;
t1 = t3 * t53 - t4 * t55;
t2 = t6 * t53 - t55 * t64;
t61 = -t54 * pkin(3) + t67;
t60 = t53 * pkin(5) - t55 * qJ(6);
t58 = qJ(4) ^ 2;
t39 = t55 * t54;
t38 = t48 * t49;
t37 = t53 * t54;
t36 = t46 * t49;
t33 = 0.2e1 * t73;
t29 = t54 * t43;
t28 = t53 * t40;
t27 = -0.2e1 * t53 * t73;
t21 = qJ(4) + t60;
t20 = t30 * t57;
t19 = (-t46 + t48) * t56;
t18 = t30 * t56;
t15 = 0.2e1 * t20;
t14 = t63 - t76;
t13 = t36 + t38 + t47;
t9 = 0.2e1 * t31 * t34;
t7 = t17 + t83;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t78, -0.2e1 * t79, 0 (t51 ^ 2 + t52 ^ 2) * pkin(1) ^ 2, t47, t33, 0, t49, 0, 0, -0.2e1 * t35 * t56, 0.2e1 * t35 * t54, t9, t35 ^ 2 + t70, 0, 0, 0, t47, t33, t49, t9, t14 * t81, -0.2e1 * t14 * t54, t14 ^ 2 + t70, t36, 0.2e1 * t66, t27, t38, -0.2e1 * t65, t47, 0.2e1 * t17 * t40 - 0.2e1 * t54 * t64, -0.2e1 * t17 * t75 - 0.2e1 * t6 * t54 (-t53 * t64 - t55 * t6) * t81, t17 ^ 2 + t6 ^ 2 + t64 ^ 2, t36, t27, -0.2e1 * t66, t47, 0.2e1 * t65, t38, -0.2e1 * t4 * t54 + 0.2e1 * t7 * t40 (-t3 * t55 - t4 * t53) * t81, 0.2e1 * t3 * t54 + 0.2e1 * t7 * t75, t3 ^ 2 + t4 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t54 - t2 * t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t56 + t7 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t56, 0, -t24, -t26, 0, 0, 0, -t54, -t56, 0, 0, 0, t61, t24, t26, t61 * t34, -t28, -t19, t39, t28, -t37, 0, t17 * t53 + t55 * t67 + t29, t17 * t55 + (-t67 - t72) * t53, -t2, t17 * qJ(4) + t2 * t57, -t28, t39, t19, 0, t37, t28, t21 * t40 + t7 * t53 + t29, -t1, -t7 * t55 + (t21 * t56 + t72) * t53, t1 * t57 + t7 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t54, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, t54, t44 + t76, 0, 0, 0, 0, 0, 0, t37, t39, t18, t44 - t62, 0, 0, 0, 0, 0, 0, t37, t18, -t39, t54 * t21 - t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t80, pkin(3) ^ 2 + t58, t48, -0.2e1 * t71, 0, t46, 0, 0, t53 * t80, t55 * t80, -t15, t58 + t69, t48, 0, 0.2e1 * t71, 0, 0, t46, 0.2e1 * t21 * t53, -t15, -0.2e1 * t21 * t55, t21 ^ 2 + t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, 0, t24, 0, 0, 0, 0, 0, 0, t39, -t37, 0, t2, 0, 0, 0, 0, 0, 0, t39, 0, t37, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t30, t20, 0, 0, 0, 0, 0, 0, 0, -t30, 0, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, 0, -t40, t54, -t64, -t6, 0, 0, 0, -t75, 0, t54, t40, 0, -t64 + 0.2e1 * t77, t60 * t56, 0.2e1 * t68 + t6, -t4 * pkin(5) + t3 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, t75, 0, 0, 0, 0, 0, 0, 0, 0, -t40, 0, -t75, -t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, -t53, 0, t43, -t74, 0, 0, 0, t55, 0, 0, t53, 0, t43, -t22, t74, t22 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t53, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t53, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, -t75, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, -t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
