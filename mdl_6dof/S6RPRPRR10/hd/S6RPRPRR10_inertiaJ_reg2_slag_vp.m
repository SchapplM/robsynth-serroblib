% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR10_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRR10_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 20:03:16
% EndTime: 2019-05-05 20:03:22
% DurationCPUTime: 1.79s
% Computational Cost: add. (1505->158), mult. (2941->296), div. (0->0), fcn. (3308->8), ass. (0->81)
t60 = sin(pkin(10));
t61 = cos(pkin(10));
t63 = sin(qJ(5));
t66 = cos(qJ(5));
t102 = -t63 * t60 + t66 * t61;
t67 = cos(qJ(3));
t34 = t102 * t67;
t62 = sin(qJ(6));
t65 = cos(qJ(6));
t42 = t66 * t60 + t63 * t61;
t81 = t67 * t42;
t11 = t62 * t34 + t65 * t81;
t101 = -0.2e1 * t11;
t53 = -t61 * pkin(4) - pkin(3);
t29 = -pkin(5) * t102 + t53;
t100 = 0.2e1 * t29;
t99 = 0.2e1 * t53;
t98 = 0.2e1 * t61;
t64 = sin(qJ(3));
t97 = 0.2e1 * t64;
t96 = 2 * qJ(2);
t95 = t62 * pkin(5);
t94 = t64 * pkin(5);
t93 = t65 * pkin(5);
t44 = t64 * pkin(3) - t67 * qJ(4) + qJ(2);
t37 = t61 * t44;
t51 = t61 * t67;
t68 = -pkin(1) - pkin(7);
t85 = t60 * t68;
t18 = -pkin(8) * t51 + t37 + (pkin(4) - t85) * t64;
t83 = t64 * t68;
t27 = t60 * t44 + t61 * t83;
t86 = t60 * t67;
t23 = -pkin(8) * t86 + t27;
t9 = t63 * t18 + t66 * t23;
t5 = -pkin(9) * t81 + t9;
t92 = t65 * t5;
t91 = t67 * pkin(3);
t90 = t102 * t64;
t89 = t42 * t64;
t58 = t67 ^ 2;
t88 = t58 * t68;
t87 = t60 * t61;
t80 = t67 * t64;
t79 = t67 * t68;
t78 = pkin(8) + qJ(4);
t55 = t60 ^ 2;
t56 = t61 ^ 2;
t77 = t55 + t56;
t57 = t64 ^ 2;
t49 = t57 + t58;
t76 = -0.2e1 * t80;
t75 = t60 * t51;
t8 = t66 * t18 - t63 * t23;
t4 = -t34 * pkin(9) + t8 + t94;
t1 = t65 * t4 - t62 * t5;
t45 = t78 * t60;
t46 = t78 * t61;
t24 = -t66 * t45 - t63 * t46;
t38 = pkin(4) * t86 - t79;
t74 = t77 * qJ(4);
t73 = -qJ(4) * t64 - t91;
t26 = -t60 * t83 + t37;
t72 = -t26 * t60 + t27 * t61;
t25 = -t63 * t45 + t66 * t46;
t70 = qJ(2) ^ 2;
t59 = t68 ^ 2;
t54 = t58 * t59;
t43 = t49 * t68;
t22 = pkin(5) * t81 + t38;
t21 = t102 * t62 + t65 * t42;
t19 = -t102 * t65 + t62 * t42;
t16 = pkin(9) * t102 + t25;
t15 = -t42 * pkin(9) + t24;
t14 = t65 * t34 - t62 * t81;
t13 = -t62 * t89 + t65 * t90;
t10 = -t62 * t90 - t65 * t89;
t7 = t62 * t15 + t65 * t16;
t6 = t65 * t15 - t62 * t16;
t2 = t62 * t4 + t92;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t96, pkin(1) ^ 2 + t70, t58, t76, 0, t57, 0, 0, t64 * t96, t67 * t96, -0.2e1 * t43, t57 * t59 + t54 + t70, t56 * t58, -0.2e1 * t58 * t87, t80 * t98, t55 * t58, t60 * t76, t57, 0.2e1 * t26 * t64 - 0.2e1 * t58 * t85, -0.2e1 * t27 * t64 - 0.2e1 * t61 * t88, 0.2e1 * (-t26 * t61 - t27 * t60) * t67, t26 ^ 2 + t27 ^ 2 + t54, t34 ^ 2, -0.2e1 * t34 * t81, t34 * t97, t81 ^ 2, -t81 * t97, t57, 0.2e1 * t38 * t81 + 0.2e1 * t8 * t64, 0.2e1 * t38 * t34 - 0.2e1 * t9 * t64, -0.2e1 * t8 * t34 - 0.2e1 * t81 * t9, t38 ^ 2 + t8 ^ 2 + t9 ^ 2, t14 ^ 2, t14 * t101, t14 * t97, t11 ^ 2, t64 * t101, t57, 0.2e1 * t1 * t64 + 0.2e1 * t22 * t11, 0.2e1 * t22 * t14 - 0.2e1 * t2 * t64, -0.2e1 * t1 * t14 - 0.2e1 * t2 * t11, t1 ^ 2 + t2 ^ 2 + t22 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t49, t43, 0, 0, 0, 0, 0, 0, -t49 * t60, -t49 * t61, 0, t72 * t64 + t88, 0, 0, 0, 0, 0, 0, -t64 * t89 - t67 * t81, -t67 * t34 - t64 * t90, t34 * t89 - t81 * t90, -t38 * t67 - t8 * t89 + t9 * t90, 0, 0, 0, 0, 0, 0, t10 * t64 - t67 * t11, -t13 * t64 - t67 * t14, -t10 * t14 - t13 * t11, t1 * t10 + t2 * t13 - t22 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77 * t57 + t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89 ^ 2 + t90 ^ 2 + t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 ^ 2 + t13 ^ 2 + t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, -t64, 0, t79, -t83, 0, 0, t75 (-t55 + t56) * t67, t60 * t64, -t75, t61 * t64, 0, t73 * t60 + t61 * t79, -t60 * t79 + t73 * t61, t72, pkin(3) * t79 + t72 * qJ(4), t34 * t42, t102 * t34 - t42 * t81, t89, -t81 * t102, t90, 0, -t102 * t38 + t24 * t64 + t53 * t81, -t25 * t64 + t53 * t34 + t38 * t42, t102 * t9 - t24 * t34 - t25 * t81 - t8 * t42, t8 * t24 + t9 * t25 + t38 * t53, t14 * t21, -t21 * t11 - t14 * t19, t21 * t64, t11 * t19, -t19 * t64, 0, t29 * t11 + t22 * t19 + t6 * t64, t29 * t14 + t22 * t21 - t7 * t64, -t1 * t21 - t7 * t11 - t6 * t14 - t2 * t19, t1 * t6 + t2 * t7 + t22 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t64, 0, 0, 0, 0, 0, 0, 0, 0, t51, -t86, t77 * t64, t64 * t74 + t91, 0, 0, 0, 0, 0, 0, t34, -t81, t102 * t90 + t42 * t89, -t24 * t89 + t25 * t90 - t67 * t53, 0, 0, 0, 0, 0, 0, -t67 * t19, -t67 * t21, -t10 * t21 - t13 * t19, t10 * t6 + t13 * t7 - t67 * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t55, 0.2e1 * t87, 0, t56, 0, 0, pkin(3) * t98, -0.2e1 * pkin(3) * t60, 0.2e1 * t74, t77 * qJ(4) ^ 2 + pkin(3) ^ 2, t42 ^ 2, 0.2e1 * t42 * t102, 0, t102 ^ 2, 0, 0, -t102 * t99, t42 * t99, 0.2e1 * t102 * t25 - 0.2e1 * t24 * t42, t24 ^ 2 + t25 ^ 2 + t53 ^ 2, t21 ^ 2, -0.2e1 * t21 * t19, 0, t19 ^ 2, 0, 0, t19 * t100, t21 * t100, -0.2e1 * t7 * t19 - 0.2e1 * t6 * t21, t29 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t51, 0, -t79, 0, 0, 0, 0, 0, 0, t81, t34, 0, t38, 0, 0, 0, 0, 0, 0, t11, t14, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t60, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t102, t42, 0, t53, 0, 0, 0, 0, 0, 0, t19, t21, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t81, t64, t8, -t9, 0, 0, 0, 0, t14, 0, -t11, t64, t64 * t93 + t1, -t92 + (-t4 - t94) * t62 (-t11 * t62 - t14 * t65) * pkin(5) (t1 * t65 + t2 * t62) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, -t90, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t13, 0 (t10 * t65 + t13 * t62) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, t102, 0, t24, -t25, 0, 0, 0, 0, t21, 0, -t19, 0, t6, -t7 (-t19 * t62 - t21 * t65) * pkin(5) (t6 * t65 + t62 * t7) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t93, -0.2e1 * t95, 0 (t62 ^ 2 + t65 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, -t11, t64, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, -t19, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t93, -t95, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
