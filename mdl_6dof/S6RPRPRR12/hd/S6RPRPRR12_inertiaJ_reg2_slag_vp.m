% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR12_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR12_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRR12_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 20:46:36
% EndTime: 2019-05-05 20:46:41
% DurationCPUTime: 1.45s
% Computational Cost: add. (806->137), mult. (1356->212), div. (0->0), fcn. (1428->6), ass. (0->81)
t60 = cos(qJ(3));
t55 = sin(qJ(6));
t56 = sin(qJ(5));
t58 = cos(qJ(6));
t59 = cos(qJ(5));
t67 = t55 * t56 - t58 * t59;
t97 = t67 * t60;
t57 = sin(qJ(3));
t50 = t57 ^ 2;
t52 = t60 ^ 2;
t37 = t50 + t52;
t23 = t55 * t59 + t56 * t58;
t96 = (t23 * t55 - t58 * t67) * pkin(5);
t22 = t67 ^ 2;
t94 = t23 ^ 2;
t95 = t22 + t94;
t39 = pkin(5) * t56 + qJ(4);
t93 = 0.2e1 * t39;
t92 = -0.2e1 * t60;
t91 = 2 * qJ(2);
t90 = 0.2e1 * qJ(4);
t89 = t55 * pkin(5);
t88 = t58 * pkin(5);
t29 = pkin(3) * t57 - qJ(4) * t60 + qJ(2);
t19 = pkin(8) * t57 + t29;
t72 = pkin(9) * t57 + t19;
t62 = -pkin(1) - pkin(7);
t33 = (pkin(4) - t62) * t60;
t82 = t56 * t33;
t6 = t59 * t72 + t82;
t87 = t58 * t6;
t86 = t60 * pkin(5);
t14 = t57 * t23;
t85 = t14 * t67;
t41 = t56 * t57;
t42 = t59 * t57;
t11 = t41 * t55 - t42 * t58;
t84 = t23 * t11;
t83 = t23 * t60;
t81 = t56 * t60;
t80 = t59 * t56;
t79 = t60 * t57;
t61 = -pkin(3) - pkin(8);
t78 = t60 * t61;
t77 = t60 * t62;
t76 = t37 * t62 ^ 2;
t49 = t56 ^ 2;
t51 = t59 ^ 2;
t36 = t49 + t51;
t75 = t57 * qJ(4);
t74 = 0.2e1 * t79;
t73 = t56 * t42;
t21 = t59 * t33;
t5 = -t56 * t72 + t21 + t86;
t1 = t5 * t58 - t55 * t6;
t2 = t5 * t55 + t87;
t71 = -t1 * t67 + t2 * t23;
t7 = -t19 * t56 + t21;
t8 = t19 * t59 + t82;
t3 = t56 * t8 + t59 * t7;
t30 = (-pkin(9) + t61) * t56;
t46 = t59 * t61;
t32 = -pkin(9) * t59 + t46;
t10 = t30 * t58 + t32 * t55;
t9 = -t30 * t55 + t32 * t58;
t70 = t10 * t23 - t67 * t9;
t34 = pkin(3) * t60 + t75;
t69 = -t23 * t83 - t67 * t97;
t66 = t75 - t78;
t64 = qJ(2) ^ 2;
t63 = qJ(4) ^ 2;
t45 = t57 * t62;
t43 = t59 * t60;
t38 = -0.2e1 * t79;
t31 = -pkin(4) * t57 + t45;
t28 = t37 * t62;
t27 = t36 * t61;
t25 = t36 * t60;
t20 = 0.2e1 * t28;
t17 = t45 + (-pkin(5) * t59 - pkin(4)) * t57;
t4 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t91, pkin(1) ^ 2 + t64, t52, t38, 0, t50, 0, 0, t57 * t91, t60 * t91, -t20, t64 + t76, 0, 0, 0, t52, t38, t50, -t20, -0.2e1 * t29 * t57, t29 * t92, t29 ^ 2 + t76, t49 * t50, 0.2e1 * t50 * t80, t56 * t74, t51 * t50, t59 * t74, t52, -0.2e1 * t31 * t42 + 0.2e1 * t60 * t7, 0.2e1 * t31 * t41 - 0.2e1 * t60 * t8, 0.2e1 * (-t56 * t7 + t59 * t8) * t57, t31 ^ 2 + t7 ^ 2 + t8 ^ 2, t14 ^ 2, -0.2e1 * t14 * t11, 0.2e1 * t14 * t60, t11 ^ 2, t11 * t92, t52, 0.2e1 * t1 * t60 + 0.2e1 * t11 * t17, 0.2e1 * t14 * t17 - 0.2e1 * t2 * t60, -0.2e1 * t1 * t14 - 0.2e1 * t11 * t2, t1 ^ 2 + t17 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t37, t28, 0, 0, 0, 0, 0, 0, -t37, 0, 0, t28, 0, 0, 0, 0, 0, 0, -t37 * t59, t37 * t56, 0, -t3 * t60 + t31 * t57, 0, 0, 0, 0, 0, 0, t11 * t57 + t60 * t97, t14 * t57 + t60 * t83, t11 * t83 - t14 * t97, t1 * t97 + t17 * t57 - t2 * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 * t52 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83 ^ 2 + t97 ^ 2 + t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, -t57, 0, t77, -t45, 0, 0, 0, -t60, t57, 0, 0, 0, -t34, -t77, t45, t34 * t62, t73 (-t49 + t51) * t57, t43, -t73, -t81, 0, t31 * t56 - t59 * t66, t31 * t59 + t56 * t66, -t3, t31 * qJ(4) + t3 * t61, -t85, t11 * t67 - t14 * t23, -t97, t84, -t83, 0, t11 * t39 + t17 * t23 + t60 * t9, -t10 * t60 + t14 * t39 - t17 * t67, -t10 * t11 - t14 * t9 - t71, t1 * t9 + t10 * t2 + t17 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t57, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, t57, t34, 0, 0, 0, 0, 0, 0, t41, t42, t25, -t36 * t78 + t75, 0, 0, 0, 0, 0, 0, t14, -t57 * t67, -t69, -t10 * t83 + t39 * t57 + t9 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t90, pkin(3) ^ 2 + t63, t51, -0.2e1 * t80, 0, t49, 0, 0, t56 * t90, t59 * t90, -0.2e1 * t27, t36 * t61 ^ 2 + t63, t22, 0.2e1 * t67 * t23, 0, t94, 0, 0, t23 * t93, -t67 * t93, -0.2e1 * t70, t10 ^ 2 + t39 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, -t77, 0, 0, 0, 0, 0, 0, t43, -t81, 0, t3, 0, 0, 0, 0, 0, 0, -t97, -t83, -t84 + t85, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t36, t27, 0, 0, 0, 0, 0, 0, 0, 0, -t95, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, t42, t60, t7, -t8, 0, 0, 0, 0, t14, 0, -t11, t60, t58 * t86 + t1, -t87 + (-t5 - t86) * t55 (-t11 * t55 - t14 * t58) * pkin(5) (t1 * t58 + t2 * t55) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t81, 0, 0, 0, 0, 0, 0, 0, 0, t97, t83, 0 (-t55 * t83 + t58 * t97) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t56, 0, t46, -t56 * t61, 0, 0, 0, 0, -t67, 0, -t23, 0, t9, -t10, -t96 (t10 * t55 + t58 * t9) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t56, 0, 0, 0, 0, 0, 0, 0, 0, -t67, -t23, 0, t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t88, -0.2e1 * t89, 0 (t55 ^ 2 + t58 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, -t11, t60, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t83, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, 0, -t23, 0, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, -t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t88, -t89, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t4;
