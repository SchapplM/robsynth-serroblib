% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRPR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR4_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:28:51
% EndTime: 2019-05-05 22:28:57
% DurationCPUTime: 1.83s
% Computational Cost: add. (2662->140), mult. (5055->260), div. (0->0), fcn. (6258->10), ass. (0->103)
t87 = sin(pkin(11));
t83 = t87 ^ 2;
t89 = cos(pkin(11));
t85 = t89 ^ 2;
t106 = t83 + t85;
t107 = t106 * qJ(5);
t88 = sin(pkin(10));
t90 = cos(pkin(10));
t93 = sin(qJ(3));
t95 = cos(qJ(3));
t62 = -t93 * t88 + t95 * t90;
t64 = t95 * t88 + t93 * t90;
t92 = sin(qJ(4));
t94 = cos(qJ(4));
t48 = t92 * t62 + t94 * t64;
t132 = -0.2e1 * t48;
t119 = cos(qJ(6));
t91 = sin(qJ(6));
t131 = t119 * t89 - t91 * t87;
t112 = pkin(7) + qJ(2);
t67 = t112 * t88;
t69 = t112 * t90;
t53 = -t93 * t67 + t95 * t69;
t35 = t62 * pkin(8) + t53;
t51 = -t95 * t67 - t93 * t69;
t99 = -t64 * pkin(8) + t51;
t22 = t92 * t35 - t94 * t99;
t130 = t22 ^ 2;
t46 = -t94 * t62 + t92 * t64;
t44 = t46 ^ 2;
t129 = 0.2e1 * t46;
t78 = -t90 * pkin(2) - pkin(1);
t54 = -t62 * pkin(3) + t78;
t128 = 0.2e1 * t54;
t127 = 0.2e1 * t64;
t121 = t94 * pkin(3);
t77 = -t89 * pkin(5) - pkin(4);
t65 = t77 - t121;
t126 = 0.2e1 * t65;
t125 = 0.2e1 * t77;
t124 = 0.2e1 * t90;
t114 = t89 * t48;
t21 = t46 * pkin(4) - t48 * qJ(5) + t54;
t24 = t94 * t35 + t92 * t99;
t8 = t89 * t21 - t87 * t24;
t6 = t46 * pkin(5) - pkin(9) * t114 + t8;
t116 = t87 * t48;
t9 = t87 * t21 + t89 * t24;
t7 = -pkin(9) * t116 + t9;
t3 = t119 * t6 - t91 * t7;
t4 = t119 * t7 + t91 * t6;
t63 = t119 * t87 + t91 * t89;
t123 = t131 * t4 - t3 * t63;
t122 = t92 * pkin(3);
t79 = -pkin(4) - t121;
t120 = pkin(4) - t79;
t118 = t22 * t89;
t27 = t131 * t48;
t117 = t27 * t131;
t33 = t63 * t46;
t40 = t87 * t46;
t115 = t87 * t89;
t76 = qJ(5) + t122;
t56 = (-pkin(9) - t76) * t87;
t82 = t89 * pkin(9);
t57 = t89 * t76 + t82;
t42 = t119 * t56 - t91 * t57;
t43 = t119 * t57 + t91 * t56;
t111 = t131 * t43 - t42 * t63;
t66 = (-pkin(9) - qJ(5)) * t87;
t68 = t89 * qJ(5) + t82;
t50 = t119 * t66 - t91 * t68;
t52 = t119 * t68 + t91 * t66;
t110 = t131 * t52 - t50 * t63;
t109 = t65 + t77;
t108 = t106 * t76;
t84 = t88 ^ 2;
t86 = t90 ^ 2;
t105 = t84 + t86;
t104 = t46 * t132;
t102 = t8 * t89 + t9 * t87;
t5 = -t8 * t87 + t9 * t89;
t101 = -pkin(4) * t48 - qJ(5) * t46;
t100 = -t46 * t76 + t48 * t79;
t72 = 0.2e1 * t115;
t59 = t63 ^ 2;
t58 = t131 ^ 2;
t49 = 0.2e1 * t63 * t131;
t45 = t48 ^ 2;
t41 = t89 * t46;
t38 = t87 * t114;
t32 = t131 * t46;
t28 = (-t83 + t85) * t48;
t25 = t63 * t48;
t20 = t63 * t25;
t19 = t27 * t63;
t18 = t25 * t131;
t17 = t22 * t87;
t13 = pkin(5) * t116 + t22;
t12 = t13 * t63;
t11 = t13 * t131;
t10 = -t20 + t117;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t84, t88 * t124, 0, t86, 0, 0, pkin(1) * t124, -0.2e1 * pkin(1) * t88, 0.2e1 * t105 * qJ(2), t105 * qJ(2) ^ 2 + pkin(1) ^ 2, t64 ^ 2, t62 * t127, 0, t62 ^ 2, 0, 0, -0.2e1 * t78 * t62, t78 * t127, -0.2e1 * t51 * t64 + 0.2e1 * t53 * t62, t51 ^ 2 + t53 ^ 2 + t78 ^ 2, t45, t104, 0, t44, 0, 0, t46 * t128, t48 * t128, 0.2e1 * t22 * t48 - 0.2e1 * t24 * t46, t24 ^ 2 + t54 ^ 2 + t130, t85 * t45, -0.2e1 * t45 * t115, t114 * t129, t83 * t45, t87 * t104, t44, 0.2e1 * t22 * t116 + 0.2e1 * t8 * t46, 0.2e1 * t22 * t114 - 0.2e1 * t9 * t46, t102 * t132, t8 ^ 2 + t9 ^ 2 + t130, t27 ^ 2, -0.2e1 * t27 * t25, t27 * t129, t25 ^ 2, -t25 * t129, t44, 0.2e1 * t13 * t25 + 0.2e1 * t3 * t46, 0.2e1 * t13 * t27 - 0.2e1 * t4 * t46, -0.2e1 * t4 * t25 - 0.2e1 * t3 * t27, t13 ^ 2 + t3 ^ 2 + t4 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, t88, 0, -pkin(1), 0, 0, 0, 0, 0, 0, -t62, t64, 0, t78, 0, 0, 0, 0, 0, 0, t46, t48, 0, t54, 0, 0, 0, 0, 0, 0, t41, -t40, -t106 * t48, t102, 0, 0, 0, 0, 0, 0, t32, -t33, -t20 - t117, t131 * t3 + t4 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 + t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t62, 0, t51, -t53, 0, 0, 0, 0, t48, 0, -t46, 0, -t22, -t24 (-t46 * t92 - t48 * t94) * pkin(3) (-t22 * t94 + t24 * t92) * pkin(3), t38, t28, t40, -t38, t41, 0, t100 * t87 - t118, t100 * t89 + t17, t5, t22 * t79 + t5 * t76, t19, t10, t33, -t18, t32, 0, t65 * t25 + t42 * t46 - t11, t65 * t27 - t43 * t46 + t12, -t43 * t25 - t42 * t27 + t123, t13 * t65 + t3 * t42 + t4 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131 * t42 + t63 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t121, -0.2e1 * t122, 0 (t92 ^ 2 + t94 ^ 2) * pkin(3) ^ 2, t83, t72, 0, t85, 0, 0, -0.2e1 * t79 * t89, 0.2e1 * t79 * t87, 0.2e1 * t108, t106 * t76 ^ 2 + t79 ^ 2, t59, t49, 0, t58, 0, 0, -t131 * t126, t63 * t126, 0.2e1 * t111, t42 ^ 2 + t43 ^ 2 + t65 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t46, 0, -t22, -t24, 0, 0, t38, t28, t40, -t38, t41, 0, t101 * t87 - t118, t101 * t89 + t17, t5, -t22 * pkin(4) + t5 * qJ(5), t19, t10, t33, -t18, t32, 0, t77 * t25 + t50 * t46 - t11, t77 * t27 - t52 * t46 + t12, -t52 * t25 - t50 * t27 + t123, t13 * t77 + t3 * t50 + t4 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131 * t50 + t63 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t121, -t122, 0, 0, t83, t72, 0, t85, 0, 0, t120 * t89, -t120 * t87, t107 + t108, -t79 * pkin(4) + t76 * t107, t59, t49, 0, t58, 0, 0, -t109 * t131, t109 * t63, t110 + t111, t42 * t50 + t43 * t52 + t65 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t83, t72, 0, t85, 0, 0, 0.2e1 * pkin(4) * t89, -0.2e1 * pkin(4) * t87, 0.2e1 * t107, t106 * qJ(5) ^ 2 + pkin(4) ^ 2, t59, t49, 0, t58, 0, 0, -t131 * t125, t63 * t125, 0.2e1 * t110, t50 ^ 2 + t52 ^ 2 + t77 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, t114, 0, t22, 0, 0, 0, 0, 0, 0, t25, t27, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, t87, 0, t79, 0, 0, 0, 0, 0, 0, -t131, t63, 0, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t89, t87, 0, -pkin(4), 0, 0, 0, 0, 0, 0, -t131, t63, 0, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t25, t46, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, -t63, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t131, 0, t42, -t43, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t131, 0, t50, -t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
