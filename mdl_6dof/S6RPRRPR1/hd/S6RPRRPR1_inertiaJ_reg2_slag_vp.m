% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:59
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRPR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:56:40
% EndTime: 2019-05-05 21:56:44
% DurationCPUTime: 1.43s
% Computational Cost: add. (1570->117), mult. (2811->210), div. (0->0), fcn. (3315->10), ass. (0->86)
t66 = cos(qJ(4));
t53 = t66 * pkin(3);
t52 = t53 + pkin(4);
t58 = sin(pkin(11));
t60 = cos(pkin(11));
t63 = sin(qJ(4));
t90 = t63 * pkin(3);
t79 = t60 * t90;
t35 = t58 * t52 + t79;
t33 = pkin(9) + t35;
t62 = sin(qJ(6));
t54 = t62 ^ 2;
t65 = cos(qJ(6));
t56 = t65 ^ 2;
t82 = t54 + t56;
t85 = t82 * t33;
t94 = t58 * pkin(4);
t48 = pkin(9) + t94;
t105 = t82 * t48;
t64 = sin(qJ(3));
t67 = cos(qJ(3));
t39 = -t63 * t64 + t66 * t67;
t40 = t63 * t67 + t66 * t64;
t27 = t58 * t39 + t60 * t40;
t104 = -0.2e1 * t27;
t59 = sin(pkin(10));
t93 = t59 * pkin(1);
t49 = pkin(7) + t93;
t89 = pkin(8) + t49;
t77 = t89 * t67;
t78 = t89 * t64;
t21 = -t63 * t78 + t66 * t77;
t12 = t39 * qJ(5) + t21;
t20 = -t63 * t77 - t66 * t78;
t71 = -t40 * qJ(5) + t20;
t5 = t58 * t12 - t60 * t71;
t103 = t5 ^ 2;
t25 = -t60 * t39 + t58 * t40;
t102 = t25 ^ 2;
t61 = cos(pkin(10));
t91 = t61 * pkin(1);
t51 = -pkin(2) - t91;
t41 = -t67 * pkin(3) + t51;
t28 = -t39 * pkin(4) + t41;
t101 = 0.2e1 * t28;
t100 = 0.2e1 * t40;
t99 = 0.2e1 * t62;
t98 = 0.2e1 * t64;
t97 = -0.2e1 * t65;
t96 = t5 * t25;
t95 = t5 * t65;
t92 = t60 * pkin(4);
t16 = t62 * t25;
t88 = t62 * t27;
t87 = t62 * t65;
t86 = t65 * t27;
t75 = -t60 * t52 + t58 * t90;
t32 = -pkin(5) + t75;
t50 = -pkin(5) - t92;
t84 = t32 + t50;
t55 = t64 ^ 2;
t57 = t67 ^ 2;
t81 = t55 + t57;
t80 = t25 * t104;
t7 = t60 * t12 + t58 * t71;
t8 = t25 * pkin(5) - t27 * pkin(9) + t28;
t2 = -t62 * t7 + t65 * t8;
t3 = t62 * t8 + t65 * t7;
t74 = t2 * t65 + t3 * t62;
t1 = -t2 * t62 + t3 * t65;
t73 = -t25 * t33 + t27 * t32;
t72 = -t25 * t48 + t27 * t50;
t47 = 0.2e1 * t87;
t38 = t40 ^ 2;
t37 = t39 ^ 2;
t24 = t27 ^ 2;
t19 = t65 * t25;
t18 = t56 * t27;
t17 = t56 * t24;
t15 = t54 * t27;
t14 = t54 * t24;
t13 = t62 * t86;
t10 = -t15 - t18;
t9 = -t15 + t18;
t4 = t5 * t62;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t91, -0.2e1 * t93, 0 (t59 ^ 2 + t61 ^ 2) * pkin(1) ^ 2, t55, t67 * t98, 0, t57, 0, 0, -0.2e1 * t51 * t67, t51 * t98, 0.2e1 * t81 * t49, t81 * t49 ^ 2 + t51 ^ 2, t38, t39 * t100, 0, t37, 0, 0, -0.2e1 * t41 * t39, t41 * t100, -0.2e1 * t20 * t40 + 0.2e1 * t21 * t39, t20 ^ 2 + t21 ^ 2 + t41 ^ 2, t24, t80, 0, t102, 0, 0, t25 * t101, t27 * t101, -0.2e1 * t7 * t25 + 0.2e1 * t5 * t27, t28 ^ 2 + t7 ^ 2 + t103, t17, -0.2e1 * t24 * t87, 0.2e1 * t25 * t86, t14, t62 * t80, t102, 0.2e1 * t2 * t25 + 0.2e1 * t5 * t88, -0.2e1 * t3 * t25 + 0.2e1 * t5 * t86, t74 * t104, t2 ^ 2 + t3 ^ 2 + t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 * t39 + t21 * t40, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 * t27 + t96, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t27 + t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38 + t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 + t102, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 + t14 + t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t67, 0, -t64 * t49, -t67 * t49, 0, 0, 0, 0, t40, 0, t39, 0, t20, -t21 (t39 * t63 - t40 * t66) * pkin(3) (t20 * t66 + t21 * t63) * pkin(3), 0, 0, t27, 0, -t25, 0, -t5, -t7, -t35 * t25 + t27 * t75, t7 * t35 + t5 * t75, t13, t9, t16, -t13, t19, 0, t73 * t62 - t95, t73 * t65 + t4, t1, t1 * t33 + t5 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t64, 0, 0, 0, 0, 0, 0, 0, 0, t39, -t40, 0 (t39 * t66 + t40 * t63) * pkin(3), 0, 0, 0, 0, 0, 0, -t25, -t27, 0, t25 * t75 + t27 * t35, 0, 0, 0, 0, 0, 0, -t19, t16, -t10, t25 * t32 + t27 * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t53, -0.2e1 * t90, 0 (t63 ^ 2 + t66 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t75, -0.2e1 * t35, 0, t35 ^ 2 + t75 ^ 2, t54, t47, 0, t56, 0, 0, t32 * t97, t32 * t99, 0.2e1 * t85, t82 * t33 ^ 2 + t32 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, t39, 0, t20, -t21, 0, 0, 0, 0, t27, 0, -t25, 0, -t5, -t7 (-t25 * t58 - t27 * t60) * pkin(4) (-t5 * t60 + t58 * t7) * pkin(4), t13, t9, t16, -t13, t19, 0, t72 * t62 - t95, t72 * t65 + t4, t1, t1 * t48 + t5 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, -t40, 0, 0, 0, 0, 0, 0, 0, 0, -t25, -t27, 0 (-t25 * t60 + t27 * t58) * pkin(4), 0, 0, 0, 0, 0, 0, -t19, t16, -t10, t105 * t27 + t25 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t53, -t90, 0, 0, 0, 0, 0, 0, 0, 1, -t75 + t92, -t79 + (-pkin(4) - t52) * t58, 0 (t35 * t58 - t60 * t75) * pkin(4), t54, t47, 0, t56, 0, 0, -t84 * t65, t84 * t62, t105 + t85, t105 * t33 + t32 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t92, -0.2e1 * t94, 0 (t58 ^ 2 + t60 ^ 2) * pkin(4) ^ 2, t54, t47, 0, t56, 0, 0, t50 * t97, t50 * t99, 0.2e1 * t105, t82 * t48 ^ 2 + t50 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, t27, 0, t28, 0, 0, 0, 0, 0, 0, t19, -t16, t10, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, -t88, t25, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, -t86, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, t65, 0, -t62 * t33, -t65 * t33, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, t65, 0, -t62 * t48, -t65 * t48, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t62, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
