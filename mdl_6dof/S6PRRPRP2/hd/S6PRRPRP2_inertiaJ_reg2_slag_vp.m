% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:33
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRPRP2_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 03:47:32
% EndTime: 2019-05-05 03:47:37
% DurationCPUTime: 1.51s
% Computational Cost: add. (942->129), mult. (2013->219), div. (0->0), fcn. (2422->10), ass. (0->93)
t64 = sin(qJ(5));
t56 = t64 ^ 2;
t67 = cos(qJ(5));
t58 = t67 ^ 2;
t48 = t56 + t58;
t60 = sin(pkin(11));
t62 = cos(pkin(11));
t65 = sin(qJ(3));
t68 = cos(qJ(3));
t43 = t60 * t68 + t62 * t65;
t114 = -0.2e1 * t43;
t61 = sin(pkin(6));
t69 = cos(qJ(2));
t100 = t61 * t69;
t66 = sin(qJ(2));
t101 = t61 * t66;
t63 = cos(pkin(6));
t36 = -t65 * t101 + t63 * t68;
t37 = t68 * t101 + t63 * t65;
t17 = t60 * t36 + t62 * t37;
t11 = t67 * t100 + t64 * t17;
t13 = -t64 * t100 + t67 * t17;
t87 = -t11 * t67 + t13 * t64;
t15 = -t62 * t36 + t60 * t37;
t14 = t15 ^ 2;
t95 = -qJ(4) - pkin(8);
t45 = t95 * t68;
t86 = t95 * t65;
t25 = -t60 * t45 - t62 * t86;
t113 = t25 ^ 2;
t41 = t60 * t65 - t62 * t68;
t39 = t41 ^ 2;
t54 = -t68 * pkin(3) - pkin(2);
t112 = 0.2e1 * t54;
t111 = -0.2e1 * t67;
t110 = 0.2e1 * t68;
t109 = t41 * pkin(5);
t108 = t60 * pkin(3);
t107 = t62 * pkin(3);
t105 = t15 * t25;
t104 = t15 * t64;
t103 = t15 * t67;
t52 = pkin(9) + t108;
t102 = t41 * t52;
t32 = t64 * t41;
t99 = t64 * t43;
t98 = t64 * t52;
t97 = t64 * t67;
t34 = t67 * t41;
t35 = t67 * t43;
t96 = t67 * t52;
t20 = t41 * pkin(4) - t43 * pkin(9) + t54;
t27 = -t62 * t45 + t60 * t86;
t4 = t64 * t20 + t67 * t27;
t94 = t48 * t52 ^ 2;
t57 = t65 ^ 2;
t59 = t68 ^ 2;
t93 = t57 + t59;
t92 = t41 * qJ(6);
t91 = t41 * t99;
t40 = t43 ^ 2;
t90 = t40 * t97;
t53 = -pkin(4) - t107;
t89 = -t11 * t41 + t15 * t99;
t88 = t11 * t64 + t13 * t67;
t85 = -t67 * t20 + t64 * t27;
t84 = t11 ^ 2 + t13 ^ 2 + t14;
t83 = t11 * t98 + t13 * t96;
t1 = t92 + t4;
t2 = t85 - t109;
t82 = t1 * t67 + t2 * t64;
t81 = t1 * t64 - t2 * t67;
t80 = t4 * t64 - t67 * t85;
t79 = t4 * t67 + t64 * t85;
t78 = t67 * pkin(5) + t64 * qJ(6);
t77 = pkin(5) * t64 - t67 * qJ(6);
t76 = -t36 * t65 + t37 * t68;
t38 = t53 - t78;
t75 = t38 * t43 - t102;
t74 = t43 * t53 - t102;
t73 = -t13 * t41 + t15 * t35;
t72 = t87 * t43;
t55 = t61 ^ 2;
t50 = t55 * t69 ^ 2;
t33 = t58 * t40;
t31 = t56 * t40;
t30 = t64 * t35;
t28 = 0.2e1 * t48 * t52;
t23 = 0.2e1 * t41 * t35;
t22 = t48 * t43;
t21 = (t56 - t58) * t43;
t5 = t77 * t43 + t25;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55 * t66 ^ 2 + t63 ^ 2 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 ^ 2 + t37 ^ 2 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t14 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, -t101, 0, 0, 0, 0, 0, 0, 0, 0, t68 * t100, -t65 * t100, t76, pkin(2) * t100 + pkin(8) * t76, 0, 0, 0, 0, 0, 0, -t41 * t100, -t43 * t100, t15 * t43 - t17 * t41, -t54 * t100 + t17 * t27 + t105, 0, 0, 0, 0, 0, 0, t89, t73, -t72, t11 * t85 + t13 * t4 + t105, 0, 0, 0, 0, 0, 0, t89, -t72, -t73, t13 * t1 + t11 * t2 + t15 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, t65 * t110, 0, t59, 0, 0, pkin(2) * t110, -0.2e1 * pkin(2) * t65, 0.2e1 * t93 * pkin(8), t93 * pkin(8) ^ 2 + pkin(2) ^ 2, t40, t41 * t114, 0, t39, 0, 0, t41 * t112, t43 * t112, 0.2e1 * t25 * t43 - 0.2e1 * t27 * t41, t27 ^ 2 + t54 ^ 2 + t113, t33, -0.2e1 * t90, t23, t31, -0.2e1 * t91, t39, 0.2e1 * t25 * t99 - 0.2e1 * t41 * t85, 0.2e1 * t25 * t35 - 0.2e1 * t4 * t41, t80 * t114, t4 ^ 2 + t85 ^ 2 + t113, t33, t23, 0.2e1 * t90, t39, 0.2e1 * t91, t31, -0.2e1 * t2 * t41 + 0.2e1 * t5 * t99, t81 * t114, 0.2e1 * t1 * t41 - 0.2e1 * t5 * t35, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t37, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0 (-t15 * t62 + t17 * t60) * pkin(3), 0, 0, 0, 0, 0, 0, -t103, t104, t88, t15 * t53 + t83, 0, 0, 0, 0, 0, 0, -t103, t88, -t104, t15 * t38 + t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t68, 0, -t65 * pkin(8), -t68 * pkin(8), 0, 0, 0, 0, t43, 0, -t41, 0, -t25, -t27 (-t41 * t60 - t43 * t62) * pkin(3) (-t25 * t62 + t27 * t60) * pkin(3), t30, -t21, t32, -t30, t34, 0, -t25 * t67 + t64 * t74, t25 * t64 + t67 * t74, t79, t25 * t53 + t79 * t52, t30, t32, t21, 0, -t34, -t30, -t5 * t67 + t64 * t75, t82, -t5 * t64 - t67 * t75, t5 * t38 + t82 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t107, -0.2e1 * t108, 0 (t60 ^ 2 + t62 ^ 2) * pkin(3) ^ 2, t56, 0.2e1 * t97, 0, t58, 0, 0, t53 * t111, 0.2e1 * t53 * t64, t28, t53 ^ 2 + t94, t56, 0, -0.2e1 * t97, 0, 0, t58, t38 * t111, t28, -0.2e1 * t38 * t64, t38 ^ 2 + t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t43, 0, t54, 0, 0, 0, 0, 0, 0, t34, -t32, -t22, t80, 0, 0, 0, 0, 0, 0, t34, -t22, t32, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, -t13, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, t13, -t11 * pkin(5) + t13 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t99, t41, -t85, -t4, 0, 0, 0, t35, 0, t41, t99, 0, -t85 + 0.2e1 * t109, -t78 * t43, 0.2e1 * t92 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t67, 0, -t98, -t96, 0, 0, 0, t64, 0, 0, -t67, 0, -t98, -t77, t96, -t77 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t64, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t64, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t35, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
