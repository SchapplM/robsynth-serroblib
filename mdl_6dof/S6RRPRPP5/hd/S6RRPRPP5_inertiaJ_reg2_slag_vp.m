% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRPP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRPP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RRPRPP5_inertiaJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:44:49
% EndTime: 2019-05-06 12:44:53
% DurationCPUTime: 1.46s
% Computational Cost: add. (577->126), mult. (981->184), div. (0->0), fcn. (911->4), ass. (0->84)
t61 = sin(qJ(4));
t56 = t61 ^ 2;
t63 = cos(qJ(4));
t58 = t63 ^ 2;
t37 = t56 + t58;
t62 = sin(qJ(2));
t57 = t62 ^ 2;
t64 = cos(qJ(2));
t59 = t64 ^ 2;
t98 = t57 + t59;
t65 = pkin(4) + pkin(5);
t81 = t63 * qJ(5);
t97 = -t61 * t65 + t81;
t83 = t61 * qJ(5);
t24 = t65 * t63 + t83;
t96 = -0.2e1 * t62;
t95 = 0.2e1 * t64;
t94 = 0.2e1 * t65;
t93 = 2 * qJ(3);
t67 = -pkin(2) - pkin(8);
t92 = t62 * pkin(4);
t43 = t61 * t64;
t91 = t62 * t64;
t90 = t62 * t67;
t89 = t63 * t61;
t88 = t63 * t64;
t87 = t63 * t67;
t75 = -t62 * qJ(3) - pkin(1);
t17 = t67 * t64 + t75;
t52 = t62 * pkin(7);
t33 = t62 * pkin(3) + t52;
t86 = t61 * t17 - t63 * t33;
t9 = t63 * t17 + t61 * t33;
t85 = t37 * t67 ^ 2;
t84 = t98 * pkin(7) ^ 2;
t54 = t64 * pkin(7);
t34 = t64 * pkin(3) + t54;
t82 = t61 * qJ(6);
t80 = t64 * qJ(3);
t79 = t59 * t89;
t78 = t61 * t91;
t77 = t62 * t88;
t50 = t62 * qJ(5);
t6 = t50 + t9;
t76 = 0.2e1 * t50 + t9;
t7 = t86 - t92;
t1 = t6 * t61 - t7 * t63;
t2 = t9 * t61 - t63 * t86;
t74 = -t62 * pkin(2) + t80;
t29 = pkin(4) * t63 + t83;
t73 = t61 * pkin(4) - t81;
t72 = -t64 * t82 - t86;
t70 = qJ(3) ^ 2;
t69 = qJ(5) ^ 2;
t68 = 0.2e1 * qJ(5);
t47 = t61 * t67;
t45 = t63 * t62;
t44 = t58 * t59;
t42 = t61 * t62;
t41 = t56 * t59;
t40 = 0.2e1 * t89;
t39 = 0.2e1 * t91;
t38 = qJ(6) * t88;
t36 = t62 * t87;
t35 = t61 * t88;
t32 = -0.2e1 * t77;
t31 = -0.2e1 * t78;
t30 = -0.2e1 * t79;
t28 = -t64 * pkin(2) + t75;
t27 = qJ(3) + t73;
t25 = (-qJ(6) - t67) * t63;
t23 = t47 + t82;
t22 = 0.2e1 * t98 * pkin(7);
t21 = t37 * t67;
t18 = (-t56 + t58) * t64;
t16 = 0.2e1 * t21;
t15 = -qJ(3) + t97;
t12 = t29 * t64 + t34;
t11 = t23 * t61 - t25 * t63;
t10 = -t24 * t64 - t34;
t5 = t38 + t6;
t4 = t5 * t61;
t3 = -t65 * t62 - t72;
t8 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, t39, 0, t59, 0, 0, pkin(1) * t95, pkin(1) * t96, t22, pkin(1) ^ 2 + t84, 0, 0, 0, t57, t39, t59, t22, t28 * t95, t28 * t96, t28 ^ 2 + t84, t41, 0.2e1 * t79, t31, t44, t32, t57, 0.2e1 * t34 * t88 - 0.2e1 * t62 * t86, -0.2e1 * t34 * t43 - 0.2e1 * t9 * t62 (-t61 * t86 - t63 * t9) * t95, t34 ^ 2 + t86 ^ 2 + t9 ^ 2, t41, t31, t30, t57, 0.2e1 * t77, t44, 0.2e1 * t12 * t88 - 0.2e1 * t7 * t62 (-t6 * t63 - t61 * t7) * t95, 0.2e1 * t12 * t43 + 0.2e1 * t6 * t62, t12 ^ 2 + t6 ^ 2 + t7 ^ 2, t41, t30, 0.2e1 * t78, t44, t32, t57, -0.2e1 * t10 * t88 - 0.2e1 * t3 * t62, -0.2e1 * t10 * t43 + 0.2e1 * t5 * t62 (t3 * t61 + t5 * t63) * t95, t10 ^ 2 + t3 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, t64, 0, -t52, -t54, 0, 0, 0, -t62, -t64, 0, 0, 0, t74, t52, t54, t74 * pkin(7), -t35, -t18, t45, t35, -t42, 0, t34 * t61 + t63 * t80 + t36, t34 * t63 + (-t80 - t90) * t61, -t2, t34 * qJ(3) + t2 * t67, -t35, t45, t18, 0, t42, t35, t12 * t61 + t27 * t88 + t36, -t1, -t12 * t63 + (t27 * t64 + t90) * t61, t1 * t67 + t12 * t27, -t35, t18, -t45, t35, -t42, 0, -t10 * t61 - t15 * t88 - t25 * t62, t10 * t63 - t15 * t43 + t23 * t62, t25 * t43 + t4 + (t23 * t64 - t3) * t63, t10 * t15 + t5 * t23 + t3 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(2), t93, pkin(2) ^ 2 + t70, t58, -0.2e1 * t89, 0, t56, 0, 0, t61 * t93, t63 * t93, -t16, t70 + t85, t58, 0, t40, 0, 0, t56, 0.2e1 * t27 * t61, -t16, -0.2e1 * t27 * t63, t27 ^ 2 + t85, t58, t40, 0, t56, 0, 0, -0.2e1 * t15 * t61, 0.2e1 * t15 * t63, 0.2e1 * t11, t15 ^ 2 + t23 ^ 2 + t25 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, 0, t52, 0, 0, 0, 0, 0, 0, t45, -t42, 0, t2, 0, 0, 0, 0, 0, 0, t45, 0, t42, t1, 0, 0, 0, 0, 0, 0, t45, t42, 0, -t3 * t63 + t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t37, t21, 0, 0, 0, 0, 0, 0, 0, -t37, 0, t21, 0, 0, 0, 0, 0, 0, 0, 0, t37, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, 0, -t88, t62, -t86, -t9, 0, 0, 0, -t43, 0, t62, t88, 0, -t86 + 0.2e1 * t92, t73 * t64, t76, -t7 * pkin(4) + t6 * qJ(5), 0, 0, t43, 0, -t88, t62, t62 * t94 + t72, t38 + t76, t97 * t64, t5 * qJ(5) - t3 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, -t61, 0, t87, -t47, 0, 0, 0, t63, 0, 0, t61, 0, t87, -t29, t47, t29 * t67, 0, 0, -t63, 0, -t61, 0, -t25, t23, t24, t23 * qJ(5) - t25 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, -t61, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t61, t29, 0, 0, 0, 0, 0, 0, t63, t61, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(4), 0, t68, pkin(4) ^ 2 + t69, 0, 0, 0, 0, 0, 1, t94, t68, 0, t65 ^ 2 + t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, -t43, 0, t7, 0, 0, 0, 0, 0, 0, -t62, 0, t43, t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, -t87, 0, 0, 0, 0, 0, 0, 0, 0, -t63, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(4), 0, 0, 0, 0, 0, 0, -1, 0, 0, -t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, -t43, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t63, 0, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t8;
