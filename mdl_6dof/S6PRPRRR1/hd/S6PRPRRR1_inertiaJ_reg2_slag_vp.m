% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:25
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR1_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:07:46
% EndTime: 2019-05-05 00:07:51
% DurationCPUTime: 1.35s
% Computational Cost: add. (931->127), mult. (2057->222), div. (0->0), fcn. (2492->12), ass. (0->87)
t64 = sin(qJ(5));
t98 = t64 * pkin(4);
t49 = pkin(10) + t98;
t63 = sin(qJ(6));
t55 = t63 ^ 2;
t67 = cos(qJ(6));
t57 = t67 ^ 2;
t81 = t55 + t57;
t108 = t81 * t49;
t59 = sin(pkin(12));
t60 = sin(pkin(6));
t61 = cos(pkin(12));
t66 = sin(qJ(2));
t70 = cos(qJ(2));
t24 = (t59 * t70 + t61 * t66) * t60;
t62 = cos(pkin(6));
t65 = sin(qJ(4));
t69 = cos(qJ(4));
t19 = -t24 * t65 + t62 * t69;
t20 = t24 * t69 + t62 * t65;
t68 = cos(qJ(5));
t8 = -t68 * t19 + t64 * t20;
t107 = t8 ^ 2;
t100 = t59 * pkin(2);
t46 = pkin(8) + t100;
t92 = pkin(9) + t46;
t32 = t92 * t69;
t78 = t92 * t65;
t13 = t64 * t32 + t68 * t78;
t106 = t13 ^ 2;
t87 = t60 * t70;
t88 = t60 * t66;
t22 = t59 * t88 - t61 * t87;
t21 = t22 ^ 2;
t36 = t64 * t65 - t68 * t69;
t105 = t36 ^ 2;
t99 = t61 * pkin(2);
t47 = -pkin(3) - t99;
t39 = -t69 * pkin(4) + t47;
t104 = 0.2e1 * t39;
t103 = 0.2e1 * t65;
t102 = t36 * pkin(5);
t38 = t64 * t69 + t68 * t65;
t101 = t38 * pkin(10);
t97 = t68 * pkin(4);
t96 = t8 * t13;
t95 = t8 * t36;
t94 = t8 * t67;
t50 = -pkin(5) - t97;
t93 = pkin(5) - t50;
t91 = t13 * t36;
t90 = t13 * t67;
t89 = t55 * t38;
t86 = t63 * t38;
t85 = t63 * t67;
t84 = t67 * t38;
t82 = pkin(10) * t81;
t56 = t65 ^ 2;
t58 = t69 ^ 2;
t80 = t56 + t58;
t79 = -0.2e1 * t38 * t36;
t76 = -pkin(5) * t38 - pkin(10) * t36;
t10 = t64 * t19 + t68 * t20;
t3 = -t63 * t10 + t22 * t67;
t4 = t67 * t10 + t22 * t63;
t1 = -t3 * t63 + t4 * t67;
t12 = -t101 + t39 + t102;
t15 = t68 * t32 - t64 * t78;
t5 = t67 * t12 - t63 * t15;
t6 = t63 * t12 + t67 * t15;
t2 = -t5 * t63 + t6 * t67;
t75 = -t19 * t65 + t20 * t69;
t74 = -t36 * t49 + t38 * t50;
t54 = t62 ^ 2;
t44 = 0.2e1 * t85;
t35 = t38 ^ 2;
t31 = t67 * t36;
t30 = t57 * t38;
t29 = t57 * t35;
t28 = t63 * t36;
t27 = t55 * t35;
t25 = t63 * t84;
t18 = t30 + t89;
t17 = t30 - t89;
t11 = t13 * t63;
t7 = t8 * t63;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54 + (t66 ^ 2 + t70 ^ 2) * t60 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 ^ 2 + t21 + t54, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 ^ 2 + t20 ^ 2 + t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 ^ 2 + t107 + t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, -t88, 0, 0, 0, 0, 0, 0, 0, 0, -t22, -t24, 0 (-t22 * t61 + t24 * t59) * pkin(2), 0, 0, 0, 0, 0, 0, -t22 * t69, t22 * t65, t75, t22 * t47 + t75 * t46, 0, 0, 0, 0, 0, 0, t22 * t36, t22 * t38, -t10 * t36 + t8 * t38, t10 * t15 + t22 * t39 + t96, 0, 0, 0, 0, 0, 0, t3 * t36 + t8 * t86, -t4 * t36 + t8 * t84 (-t3 * t67 - t4 * t63) * t38, t3 * t5 + t4 * t6 + t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t99, -0.2e1 * t100, 0 (t59 ^ 2 + t61 ^ 2) * pkin(2) ^ 2, t56, t69 * t103, 0, t58, 0, 0, -0.2e1 * t47 * t69, t47 * t103, 0.2e1 * t80 * t46, t80 * t46 ^ 2 + t47 ^ 2, t35, t79, 0, t105, 0, 0, t36 * t104, t38 * t104, 0.2e1 * t13 * t38 - 0.2e1 * t15 * t36, t15 ^ 2 + t39 ^ 2 + t106, t29, -0.2e1 * t35 * t85, 0.2e1 * t36 * t84, t27, t63 * t79, t105, 0.2e1 * t13 * t86 + 0.2e1 * t5 * t36, 0.2e1 * t13 * t84 - 0.2e1 * t6 * t36, 0.2e1 * (-t5 * t67 - t6 * t63) * t38, t5 ^ 2 + t6 ^ 2 + t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 * t69 + t20 * t65, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t38 + t95, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t38 + t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15 * t38 + t91, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2 * t38 + t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35 + t105, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29 + t27 + t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t20, 0, 0, 0, 0, 0, 0, 0, 0, -t8, -t10, 0 (t10 * t64 - t68 * t8) * pkin(4), 0, 0, 0, 0, 0, 0, -t94, t7, t1, t1 * t49 + t8 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t65 * t46, -t69 * t46, 0, 0, 0, 0, t38, 0, -t36, 0, -t13, -t15 (-t36 * t64 - t38 * t68) * pkin(4) (-t13 * t68 + t15 * t64) * pkin(4), t25, t17, t28, -t25, t31, 0, t63 * t74 - t90, t67 * t74 + t11, t2, t13 * t50 + t2 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t65, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, 0 (-t36 * t68 + t38 * t64) * pkin(4), 0, 0, 0, 0, 0, 0, -t31, t28, t18, t108 * t38 + t36 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t97, -0.2e1 * t98, 0 (t64 ^ 2 + t68 ^ 2) * pkin(4) ^ 2, t55, t44, 0, t57, 0, 0, -0.2e1 * t50 * t67, 0.2e1 * t50 * t63, 0.2e1 * t108, t81 * t49 ^ 2 + t50 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t8, -t10, 0, 0, 0, 0, 0, 0, 0, 0, -t94, t7, t1, -t8 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, -t36, 0, -t13, -t15, 0, 0, t25, t17, t28, -t25, t31, 0, t63 * t76 - t90, t67 * t76 + t11, t2, -t13 * pkin(5) + pkin(10) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t28, t18, t81 * t101 - t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t97, -t98, 0, 0, t55, t44, 0, t57, 0, 0, t93 * t67, -t93 * t63, t82 + t108, -t50 * pkin(5) + pkin(10) * t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t55, t44, 0, t57, 0, 0, 0.2e1 * pkin(5) * t67, -0.2e1 * pkin(5) * t63, 0.2e1 * t82, t81 * pkin(10) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t86, t36, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t86, -t84, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t67, 0, -t63 * t49, -t67 * t49, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t67, 0, -t63 * pkin(10), -t67 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t9;
