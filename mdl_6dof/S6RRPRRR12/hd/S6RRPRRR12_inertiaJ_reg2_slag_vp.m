% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR12_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR12_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR12_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 00:44:37
% EndTime: 2019-05-07 00:44:47
% DurationCPUTime: 3.16s
% Computational Cost: add. (2898->218), mult. (6201->404), div. (0->0), fcn. (6939->10), ass. (0->135)
t98 = sin(qJ(6));
t91 = t98 ^ 2;
t102 = cos(qJ(6));
t93 = t102 ^ 2;
t142 = t91 + t93;
t99 = sin(qJ(5));
t156 = t99 * pkin(4);
t83 = pkin(11) + t156;
t169 = t142 * t83;
t103 = cos(qJ(5));
t100 = sin(qJ(4));
t104 = cos(qJ(4));
t57 = t103 * t100 + t99 * t104;
t59 = -t99 * t100 + t103 * t104;
t168 = (t103 * t59 + t57 * t99) * pkin(4);
t105 = cos(qJ(2));
t96 = sin(pkin(6));
t133 = t96 * t105;
t101 = sin(qJ(2));
t154 = pkin(1) * t101;
t97 = cos(pkin(6));
t53 = pkin(8) * t133 + t97 * t154;
t85 = t97 * qJ(3);
t41 = -t85 - t53;
t39 = pkin(3) * t133 - t41;
t47 = -t97 * t100 - t104 * t133;
t24 = -t47 * pkin(4) + t39;
t48 = -t100 * t133 + t97 * t104;
t27 = -t103 * t47 + t99 * t48;
t29 = t103 * t48 + t99 * t47;
t10 = t27 * pkin(5) - t29 * pkin(11) + t24;
t79 = t96 * t101;
t129 = pkin(4) * t79;
t153 = pkin(1) * t105;
t122 = -pkin(2) - t153;
t71 = pkin(8) * t79;
t35 = pkin(3) * t79 + t71 + (-pkin(9) + t122) * t97;
t106 = -pkin(2) - pkin(9);
t118 = -qJ(3) * t101 - pkin(1);
t40 = (t106 * t105 + t118) * t96;
t17 = -t100 * t40 + t104 * t35;
t13 = -t48 * pkin(10) + t129 + t17;
t18 = t100 * t35 + t104 * t40;
t14 = t47 * pkin(10) + t18;
t139 = t103 * t14;
t8 = t99 * t13 + t139;
t6 = pkin(11) * t79 + t8;
t2 = t102 * t10 - t98 * t6;
t3 = t98 * t10 + t102 * t6;
t167 = t3 * t102 - t2 * t98;
t55 = t57 ^ 2;
t56 = t59 ^ 2;
t166 = t55 + t56;
t165 = -0.2e1 * pkin(2);
t164 = t27 ^ 2;
t145 = -pkin(10) + t106;
t119 = t145 * t104;
t62 = t145 * t100;
t36 = -t103 * t119 + t99 * t62;
t163 = t36 ^ 2;
t162 = -0.2e1 * t27;
t81 = t100 * pkin(4) + qJ(3);
t161 = 0.2e1 * t81;
t160 = 0.2e1 * t96;
t159 = 0.2e1 * qJ(3);
t157 = t59 * pkin(5);
t152 = t103 * pkin(4);
t84 = -pkin(5) - t152;
t155 = pkin(5) - t84;
t23 = t102 * t29 + t98 * t79;
t20 = t23 * t98;
t151 = t27 * t57;
t150 = t29 * t59;
t149 = t36 * t59;
t120 = -t103 * t13 + t99 * t14;
t5 = -pkin(5) * t79 + t120;
t148 = t5 * t102;
t147 = t59 * t84;
t25 = t98 * t27;
t49 = t98 * t57;
t51 = t98 * t59;
t146 = t98 * t83;
t143 = pkin(11) * t142;
t92 = t100 ^ 2;
t94 = t104 ^ 2;
t70 = t92 + t94;
t26 = t102 * t27;
t50 = t102 * t57;
t141 = t102 * t59;
t140 = t102 * t83;
t89 = t96 ^ 2;
t138 = t105 * t89;
t21 = -t102 * t79 + t98 * t29;
t19 = t21 * t102;
t137 = t23 * t102;
t136 = t36 * t102;
t135 = t47 * t100;
t134 = t48 * t104;
t132 = t98 * t102;
t131 = -0.2e1 * t59 * t57;
t130 = 0.2e1 * t79;
t128 = t57 * t79;
t127 = t97 * t79;
t126 = t97 * t133;
t125 = t100 * t79;
t67 = t104 * t79;
t33 = t142 * t57;
t117 = -pkin(11) * t57 - t157;
t116 = -t120 * t59 + t8 * t57;
t38 = t103 * t62 + t99 * t119;
t114 = -t38 * t57 + t149;
t113 = -t57 * t83 + t147;
t31 = t57 * pkin(5) - t59 * pkin(11) + t81;
t15 = t102 * t31 - t98 * t38;
t16 = t102 * t38 + t98 * t31;
t9 = t16 * t102 - t15 * t98;
t112 = -t19 + t20;
t110 = t18 * t100 + t17 * t104;
t107 = qJ(3) ^ 2;
t90 = t97 ^ 2;
t78 = t89 * t105 ^ 2;
t77 = t89 * t101 ^ 2;
t75 = 0.2e1 * t132;
t63 = 0.2e1 * t101 * t138;
t61 = t70 * t106;
t52 = t97 * t153 - t71;
t46 = t59 * t132;
t45 = t59 * t79;
t43 = t122 * t97 + t71;
t42 = (-pkin(2) * t105 + t118) * t96;
t34 = t36 * t98;
t32 = (-t91 + t93) * t59;
t11 = -t98 * t21 + t137;
t4 = t5 * t98;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t77, t63, 0.2e1 * t127, t78, 0.2e1 * t126, t90, 0.2e1 * pkin(1) * t138 + 0.2e1 * t52 * t97, -0.2e1 * t89 * t154 - 0.2e1 * t53 * t97 (-t101 * t52 + t105 * t53) * t160, t89 * pkin(1) ^ 2 + t52 ^ 2 + t53 ^ 2, t90, -0.2e1 * t127, -0.2e1 * t126, t77, t63, t78 (t101 * t43 - t105 * t41) * t160, 0.2e1 * t42 * t133 + 0.2e1 * t43 * t97, -0.2e1 * t41 * t97 - 0.2e1 * t42 * t79, t41 ^ 2 + t42 ^ 2 + t43 ^ 2, t48 ^ 2, 0.2e1 * t48 * t47, t48 * t130, t47 ^ 2, t47 * t130, t77, 0.2e1 * t17 * t79 - 0.2e1 * t39 * t47, -0.2e1 * t18 * t79 + 0.2e1 * t39 * t48, -0.2e1 * t17 * t48 + 0.2e1 * t18 * t47, t17 ^ 2 + t18 ^ 2 + t39 ^ 2, t29 ^ 2, t29 * t162, t29 * t130, t164, t79 * t162, t77, -0.2e1 * t120 * t79 + 0.2e1 * t24 * t27, 0.2e1 * t24 * t29 - 0.2e1 * t8 * t79, 0.2e1 * t120 * t29 - 0.2e1 * t8 * t27, t120 ^ 2 + t24 ^ 2 + t8 ^ 2, t23 ^ 2, -0.2e1 * t23 * t21, 0.2e1 * t23 * t27, t21 ^ 2, t21 * t162, t164, 0.2e1 * t2 * t27 + 0.2e1 * t5 * t21, 0.2e1 * t5 * t23 - 0.2e1 * t3 * t27, -0.2e1 * t2 * t23 - 0.2e1 * t3 * t21, t2 ^ 2 + t3 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, t133, t97, t52, -t53, 0, 0, t97, -t79, -t133, 0, 0, 0 (-pkin(2) * t101 + qJ(3) * t105) * t96, t71 + (t165 - t153) * t97, 0.2e1 * t85 + t53, -t43 * pkin(2) - t41 * qJ(3), t134, -t48 * t100 + t104 * t47, t67, -t135, -t125, 0, -qJ(3) * t47 + t39 * t100 + t106 * t67, qJ(3) * t48 + t39 * t104 - t106 * t125 (-t106 * t48 - t17) * t104 + (t106 * t47 - t18) * t100, t39 * qJ(3) + t106 * t110, t150, -t59 * t27 - t29 * t57, t45, t151, -t128, 0, t24 * t57 + t81 * t27 - t36 * t79, t24 * t59 + t81 * t29 - t38 * t79, -t38 * t27 + t36 * t29 - t116, t120 * t36 + t24 * t81 + t8 * t38, t59 * t137 (-t19 - t20) * t59, t27 * t141 + t23 * t57, t21 * t51, -t21 * t57 - t27 * t51, t151, t15 * t27 + t2 * t57 + t36 * t21 + t5 * t51, t141 * t5 - t16 * t27 + t36 * t23 - t3 * t57, -t15 * t23 - t16 * t21 + (-t102 * t2 - t3 * t98) * t59, t2 * t15 + t3 * t16 + t5 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t165, t159, pkin(2) ^ 2 + t107, t94, -0.2e1 * t104 * t100, 0, t92, 0, 0, t100 * t159, t104 * t159, -0.2e1 * t61, t70 * t106 ^ 2 + t107, t56, t131, 0, t55, 0, 0, t57 * t161, t59 * t161, 0.2e1 * t114, t38 ^ 2 + t81 ^ 2 + t163, t93 * t56, -0.2e1 * t56 * t132, 0.2e1 * t57 * t141, t91 * t56, t98 * t131, t55, 0.2e1 * t15 * t57 + 0.2e1 * t36 * t51, 0.2e1 * t136 * t59 - 0.2e1 * t16 * t57, 0.2e1 * (-t102 * t15 - t16 * t98) * t59, t15 ^ 2 + t16 ^ 2 + t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t97, 0, t43, 0, 0, 0, 0, 0, 0, t67, -t125, -t134 + t135, t110, 0, 0, 0, 0, 0, 0, t45, -t128, -t150 - t151, t116, 0, 0, 0, 0, 0, 0, -t59 * t21 - t27 * t49, -t59 * t23 - t27 * t50, t112 * t57, t167 * t57 - t5 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t70, t61, 0, 0, 0, 0, 0, 0, 0, 0, -t166, -t114, 0, 0, 0, 0, 0, 0, -t166 * t98, -t166 * t102, 0, t57 * t9 - t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142 * t55 + t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, t47, t79, t17, -t18, 0, 0, 0, 0, t29, 0, -t27, t79, t103 * t129 - t120, -t139 + (-t13 - t129) * t99 (-t103 * t29 - t27 * t99) * pkin(4) (-t103 * t120 + t8 * t99) * pkin(4), t20, t11, t25, -t19, t26, 0, -t27 * t146 + t84 * t21 - t148, -t140 * t27 + t84 * t23 + t4, t112 * t83 + t167, t167 * t83 + t5 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t100, 0, t104 * t106, -t100 * t106, 0, 0, 0, 0, t59, 0, -t57, 0, -t36, -t38, -t168 (-t103 * t36 + t38 * t99) * pkin(4), t46, t32, t49, -t46, t50, 0, t113 * t98 - t136, t102 * t113 + t34, t9, t36 * t84 + t83 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, -t100, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t57, 0, t168, 0, 0, 0, 0, 0, 0, t141, -t51, t33, t169 * t57 - t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t152, -0.2e1 * t156, 0 (t103 ^ 2 + t99 ^ 2) * pkin(4) ^ 2, t91, t75, 0, t93, 0, 0, -0.2e1 * t84 * t102, 0.2e1 * t84 * t98, 0.2e1 * t169, t142 * t83 ^ 2 + t84 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t27, t79, -t120, -t8, 0, 0, t20, t11, t25, -t19, t26, 0, -pkin(5) * t21 - pkin(11) * t25 - t148, -pkin(5) * t23 - pkin(11) * t26 + t4, pkin(11) * t112 + t167, -t5 * pkin(5) + pkin(11) * t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t57, 0, -t36, -t38, 0, 0, t46, t32, t49, -t46, t50, 0, t117 * t98 - t136, t102 * t117 + t34, t9, -t36 * pkin(5) + pkin(11) * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t57, 0, 0, 0, 0, 0, 0, 0, 0, t141, -t51, t33, pkin(11) * t33 + t157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t152, -t156, 0, 0, t91, t75, 0, t93, 0, 0, t155 * t102, -t155 * t98, t143 + t169, -t84 * pkin(5) + pkin(11) * t169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t91, t75, 0, t93, 0, 0, 0.2e1 * pkin(5) * t102, -0.2e1 * pkin(5) * t98, 0.2e1 * t143, pkin(11) ^ 2 * t142 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t23, 0, -t21, t27, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141, 0, -t51, t57, t15, -t16, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, -t50, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, t102, 0, -t146, -t140, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98, 0, t102, 0, -t98 * pkin(11), -t102 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t1;
