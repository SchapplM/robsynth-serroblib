% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 01:04
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRRRP2_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 04:32:44
% EndTime: 2019-05-08 04:32:56
% DurationCPUTime: 2.74s
% Computational Cost: add. (2530->171), mult. (4738->279), div. (0->0), fcn. (5543->8), ass. (0->123)
t89 = sin(qJ(5));
t85 = t89 ^ 2;
t93 = cos(qJ(5));
t87 = t93 ^ 2;
t159 = t85 + t87;
t91 = sin(qJ(3));
t143 = t91 * pkin(2);
t94 = cos(qJ(4));
t115 = t94 * t143;
t95 = cos(qJ(3));
t83 = t95 * pkin(2);
t76 = t83 + pkin(3);
t90 = sin(qJ(4));
t54 = t76 * t90 + t115;
t52 = pkin(10) + t54;
t125 = t159 * t52;
t144 = t90 * pkin(3);
t74 = pkin(10) + t144;
t121 = t159 * t74;
t151 = -pkin(8) - pkin(7);
t92 = sin(qJ(2));
t111 = t151 * t92;
t96 = cos(qJ(2));
t112 = t151 * t96;
t39 = t111 * t95 + t112 * t91;
t58 = t91 * t96 + t92 * t95;
t101 = -t58 * pkin(9) + t39;
t40 = t111 * t91 - t112 * t95;
t57 = -t91 * t92 + t95 * t96;
t22 = t57 * pkin(9) + t40;
t13 = -t101 * t94 + t90 * t22;
t158 = t13 ^ 2;
t32 = -t57 * t94 + t58 * t90;
t30 = t32 ^ 2;
t34 = t57 * t90 + t58 * t94;
t157 = 0.2e1 * t34;
t77 = -pkin(2) * t96 - pkin(1);
t49 = -pkin(3) * t57 + t77;
t156 = 0.2e1 * t49;
t155 = 0.2e1 * t58;
t154 = -0.2e1 * t89;
t153 = -0.2e1 * t93;
t152 = 0.2e1 * t96;
t150 = pkin(4) * t89;
t149 = pkin(10) * t32;
t148 = t32 * pkin(5);
t106 = pkin(5) * t89 - qJ(6) * t93;
t7 = t106 * t34 + t13;
t147 = t7 * t89;
t146 = t7 * t93;
t145 = t89 * pkin(10);
t142 = t93 * pkin(10);
t12 = pkin(4) * t32 - pkin(10) * t34 + t49;
t15 = t101 * t90 + t94 * t22;
t6 = t12 * t89 + t15 * t93;
t141 = t13 * t93;
t140 = t32 * t52;
t139 = t32 * t74;
t120 = t143 * t90 - t76 * t94;
t51 = -pkin(4) + t120;
t138 = t51 * t93;
t82 = t94 * pkin(3);
t75 = -t82 - pkin(4);
t137 = t75 * t93;
t136 = t89 * t34;
t135 = t89 * t52;
t134 = t89 * t74;
t133 = t89 * t93;
t29 = t93 * t34;
t132 = t93 * t52;
t131 = t93 * t74;
t130 = t121 * t52;
t107 = -pkin(5) * t93 - qJ(6) * t89;
t60 = -pkin(4) + t107;
t38 = t60 + t120;
t56 = t60 - t82;
t129 = -t38 - t56;
t128 = -t38 - t60;
t127 = t125 * pkin(10);
t126 = t159 * t52 ^ 2;
t124 = -t56 - t60;
t123 = t121 * pkin(10);
t122 = t159 * t74 ^ 2;
t119 = t159 * pkin(10) ^ 2;
t118 = t159 * pkin(10);
t86 = t92 ^ 2;
t88 = t96 ^ 2;
t117 = t86 + t88;
t116 = t32 * qJ(6);
t114 = t32 * t136;
t31 = t34 ^ 2;
t113 = t31 * t133;
t110 = -t12 * t93 + t15 * t89;
t109 = -pkin(4) * t34 - t149;
t3 = t116 + t6;
t4 = t110 - t148;
t1 = t3 * t93 + t4 * t89;
t2 = t110 * t89 + t6 * t93;
t108 = -t34 * t60 + t149;
t105 = -t34 * t38 + t140;
t104 = t34 * t51 - t140;
t103 = -t34 * t56 + t139;
t102 = t34 * t75 - t139;
t84 = pkin(4) * t93;
t72 = -0.2e1 * t133;
t71 = 0.2e1 * t133;
t69 = t75 * t89;
t59 = 0.2e1 * t118;
t48 = t51 * t89;
t43 = 0.2e1 * t121;
t35 = t118 + t121;
t28 = t93 * t32;
t26 = t87 * t31;
t25 = t89 * t32;
t24 = t85 * t31;
t23 = t89 * t29;
t20 = 0.2e1 * t125;
t19 = t118 + t125;
t18 = t121 + t125;
t17 = 0.2e1 * t32 * t29;
t16 = (t85 - t87) * t34;
t11 = t13 * t89;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t86, t92 * t152, 0, t88, 0, 0, pkin(1) * t152, -0.2e1 * pkin(1) * t92, 0.2e1 * t117 * pkin(7), pkin(7) ^ 2 * t117 + pkin(1) ^ 2, t58 ^ 2, t57 * t155, 0, t57 ^ 2, 0, 0, -0.2e1 * t77 * t57, t77 * t155, -0.2e1 * t39 * t58 + 0.2e1 * t40 * t57, t39 ^ 2 + t40 ^ 2 + t77 ^ 2, t31, -0.2e1 * t34 * t32, 0, t30, 0, 0, t32 * t156, t34 * t156, 0.2e1 * t13 * t34 - 0.2e1 * t15 * t32, t15 ^ 2 + t49 ^ 2 + t158, t26, -0.2e1 * t113, t17, t24, -0.2e1 * t114, t30, -0.2e1 * t110 * t32 + 0.2e1 * t13 * t136, 0.2e1 * t13 * t29 - 0.2e1 * t32 * t6 (t110 * t93 - t6 * t89) * t157, t110 ^ 2 + t6 ^ 2 + t158, t26, t17, 0.2e1 * t113, t30, 0.2e1 * t114, t24, 0.2e1 * t136 * t7 - 0.2e1 * t32 * t4 (-t3 * t89 + t4 * t93) * t157, -0.2e1 * t29 * t7 + 0.2e1 * t3 * t32, t3 ^ 2 + t4 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t96, 0, -t92 * pkin(7), -t96 * pkin(7), 0, 0, 0, 0, t58, 0, t57, 0, t39, -t40 (t57 * t91 - t58 * t95) * pkin(2) (t39 * t95 + t40 * t91) * pkin(2), 0, 0, t34, 0, -t32, 0, -t13, -t15, t120 * t34 - t32 * t54, t120 * t13 + t15 * t54, t23, -t16, t25, -t23, t28, 0, t104 * t89 - t141, t104 * t93 + t11, t2, t13 * t51 + t2 * t52, t23, t25, t16, 0, -t28, -t23, -t105 * t89 - t146, t1, t105 * t93 - t147, t1 * t52 + t7 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t83, -0.2e1 * t143, 0 (t91 ^ 2 + t95 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t120, -0.2e1 * t54, 0, t120 ^ 2 + t54 ^ 2, t85, t71, 0, t87, 0, 0, -0.2e1 * t138, 0.2e1 * t48, t20, t51 ^ 2 + t126, t85, 0, t72, 0, 0, t87, t38 * t153, t20, t38 * t154, t38 ^ 2 + t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t57, 0, t39, -t40, 0, 0, 0, 0, t34, 0, -t32, 0, -t13, -t15 (-t32 * t90 - t34 * t94) * pkin(3) (-t13 * t94 + t15 * t90) * pkin(3), t23, -t16, t25, -t23, t28, 0, t102 * t89 - t141, t102 * t93 + t11, t2, t13 * t75 + t2 * t74, t23, t25, t16, 0, -t28, -t23, -t103 * t89 - t146, t1, t103 * t93 - t147, t1 * t74 + t7 * t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t83, -t143, 0, 0, 0, 0, 0, 0, 0, 1, t82 - t120, -t115 + (-pkin(3) - t76) * t90, 0 (-t120 * t94 + t54 * t90) * pkin(3), t85, t71, 0, t87, 0, 0 (-t51 - t75) * t93, t69 + t48, t18, t51 * t75 + t130, t85, 0, t72, 0, 0, t87, t129 * t93, t18, t129 * t89, t38 * t56 + t130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t82, -0.2e1 * t144, 0 (t90 ^ 2 + t94 ^ 2) * pkin(3) ^ 2, t85, t71, 0, t87, 0, 0, -0.2e1 * t137, 0.2e1 * t69, t43, t75 ^ 2 + t122, t85, 0, t72, 0, 0, t87, t56 * t153, t43, t56 * t154, t56 ^ 2 + t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t32, 0, -t13, -t15, 0, 0, t23, -t16, t25, -t23, t28, 0, t109 * t89 - t141, t109 * t93 + t11, t2, -t13 * pkin(4) + pkin(10) * t2, t23, t25, t16, 0, -t28, -t23, -t108 * t89 - t146, t1, t108 * t93 - t147, pkin(10) * t1 + t7 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t120, -t54, 0, 0, t85, t71, 0, t87, 0, 0, t84 - t138, t48 - t150, t19, -pkin(4) * t51 + t127, t85, 0, t72, 0, 0, t87, t128 * t93, t19, t128 * t89, t38 * t60 + t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t82, -t144, 0, 0, t85, t71, 0, t87, 0, 0, t84 - t137, t69 - t150, t35, -pkin(4) * t75 + t123, t85, 0, t72, 0, 0, t87, t124 * t93, t35, t124 * t89, t56 * t60 + t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t85, t71, 0, t87, 0, 0, 0.2e1 * t84, -0.2e1 * t150, t59, pkin(4) ^ 2 + t119, t85, 0, t72, 0, 0, t87, t60 * t153, t59, t60 * t154, t60 ^ 2 + t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t136, t32, -t110, -t6, 0, 0, 0, t29, 0, t32, t136, 0, -t110 + 0.2e1 * t148, t107 * t34, 0.2e1 * t116 + t6, -pkin(5) * t4 + qJ(6) * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t93, 0, -t135, -t132, 0, 0, 0, t89, 0, 0, -t93, 0, -t135, -t106, t132, -t106 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t93, 0, -t134, -t131, 0, 0, 0, t89, 0, 0, -t93, 0, -t134, -t106, t131, -t106 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t93, 0, -t145, -t142, 0, 0, 0, t89, 0, 0, -t93, 0, -t145, -t106, t142, -t106 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t29, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
