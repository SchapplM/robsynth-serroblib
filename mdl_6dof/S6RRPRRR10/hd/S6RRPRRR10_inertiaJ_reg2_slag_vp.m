% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 14:28
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR10_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRRR10_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 23:46:01
% EndTime: 2019-05-06 23:46:12
% DurationCPUTime: 3.46s
% Computational Cost: add. (5095->249), mult. (11479->499), div. (0->0), fcn. (13548->12), ass. (0->140)
t100 = cos(pkin(12));
t104 = sin(qJ(4));
t156 = cos(qJ(4));
t98 = sin(pkin(12));
t75 = t104 * t100 + t156 * t98;
t169 = -0.2e1 * t75;
t102 = sin(qJ(6));
t103 = sin(qJ(5));
t106 = cos(qJ(6));
t107 = cos(qJ(5));
t168 = -t102 * t103 + t106 * t107;
t101 = cos(pkin(6));
t105 = sin(qJ(2));
t99 = sin(pkin(6));
t131 = t99 * t105;
t65 = t100 * t101 - t131 * t98;
t66 = t100 * t131 + t101 * t98;
t42 = t104 * t66 - t156 * t65;
t41 = t42 ^ 2;
t145 = pkin(9) + qJ(3);
t118 = t145 * t98;
t81 = t145 * t100;
t51 = t104 * t81 + t156 * t118;
t167 = t51 ^ 2;
t73 = -t156 * t100 + t104 * t98;
t70 = t73 ^ 2;
t166 = -0.2e1 * t42;
t165 = 0.2e1 * t42;
t164 = 0.2e1 * t73;
t90 = -pkin(3) * t100 - pkin(2);
t163 = 0.2e1 * t90;
t92 = -pkin(5) * t107 - pkin(4);
t162 = 0.2e1 * t92;
t161 = 0.2e1 * t99;
t160 = 0.2e1 * t100;
t159 = -pkin(11) - pkin(10);
t158 = pkin(5) * t42;
t157 = pkin(5) * t73;
t155 = pkin(1) * t105;
t108 = cos(qJ(2));
t154 = pkin(1) * t108;
t153 = t102 * pkin(5);
t152 = t106 * pkin(5);
t130 = t99 * t108;
t44 = t104 * t65 + t156 * t66;
t33 = t103 * t44 + t107 * t130;
t122 = pkin(8) * t130;
t60 = t122 + (qJ(3) + t155) * t101;
t61 = (-pkin(2) * t108 - qJ(3) * t105 - pkin(1)) * t99;
t37 = t100 * t61 - t60 * t98;
t24 = -pkin(3) * t130 - pkin(9) * t66 + t37;
t38 = t100 * t60 + t98 * t61;
t28 = pkin(9) * t65 + t38;
t14 = t104 * t24 + t156 * t28;
t12 = -pkin(10) * t130 + t14;
t86 = pkin(8) * t131;
t63 = t86 + (-pkin(2) - t154) * t101;
t49 = -pkin(3) * t65 + t63;
t17 = pkin(4) * t42 - pkin(10) * t44 + t49;
t7 = t103 * t17 + t107 * t12;
t5 = -pkin(11) * t33 + t7;
t151 = t106 * t5;
t35 = -t103 * t130 + t107 * t44;
t20 = -t102 * t33 + t106 * t35;
t150 = t20 * t168;
t31 = t42 * t73;
t47 = t168 * t75;
t149 = t47 * t168;
t148 = t66 * t98;
t80 = t102 * t107 + t103 * t106;
t147 = t80 * t42;
t146 = t80 * t73;
t93 = t98 ^ 2;
t95 = t100 ^ 2;
t144 = t93 + t95;
t96 = t103 ^ 2;
t97 = t107 ^ 2;
t143 = t96 + t97;
t142 = t103 * t42;
t141 = t103 * t73;
t140 = t103 * t75;
t53 = -t104 * t118 + t156 * t81;
t137 = t107 * t53;
t50 = pkin(4) * t73 - pkin(10) * t75 + t90;
t23 = t137 + (-pkin(11) * t75 + t50) * t103;
t139 = t106 * t23;
t138 = t107 * t35;
t40 = t107 * t42;
t136 = t107 * t75;
t94 = t99 ^ 2;
t135 = t108 * t94;
t134 = t33 * t107;
t133 = t35 * t103;
t132 = t65 * t100;
t129 = t101 * t105;
t127 = t103 * t107;
t125 = t73 * t169;
t124 = -0.2e1 * t130;
t123 = 0.2e1 * t130;
t121 = t98 * t130;
t120 = t75 * t127;
t119 = t100 * t130;
t6 = -t103 * t12 + t107 * t17;
t4 = -pkin(11) * t35 + t158 + t6;
t1 = -t102 * t5 + t106 * t4;
t25 = -t103 * t53 + t107 * t50;
t22 = -pkin(11) * t136 + t157 + t25;
t9 = -t102 * t23 + t106 * t22;
t117 = -pkin(4) * t75 - pkin(10) * t73;
t13 = -t104 * t28 + t156 * t24;
t116 = t103 * t7 + t107 * t6;
t115 = -t103 * t6 + t107 * t7;
t114 = t100 * t38 - t37 * t98;
t26 = t103 * t50 + t137;
t113 = t103 * t26 + t107 * t25;
t112 = -t103 * t25 + t107 * t26;
t11 = pkin(4) * t130 - t13;
t88 = t94 * t108 ^ 2;
t84 = t159 * t107;
t83 = t159 * t103;
t77 = t80 ^ 2;
t76 = t168 ^ 2;
t71 = t75 ^ 2;
t69 = pkin(1) * t129 + t122;
t68 = t101 * t154 - t86;
t67 = t107 * t73;
t56 = t102 * t83 - t106 * t84;
t55 = t102 * t84 + t106 * t83;
t54 = t168 * t73;
t45 = t80 * t75;
t39 = pkin(5) * t140 + t51;
t36 = t80 * t45;
t32 = t168 * t42;
t29 = t103 * t33;
t18 = t102 * t35 + t106 * t33;
t15 = t80 * t18;
t10 = t102 * t22 + t139;
t8 = t33 * pkin(5) + t11;
t2 = t102 * t4 + t151;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t94 * t105 ^ 2, 0.2e1 * t105 * t135, t129 * t161, t88, t101 * t123, t101 ^ 2, 0.2e1 * pkin(1) * t135 + 0.2e1 * t101 * t68, -0.2e1 * t101 * t69 - 0.2e1 * t94 * t155 (-t105 * t68 + t108 * t69) * t161, pkin(1) ^ 2 * t94 + t68 ^ 2 + t69 ^ 2, t66 ^ 2, 0.2e1 * t66 * t65, t66 * t124, t65 ^ 2, t65 * t124, t88, -0.2e1 * t130 * t37 - 0.2e1 * t63 * t65, 0.2e1 * t130 * t38 + 0.2e1 * t63 * t66, -0.2e1 * t37 * t66 + 0.2e1 * t38 * t65, t37 ^ 2 + t38 ^ 2 + t63 ^ 2, t44 ^ 2, t44 * t166, t44 * t124, t41, t42 * t123, t88, -0.2e1 * t13 * t130 + 0.2e1 * t42 * t49, 0.2e1 * t130 * t14 + 0.2e1 * t44 * t49, -0.2e1 * t13 * t44 - 0.2e1 * t14 * t42, t13 ^ 2 + t14 ^ 2 + t49 ^ 2, t35 ^ 2, -0.2e1 * t35 * t33, t35 * t165, t33 ^ 2, t33 * t166, t41, 0.2e1 * t11 * t33 + 0.2e1 * t42 * t6, 0.2e1 * t11 * t35 - 0.2e1 * t42 * t7, -0.2e1 * t33 * t7 - 0.2e1 * t35 * t6, t11 ^ 2 + t6 ^ 2 + t7 ^ 2, t20 ^ 2, -0.2e1 * t20 * t18, t20 * t165, t18 ^ 2, t18 * t166, t41, 0.2e1 * t1 * t42 + 0.2e1 * t18 * t8, -0.2e1 * t2 * t42 + 0.2e1 * t20 * t8, -0.2e1 * t1 * t20 - 0.2e1 * t18 * t2, t1 ^ 2 + t2 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, 0, t130, t101, t68, -t69, 0, 0, t148, t100 * t66 + t65 * t98, -t121, t132, -t119, 0, pkin(2) * t65 + qJ(3) * t121 - t100 * t63, -pkin(2) * t66 + qJ(3) * t119 + t63 * t98 (t132 + t148) * qJ(3) + t114, -pkin(2) * t63 + qJ(3) * t114, t44 * t75, -t42 * t75 - t44 * t73, -t75 * t130, t31, t73 * t130, 0, t130 * t51 + t42 * t90 + t49 * t73, t130 * t53 + t44 * t90 + t49 * t75, -t13 * t75 - t14 * t73 - t42 * t53 + t44 * t51, -t13 * t51 + t14 * t53 + t49 * t90, t35 * t136 (-t133 - t134) * t75, t136 * t42 + t35 * t73, t33 * t140, -t140 * t42 - t33 * t73, t31, t11 * t140 + t25 * t42 + t33 * t51 + t6 * t73, t11 * t136 - t26 * t42 + t35 * t51 - t7 * t73, -t116 * t75 - t25 * t35 - t26 * t33, t11 * t51 + t25 * t6 + t26 * t7, t20 * t47, -t18 * t47 - t20 * t45, t20 * t73 + t42 * t47, t18 * t45, -t18 * t73 - t42 * t45, t31, t1 * t73 + t18 * t39 + t42 * t9 + t45 * t8, -t10 * t42 - t2 * t73 + t20 * t39 + t47 * t8, -t1 * t47 - t10 * t18 - t2 * t45 - t20 * t9, t1 * t9 + t10 * t2 + t39 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t93, t98 * t160, 0, t95, 0, 0, pkin(2) * t160, -0.2e1 * pkin(2) * t98, 0.2e1 * t144 * qJ(3), qJ(3) ^ 2 * t144 + pkin(2) ^ 2, t71, t125, 0, t70, 0, 0, t73 * t163, t75 * t163, 0.2e1 * t51 * t75 - 0.2e1 * t53 * t73, t53 ^ 2 + t90 ^ 2 + t167, t97 * t71, -0.2e1 * t71 * t127, t136 * t164, t96 * t71, t103 * t125, t70, 0.2e1 * t140 * t51 + 0.2e1 * t25 * t73, 0.2e1 * t136 * t51 - 0.2e1 * t26 * t73, t113 * t169, t25 ^ 2 + t26 ^ 2 + t167, t47 ^ 2, -0.2e1 * t47 * t45, t47 * t164, t45 ^ 2, -t45 * t164, t70, 0.2e1 * t39 * t45 + 0.2e1 * t73 * t9, -0.2e1 * t10 * t73 + 0.2e1 * t39 * t47, -0.2e1 * t10 * t45 - 0.2e1 * t47 * t9, t10 ^ 2 + t39 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, t66, 0, t63, 0, 0, 0, 0, 0, 0, t42, t44, 0, t49, 0, 0, 0, 0, 0, 0, t40, -t142, -t29 - t138, t116, 0, 0, 0, 0, 0, 0, t32, -t147, -t15 - t150, t1 * t168 + t2 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, t98, 0, -pkin(2), 0, 0, 0, 0, 0, 0, t73, t75, 0, t90, 0, 0, 0, 0, 0, 0, t67, -t141, -t143 * t75, t113, 0, 0, 0, 0, 0, 0, t54, -t146, -t36 - t149, t10 * t80 + t168 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77 + t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, -t42, -t130, t13, -t14, 0, 0, t133, -t29 + t138, t142, -t134, t40, 0, -pkin(4) * t33 - pkin(10) * t142 - t107 * t11, -pkin(4) * t35 - pkin(10) * t40 + t103 * t11 (t133 - t134) * pkin(10) + t115, -pkin(4) * t11 + pkin(10) * t115, t20 * t80, -t15 + t150, t147, -t18 * t168, t32, 0, -t168 * t8 + t18 * t92 + t42 * t55, t20 * t92 - t42 * t56 + t8 * t80, -t1 * t80 + t168 * t2 - t18 * t56 - t20 * t55, t1 * t55 + t2 * t56 + t8 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, -t73, 0, -t51, -t53, 0, 0, t120 (-t96 + t97) * t75, t141, -t120, t67, 0, t103 * t117 - t107 * t51, t103 * t51 + t107 * t117, t112, -pkin(4) * t51 + pkin(10) * t112, t47 * t80, -t36 + t149, t146, -t45 * t168, t54, 0, -t168 * t39 + t45 * t92 + t55 * t73, t39 * t80 + t47 * t92 - t56 * t73, t10 * t168 - t45 * t56 - t47 * t55 - t80 * t9, t10 * t56 + t39 * t92 + t55 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168 * t55 + t56 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t96, 0.2e1 * t127, 0, t97, 0, 0, 0.2e1 * pkin(4) * t107, -0.2e1 * pkin(4) * t103, 0.2e1 * t143 * pkin(10), pkin(10) ^ 2 * t143 + pkin(4) ^ 2, t77, 0.2e1 * t80 * t168, 0, t76, 0, 0, -t168 * t162, t80 * t162, 0.2e1 * t168 * t56 - 0.2e1 * t55 * t80, t55 ^ 2 + t56 ^ 2 + t92 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t33, t42, t6, -t7, 0, 0, 0, 0, t20, 0, -t18, t42, t152 * t42 + t1, -t151 + (-t4 - t158) * t102 (-t102 * t18 - t106 * t20) * pkin(5) (t1 * t106 + t102 * t2) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, -t140, t73, t25, -t26, 0, 0, 0, 0, t47, 0, -t45, t73, t152 * t73 + t9, -t139 + (-t22 - t157) * t102 (-t102 * t45 - t106 * t47) * pkin(5) (t10 * t102 + t106 * t9) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, -t103, 0, 0, 0, 0, 0, 0, 0, 0, t168, -t80, 0 (t102 * t80 + t106 * t168) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, t107, 0, -t103 * pkin(10), -t107 * pkin(10), 0, 0, 0, 0, t80, 0, t168, 0, t55, -t56 (t102 * t168 - t106 * t80) * pkin(5) (t102 * t56 + t106 * t55) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t152, -0.2e1 * t153, 0 (t102 ^ 2 + t106 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, t42, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t45, t73, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, -t80, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t168, 0, t55, -t56, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t152, -t153, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
