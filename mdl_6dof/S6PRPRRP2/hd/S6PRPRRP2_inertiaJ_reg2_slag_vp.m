% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRPRRP2_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:38:25
% EndTime: 2019-05-04 23:38:28
% DurationCPUTime: 1.26s
% Computational Cost: add. (574->121), mult. (1355->198), div. (0->0), fcn. (1543->10), ass. (0->91)
t64 = cos(qJ(5));
t55 = t64 ^ 2;
t62 = sin(qJ(4));
t46 = t55 * t62;
t61 = sin(qJ(5));
t53 = t61 ^ 2;
t94 = t53 * t62;
t28 = t46 + t94;
t109 = t53 + t55;
t57 = sin(pkin(11));
t58 = sin(pkin(6));
t59 = cos(pkin(11));
t63 = sin(qJ(2));
t66 = cos(qJ(2));
t22 = (t57 * t66 + t59 * t63) * t58;
t60 = cos(pkin(6));
t65 = cos(qJ(4));
t15 = t22 * t62 - t60 * t65;
t14 = t15 ^ 2;
t91 = t58 * t66;
t92 = t58 * t63;
t20 = t57 * t92 - t59 * t91;
t108 = t20 ^ 2;
t75 = -t64 * pkin(5) - t61 * qJ(6);
t31 = -pkin(4) + t75;
t107 = -0.2e1 * t31;
t106 = 0.2e1 * t62;
t105 = pkin(4) * t61;
t104 = pkin(4) * t64;
t103 = t57 * pkin(2);
t102 = t59 * pkin(2);
t101 = t61 * pkin(9);
t100 = t64 * pkin(9);
t99 = t65 * pkin(4);
t17 = t22 * t65 + t60 * t62;
t8 = t17 * t64 + t20 * t61;
t4 = t8 * t64;
t98 = t15 * t61;
t97 = t15 * t64;
t96 = t15 * t65;
t41 = pkin(8) + t103;
t95 = t41 * t61;
t54 = t62 ^ 2;
t93 = t54 * t41;
t44 = t61 * t62;
t90 = t61 * t64;
t89 = t61 * t65;
t88 = t62 * t41;
t87 = t62 * t65;
t47 = t64 * t62;
t48 = t64 * t65;
t86 = t65 * t41;
t42 = -pkin(3) - t102;
t26 = -t62 * pkin(9) + t42 - t99;
t13 = t61 * t26 + t64 * t86;
t85 = t28 * pkin(9);
t84 = t109 * pkin(9) ^ 2;
t56 = t65 ^ 2;
t83 = t54 + t56;
t82 = t65 * qJ(6);
t81 = t61 * t87;
t80 = t54 * t90;
t6 = t17 * t61 - t20 * t64;
t79 = t6 * t61 + t4;
t78 = t15 * t44 + t6 * t65;
t77 = t6 ^ 2 + t8 ^ 2 + t14;
t76 = pkin(9) * t4 + t6 * t101;
t74 = -pkin(5) * t61 + t64 * qJ(6);
t10 = -t82 + t13;
t24 = t64 * t26;
t11 = -t24 + (pkin(5) + t95) * t65;
t73 = t10 * t64 + t11 * t61;
t12 = -t61 * t86 + t24;
t72 = -t12 * t61 + t13 * t64;
t71 = t15 * t62 + t17 * t65;
t70 = (t6 * t64 - t61 * t8) * t62;
t69 = t6 * t44 + t8 * t47 - t96;
t52 = t60 ^ 2;
t45 = t55 * t54;
t43 = t53 * t54;
t39 = t41 ^ 2;
t37 = pkin(9) * t89;
t35 = t61 * t47;
t33 = -0.2e1 * t62 * t48;
t32 = t54 * t39;
t30 = 0.2e1 * t109 * pkin(9);
t27 = -t46 + t94;
t25 = t45 + t43 + t56;
t18 = (t41 - t74) * t62;
t1 = t15 * t47 + t8 * t65;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52 + (t63 ^ 2 + t66 ^ 2) * t58 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 ^ 2 + t108 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t108 + t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t92, 0, 0, 0, 0, 0, 0, 0, 0, -t20, -t22, 0 (-t20 * t59 + t22 * t57) * pkin(2), 0, 0, 0, 0, 0, 0, -t20 * t65, t20 * t62, t71, t20 * t42 + t41 * t71, 0, 0, 0, 0, 0, 0, t78, t1, t70, -t6 * t12 + t8 * t13 + t15 * t88, 0, 0, 0, 0, 0, 0, t78, t70, -t1, t8 * t10 + t6 * t11 + t15 * t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t102, -0.2e1 * t103, 0 (t57 ^ 2 + t59 ^ 2) * pkin(2) ^ 2, t54, 0.2e1 * t87, 0, t56, 0, 0, -0.2e1 * t42 * t65, t42 * t106, 0.2e1 * t83 * t41, t56 * t39 + t42 ^ 2 + t32, t45, -0.2e1 * t80, t33, t43, 0.2e1 * t81, t56, -0.2e1 * t12 * t65 + 0.2e1 * t61 * t93, 0.2e1 * t13 * t65 + 0.2e1 * t64 * t93 (-t12 * t64 - t13 * t61) * t106, t12 ^ 2 + t13 ^ 2 + t32, t45, t33, 0.2e1 * t80, t56, -0.2e1 * t81, t43, 0.2e1 * t11 * t65 + 0.2e1 * t18 * t44 (-t10 * t61 + t11 * t64) * t106, -0.2e1 * t10 * t65 - 0.2e1 * t18 * t47, t10 ^ 2 + t11 ^ 2 + t18 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t62 - t96, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t72 - t86) * t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18 * t65 + t62 * t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0, 0, 0, 0, 0, 0, 0, 0, -t97, t98, t79, -t15 * pkin(4) + t76, 0, 0, 0, 0, 0, 0, -t97, t79, -t98, t15 * t31 + t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, t65, 0, -t88, -t86, 0, 0, t35, -t27, -t89, -t35, -t48, 0, t37 + (-t41 * t64 - t105) * t62, pkin(9) * t48 + (t95 - t104) * t62, t72, -pkin(4) * t88 + pkin(9) * t72, t35, -t89, t27, 0, t48, -t35, -t18 * t64 + t31 * t44 + t37, t73, -t18 * t61 + (-pkin(9) * t65 - t31 * t62) * t64, pkin(9) * t73 + t18 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, -t62, 0, 0, 0, 0, 0, 0, 0, 0, t48, -t89, t28, t85 + t99, 0, 0, 0, 0, 0, 0, t48, t28, t89, -t65 * t31 + t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t53, 0.2e1 * t90, 0, t55, 0, 0, 0.2e1 * t104, -0.2e1 * t105, t30, pkin(4) ^ 2 + t84, t53, 0, -0.2e1 * t90, 0, 0, t55, t64 * t107, t30, t61 * t107, t31 ^ 2 + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t8, 0, 0, 0, 0, 0, 0, 0, 0, -t6, 0, t8, -t6 * pkin(5) + t8 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t44, -t65, t12, -t13, 0, 0, 0, t47, 0, -t65, t44, 0, t24 + (-0.2e1 * pkin(5) - t95) * t65, t75 * t62, -0.2e1 * t82 + t13, -t11 * pkin(5) + t10 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, -t47, 0, 0, 0, 0, 0, 0, 0, 0, -t44, 0, t47, t74 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, t64, 0, -t101, -t100, 0, 0, 0, t61, 0, 0, -t64, 0, -t101, t74, t100, t74 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t47, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t2;
