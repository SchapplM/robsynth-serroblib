% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:03
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRPR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR2_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:06:33
% EndTime: 2019-05-05 22:06:38
% DurationCPUTime: 1.66s
% Computational Cost: add. (1706->171), mult. (3336->297), div. (0->0), fcn. (3690->10), ass. (0->99)
t68 = sin(pkin(11));
t70 = cos(pkin(11));
t73 = sin(qJ(4));
t75 = cos(qJ(4));
t45 = t68 * t73 - t70 * t75;
t63 = -t75 * pkin(4) - pkin(3);
t33 = t45 * pkin(5) + t63;
t116 = 0.2e1 * t33;
t115 = 0.2e1 * t63;
t74 = sin(qJ(3));
t114 = 0.2e1 * t74;
t76 = cos(qJ(3));
t113 = -0.2e1 * t76;
t112 = 0.2e1 * t76;
t111 = pkin(3) * t75;
t110 = t68 * pkin(4);
t69 = sin(pkin(10));
t109 = t69 * pkin(1);
t108 = t70 * pkin(4);
t71 = cos(pkin(10));
t107 = t71 * pkin(1);
t106 = t76 * pkin(3);
t105 = t76 * pkin(4);
t104 = cos(qJ(6));
t47 = t68 * t75 + t70 * t73;
t36 = t47 * t74;
t93 = t75 * t74;
t96 = t73 * t74;
t38 = -t68 * t96 + t70 * t93;
t72 = sin(qJ(6));
t15 = t104 * t36 + t72 * t38;
t26 = t104 * t47 - t72 * t45;
t103 = t26 * t15;
t102 = t26 * t76;
t101 = t47 * t36;
t100 = t47 * t76;
t57 = pkin(7) + t109;
t99 = t57 * t73;
t64 = t73 ^ 2;
t98 = t64 * t74;
t65 = t74 ^ 2;
t97 = t65 * t57;
t95 = t73 * t75;
t94 = t73 * t76;
t52 = t74 * t57;
t92 = t75 * t76;
t24 = t104 * t45 + t72 * t47;
t91 = t76 * t24;
t90 = t76 * t45;
t89 = t76 * t57;
t88 = -qJ(5) - pkin(8);
t59 = -pkin(2) - t107;
t44 = -t74 * pkin(8) - t106 + t59;
t39 = t75 * t44;
t85 = qJ(5) * t74;
t18 = -t75 * t85 + t39 + (-pkin(4) - t99) * t76;
t82 = t75 * t89;
t22 = t82 + (t44 - t85) * t73;
t9 = t68 * t18 + t70 * t22;
t42 = pkin(4) * t96 + t52;
t66 = t75 ^ 2;
t87 = t64 + t66;
t67 = t76 ^ 2;
t86 = t65 + t67;
t84 = t74 * t112;
t83 = t73 * t93;
t8 = t70 * t18 - t68 * t22;
t4 = -t76 * pkin(5) - t38 * pkin(9) + t8;
t5 = -t36 * pkin(9) + t9;
t1 = t104 * t4 - t72 * t5;
t81 = t87 * pkin(8);
t49 = t88 * t73;
t50 = t88 * t75;
t30 = t70 * t49 + t68 * t50;
t28 = -t73 * t89 + t39;
t29 = t73 * t44 + t82;
t80 = -t28 * t73 + t29 * t75;
t31 = t68 * t49 - t70 * t50;
t2 = t104 * t5 + t72 * t4;
t62 = t66 * t74;
t61 = t66 * t65;
t60 = t64 * t65;
t58 = pkin(5) + t108;
t55 = t57 ^ 2;
t51 = t65 * t55;
t41 = t104 * t110 + t72 * t58;
t40 = t104 * t58 - t72 * t110;
t35 = t38 ^ 2;
t34 = t36 ^ 2;
t27 = t38 * t45;
t23 = t36 * pkin(5) + t42;
t20 = -t45 * pkin(9) + t31;
t19 = -t47 * pkin(9) + t30;
t17 = t104 * t38 - t72 * t36;
t14 = t17 ^ 2;
t13 = t15 ^ 2;
t10 = t17 * t24;
t7 = t104 * t20 + t72 * t19;
t6 = t104 * t19 - t72 * t20;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t107, -0.2e1 * t109, 0 (t69 ^ 2 + t71 ^ 2) * pkin(1) ^ 2, t65, t84, 0, t67, 0, 0, t59 * t113, t59 * t114, 0.2e1 * t86 * t57, t67 * t55 + t59 ^ 2 + t51, t61, -0.2e1 * t65 * t95, -0.2e1 * t74 * t92, t60, t73 * t84, t67, -0.2e1 * t28 * t76 + 0.2e1 * t73 * t97, 0.2e1 * t29 * t76 + 0.2e1 * t75 * t97 (-t28 * t75 - t29 * t73) * t114, t28 ^ 2 + t29 ^ 2 + t51, t35, -0.2e1 * t38 * t36, t38 * t113, t34, -t36 * t113, t67, 0.2e1 * t42 * t36 - 0.2e1 * t8 * t76, 0.2e1 * t42 * t38 + 0.2e1 * t9 * t76, -0.2e1 * t9 * t36 - 0.2e1 * t8 * t38, t42 ^ 2 + t8 ^ 2 + t9 ^ 2, t14, -0.2e1 * t17 * t15, t17 * t113, t13, t15 * t112, t67, -0.2e1 * t1 * t76 + 0.2e1 * t23 * t15, 0.2e1 * t23 * t17 + 0.2e1 * t2 * t76, -0.2e1 * t1 * t17 - 0.2e1 * t2 * t15, t1 ^ 2 + t2 ^ 2 + t23 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t80 - t89) * t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t8 * t36 + t9 * t38 - t42 * t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t15 + t2 * t17 - t23 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61 + t60 + t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35 + t34 + t67, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 + t13 + t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t76, 0, -t52, -t89, 0, 0, t83, t62 - t98, -t94, -t83, -t92, 0, -t57 * t93 + (-pkin(3) * t74 + pkin(8) * t76) * t73, pkin(8) * t92 + (t99 - t111) * t74, t80, -pkin(3) * t52 + t80 * pkin(8), t38 * t47, -t27 - t101, -t100, t36 * t45, t90, 0, -t30 * t76 + t63 * t36 + t42 * t45, t31 * t76 + t63 * t38 + t42 * t47, -t30 * t38 - t31 * t36 - t9 * t45 - t8 * t47, t8 * t30 + t9 * t31 + t42 * t63, t17 * t26, -t10 - t103, -t102, t15 * t24, t91, 0, t33 * t15 + t23 * t24 - t6 * t76, t33 * t17 + t23 * t26 + t7 * t76, -t1 * t26 - t7 * t15 - t6 * t17 - t2 * t24, t1 * t6 + t2 * t7 + t23 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, -t74, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t94, t62 + t98, t74 * t81 + t106, 0, 0, 0, 0, 0, 0, -t90, -t100, -t27 + t101, -t36 * t30 + t38 * t31 - t76 * t63, 0, 0, 0, 0, 0, 0, -t91, -t102, -t10 + t103, -t15 * t6 + t17 * t7 - t76 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64, 0.2e1 * t95, 0, t66, 0, 0, 0.2e1 * t111, -0.2e1 * pkin(3) * t73, 0.2e1 * t81, t87 * pkin(8) ^ 2 + pkin(3) ^ 2, t47 ^ 2, -0.2e1 * t47 * t45, 0, t45 ^ 2, 0, 0, t45 * t115, t47 * t115, -0.2e1 * t30 * t47 - 0.2e1 * t31 * t45, t30 ^ 2 + t31 ^ 2 + t63 ^ 2, t26 ^ 2, -0.2e1 * t26 * t24, 0, t24 ^ 2, 0, 0, t24 * t116, t26 * t116, -0.2e1 * t7 * t24 - 0.2e1 * t6 * t26, t33 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, -t96, -t76, t28, -t29, 0, 0, 0, 0, t38, 0, -t36, -t76, -t70 * t105 + t8, t68 * t105 - t9 (-t36 * t68 - t38 * t70) * pkin(4) (t68 * t9 + t70 * t8) * pkin(4), 0, 0, t17, 0, -t15, -t76, -t40 * t76 + t1, t41 * t76 - t2, -t41 * t15 - t40 * t17, t1 * t40 + t2 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t93, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, 0 (-t36 * t70 + t38 * t68) * pkin(4), 0, 0, 0, 0, 0, 0, -t15, -t17, 0, -t15 * t40 + t17 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t75, 0, -t73 * pkin(8), -t75 * pkin(8), 0, 0, 0, 0, t47, 0, -t45, 0, t30, -t31 (-t45 * t68 - t47 * t70) * pkin(4) (t30 * t70 + t31 * t68) * pkin(4), 0, 0, t26, 0, -t24, 0, t6, -t7, -t41 * t24 - t40 * t26, t6 * t40 + t7 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t110, 0 (t68 ^ 2 + t70 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t40, -0.2e1 * t41, 0, t40 ^ 2 + t41 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t38, 0, t42, 0, 0, 0, 0, 0, 0, t15, t17, 0, t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t47, 0, t63, 0, 0, 0, 0, 0, 0, t24, t26, 0, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, -t15, -t76, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t24, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t40, -t41, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
