% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR7_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR7_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR7_inertiaJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 12:33:29
% EndTime: 2019-05-08 12:33:39
% DurationCPUTime: 2.10s
% Computational Cost: add. (2793->223), mult. (6568->410), div. (0->0), fcn. (7800->12), ass. (0->135)
t100 = cos(qJ(5));
t101 = cos(qJ(4));
t95 = sin(qJ(5));
t96 = sin(qJ(4));
t104 = t100 * t101 - t95 * t96;
t83 = -t101 * pkin(4) - pkin(3);
t54 = -pkin(5) * t104 + t83;
t151 = 0.2e1 * t54;
t102 = cos(qJ(3));
t92 = sin(pkin(6));
t98 = sin(qJ(2));
t130 = t92 * t98;
t93 = cos(pkin(6));
t97 = sin(qJ(3));
t63 = -t93 * t102 + t97 * t130;
t150 = -0.2e1 * t63;
t149 = 0.2e1 * t63;
t64 = t102 * t130 + t93 * t97;
t148 = -0.2e1 * t64;
t147 = 0.2e1 * t83;
t146 = -0.2e1 * t97;
t145 = -0.2e1 * t102;
t144 = 0.2e1 * t102;
t143 = pkin(10) + pkin(11);
t142 = pkin(1) * t98;
t141 = pkin(9) * t96;
t140 = t63 * pkin(4);
t139 = t63 * pkin(5);
t94 = sin(qJ(6));
t138 = t94 * pkin(5);
t137 = t95 * pkin(4);
t99 = cos(qJ(6));
t85 = t99 * pkin(5);
t103 = cos(qJ(2));
t116 = t92 * t103;
t45 = t101 * t116 + t64 * t96;
t46 = t64 * t101 - t96 * t116;
t27 = t100 * t45 + t95 * t46;
t135 = pkin(1) * t103;
t77 = pkin(8) * t130;
t55 = t77 + (-pkin(2) - t135) * t93;
t30 = t63 * pkin(3) - t64 * pkin(10) + t55;
t109 = pkin(8) * t116;
t56 = t109 + (pkin(9) + t142) * t93;
t57 = (-pkin(2) * t103 - pkin(9) * t98 - pkin(1)) * t92;
t34 = t102 * t56 + t97 * t57;
t32 = -pkin(10) * t116 + t34;
t16 = t101 * t30 - t96 * t32;
t11 = -t46 * pkin(11) + t140 + t16;
t17 = t101 * t32 + t96 * t30;
t13 = -t45 * pkin(11) + t17;
t124 = t100 * t13;
t7 = t95 * t11 + t124;
t5 = -t27 * pkin(12) + t7;
t136 = t99 * t5;
t86 = t100 * pkin(4);
t134 = t102 * pkin(4);
t133 = t102 * pkin(5);
t33 = t102 * t57 - t97 * t56;
t31 = pkin(3) * t116 - t33;
t132 = t31 * t96;
t131 = t46 * t96;
t129 = t93 * t98;
t128 = t96 * t63;
t127 = t96 * t97;
t126 = t97 * t63;
t113 = t101 * t102;
t108 = pkin(9) * t113;
t73 = -t102 * pkin(3) - t97 * pkin(10) - pkin(2);
t47 = t108 + (-pkin(11) * t97 + t73) * t96;
t123 = t100 * t47;
t121 = t101 * t97;
t68 = t101 * t73;
t43 = -pkin(11) * t121 + t68 + (-pkin(4) - t141) * t102;
t26 = t95 * t43 + t123;
t70 = t100 * t96 + t95 * t101;
t58 = t70 * t97;
t22 = -t58 * pkin(12) + t26;
t125 = t99 * t22;
t84 = t97 * pkin(9);
t72 = pkin(4) * t127 + t84;
t122 = t101 * t63;
t87 = t92 ^ 2;
t120 = t103 * t87;
t119 = t31 * t101;
t118 = t46 * t101;
t117 = t63 * t102;
t115 = t96 * t101;
t114 = t96 * t102;
t112 = t99 * t137;
t111 = 0.2e1 * t116;
t110 = t97 * t144;
t107 = t97 * t116;
t106 = t102 * t116;
t28 = t100 * t46 - t95 * t45;
t6 = t100 * t11 - t95 * t13;
t4 = -t28 * pkin(12) + t139 + t6;
t1 = t99 * t4 - t94 * t5;
t25 = t100 * t43 - t95 * t47;
t59 = t104 * t97;
t19 = -t59 * pkin(12) - t133 + t25;
t8 = t99 * t19 - t94 * t22;
t74 = t143 * t96;
t75 = t143 * t101;
t48 = -t100 * t74 - t95 * t75;
t82 = t86 + pkin(5);
t60 = -t94 * t137 + t99 * t82;
t2 = t94 * t4 + t136;
t105 = -pkin(3) * t97 + pkin(10) * t102;
t9 = t94 * t19 + t125;
t49 = t100 * t75 - t95 * t74;
t23 = t45 * pkin(4) + t31;
t91 = t102 ^ 2;
t90 = t101 ^ 2;
t89 = t97 ^ 2;
t88 = t96 ^ 2;
t67 = pkin(1) * t129 + t109;
t66 = t93 * t135 - t77;
t62 = t63 ^ 2;
t61 = t94 * t82 + t112;
t53 = t96 * t73 + t108;
t52 = -pkin(9) * t114 + t68;
t44 = t58 * pkin(5) + t72;
t41 = t104 * t94 + t99 * t70;
t40 = -t104 * t99 + t94 * t70;
t38 = pkin(12) * t104 + t49;
t37 = -t70 * pkin(12) + t48;
t36 = -t94 * t58 + t99 * t59;
t35 = t99 * t58 + t94 * t59;
t21 = t94 * t37 + t99 * t38;
t20 = t99 * t37 - t94 * t38;
t15 = -t94 * t27 + t99 * t28;
t14 = t99 * t27 + t94 * t28;
t12 = t27 * pkin(5) + t23;
t3 = [1, 0, 0, t87 * t98 ^ 2, 0.2e1 * t98 * t120, 0.2e1 * t92 * t129, t93 * t111, t93 ^ 2, 0.2e1 * pkin(1) * t120 + 0.2e1 * t66 * t93, -0.2e1 * t87 * t142 - 0.2e1 * t67 * t93, t64 ^ 2, t63 * t148, t116 * t148, t63 * t111, t87 * t103 ^ 2, -0.2e1 * t33 * t116 + 0.2e1 * t55 * t63, 0.2e1 * t34 * t116 + 0.2e1 * t55 * t64, t46 ^ 2, -0.2e1 * t46 * t45, t46 * t149, t45 * t150, t62, 0.2e1 * t16 * t63 + 0.2e1 * t31 * t45, -0.2e1 * t17 * t63 + 0.2e1 * t31 * t46, t28 ^ 2, -0.2e1 * t28 * t27, t28 * t149, t27 * t150, t62, 0.2e1 * t23 * t27 + 0.2e1 * t6 * t63, 0.2e1 * t23 * t28 - 0.2e1 * t7 * t63, t15 ^ 2, -0.2e1 * t15 * t14, t15 * t149, t14 * t150, t62, 0.2e1 * t1 * t63 + 0.2e1 * t12 * t14, 0.2e1 * t12 * t15 - 0.2e1 * t2 * t63; 0, 0, 0, 0, 0, t130, t116, t93, t66, -t67, t64 * t97, t64 * t102 - t126, -t107, -t106, 0, -pkin(2) * t63 + pkin(9) * t107 - t55 * t102, -pkin(2) * t64 + pkin(9) * t106 + t55 * t97, t97 * t118 (-t101 * t45 - t131) * t97, -t46 * t102 + t63 * t121, t45 * t102 - t96 * t126, -t117, -t16 * t102 + t52 * t63 + (pkin(9) * t45 + t132) * t97, t17 * t102 - t53 * t63 + (pkin(9) * t46 + t119) * t97, t28 * t59, -t59 * t27 - t28 * t58, -t28 * t102 + t59 * t63, t27 * t102 - t58 * t63, -t117, -t6 * t102 + t23 * t58 + t25 * t63 + t72 * t27, t7 * t102 + t23 * t59 - t26 * t63 + t72 * t28, t15 * t36, -t36 * t14 - t15 * t35, -t15 * t102 + t36 * t63, t14 * t102 - t35 * t63, -t117, -t1 * t102 + t12 * t35 + t44 * t14 + t8 * t63, t2 * t102 + t12 * t36 + t44 * t15 - t9 * t63; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t89, t110, 0, 0, 0, pkin(2) * t144, pkin(2) * t146, t90 * t89, -0.2e1 * t89 * t115, t113 * t146, t96 * t110, t91, -0.2e1 * t52 * t102 + 0.2e1 * t89 * t141, 0.2e1 * t89 * pkin(9) * t101 + 0.2e1 * t53 * t102, t59 ^ 2, -0.2e1 * t59 * t58, t59 * t145, t58 * t144, t91, -0.2e1 * t25 * t102 + 0.2e1 * t72 * t58, 0.2e1 * t26 * t102 + 0.2e1 * t72 * t59, t36 ^ 2, -0.2e1 * t36 * t35, t36 * t145, t35 * t144, t91, -0.2e1 * t8 * t102 + 0.2e1 * t44 * t35, 0.2e1 * t9 * t102 + 0.2e1 * t44 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, -t63, -t116, t33, -t34, t131, -t96 * t45 + t118, t128, t122, 0, -pkin(3) * t45 - pkin(10) * t128 - t119, -pkin(3) * t46 - pkin(10) * t122 + t132, t28 * t70, t104 * t28 - t70 * t27, t70 * t63, t104 * t63, 0, -t104 * t23 + t83 * t27 + t48 * t63, t23 * t70 + t83 * t28 - t49 * t63, t15 * t41, -t41 * t14 - t15 * t40, t41 * t63, -t40 * t63, 0, t12 * t40 + t54 * t14 + t20 * t63, t12 * t41 + t54 * t15 - t21 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t102, 0, -t84, -t102 * pkin(9), t97 * t115 (-t88 + t90) * t97, -t114, -t113, 0, -pkin(9) * t121 + t105 * t96, pkin(9) * t127 + t105 * t101, t59 * t70, t104 * t59 - t70 * t58, -t70 * t102, -t104 * t102, 0, -t48 * t102 - t104 * t72 + t83 * t58, t49 * t102 + t83 * t59 + t72 * t70, t36 * t41, -t41 * t35 - t36 * t40, -t41 * t102, t40 * t102, 0, -t20 * t102 + t54 * t35 + t44 * t40, t21 * t102 + t54 * t36 + t44 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t88, 0.2e1 * t115, 0, 0, 0, 0.2e1 * pkin(3) * t101, -0.2e1 * pkin(3) * t96, t70 ^ 2, 0.2e1 * t70 * t104, 0, 0, 0, -t104 * t147, t70 * t147, t41 ^ 2, -0.2e1 * t41 * t40, 0, 0, 0, t40 * t151, t41 * t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t45, t63, t16, -t17, 0, 0, t28, -t27, t63, t63 * t86 + t6, -t124 + (-t11 - t140) * t95, 0, 0, t15, -t14, t63, t60 * t63 + t1, -t61 * t63 - t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, -t127, -t102, t52, -t53, 0, 0, t59, -t58, -t102, -t100 * t134 + t25, -t123 + (-t43 + t134) * t95, 0, 0, t36, -t35, -t102, -t60 * t102 + t8, t61 * t102 - t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, t101, 0, -t96 * pkin(10), -t101 * pkin(10), 0, 0, t70, t104, 0, t48, -t49, 0, 0, t41, -t40, 0, t20, -t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t86, -0.2e1 * t137, 0, 0, 0, 0, 1, 0.2e1 * t60, -0.2e1 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t27, t63, t6, -t7, 0, 0, t15, -t14, t63, t63 * t85 + t1, -t136 + (-t4 - t139) * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, -t58, -t102, t25, -t26, 0, 0, t36, -t35, -t102, -t133 * t99 + t8, -t125 + (-t19 + t133) * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, t104, 0, t48, -t49, 0, 0, t41, -t40, 0, t20, -t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t86, -t137, 0, 0, 0, 0, 1, t60 + t85, -t112 + (-pkin(5) - t82) * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t85, -0.2e1 * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, -t14, t63, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t35, -t102, t8, -t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, -t40, 0, t20, -t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t60, -t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t85, -t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t3;
