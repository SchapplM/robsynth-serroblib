% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:47
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR7_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 12:33:24
% EndTime: 2019-05-08 12:33:42
% DurationCPUTime: 3.88s
% Computational Cost: add. (6233->332), mult. (14163->630), div. (0->0), fcn. (16306->12), ass. (0->145)
t105 = cos(pkin(6));
t109 = sin(qJ(3));
t114 = cos(qJ(3));
t104 = sin(pkin(6));
t110 = sin(qJ(2));
t139 = t104 * t110;
t69 = -t105 * t114 + t109 * t139;
t68 = t69 ^ 2;
t107 = sin(qJ(5));
t108 = sin(qJ(4));
t112 = cos(qJ(5));
t113 = cos(qJ(4));
t76 = t107 * t108 - t112 * t113;
t94 = -t113 * pkin(4) - pkin(3);
t59 = t76 * pkin(5) + t94;
t173 = 0.2e1 * t59;
t172 = -0.2e1 * t69;
t171 = 0.2e1 * t69;
t71 = t105 * t109 + t114 * t139;
t170 = -0.2e1 * t71;
t169 = 0.2e1 * t94;
t168 = 0.2e1 * t104;
t167 = -0.2e1 * t109;
t166 = -0.2e1 * t114;
t165 = 0.2e1 * t114;
t164 = -pkin(11) - pkin(10);
t163 = t69 * pkin(4);
t162 = t69 * pkin(5);
t161 = pkin(1) * t110;
t115 = cos(qJ(2));
t160 = pkin(1) * t115;
t159 = pkin(3) * t113;
t158 = pkin(9) * t108;
t101 = t109 ^ 2;
t157 = t101 * pkin(9);
t106 = sin(qJ(6));
t156 = t106 * pkin(5);
t155 = t107 * pkin(4);
t96 = t109 * pkin(9);
t111 = cos(qJ(6));
t97 = t111 * pkin(5);
t138 = t104 * t115;
t49 = t71 * t108 + t113 * t138;
t51 = -t108 * t138 + t71 * t113;
t28 = t107 * t51 + t112 * t49;
t87 = pkin(8) * t139;
t60 = t87 + (-pkin(2) - t160) * t105;
t32 = t69 * pkin(3) - t71 * pkin(10) + t60;
t126 = pkin(8) * t138;
t61 = t126 + (pkin(9) + t161) * t105;
t62 = (-pkin(2) * t115 - pkin(9) * t110 - pkin(1)) * t104;
t36 = t109 * t62 + t114 * t61;
t34 = -pkin(10) * t138 + t36;
t17 = -t108 * t34 + t113 * t32;
t11 = -t51 * pkin(11) + t163 + t17;
t18 = t108 * t32 + t113 * t34;
t13 = -t49 * pkin(11) + t18;
t149 = t112 * t13;
t7 = t107 * t11 + t149;
t5 = -t28 * pkin(12) + t7;
t154 = t111 * t5;
t98 = t112 * pkin(4);
t153 = t114 * pkin(4);
t152 = t114 * pkin(5);
t136 = t108 * t109;
t80 = pkin(4) * t136 + t96;
t151 = t108 * t69;
t132 = t113 * t114;
t127 = pkin(9) * t132;
t81 = -t114 * pkin(3) - t109 * pkin(10) - pkin(2);
t52 = t127 + (-pkin(11) * t109 + t81) * t108;
t148 = t112 * t52;
t133 = t113 * t109;
t75 = t113 * t81;
t47 = -pkin(11) * t133 + t75 + (-pkin(4) - t158) * t114;
t27 = t107 * t47 + t148;
t78 = t107 * t113 + t112 * t108;
t63 = t78 * t109;
t23 = -t63 * pkin(12) + t27;
t150 = t111 * t23;
t147 = t113 * t69;
t99 = t104 ^ 2;
t146 = t115 * t99;
t35 = -t109 * t61 + t114 * t62;
t33 = pkin(3) * t138 - t35;
t145 = t33 * t108;
t144 = t33 * t113;
t143 = t49 * t113;
t142 = t51 * t108;
t141 = t69 * t114;
t140 = t71 * t109;
t137 = t105 * t110;
t135 = t108 * t113;
t134 = t108 * t114;
t100 = t108 ^ 2;
t102 = t113 ^ 2;
t131 = t100 + t102;
t130 = 0.2e1 * t138;
t129 = t109 * t165;
t128 = t111 * t155;
t125 = t109 * t138;
t124 = t114 * t138;
t123 = t108 * t133;
t30 = -t107 * t49 + t112 * t51;
t6 = -t107 * t13 + t112 * t11;
t4 = -t30 * pkin(12) + t162 + t6;
t1 = -t106 * t5 + t111 * t4;
t26 = -t107 * t52 + t112 * t47;
t65 = -t107 * t136 + t112 * t133;
t20 = -t65 * pkin(12) - t152 + t26;
t8 = -t106 * t23 + t111 * t20;
t82 = t164 * t108;
t83 = t164 * t113;
t53 = t107 * t83 + t112 * t82;
t93 = t98 + pkin(5);
t66 = -t106 * t155 + t111 * t93;
t2 = t106 * t4 + t154;
t9 = t106 * t20 + t150;
t54 = t107 * t82 - t112 * t83;
t122 = -t17 * t108 + t18 * t113;
t57 = -pkin(9) * t134 + t75;
t58 = t108 * t81 + t127;
t121 = -t57 * t108 + t58 * t113;
t120 = -t35 * t109 + t36 * t114;
t24 = t49 * pkin(4) + t33;
t117 = pkin(9) ^ 2;
t103 = t114 ^ 2;
t95 = t101 * t117;
t90 = t99 * t115 ^ 2;
t74 = pkin(1) * t137 + t126;
t73 = t105 * t160 - t87;
t67 = t106 * t93 + t128;
t48 = t63 * pkin(5) + t80;
t45 = -t106 * t76 + t111 * t78;
t43 = t106 * t78 + t111 * t76;
t41 = -t76 * pkin(12) + t54;
t40 = -t78 * pkin(12) + t53;
t39 = -t106 * t63 + t111 * t65;
t37 = t106 * t65 + t111 * t63;
t22 = t106 * t40 + t111 * t41;
t21 = -t106 * t41 + t111 * t40;
t16 = -t106 * t28 + t111 * t30;
t14 = t106 * t30 + t111 * t28;
t12 = t28 * pkin(5) + t24;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t99 * t110 ^ 2, 0.2e1 * t110 * t146, t137 * t168, t90, t105 * t130, t105 ^ 2, 0.2e1 * pkin(1) * t146 + 0.2e1 * t73 * t105, -0.2e1 * t74 * t105 - 0.2e1 * t99 * t161 (-t110 * t73 + t115 * t74) * t168, t99 * pkin(1) ^ 2 + t73 ^ 2 + t74 ^ 2, t71 ^ 2, t69 * t170, t138 * t170, t68, t69 * t130, t90, -0.2e1 * t35 * t138 + 0.2e1 * t60 * t69, 0.2e1 * t36 * t138 + 0.2e1 * t60 * t71, -0.2e1 * t35 * t71 - 0.2e1 * t36 * t69, t35 ^ 2 + t36 ^ 2 + t60 ^ 2, t51 ^ 2, -0.2e1 * t51 * t49, t51 * t171, t49 ^ 2, t49 * t172, t68, 0.2e1 * t17 * t69 + 0.2e1 * t33 * t49, -0.2e1 * t18 * t69 + 0.2e1 * t33 * t51, -0.2e1 * t17 * t51 - 0.2e1 * t18 * t49, t17 ^ 2 + t18 ^ 2 + t33 ^ 2, t30 ^ 2, -0.2e1 * t30 * t28, t30 * t171, t28 ^ 2, t28 * t172, t68, 0.2e1 * t24 * t28 + 0.2e1 * t6 * t69, 0.2e1 * t24 * t30 - 0.2e1 * t7 * t69, -0.2e1 * t7 * t28 - 0.2e1 * t6 * t30, t24 ^ 2 + t6 ^ 2 + t7 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, t16 * t171, t14 ^ 2, t14 * t172, t68, 0.2e1 * t1 * t69 + 0.2e1 * t12 * t14, 0.2e1 * t12 * t16 - 0.2e1 * t2 * t69, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t12 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139, 0, t138, t105, t73, -t74, 0, 0, t140, -t109 * t69 + t71 * t114, -t125, -t141, -t124, 0, -pkin(2) * t69 + pkin(9) * t125 - t60 * t114, -pkin(2) * t71 + pkin(9) * t124 + t60 * t109 (t140 - t141) * pkin(9) + t120, -t60 * pkin(2) + pkin(9) * t120, t51 * t133 (-t142 - t143) * t109, -t51 * t114 + t69 * t133, t49 * t136, t49 * t114 - t69 * t136, -t141, -t17 * t114 + t57 * t69 + (pkin(9) * t49 + t145) * t109, t18 * t114 - t58 * t69 + (pkin(9) * t51 + t144) * t109, -t58 * t49 - t57 * t51 + (-t108 * t18 - t113 * t17) * t109, t17 * t57 + t18 * t58 + t33 * t96, t30 * t65, -t65 * t28 - t30 * t63, -t30 * t114 + t65 * t69, t28 * t63, t28 * t114 - t63 * t69, -t141, -t6 * t114 + t24 * t63 + t26 * t69 + t80 * t28, t7 * t114 + t24 * t65 - t27 * t69 + t80 * t30, -t26 * t30 - t27 * t28 - t6 * t65 - t7 * t63, t24 * t80 + t6 * t26 + t7 * t27, t16 * t39, -t39 * t14 - t16 * t37, -t16 * t114 + t39 * t69, t14 * t37, t14 * t114 - t37 * t69, -t141, -t1 * t114 + t12 * t37 + t48 * t14 + t8 * t69, t2 * t114 + t12 * t39 + t48 * t16 - t9 * t69, -t1 * t39 - t9 * t14 - t8 * t16 - t2 * t37, t1 * t8 + t12 * t48 + t2 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t101, t129, 0, t103, 0, 0, pkin(2) * t165, pkin(2) * t167, 0.2e1 * (t101 + t103) * pkin(9), pkin(2) ^ 2 + t103 * t117 + t95, t102 * t101, -0.2e1 * t101 * t135, t132 * t167, t100 * t101, t108 * t129, t103, 0.2e1 * t108 * t157 - 0.2e1 * t57 * t114, 0.2e1 * t113 * t157 + 0.2e1 * t58 * t114, 0.2e1 * (-t108 * t58 - t113 * t57) * t109, t57 ^ 2 + t58 ^ 2 + t95, t65 ^ 2, -0.2e1 * t65 * t63, t65 * t166, t63 ^ 2, -t63 * t166, t103, -0.2e1 * t26 * t114 + 0.2e1 * t80 * t63, 0.2e1 * t27 * t114 + 0.2e1 * t80 * t65, -0.2e1 * t26 * t65 - 0.2e1 * t27 * t63, t26 ^ 2 + t27 ^ 2 + t80 ^ 2, t39 ^ 2, -0.2e1 * t39 * t37, t39 * t166, t37 ^ 2, t37 * t165, t103, -0.2e1 * t8 * t114 + 0.2e1 * t48 * t37, 0.2e1 * t9 * t114 + 0.2e1 * t48 * t39, -0.2e1 * t9 * t37 - 0.2e1 * t8 * t39, t48 ^ 2 + t8 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, -t69, -t138, t35, -t36, 0, 0, t142, -t108 * t49 + t51 * t113, t151, -t143, t147, 0, -pkin(3) * t49 - pkin(10) * t151 - t144, -pkin(3) * t51 - pkin(10) * t147 + t145 (t142 - t143) * pkin(10) + t122, -t33 * pkin(3) + pkin(10) * t122, t30 * t78, -t78 * t28 - t30 * t76, t78 * t69, t28 * t76, -t76 * t69, 0, t24 * t76 + t94 * t28 + t53 * t69, t24 * t78 + t94 * t30 - t54 * t69, -t54 * t28 - t53 * t30 - t6 * t78 - t7 * t76, t24 * t94 + t6 * t53 + t7 * t54, t16 * t45, -t45 * t14 - t16 * t43, t45 * t69, t14 * t43, -t43 * t69, 0, t12 * t43 + t59 * t14 + t21 * t69, t12 * t45 + t59 * t16 - t22 * t69, -t1 * t45 - t22 * t14 - t21 * t16 - t2 * t43, t1 * t21 + t12 * t59 + t2 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, 0, t114, 0, -t96, -t114 * pkin(9), 0, 0, t123 (-t100 + t102) * t109, -t134, -t123, -t132, 0, -pkin(9) * t133 + (-pkin(3) * t109 + pkin(10) * t114) * t108, pkin(10) * t132 + (t158 - t159) * t109, t121, -pkin(3) * t96 + pkin(10) * t121, t65 * t78, -t78 * t63 - t65 * t76, -t78 * t114, t63 * t76, t76 * t114, 0, -t53 * t114 + t94 * t63 + t80 * t76, t54 * t114 + t94 * t65 + t80 * t78, -t26 * t78 - t27 * t76 - t53 * t65 - t54 * t63, t26 * t53 + t27 * t54 + t80 * t94, t39 * t45, -t45 * t37 - t39 * t43, -t45 * t114, t37 * t43, t43 * t114, 0, -t21 * t114 + t59 * t37 + t48 * t43, t22 * t114 + t59 * t39 + t48 * t45, -t21 * t39 - t22 * t37 - t9 * t43 - t8 * t45, t8 * t21 + t9 * t22 + t48 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t100, 0.2e1 * t135, 0, t102, 0, 0, 0.2e1 * t159, -0.2e1 * pkin(3) * t108, 0.2e1 * t131 * pkin(10), t131 * pkin(10) ^ 2 + pkin(3) ^ 2, t78 ^ 2, -0.2e1 * t78 * t76, 0, t76 ^ 2, 0, 0, t76 * t169, t78 * t169, -0.2e1 * t53 * t78 - 0.2e1 * t54 * t76, t53 ^ 2 + t54 ^ 2 + t94 ^ 2, t45 ^ 2, -0.2e1 * t45 * t43, 0, t43 ^ 2, 0, 0, t43 * t173, t45 * t173, -0.2e1 * t21 * t45 - 0.2e1 * t22 * t43, t21 ^ 2 + t22 ^ 2 + t59 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t49, t69, t17, -t18, 0, 0, 0, 0, t30, 0, -t28, t69, t69 * t98 + t6, -t149 + (-t11 - t163) * t107 (-t107 * t28 - t112 * t30) * pkin(4) (t107 * t7 + t112 * t6) * pkin(4), 0, 0, t16, 0, -t14, t69, t66 * t69 + t1, -t67 * t69 - t2, -t67 * t14 - t66 * t16, t1 * t66 + t2 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133, 0, -t136, -t114, t57, -t58, 0, 0, 0, 0, t65, 0, -t63, -t114, -t112 * t153 + t26, -t148 + (-t47 + t153) * t107 (-t107 * t63 - t112 * t65) * pkin(4) (t107 * t27 + t112 * t26) * pkin(4), 0, 0, t39, 0, -t37, -t114, -t66 * t114 + t8, t67 * t114 - t9, -t67 * t37 - t66 * t39, t8 * t66 + t9 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, t113, 0, -t108 * pkin(10), -t113 * pkin(10), 0, 0, 0, 0, t78, 0, -t76, 0, t53, -t54 (-t107 * t76 - t112 * t78) * pkin(4) (t107 * t54 + t112 * t53) * pkin(4), 0, 0, t45, 0, -t43, 0, t21, -t22, -t67 * t43 - t66 * t45, t21 * t66 + t22 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t98, -0.2e1 * t155, 0 (t107 ^ 2 + t112 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t66, -0.2e1 * t67, 0, t66 ^ 2 + t67 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, -t28, t69, t6, -t7, 0, 0, 0, 0, t16, 0, -t14, t69, t69 * t97 + t1, -t154 + (-t4 - t162) * t106 (-t106 * t14 - t111 * t16) * pkin(5) (t1 * t111 + t106 * t2) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, -t63, -t114, t26, -t27, 0, 0, 0, 0, t39, 0, -t37, -t114, -t111 * t152 + t8, -t150 + (-t20 + t152) * t106 (-t106 * t37 - t111 * t39) * pkin(5) (t106 * t9 + t111 * t8) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, -t76, 0, t53, -t54, 0, 0, 0, 0, t45, 0, -t43, 0, t21, -t22 (-t106 * t43 - t111 * t45) * pkin(5) (t106 * t22 + t111 * t21) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t98, -t155, 0, 0, 0, 0, 0, 0, 0, 1, t66 + t97, -t128 + (-pkin(5) - t93) * t106, 0 (t106 * t67 + t111 * t66) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t97, -0.2e1 * t156, 0 (t106 ^ 2 + t111 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, t69, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, -t37, -t114, t8, -t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, 0, -t43, 0, t21, -t22, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t66, -t67, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t97, -t156, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
