% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 18:05
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 09:43:58
% EndTime: 2019-05-07 09:44:07
% DurationCPUTime: 2.11s
% Computational Cost: add. (3331->149), mult. (6202->266), div. (0->0), fcn. (7575->10), ass. (0->99)
t72 = sin(qJ(3));
t109 = t72 * pkin(2);
t75 = cos(qJ(3));
t62 = t75 * pkin(2);
t57 = t62 + pkin(3);
t68 = sin(pkin(11));
t69 = cos(pkin(11));
t44 = -t68 * t109 + t69 * t57;
t41 = pkin(4) + t44;
t71 = sin(qJ(5));
t108 = cos(qJ(5));
t96 = t69 * t109;
t46 = t68 * t57 + t96;
t89 = t108 * t46;
t29 = t71 * t41 + t89;
t27 = pkin(10) + t29;
t70 = sin(qJ(6));
t64 = t70 ^ 2;
t74 = cos(qJ(6));
t66 = t74 ^ 2;
t99 = t64 + t66;
t102 = t99 * t27;
t59 = t69 * pkin(3);
t55 = t59 + pkin(4);
t110 = t68 * pkin(3);
t87 = t108 * t110;
t47 = t71 * t55 + t87;
t43 = pkin(10) + t47;
t125 = t99 * t43;
t113 = -pkin(8) - pkin(7);
t120 = t75 * t113;
t121 = t72 * t113;
t124 = t120 * t69 - t121 * t68;
t123 = t120 * t68 + t121 * t69;
t73 = sin(qJ(2));
t76 = cos(qJ(2));
t49 = t72 * t73 - t75 * t76;
t51 = t72 * t76 + t75 * t73;
t31 = -t69 * t49 - t68 * t51;
t82 = t68 * t49 - t69 * t51;
t20 = -t108 * t82 + t71 * t31;
t122 = -0.2e1 * t20;
t13 = t31 * qJ(4) + t123 * t73 - t124 * t76;
t11 = t31 * pkin(9) + t13;
t12 = t82 * qJ(4) + t123 * t76 + t124 * t73;
t81 = pkin(9) * t82 + t12;
t5 = -t108 * t81 + t71 * t11;
t119 = t5 ^ 2;
t18 = -t108 * t31 - t71 * t82;
t118 = t18 ^ 2;
t58 = -t76 * pkin(2) - pkin(1);
t39 = t49 * pkin(3) + t58;
t21 = -t31 * pkin(4) + t39;
t117 = 0.2e1 * t21;
t116 = -0.2e1 * t82;
t115 = 0.2e1 * t58;
t114 = 0.2e1 * t76;
t112 = pkin(5) * t70;
t111 = t5 * t74;
t37 = t108 * t41;
t28 = -t71 * t46 + t37;
t26 = -pkin(5) - t28;
t107 = t26 * t74;
t53 = t108 * t55;
t45 = -t71 * t110 + t53;
t42 = -pkin(5) - t45;
t106 = t42 * t74;
t15 = t70 * t18;
t105 = t70 * t20;
t104 = t70 * t74;
t103 = t74 * t20;
t100 = pkin(10) * t99;
t65 = t73 ^ 2;
t67 = t76 ^ 2;
t98 = t65 + t67;
t97 = t18 * t122;
t91 = t113 * t76;
t90 = t113 * t73;
t86 = -pkin(5) * t20 - pkin(10) * t18;
t7 = t108 * t11 + t71 * t81;
t8 = t18 * pkin(5) - t20 * pkin(10) + t21;
t2 = -t70 * t7 + t74 * t8;
t3 = t74 * t7 + t70 * t8;
t85 = t2 * t74 + t3 * t70;
t1 = -t2 * t70 + t3 * t74;
t84 = -t18 * t27 + t20 * t26;
t83 = -t18 * t43 + t20 * t42;
t63 = pkin(5) * t74;
t54 = 0.2e1 * t104;
t38 = t42 * t70;
t34 = t72 * t90 - t75 * t91;
t33 = t72 * t91 + t75 * t90;
t24 = t26 * t70;
t17 = t20 ^ 2;
t16 = t74 * t18;
t14 = t70 * t103;
t9 = (-t64 + t66) * t20;
t4 = t5 * t70;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, t73 * t114, 0, t67, 0, 0, pkin(1) * t114, -0.2e1 * pkin(1) * t73, 0.2e1 * t98 * pkin(7), t98 * pkin(7) ^ 2 + pkin(1) ^ 2, t51 ^ 2, -0.2e1 * t51 * t49, 0, t49 ^ 2, 0, 0, t49 * t115, t51 * t115, -0.2e1 * t33 * t51 - 0.2e1 * t34 * t49, t33 ^ 2 + t34 ^ 2 + t58 ^ 2, t82 ^ 2, t31 * t116, 0, t31 ^ 2, 0, 0, -0.2e1 * t39 * t31, t39 * t116, 0.2e1 * t12 * t82 + 0.2e1 * t13 * t31, t12 ^ 2 + t13 ^ 2 + t39 ^ 2, t17, t97, 0, t118, 0, 0, t18 * t117, t20 * t117, -0.2e1 * t7 * t18 + 0.2e1 * t5 * t20, t21 ^ 2 + t7 ^ 2 + t119, t66 * t17, -0.2e1 * t17 * t104, 0.2e1 * t18 * t103, t64 * t17, t70 * t97, t118, 0.2e1 * t5 * t105 + 0.2e1 * t2 * t18, 0.2e1 * t5 * t103 - 0.2e1 * t3 * t18, t85 * t122, t2 ^ 2 + t3 ^ 2 + t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t76, 0, -t73 * pkin(7), -t76 * pkin(7), 0, 0, 0, 0, t51, 0, -t49, 0, t33, -t34 (-t49 * t72 - t51 * t75) * pkin(2) (t33 * t75 + t34 * t72) * pkin(2), 0, 0, -t82, 0, t31, 0, t12, -t13, t46 * t31 + t44 * t82, t12 * t44 + t13 * t46, 0, 0, t20, 0, -t18, 0, -t5, -t7, -t29 * t18 - t28 * t20, -t5 * t28 + t7 * t29, t14, t9, t15, -t14, t16, 0, t70 * t84 - t111, t74 * t84 + t4, t1, t1 * t27 + t5 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t62, -0.2e1 * t109, 0 (t72 ^ 2 + t75 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t44, -0.2e1 * t46, 0, t44 ^ 2 + t46 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t28, -0.2e1 * t29, 0, t28 ^ 2 + t29 ^ 2, t64, t54, 0, t66, 0, 0, -0.2e1 * t107, 0.2e1 * t24, 0.2e1 * t102, t99 * t27 ^ 2 + t26 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t49, 0, t33, -t34, 0, 0, 0, 0, -t82, 0, t31, 0, t12, -t13 (t31 * t68 + t69 * t82) * pkin(3) (t12 * t69 + t13 * t68) * pkin(3), 0, 0, t20, 0, -t18, 0, -t5, -t7, -t47 * t18 - t45 * t20, -t5 * t45 + t7 * t47, t14, t9, t15, -t14, t16, 0, t70 * t83 - t111, t74 * t83 + t4, t1, t1 * t43 + t5 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t62, -t109, 0, 0, 0, 0, 0, 0, 0, 1, t44 + t59, -t96 + (-pkin(3) - t57) * t68, 0 (t44 * t69 + t46 * t68) * pkin(3), 0, 0, 0, 0, 0, 1, t37 + t53 + (-t46 - t110) * t71, -t87 - t89 + (-t41 - t55) * t71, 0, t28 * t45 + t29 * t47, t64, t54, 0, t66, 0, 0 (-t26 - t42) * t74, t38 + t24, t125 + t102, t125 * t27 + t26 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t59, -0.2e1 * t110, 0 (t68 ^ 2 + t69 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t45, -0.2e1 * t47, 0, t45 ^ 2 + t47 ^ 2, t64, t54, 0, t66, 0, 0, -0.2e1 * t106, 0.2e1 * t38, 0.2e1 * t125, t99 * t43 ^ 2 + t42 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t82, 0, t39, 0, 0, 0, 0, 0, 0, t18, t20, 0, t21, 0, 0, 0, 0, 0, 0, t16, -t15, -t99 * t20, t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, 0, -t5, -t7, 0, 0, t14, t9, t15, -t14, t16, 0, t70 * t86 - t111, t74 * t86 + t4, t1, -t5 * pkin(5) + pkin(10) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t28, -t29, 0, 0, t64, t54, 0, t66, 0, 0, t63 - t107, t24 - t112, t100 + t102, -t26 * pkin(5) + pkin(10) * t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t45, -t47, 0, 0, t64, t54, 0, t66, 0, 0, t63 - t106, t38 - t112, t100 + t125, -t42 * pkin(5) + pkin(10) * t125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64, t54, 0, t66, 0, 0, 0.2e1 * t63, -0.2e1 * t112, 0.2e1 * t100, t99 * pkin(10) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, -t105, t18, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t74, 0, -t70 * t27, -t74 * t27, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t74, 0, -t70 * t43, -t74 * t43, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t70, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t74, 0, -t70 * pkin(10), -t74 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
