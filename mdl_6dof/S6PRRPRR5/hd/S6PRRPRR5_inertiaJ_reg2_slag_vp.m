% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:21
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRR5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR5_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 05:26:37
% EndTime: 2019-05-05 05:26:43
% DurationCPUTime: 1.98s
% Computational Cost: add. (1622->173), mult. (3615->337), div. (0->0), fcn. (4260->12), ass. (0->89)
t66 = sin(pkin(12));
t68 = cos(pkin(12));
t71 = sin(qJ(5));
t75 = cos(qJ(5));
t109 = -t71 * t66 + t75 * t68;
t69 = cos(pkin(6));
t72 = sin(qJ(3));
t76 = cos(qJ(3));
t67 = sin(pkin(6));
t73 = sin(qJ(2));
t95 = t67 * t73;
t39 = -t69 * t76 + t72 * t95;
t38 = t39 ^ 2;
t58 = -t68 * pkin(4) - pkin(3);
t33 = -pkin(5) * t109 + t58;
t108 = 0.2e1 * t33;
t107 = 0.2e1 * t58;
t106 = -0.2e1 * t76;
t105 = 0.2e1 * t76;
t104 = pkin(8) * t66;
t70 = sin(qJ(6));
t103 = t70 * pkin(5);
t60 = t72 * pkin(8);
t74 = cos(qJ(6));
t102 = t74 * pkin(5);
t49 = -t76 * pkin(3) - t72 * qJ(4) - pkin(2);
t43 = t68 * t49;
t93 = t68 * t72;
t23 = -pkin(9) * t93 + t43 + (-pkin(4) - t104) * t76;
t92 = t68 * t76;
t31 = pkin(8) * t92 + t66 * t49;
t97 = t66 * t72;
t27 = -pkin(9) * t97 + t31;
t11 = t71 * t23 + t75 * t27;
t47 = t75 * t66 + t71 * t68;
t34 = t47 * t72;
t9 = -t34 * pkin(10) + t11;
t101 = t74 * t9;
t100 = t76 * pkin(5);
t99 = t39 * t72;
t98 = t66 * t68;
t96 = t66 * t76;
t77 = cos(qJ(2));
t94 = t67 * t77;
t90 = t72 * t76;
t88 = pkin(9) + qJ(4);
t48 = pkin(4) * t97 + t60;
t61 = t66 ^ 2;
t63 = t68 ^ 2;
t87 = t61 + t63;
t86 = 0.2e1 * t90;
t85 = t66 * t93;
t10 = t75 * t23 - t71 * t27;
t36 = t109 * t72;
t6 = -t36 * pkin(10) + t10 - t100;
t1 = t74 * t6 - t70 * t9;
t50 = t88 * t66;
t51 = t88 * t68;
t28 = -t75 * t50 - t71 * t51;
t84 = -pkin(3) * t72 + qJ(4) * t76;
t41 = t69 * t72 + t76 * t95;
t25 = -t41 * t66 - t68 * t94;
t26 = t41 * t68 - t66 * t94;
t83 = -t25 * t66 + t26 * t68;
t30 = -pkin(8) * t96 + t43;
t82 = -t30 * t66 + t31 * t68;
t81 = t41 * t76 + t99;
t29 = -t71 * t50 + t75 * t51;
t79 = pkin(8) ^ 2;
t65 = t76 ^ 2;
t64 = t72 ^ 2;
t62 = t67 ^ 2;
t59 = t64 * t79;
t55 = t62 * t77 ^ 2;
t24 = t34 * pkin(5) + t48;
t22 = t109 * t70 + t74 * t47;
t20 = -t109 * t74 + t70 * t47;
t18 = pkin(10) * t109 + t29;
t17 = -t47 * pkin(10) + t28;
t16 = -t70 * t34 + t74 * t36;
t14 = t74 * t34 + t70 * t36;
t13 = t71 * t25 + t75 * t26;
t12 = t75 * t25 - t71 * t26;
t8 = t70 * t17 + t74 * t18;
t7 = t74 * t17 - t70 * t18;
t4 = t70 * t12 + t74 * t13;
t3 = t74 * t12 - t70 * t13;
t2 = t70 * t6 + t101;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62 * t73 ^ 2 + t69 ^ 2 + t55, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 ^ 2 + t38 + t55, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25 ^ 2 + t26 ^ 2 + t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 ^ 2 + t13 ^ 2 + t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t95, 0, 0, 0, 0, 0, 0, 0, 0, t76 * t94, -t72 * t94, t81, pkin(2) * t94 + t81 * pkin(8), 0, 0, 0, 0, 0, 0, -t25 * t76 + t39 * t97, t26 * t76 + t39 * t93 (-t25 * t68 - t26 * t66) * t72, pkin(8) * t99 + t25 * t30 + t26 * t31, 0, 0, 0, 0, 0, 0, -t12 * t76 + t39 * t34, t13 * t76 + t39 * t36, -t12 * t36 - t13 * t34, t12 * t10 + t13 * t11 + t39 * t48, 0, 0, 0, 0, 0, 0, t39 * t14 - t3 * t76, t39 * t16 + t4 * t76, -t14 * t4 - t16 * t3, t1 * t3 + t2 * t4 + t24 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64, t86, 0, t65, 0, 0, pkin(2) * t105, -0.2e1 * pkin(2) * t72, 0.2e1 * (t64 + t65) * pkin(8), pkin(2) ^ 2 + t65 * t79 + t59, t63 * t64, -0.2e1 * t64 * t98, -0.2e1 * t68 * t90, t61 * t64, t66 * t86, t65, 0.2e1 * t64 * t104 - 0.2e1 * t30 * t76, 0.2e1 * pkin(8) * t64 * t68 + 0.2e1 * t31 * t76, 0.2e1 * (-t30 * t68 - t31 * t66) * t72, t30 ^ 2 + t31 ^ 2 + t59, t36 ^ 2, -0.2e1 * t36 * t34, t36 * t106, t34 ^ 2, -t34 * t106, t65, -0.2e1 * t10 * t76 + 0.2e1 * t34 * t48, 0.2e1 * t11 * t76 + 0.2e1 * t36 * t48, -0.2e1 * t10 * t36 - 0.2e1 * t11 * t34, t10 ^ 2 + t11 ^ 2 + t48 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, t16 * t106, t14 ^ 2, t14 * t105, t65, -0.2e1 * t1 * t76 + 0.2e1 * t14 * t24, 0.2e1 * t16 * t24 + 0.2e1 * t2 * t76, -0.2e1 * t1 * t16 - 0.2e1 * t14 * t2, t1 ^ 2 + t2 ^ 2 + t24 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39, -t41, 0, 0, 0, 0, 0, 0, 0, 0, -t39 * t68, t39 * t66, t83, -t39 * pkin(3) + t83 * qJ(4), 0, 0, 0, 0, 0, 0, -t39 * t109, t39 * t47, t109 * t13 - t12 * t47, t12 * t28 + t13 * t29 + t39 * t58, 0, 0, 0, 0, 0, 0, t39 * t20, t39 * t22, -t20 * t4 - t22 * t3, t3 * t7 + t33 * t39 + t4 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t76, 0, -t60, -t76 * pkin(8), 0, 0, t85 (-t61 + t63) * t72, -t96, -t85, -t92, 0, -pkin(8) * t93 + t84 * t66, pkin(8) * t97 + t84 * t68, t82, -pkin(3) * t60 + t82 * qJ(4), t36 * t47, t109 * t36 - t34 * t47, -t47 * t76, -t34 * t109, -t109 * t76, 0, -t109 * t48 - t28 * t76 + t34 * t58, t29 * t76 + t36 * t58 + t47 * t48, -t10 * t47 + t109 * t11 - t28 * t36 - t29 * t34, t10 * t28 + t11 * t29 + t48 * t58, t16 * t22, -t14 * t22 - t16 * t20, -t22 * t76, t14 * t20, t20 * t76, 0, t14 * t33 + t20 * t24 - t7 * t76, t16 * t33 + t22 * t24 + t76 * t8, -t1 * t22 - t14 * t8 - t16 * t7 - t2 * t20, t1 * t7 + t2 * t8 + t24 * t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, 0.2e1 * t98, 0, t63, 0, 0, 0.2e1 * pkin(3) * t68, -0.2e1 * pkin(3) * t66, 0.2e1 * t87 * qJ(4), t87 * qJ(4) ^ 2 + pkin(3) ^ 2, t47 ^ 2, 0.2e1 * t47 * t109, 0, t109 ^ 2, 0, 0, -t109 * t107, t47 * t107, 0.2e1 * t109 * t29 - 0.2e1 * t28 * t47, t28 ^ 2 + t29 ^ 2 + t58 ^ 2, t22 ^ 2, -0.2e1 * t22 * t20, 0, t20 ^ 2, 0, 0, t20 * t108, t22 * t108, -0.2e1 * t20 * t8 - 0.2e1 * t7 * t22, t33 ^ 2 + t7 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t93, 0, t60, 0, 0, 0, 0, 0, 0, t34, t36, 0, t48, 0, 0, 0, 0, 0, 0, t14, t16, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t68, t66, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t109, t47, 0, t58, 0, 0, 0, 0, 0, 0, t20, t22, 0, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, -t13, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0 (t3 * t74 + t4 * t70) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, -t76, t10, -t11, 0, 0, 0, 0, t16, 0, -t14, -t76, -t74 * t100 + t1, -t101 + (-t6 + t100) * t70 (-t14 * t70 - t16 * t74) * pkin(5) (t1 * t74 + t2 * t70) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, t109, 0, t28, -t29, 0, 0, 0, 0, t22, 0, -t20, 0, t7, -t8 (-t20 * t70 - t22 * t74) * pkin(5) (t7 * t74 + t70 * t8) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t102, -0.2e1 * t103, 0 (t70 ^ 2 + t74 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, -t76, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, -t20, 0, t7, -t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t102, -t103, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
