% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP9_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP9_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RPRPRP9_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 18:06:53
% EndTime: 2019-05-05 18:06:58
% DurationCPUTime: 1.58s
% Computational Cost: add. (911->135), mult. (1769->229), div. (0->0), fcn. (1918->6), ass. (0->85)
t61 = sin(qJ(3));
t105 = cos(qJ(5));
t58 = sin(pkin(9));
t59 = cos(pkin(9));
t60 = sin(qJ(5));
t66 = t105 * t59 - t60 * t58;
t115 = t66 * t61;
t62 = cos(qJ(3));
t114 = t66 * t62;
t41 = t105 * t58 + t60 * t59;
t51 = -t59 * pkin(4) - pkin(3);
t12 = -pkin(5) * t66 - t41 * qJ(6) + t51;
t113 = -0.2e1 * t12;
t90 = t62 * t41;
t112 = t90 ^ 2;
t111 = t66 ^ 2;
t110 = 0.2e1 * t51;
t109 = 0.2e1 * t59;
t108 = 2 * qJ(2);
t107 = t61 * pkin(5);
t106 = t62 * pkin(3);
t43 = t61 * pkin(3) - t62 * qJ(4) + qJ(2);
t35 = t59 * t43;
t49 = t59 * t62;
t63 = -pkin(1) - pkin(7);
t96 = t58 * t63;
t13 = -pkin(8) * t49 + t35 + (pkin(4) - t96) * t61;
t92 = t61 * t63;
t23 = t58 * t43 + t59 * t92;
t97 = t58 * t62;
t17 = -pkin(8) * t97 + t23;
t4 = t105 * t17 + t60 * t13;
t87 = pkin(8) + qJ(4);
t44 = t87 * t59;
t78 = t87 * t58;
t19 = t105 * t78 + t60 * t44;
t104 = t19 * t61;
t21 = t105 * t44 - t60 * t78;
t103 = t21 * t61;
t102 = t90 * t66;
t101 = t114 * t90;
t100 = t41 * t66;
t33 = t41 * t61;
t56 = t62 ^ 2;
t99 = t56 * t63;
t98 = t58 * t59;
t94 = t61 * t90;
t89 = t62 * t61;
t88 = t62 * t63;
t53 = t58 ^ 2;
t54 = t59 ^ 2;
t86 = t53 + t54;
t55 = t61 ^ 2;
t47 = t55 + t56;
t85 = t61 * qJ(6);
t84 = -0.2e1 * t89;
t83 = t19 ^ 2 + t21 ^ 2;
t82 = t58 * t49;
t80 = t115 * t21 + t19 * t33;
t79 = t114 * t19 - t21 * t90;
t77 = -t105 * t13 + t60 * t17;
t76 = t114 * t33 - t115 * t90;
t75 = t115 * t66 + t33 * t41;
t37 = pkin(4) * t97 - t88;
t74 = t115 ^ 2 + t33 ^ 2 + t56;
t73 = t86 * qJ(4);
t72 = -qJ(4) * t61 - t106;
t22 = -t58 * t92 + t35;
t71 = -t22 * t58 + t23 * t59;
t70 = -t33 * t61 - t62 * t90;
t69 = t114 * t66 - t41 * t90;
t68 = t114 * t62 + t115 * t61;
t67 = 0.2e1 * t19 * t41 + 0.2e1 * t21 * t66;
t65 = qJ(2) ^ 2;
t57 = t63 ^ 2;
t52 = t56 * t57;
t42 = t47 * t63;
t36 = t41 ^ 2;
t26 = t114 ^ 2;
t24 = 0.2e1 * t114 * t61;
t16 = t114 * t41;
t5 = pkin(5) * t90 - qJ(6) * t114 + t37;
t2 = t77 - t107;
t1 = t85 + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t108, pkin(1) ^ 2 + t65, t56, t84, 0, t55, 0, 0, t61 * t108, t62 * t108, -0.2e1 * t42, t55 * t57 + t52 + t65, t54 * t56, -0.2e1 * t56 * t98, t89 * t109, t53 * t56, t58 * t84, t55, 0.2e1 * t22 * t61 - 0.2e1 * t56 * t96, -0.2e1 * t23 * t61 - 0.2e1 * t59 * t99, 0.2e1 * (-t22 * t59 - t23 * t58) * t62, t22 ^ 2 + t23 ^ 2 + t52, t26, -0.2e1 * t101, t24, t112, -0.2e1 * t94, t55, 0.2e1 * t37 * t90 - 0.2e1 * t61 * t77, 0.2e1 * t114 * t37 - 0.2e1 * t4 * t61, 0.2e1 * t114 * t77 - 0.2e1 * t4 * t90, t37 ^ 2 + t4 ^ 2 + t77 ^ 2, t26, t24, 0.2e1 * t101, t55, 0.2e1 * t94, t112, -0.2e1 * t2 * t61 + 0.2e1 * t5 * t90, -0.2e1 * t1 * t90 + 0.2e1 * t114 * t2, 0.2e1 * t1 * t61 - 0.2e1 * t114 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -t47, t42, 0, 0, 0, 0, 0, 0, -t47 * t58, -t47 * t59, 0, t61 * t71 + t99, 0, 0, 0, 0, 0, 0, t70, -t68, t76, t115 * t4 + t33 * t77 - t37 * t62, 0, 0, 0, 0, 0, 0, t70, t76, t68, t1 * t115 + t2 * t33 - t5 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86 * t55 + t56, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, -t61, 0, t88, -t92, 0, 0, t82 (-t53 + t54) * t62, t58 * t61, -t82, t59 * t61, 0, t72 * t58 + t59 * t88, -t58 * t88 + t72 * t59, t71, pkin(3) * t88 + qJ(4) * t71, t16, t69, t33, -t102, t115, 0, -t37 * t66 + t51 * t90 - t104, t114 * t51 + t37 * t41 - t103, t4 * t66 + t41 * t77 + t79, t19 * t77 + t4 * t21 + t37 * t51, t16, t33, -t69, 0, -t115, -t102, t12 * t90 - t5 * t66 - t104, t1 * t66 + t2 * t41 + t79, -t114 * t12 - t5 * t41 + t103, t1 * t21 + t5 * t12 + t2 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t61, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t97, t86 * t61, t61 * t73 + t106, 0, 0, 0, 0, 0, 0, t114, -t90, t75, -t62 * t51 + t80, 0, 0, 0, 0, 0, 0, t114, t75, t90, -t62 * t12 + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t53, 0.2e1 * t98, 0, t54, 0, 0, pkin(3) * t109, -0.2e1 * pkin(3) * t58, 0.2e1 * t73, t86 * qJ(4) ^ 2 + pkin(3) ^ 2, t36, 0.2e1 * t100, 0, t111, 0, 0, -t66 * t110, t41 * t110, t67, t51 ^ 2 + t83, t36, 0, -0.2e1 * t100, 0, 0, t111, t66 * t113, t67, t41 * t113, t12 ^ 2 + t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t49, 0, -t88, 0, 0, 0, 0, 0, 0, t90, t114, 0, t37, 0, 0, 0, 0, 0, 0, t90, 0, -t114, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t59, t58, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t66, t41, 0, t51, 0, 0, 0, 0, 0, 0, -t66, 0, -t41, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, 0, -t90, t61, -t77, -t4, 0, 0, 0, t114, 0, t61, t90, 0, -t77 + 0.2e1 * t107, -pkin(5) * t114 - qJ(6) * t90, 0.2e1 * t85 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -t115, 0, 0, 0, 0, 0, 0, 0, 0, -t33, 0, t115, -pkin(5) * t33 + qJ(6) * t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, t66, 0, -t19, -t21, 0, 0, 0, t41, 0, 0, -t66, 0, -t19, -pkin(5) * t41 + qJ(6) * t66, t21, -t19 * pkin(5) + t21 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, t114, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
