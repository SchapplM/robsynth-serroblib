% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 08:32
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRPPRP2_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 09:11:41
% EndTime: 2019-05-06 09:11:45
% DurationCPUTime: 1.33s
% Computational Cost: add. (924->107), mult. (1664->176), div. (0->0), fcn. (1903->6), ass. (0->86)
t58 = sin(pkin(9));
t59 = cos(pkin(9));
t61 = sin(qJ(2));
t63 = cos(qJ(2));
t36 = t58 * t61 - t59 * t63;
t34 = t36 ^ 2;
t38 = t58 * t63 + t59 * t61;
t35 = t38 ^ 2;
t90 = t58 * pkin(2);
t49 = qJ(4) + t90;
t98 = t49 ^ 2;
t53 = -t63 * pkin(2) - pkin(1);
t68 = -t38 * qJ(4) + t53;
t12 = t36 * pkin(3) + t68;
t97 = -0.2e1 * t12;
t96 = 0.2e1 * t36;
t95 = 0.2e1 * t53;
t60 = sin(qJ(5));
t94 = 0.2e1 * t60;
t62 = cos(qJ(5));
t93 = 0.2e1 * t62;
t92 = 0.2e1 * t63;
t91 = t38 * pkin(5);
t89 = t59 * pkin(2);
t88 = t60 * pkin(5);
t80 = -qJ(3) - pkin(7);
t43 = t80 * t61;
t44 = t80 * t63;
t17 = -t59 * t43 - t58 * t44;
t9 = t38 * pkin(4) + t17;
t87 = t60 * t9;
t86 = t62 * pkin(5);
t85 = t38 * t36;
t84 = t49 * t36;
t54 = t60 ^ 2;
t83 = t54 * t36;
t25 = t60 * t36;
t26 = t60 * t38;
t29 = t62 * t36;
t82 = t62 * t38;
t81 = t62 * t60;
t56 = t62 ^ 2;
t79 = t54 + t56;
t55 = t61 ^ 2;
t57 = t63 ^ 2;
t78 = t55 + t57;
t77 = -0.2e1 * t85;
t76 = 0.2e1 * t85;
t19 = t58 * t43 - t59 * t44;
t75 = t17 ^ 2 + t19 ^ 2;
t52 = -pkin(3) - t89;
t7 = (pkin(3) + pkin(8)) * t36 + t68;
t74 = qJ(6) * t36 + t7;
t8 = t62 * t9;
t67 = -t74 * t60 + t8;
t2 = t67 + t91;
t3 = t74 * t62 + t87;
t73 = t2 * t62 + t3 * t60;
t72 = -t2 * t60 + t3 * t62;
t4 = -t60 * t7 + t8;
t5 = t62 * t7 + t87;
t1 = t4 * t62 + t5 * t60;
t71 = -t4 * t60 + t5 * t62;
t47 = -pkin(8) + t52;
t32 = (-qJ(6) + t47) * t60;
t42 = t62 * t47;
t33 = -t62 * qJ(6) + t42;
t70 = t32 * t62 - t33 * t60;
t69 = -t38 * t47 + t84;
t66 = 0.2e1 * t17 * t38 - 0.2e1 * t19 * t36;
t48 = -0.2e1 * t81;
t41 = t49 + t88;
t28 = t56 * t36;
t27 = t56 * t34;
t24 = t54 * t34;
t23 = t36 * t81;
t22 = 0.2e1 * t34 * t81;
t21 = t79 * t47;
t16 = t62 * t76;
t15 = t60 * t76;
t14 = t28 - t83;
t13 = t28 + t83;
t11 = t32 * t60 + t33 * t62;
t10 = -t36 * pkin(4) + t19;
t6 = (-pkin(4) - t86) * t36 + t19;
t18 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t55, t61 * t92, 0, t57, 0, 0, pkin(1) * t92, -0.2e1 * pkin(1) * t61, 0.2e1 * t78 * pkin(7), t78 * pkin(7) ^ 2 + pkin(1) ^ 2, t35, t77, 0, t34, 0, 0, t36 * t95, t38 * t95, t66, t53 ^ 2 + t75, 0, 0, 0, t35, t77, t34, t66, t36 * t97, t38 * t97, t12 ^ 2 + t75, t24, t22, t15, t27, t16, t35, -0.2e1 * t10 * t29 + 0.2e1 * t4 * t38, 0.2e1 * t10 * t25 - 0.2e1 * t5 * t38, t71 * t96, t10 ^ 2 + t4 ^ 2 + t5 ^ 2, t24, t22, t15, t27, t16, t35, 0.2e1 * t2 * t38 - 0.2e1 * t29 * t6, 0.2e1 * t6 * t25 - 0.2e1 * t3 * t38, t72 * t96, t2 ^ 2 + t3 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, 0, t63, 0, -t61 * pkin(7), -t63 * pkin(7), 0, 0, 0, 0, t38, 0, -t36, 0, -t17, -t19 (-t36 * t58 - t38 * t59) * pkin(2) (-t17 * t59 + t19 * t58) * pkin(2), 0, -t38, t36, 0, 0, 0, t52 * t38 - t84, t17, t19, t17 * t52 + t19 * t49, t23, t14, t82, -t23, -t26, 0, t10 * t60 - t62 * t69, t10 * t62 + t60 * t69, -t1, t1 * t47 + t10 * t49, t23, t14, t82, -t23, -t26, 0, -t29 * t41 + t33 * t38 + t6 * t60, t25 * t41 - t32 * t38 + t6 * t62, t70 * t36 - t73, t2 * t33 + t3 * t32 + t6 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t89, -0.2e1 * t90, 0 (t58 ^ 2 + t59 ^ 2) * pkin(2) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t52, 0.2e1 * t49, t52 ^ 2 + t98, t56, t48, 0, t54, 0, 0, t49 * t94, t49 * t93, -0.2e1 * t21, t47 ^ 2 * t79 + t98, t56, t48, 0, t54, 0, 0, t41 * t94, t41 * t93, -0.2e1 * t11, t32 ^ 2 + t33 ^ 2 + t41 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, t38, 0, t53, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, t12, 0, 0, 0, 0, 0, 0, -t26, -t82, t13, t71, 0, 0, 0, 0, 0, 0, -t26, -t82, t13, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, 0, t17, 0, 0, 0, 0, 0, 0, t82, -t26, 0, t1, 0, 0, 0, 0, 0, 0, t82, -t26, 0, t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t52, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t21, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, t29, t38, t4, -t5, 0, 0, 0, 0, t25, 0, t29, t38, t67 + 0.2e1 * t91, -t3, -pkin(5) * t25, t2 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, -t60, 0, t42, -t60 * t47, 0, 0, 0, 0, t62, 0, -t60, 0, t33, -t32, -t86, t33 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t62, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t62, 0, -t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t60, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t60, 0, t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, t25, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t62, 0, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t18;
