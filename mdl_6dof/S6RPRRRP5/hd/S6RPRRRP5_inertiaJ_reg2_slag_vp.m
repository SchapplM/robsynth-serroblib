% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:13
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP5_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:30:03
% EndTime: 2019-05-06 01:30:09
% DurationCPUTime: 1.84s
% Computational Cost: add. (1918->122), mult. (3636->211), div. (0->0), fcn. (4398->8), ass. (0->100)
t71 = sin(qJ(5));
t67 = t71 ^ 2;
t74 = cos(qJ(5));
t68 = t74 ^ 2;
t53 = t67 + t68;
t72 = sin(qJ(4));
t111 = t72 * pkin(3);
t59 = pkin(9) + t111;
t96 = t53 * t59;
t69 = sin(pkin(10));
t70 = cos(pkin(10));
t73 = sin(qJ(3));
t76 = cos(qJ(3));
t40 = -t69 * t73 + t70 * t76;
t41 = t69 * t76 + t70 * t73;
t75 = cos(qJ(4));
t32 = t40 * t72 + t41 * t75;
t123 = -0.2e1 * t32;
t100 = pkin(7) + qJ(2);
t44 = t100 * t69;
t45 = t100 * t70;
t34 = -t44 * t73 + t45 * t76;
t20 = pkin(8) * t40 + t34;
t33 = -t44 * t76 - t45 * t73;
t80 = -pkin(8) * t41 + t33;
t12 = t72 * t20 - t75 * t80;
t122 = t12 ^ 2;
t30 = -t40 * t75 + t41 * t72;
t28 = t30 ^ 2;
t58 = -pkin(2) * t70 - pkin(1);
t37 = -pkin(3) * t40 + t58;
t121 = 0.2e1 * t37;
t120 = 0.2e1 * t41;
t119 = 0.2e1 * t70;
t118 = -0.2e1 * t71;
t117 = -0.2e1 * t74;
t116 = pkin(5) * t30;
t115 = pkin(9) * t30;
t83 = pkin(5) * t71 - qJ(6) * t74;
t7 = t32 * t83 + t12;
t114 = t7 * t71;
t113 = t7 * t74;
t112 = t71 * pkin(9);
t110 = t74 * pkin(9);
t109 = t75 * pkin(3);
t60 = -pkin(4) - t109;
t108 = pkin(4) - t60;
t14 = t20 * t75 + t72 * t80;
t15 = pkin(4) * t30 - pkin(9) * t32 + t37;
t6 = t14 * t74 + t15 * t71;
t107 = t12 * t74;
t106 = t30 * t59;
t105 = t32 * t67;
t23 = t71 * t30;
t104 = t71 * t32;
t103 = t71 * t59;
t102 = t71 * t74;
t26 = t74 * t30;
t27 = t74 * t32;
t101 = t74 * t59;
t84 = pkin(5) * t74 + qJ(6) * t71;
t43 = -pkin(4) - t84;
t39 = t43 - t109;
t99 = -t39 - t43;
t98 = t96 * pkin(9);
t97 = t53 * t59 ^ 2;
t95 = t53 * pkin(9) ^ 2;
t94 = t53 * pkin(9);
t65 = t69 ^ 2;
t66 = t70 ^ 2;
t93 = t65 + t66;
t92 = qJ(6) * t30;
t91 = t30 * t104;
t29 = t32 ^ 2;
t90 = t29 * t102;
t89 = t14 * t71 - t15 * t74;
t88 = -pkin(4) * t32 - t115;
t3 = t92 + t6;
t4 = t89 - t116;
t1 = t3 * t74 + t4 * t71;
t87 = t3 * t71 - t4 * t74;
t86 = t6 * t71 - t74 * t89;
t2 = t6 * t74 + t71 * t89;
t85 = -t32 * t43 + t115;
t82 = -t32 * t39 + t106;
t81 = t32 * t60 - t106;
t55 = -0.2e1 * t102;
t54 = 0.2e1 * t102;
t42 = 0.2e1 * t94;
t36 = 0.2e1 * t96;
t35 = t94 + t96;
t25 = t68 * t32;
t24 = t68 * t29;
t22 = t67 * t29;
t21 = t71 * t27;
t18 = 0.2e1 * t30 * t27;
t17 = -t25 - t105;
t16 = -t25 + t105;
t9 = t12 * t71;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, t69 * t119, 0, t66, 0, 0, pkin(1) * t119, -0.2e1 * pkin(1) * t69, 0.2e1 * t93 * qJ(2), qJ(2) ^ 2 * t93 + pkin(1) ^ 2, t41 ^ 2, t40 * t120, 0, t40 ^ 2, 0, 0, -0.2e1 * t58 * t40, t58 * t120, -0.2e1 * t33 * t41 + 0.2e1 * t34 * t40, t33 ^ 2 + t34 ^ 2 + t58 ^ 2, t29, t30 * t123, 0, t28, 0, 0, t30 * t121, t32 * t121, 0.2e1 * t12 * t32 - 0.2e1 * t14 * t30, t14 ^ 2 + t37 ^ 2 + t122, t24, -0.2e1 * t90, t18, t22, -0.2e1 * t91, t28, 0.2e1 * t104 * t12 - 0.2e1 * t30 * t89, 0.2e1 * t12 * t27 - 0.2e1 * t30 * t6, t86 * t123, t6 ^ 2 + t89 ^ 2 + t122, t24, t18, 0.2e1 * t90, t28, 0.2e1 * t91, t22, 0.2e1 * t104 * t7 - 0.2e1 * t30 * t4, t87 * t123, -0.2e1 * t27 * t7 + 0.2e1 * t3 * t30, t3 ^ 2 + t4 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, t69, 0, -pkin(1), 0, 0, 0, 0, 0, 0, -t40, t41, 0, t58, 0, 0, 0, 0, 0, 0, t30, t32, 0, t37, 0, 0, 0, 0, 0, 0, t26, -t23, t17, t86, 0, 0, 0, 0, 0, 0, t26, t17, t23, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, 0, t40, 0, t33, -t34, 0, 0, 0, 0, t32, 0, -t30, 0, -t12, -t14 (-t30 * t72 - t32 * t75) * pkin(3) (-t12 * t75 + t14 * t72) * pkin(3), t21, -t16, t23, -t21, t26, 0, t71 * t81 - t107, t74 * t81 + t9, t2, t12 * t60 + t2 * t59, t21, t23, t16, 0, -t26, -t21, -t71 * t82 - t113, t1, t74 * t82 - t114, t1 * t59 + t7 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t109, -0.2e1 * t111, 0 (t72 ^ 2 + t75 ^ 2) * pkin(3) ^ 2, t67, t54, 0, t68, 0, 0, t60 * t117, 0.2e1 * t60 * t71, t36, t60 ^ 2 + t97, t67, 0, t55, 0, 0, t68, t39 * t117, t36, t39 * t118, t39 ^ 2 + t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t30, 0, -t12, -t14, 0, 0, t21, -t16, t23, -t21, t26, 0, t71 * t88 - t107, t74 * t88 + t9, t2, -t12 * pkin(4) + pkin(9) * t2, t21, t23, t16, 0, -t26, -t21, -t71 * t85 - t113, t1, t74 * t85 - t114, pkin(9) * t1 + t7 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t109, -t111, 0, 0, t67, t54, 0, t68, 0, 0, t108 * t74, -t108 * t71, t35, -pkin(4) * t60 + t98, t67, 0, t55, 0, 0, t68, t99 * t74, t35, t99 * t71, t39 * t43 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t67, t54, 0, t68, 0, 0, 0.2e1 * pkin(4) * t74, pkin(4) * t118, t42, pkin(4) ^ 2 + t95, t67, 0, t55, 0, 0, t68, t43 * t117, t42, t43 * t118, t43 ^ 2 + t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t104, t30, -t89, -t6, 0, 0, 0, t27, 0, t30, t104, 0, -t89 + 0.2e1 * t116, -t84 * t32, 0.2e1 * t92 + t6, -pkin(5) * t4 + qJ(6) * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t71, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t71, t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t103, -t101, 0, 0, 0, t71, 0, 0, -t74, 0, -t103, -t83, t101, -t83 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t112, -t110, 0, 0, 0, t71, 0, 0, -t74, 0, -t112, -t83, t110, -t83 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, t27, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
