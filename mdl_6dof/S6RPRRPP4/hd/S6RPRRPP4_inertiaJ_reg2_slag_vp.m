% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,theta2,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:41
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRPP4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPP4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRPP4_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 21:32:18
% EndTime: 2019-05-05 21:32:23
% DurationCPUTime: 1.68s
% Computational Cost: add. (1720->134), mult. (3359->258), div. (0->0), fcn. (3989->8), ass. (0->92)
t69 = sin(pkin(10));
t71 = cos(pkin(10));
t73 = sin(qJ(4));
t75 = cos(qJ(4));
t52 = t69 * t75 + t71 * t73;
t107 = cos(qJ(3));
t70 = sin(pkin(9));
t72 = cos(pkin(9));
t74 = sin(qJ(3));
t53 = t107 * t70 + t74 * t72;
t22 = t52 * t53;
t101 = t52 * t22;
t96 = t75 * t53;
t99 = t73 * t53;
t24 = -t69 * t99 + t71 * t96;
t48 = t69 * t73 - t71 * t75;
t15 = t24 * t48;
t120 = t15 + t101;
t119 = -0.2e1 * t53;
t118 = -t101 + t15;
t114 = t48 ^ 2;
t45 = t52 ^ 2;
t117 = t45 + t114;
t116 = t22 ^ 2;
t95 = pkin(7) + qJ(2);
t55 = t95 * t70;
t56 = t95 * t72;
t28 = t107 * t55 + t74 * t56;
t115 = t28 ^ 2;
t50 = -t107 * t72 + t74 * t70;
t44 = t50 ^ 2;
t113 = 0.2e1 * t50;
t63 = -t72 * pkin(2) - pkin(1);
t112 = 0.2e1 * t63;
t64 = -t75 * pkin(4) - pkin(3);
t111 = 0.2e1 * t64;
t110 = 0.2e1 * t72;
t27 = t50 * pkin(3) - t53 * pkin(8) + t63;
t91 = qJ(5) * t53;
t30 = t107 * t56 - t74 * t55;
t97 = t75 * t30;
t10 = t97 + (t27 - t91) * t73;
t11 = t75 * t27 - t73 * t30;
t8 = t50 * pkin(4) - t75 * t91 + t11;
t4 = t71 * t10 + t69 * t8;
t109 = t69 * pkin(4);
t108 = t71 * pkin(4);
t106 = t22 * t48;
t105 = t24 * t22;
t94 = -qJ(5) - pkin(8);
t57 = t94 * t75;
t86 = t94 * t73;
t35 = -t69 * t57 - t71 * t86;
t104 = t35 * t50;
t37 = -t71 * t57 + t69 * t86;
t103 = t37 * t50;
t33 = t48 * t52;
t102 = t50 * t22;
t32 = t50 * t48;
t34 = t52 * t50;
t100 = t73 * t50;
t98 = t73 * t75;
t65 = t70 ^ 2;
t66 = t72 ^ 2;
t93 = t65 + t66;
t67 = t73 ^ 2;
t68 = t75 ^ 2;
t92 = t67 + t68;
t90 = t50 * t119;
t1 = t50 * qJ(6) + t4;
t89 = t35 ^ 2 + t37 ^ 2;
t88 = t73 * t96;
t87 = t69 * t10 - t71 * t8;
t85 = -t37 * t22 + t35 * t24;
t84 = t48 * t35 + t52 * t37;
t18 = pkin(4) * t99 + t28;
t82 = -pkin(3) * t53 - pkin(8) * t50;
t12 = t73 * t27 + t97;
t81 = t11 * t75 + t12 * t73;
t80 = -t11 * t73 + t12 * t75;
t79 = 0.2e1 * t35 * t52 - 0.2e1 * t37 * t48;
t61 = pkin(5) + t108;
t58 = qJ(6) + t109;
t46 = t53 ^ 2;
t40 = t75 * t50;
t26 = t48 * pkin(5) - t52 * qJ(6) + t64;
t21 = t24 ^ 2;
t16 = t24 * t52;
t14 = t24 * t113;
t5 = t22 * pkin(5) - t24 * qJ(6) + t18;
t2 = -t50 * pkin(5) + t87;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, t70 * t110, 0, t66, 0, 0, pkin(1) * t110, -0.2e1 * pkin(1) * t70, 0.2e1 * t93 * qJ(2), t93 * qJ(2) ^ 2 + pkin(1) ^ 2, t46, t90, 0, t44, 0, 0, t50 * t112, t53 * t112, 0.2e1 * t28 * t53 - 0.2e1 * t30 * t50, t30 ^ 2 + t63 ^ 2 + t115, t68 * t46, -0.2e1 * t46 * t98, t96 * t113, t67 * t46, t73 * t90, t44, 0.2e1 * t11 * t50 + 0.2e1 * t28 * t99, -0.2e1 * t12 * t50 + 0.2e1 * t28 * t96, t81 * t119, t11 ^ 2 + t12 ^ 2 + t115, t21, -0.2e1 * t105, t14, t116, -0.2e1 * t102, t44, 0.2e1 * t18 * t22 - 0.2e1 * t50 * t87, 0.2e1 * t18 * t24 - 0.2e1 * t4 * t50, -0.2e1 * t4 * t22 + 0.2e1 * t24 * t87, t18 ^ 2 + t4 ^ 2 + t87 ^ 2, t21, t14, 0.2e1 * t105, t44, 0.2e1 * t102, t116, -0.2e1 * t2 * t50 + 0.2e1 * t5 * t22, -0.2e1 * t1 * t22 + 0.2e1 * t2 * t24, 0.2e1 * t1 * t50 - 0.2e1 * t5 * t24, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t72, t70, 0, -pkin(1), 0, 0, 0, 0, 0, 0, t50, t53, 0, t63, 0, 0, 0, 0, 0, 0, t40, -t100, -t92 * t53, t81, 0, 0, 0, 0, 0, 0, -t32, -t34, t118, t4 * t52 + t48 * t87, 0, 0, 0, 0, 0, 0, -t32, t118, t34, t1 * t52 + t2 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, -t50, 0, -t28, -t30, 0, 0, t88 (-t67 + t68) * t53, t100, -t88, t40, 0, -t28 * t75 + t82 * t73, t28 * t73 + t82 * t75, t80, -t28 * pkin(3) + t80 * pkin(8), t16, -t120, t34, t106, -t32, 0, t18 * t48 + t64 * t22 - t104, t18 * t52 + t64 * t24 - t103, -t4 * t48 + t52 * t87 + t85, t18 * t64 + t35 * t87 + t4 * t37, t16, t34, t120, 0, t32, t106, t26 * t22 + t5 * t48 - t104, -t1 * t48 + t2 * t52 + t85, -t26 * t24 - t5 * t52 + t103, t1 * t37 + t2 * t35 + t5 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t67, 0.2e1 * t98, 0, t68, 0, 0, 0.2e1 * pkin(3) * t75, -0.2e1 * pkin(3) * t73, 0.2e1 * t92 * pkin(8), t92 * pkin(8) ^ 2 + pkin(3) ^ 2, t45, -0.2e1 * t33, 0, t114, 0, 0, t48 * t111, t52 * t111, t79, t64 ^ 2 + t89, t45, 0, 0.2e1 * t33, 0, 0, t114, 0.2e1 * t26 * t48, t79, -0.2e1 * t26 * t52, t26 ^ 2 + t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, -t99, t50, t11, -t12, 0, 0, 0, 0, t24, 0, -t22, t50, t50 * t108 - t87, -t50 * t109 - t4 (-t22 * t69 - t24 * t71) * pkin(4) (t4 * t69 - t71 * t87) * pkin(4), 0, t24, 0, t50, t22, 0 (pkin(5) + t61) * t50 - t87, -t58 * t22 - t61 * t24, t58 * t50 + t1, t1 * t58 - t2 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, -t73, 0, 0, 0, 0, 0, 0, 0, 0, -t48, -t52, 0 (-t48 * t71 + t52 * t69) * pkin(4), 0, 0, 0, 0, 0, 0, -t48, 0, t52, -t48 * t61 + t52 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t75, 0, -t73 * pkin(8), -t75 * pkin(8), 0, 0, 0, 0, t52, 0, -t48, 0, -t35, -t37 (-t48 * t69 - t52 * t71) * pkin(4) (-t35 * t71 + t37 * t69) * pkin(4), 0, t52, 0, 0, t48, 0, -t35, -t58 * t48 - t61 * t52, t37, -t35 * t61 + t37 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t109, 0 (t69 ^ 2 + t71 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t61, 0, 0.2e1 * t58, t58 ^ 2 + t61 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, t24, 0, t18, 0, 0, 0, 0, 0, 0, t22, 0, -t24, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t52, 0, t64, 0, 0, 0, 0, 0, 0, t48, 0, -t52, t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t24, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, 0, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
