% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRRRRR10V2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d4,d6]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-19 10:42
% Revision: caa0dbda1e8a16d11faaa29ba3bbef6afcd619f7 (2020-05-25)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRRRRR10V2_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S6RRRRRR10V2_invdynJ_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-19 10:34:33
% EndTime: 2020-06-19 10:35:04
% DurationCPUTime: 19.01s
% Computational Cost: add. (53459->521), mult. (106037->773), div. (0->0), fcn. (82820->12), ass. (0->362)
t336 = sin(qJ(6));
t339 = sin(qJ(3));
t345 = cos(qJ(2));
t340 = sin(qJ(2));
t344 = cos(qJ(3));
t404 = t340 * t344;
t361 = t339 * t345 + t404;
t313 = t361 * qJD(1);
t333 = qJD(2) + qJD(3);
t338 = sin(qJ(4));
t343 = cos(qJ(4));
t299 = t313 * t343 + t333 * t338;
t405 = t339 * t340;
t311 = (-t345 * t344 + t405) * qJD(1);
t308 = qJD(4) + t311;
t337 = sin(qJ(5));
t342 = cos(qJ(5));
t277 = t299 * t342 + t308 * t337;
t297 = t313 * t338 - t343 * t333;
t328 = t340 * qJDD(1);
t394 = qJD(1) * qJD(2);
t380 = t345 * t394;
t320 = t328 + t380;
t381 = t340 * t394;
t393 = t345 * qJDD(1);
t358 = -t381 + t393;
t279 = -t311 * qJD(3) + t344 * t320 + t339 * t358;
t332 = qJDD(2) + qJDD(3);
t362 = -t279 * t343 - t332 * t338;
t248 = -qJD(4) * t297 - t362;
t373 = t320 * t339 - t344 * t358;
t360 = qJD(3) * t313 + t373;
t278 = qJDD(4) + t360;
t375 = t248 * t337 - t342 * t278;
t193 = -qJD(5) * t277 - t375;
t192 = qJDD(6) - t193;
t294 = qJD(5) + t297;
t341 = cos(qJ(6));
t251 = t277 * t336 - t341 * t294;
t253 = t277 * t341 + t294 * t336;
t207 = t253 * t251;
t435 = t192 - t207;
t442 = t336 * t435;
t275 = t299 * t337 - t342 * t308;
t242 = t277 * t275;
t374 = t279 * t338 - t343 * t332;
t247 = -qJD(4) * t299 - t374;
t246 = qJDD(5) - t247;
t434 = -t242 + t246;
t441 = t337 * t434;
t270 = t299 * t297;
t433 = -t270 + t278;
t440 = t338 * t433;
t439 = t341 * t435;
t438 = t342 * t434;
t437 = t343 * t433;
t357 = 0.2e1 * t381 - t393;
t354 = t357 * pkin(2);
t290 = t313 * t311;
t284 = -t290 + t332;
t436 = t284 * t344;
t347 = qJD(1) ^ 2;
t428 = sin(qJ(1));
t429 = cos(qJ(1));
t356 = t429 * g(1) + t428 * g(2);
t318 = -t347 * pkin(1) - t356;
t302 = g(3) * t345 + t318 * t340;
t323 = t345 * t347 * t340;
t370 = qJDD(2) + t323;
t351 = pkin(2) * t370 - t302;
t303 = -g(3) * t340 + t318 * t345;
t330 = t345 ^ 2 * t347;
t346 = qJD(2) ^ 2;
t293 = (-t346 - t330) * pkin(2) + t303;
t401 = t344 * t293;
t266 = t339 * t351 + t401;
t287 = pkin(3) * t311 - pkin(5) * t313;
t331 = t333 ^ 2;
t236 = -t331 * pkin(3) + t332 * pkin(5) - t311 * t287 + t266;
t260 = (qJD(3) + t333) * t313 + t373;
t355 = t428 * g(1) - t429 * g(2);
t317 = qJDD(1) * pkin(1) + t355;
t305 = t333 * t311;
t432 = -t305 + t279;
t348 = -pkin(5) * t432 - t317;
t161 = t236 * t338 - t343 * (t260 * pkin(3) + t348 + t354);
t159 = t338 * t161;
t350 = t343 * t236 + t338 * t354;
t162 = t338 * (t348 + (t313 * t333 + t360) * pkin(3)) + t350;
t100 = t343 * t162 + t159;
t364 = -t248 * t342 - t278 * t337;
t194 = -qJD(5) * t275 - t364;
t258 = t294 * t275;
t180 = t194 - t258;
t197 = t242 + t246;
t430 = t294 ^ 2;
t431 = t277 ^ 2;
t237 = -t430 - t431;
t273 = qJD(6) + t275;
t376 = t194 * t336 - t341 * t246;
t126 = (qJD(6) - t273) * t253 + t376;
t177 = (qJD(5) - t294) * t277 + t375;
t227 = (qJD(4) - t308) * t299 + t374;
t249 = t251 ^ 2;
t250 = t253 ^ 2;
t271 = t273 ^ 2;
t274 = t275 ^ 2;
t295 = t297 ^ 2;
t296 = t299 ^ 2;
t307 = t308 ^ 2;
t309 = t311 ^ 2;
t310 = t313 ^ 2;
t265 = t339 * t293 - t344 * t351;
t235 = -t332 * pkin(3) - t331 * pkin(5) + t287 * t313 + t265;
t143 = t162 * t337 - t342 * t235;
t144 = t162 * t342 + t235 * t337;
t367 = t143 * t342 - t144 * t337;
t84 = t143 * t337 + t342 * t144;
t57 = t343 * t84 + t159;
t427 = pkin(3) * t367 + pkin(5) * t57;
t353 = -t180 * pkin(6) + t161;
t97 = pkin(6) * t197 + t144;
t51 = t336 * t97 - t341 * t353;
t52 = t336 * t353 + t341 * t97;
t19 = t336 * t52 - t341 * t51;
t365 = -t194 * t341 - t246 * t336;
t150 = -qJD(6) * t251 - t365;
t221 = t273 * t251;
t130 = t150 + t221;
t71 = -t126 * t336 - t130 * t341;
t15 = -pkin(6) * t71 - t19;
t426 = t337 * t15;
t425 = -pkin(3) * t235 + pkin(5) * t100;
t121 = pkin(6) * t237 + t143;
t424 = t121 * t336;
t423 = t121 * t341;
t152 = t192 + t207;
t422 = t152 * t336;
t421 = t152 * t341;
t420 = t161 * t343;
t419 = t197 * t337;
t418 = t197 * t342;
t239 = t270 + t278;
t417 = t239 * t338;
t416 = t239 * t343;
t415 = t273 * t336;
t414 = t273 * t341;
t413 = t294 * t337;
t412 = t294 * t342;
t411 = t308 * t338;
t410 = t308 * t343;
t409 = t333 * t339;
t408 = t333 * t344;
t407 = t337 * t161;
t224 = t338 * t235;
t406 = t338 * t342;
t403 = t342 * t161;
t402 = t342 * t343;
t226 = t343 * t235;
t399 = qJD(4) + t308;
t397 = qJD(5) + t294;
t395 = qJD(6) + t273;
t392 = t337 * pkin(6) * t19;
t181 = t194 + t258;
t118 = t177 * t337 + t181 * t342;
t120 = -t177 * t342 + t181 * t337;
t214 = t274 + t431;
t90 = t120 * t343 - t214 * t338;
t391 = pkin(3) * t118 + pkin(5) * t90 + t338 * t367;
t390 = t337 * t207;
t389 = t342 * t207;
t388 = t338 * t242;
t387 = t343 * t242;
t386 = t339 * t270;
t385 = t344 * t270;
t267 = -t296 - t307;
t206 = -t267 * t338 - t416;
t232 = t399 * t297 + t362;
t384 = pkin(3) * t232 + pkin(5) * t206 + t224;
t259 = -t307 - t295;
t201 = t259 * t343 - t440;
t228 = -t399 * t299 - t374;
t383 = pkin(3) * t228 + pkin(5) * t201 - t226;
t382 = -pkin(3) * t344 - pkin(2);
t20 = t336 * t51 + t341 * t52;
t73 = -t126 * t341 + t130 * t336;
t14 = pkin(6) * t73 + t20;
t190 = t249 + t250;
t46 = -t190 * t337 + t342 * t73;
t25 = t338 * t71 + t343 * t46;
t45 = -t190 * t342 - t337 * t73;
t379 = pkin(3) * t45 + pkin(5) * t25 - t343 * t14 + t15 * t406;
t191 = -t271 - t249;
t104 = t191 * t336 + t439;
t59 = -pkin(6) * t104 + t424;
t22 = -t337 * t51 + t342 * t59;
t105 = t191 * t341 - t442;
t127 = -t395 * t253 - t376;
t63 = t105 * t342 - t127 * t337;
t32 = t104 * t338 + t343 * t63;
t60 = pkin(6) * t105 - t423;
t62 = -t105 * t337 - t127 * t342;
t378 = pkin(3) * t62 + pkin(5) * t32 + t338 * t22 - t343 * t60;
t195 = -t250 - t271;
t110 = t195 * t341 - t422;
t66 = -pkin(6) * t110 + t423;
t27 = -t337 * t52 + t342 * t66;
t111 = -t195 * t336 - t421;
t131 = t395 * t251 + t365;
t69 = t111 * t342 - t131 * t337;
t35 = t110 * t338 + t343 * t69;
t65 = pkin(6) * t111 + t424;
t68 = -t111 * t337 - t131 * t342;
t377 = pkin(3) * t68 + pkin(5) * t35 + t338 * t27 - t343 * t65;
t166 = -t237 * t337 - t418;
t182 = t397 * t275 + t364;
t109 = t166 * t343 - t182 * t338;
t165 = -t237 * t342 + t419;
t372 = pkin(3) * t165 + pkin(5) * t109 + t343 * t144 + t338 * t403;
t283 = t308 * t297;
t231 = t248 + t283;
t187 = -t227 * t343 + t231 * t338;
t255 = t295 + t296;
t371 = pkin(3) * t255 + pkin(5) * t187 + t100;
t369 = t337 * t59 + t342 * t51;
t368 = t337 * t66 + t342 * t52;
t366 = t162 * t338 - t420;
t363 = t265 * t344 - t266 * t339;
t234 = -t430 - t274;
t156 = t234 * t342 - t441;
t178 = -t397 * t277 - t375;
t103 = t156 * t343 - t178 * t338;
t155 = -t234 * t337 - t438;
t359 = pkin(3) * t155 + pkin(5) * t103 + t343 * t143 + t337 * t159;
t261 = (-qJD(3) + t333) * t313 - t373;
t17 = t121 * t342 - t20 * t337;
t18 = t121 * t337 + t20 * t342;
t7 = t18 * t343 + t19 * t338;
t352 = pkin(3) * t17 + pkin(5) * t7 + (-t19 * t406 - t343 * t20) * pkin(6);
t349 = t340 * (pkin(3) * t339 - pkin(5) * t344) + t345 * (-pkin(5) * t339 + t382) - pkin(1);
t329 = t340 ^ 2 * t347;
t319 = t328 + 0.2e1 * t380;
t301 = -t310 + t331;
t300 = t309 - t331;
t289 = t317 - t354;
t288 = t310 - t309;
t285 = t290 + t332;
t282 = -t296 + t307;
t281 = t295 - t307;
t280 = -t309 - t310;
t268 = t296 - t295;
t264 = t305 + t279;
t257 = t430 - t431;
t256 = t274 - t430;
t244 = (-t297 * t343 + t299 * t338) * t308;
t243 = (-t297 * t338 - t299 * t343) * t308;
t241 = -t274 + t431;
t230 = t248 - t283;
t220 = t248 * t343 - t299 * t411;
t219 = t248 * t338 + t299 * t410;
t218 = -t247 * t338 + t297 * t410;
t217 = t247 * t343 + t297 * t411;
t216 = -t250 + t271;
t215 = t249 - t271;
t213 = t281 * t343 - t417;
t212 = -t282 * t338 + t437;
t211 = t281 * t338 + t416;
t210 = t282 * t343 + t440;
t209 = (-t275 * t342 + t277 * t337) * t294;
t208 = (-t275 * t337 - t277 * t342) * t294;
t205 = t267 * t343 - t417;
t204 = t250 - t249;
t200 = t259 * t338 + t437;
t189 = t209 * t343 + t246 * t338;
t188 = t209 * t338 - t246 * t343;
t186 = t228 * t343 - t230 * t338;
t185 = -t227 * t338 - t231 * t343;
t184 = t228 * t338 + t230 * t343;
t176 = t256 * t342 - t419;
t175 = -t257 * t337 + t438;
t174 = t256 * t337 + t418;
t173 = t257 * t342 + t441;
t172 = (-t251 * t341 + t253 * t336) * t273;
t171 = (-t251 * t336 - t253 * t341) * t273;
t170 = t194 * t342 - t277 * t413;
t169 = t194 * t337 + t277 * t412;
t168 = -t193 * t337 + t275 * t412;
t167 = -t193 * t342 - t275 * t413;
t164 = -pkin(5) * t205 + t226;
t157 = -pkin(5) * t200 + t224;
t149 = -qJD(6) * t253 - t376;
t148 = t170 * t343 + t388;
t147 = t168 * t343 - t388;
t146 = t170 * t338 - t387;
t145 = t168 * t338 + t387;
t139 = t338 * t348 + (t260 * t338 - t205) * pkin(3) + t350;
t138 = t172 * t342 + t192 * t337;
t137 = t172 * t337 - t192 * t342;
t136 = -pkin(3) * t200 + t161;
t135 = t215 * t341 - t422;
t134 = -t216 * t336 + t439;
t133 = t215 * t336 + t421;
t132 = t216 * t341 + t442;
t129 = t150 - t221;
t125 = t150 * t341 - t253 * t415;
t124 = t150 * t336 + t253 * t414;
t123 = -t149 * t336 + t251 * t414;
t122 = -t149 * t341 - t251 * t415;
t119 = t178 * t342 - t180 * t337;
t117 = t178 * t337 + t180 * t342;
t115 = t176 * t343 - t177 * t338;
t114 = t175 * t343 + t181 * t338;
t113 = t176 * t338 + t177 * t343;
t112 = t175 * t338 - t181 * t343;
t108 = t166 * t338 + t182 * t343;
t102 = t156 * t338 + t178 * t343;
t96 = t119 * t343 + t241 * t338;
t95 = t119 * t338 - t241 * t343;
t94 = t125 * t342 + t390;
t93 = t123 * t342 - t390;
t92 = t125 * t337 - t389;
t91 = t123 * t337 + t389;
t89 = t120 * t338 + t214 * t343;
t87 = t138 * t343 + t171 * t338;
t86 = t138 * t338 - t171 * t343;
t79 = -pkin(3) * t108 - t407;
t78 = -pkin(3) * t102 + t403;
t77 = -t126 * t337 + t135 * t342;
t76 = t130 * t337 + t134 * t342;
t75 = t126 * t342 + t135 * t337;
t74 = -t130 * t342 + t134 * t337;
t72 = t127 * t341 - t129 * t336;
t70 = t127 * t336 + t129 * t341;
t54 = t204 * t337 + t342 * t72;
t53 = -t204 * t342 + t337 * t72;
t50 = t124 * t338 + t343 * t94;
t49 = -t122 * t338 + t343 * t93;
t48 = -t124 * t343 + t338 * t94;
t47 = t122 * t343 + t338 * t93;
t43 = -pkin(5) * t108 - t144 * t338 + t161 * t402;
t42 = -pkin(5) * t102 - t143 * t338 + t343 * t407;
t41 = t133 * t338 + t343 * t77;
t40 = t132 * t338 + t343 * t76;
t39 = -t133 * t343 + t338 * t77;
t38 = -t132 * t343 + t338 * t76;
t37 = -pkin(3) * t89 - t84;
t36 = -pkin(5) * t89 + t343 * t367;
t34 = -t110 * t343 + t338 * t69;
t31 = -t104 * t343 + t338 * t63;
t29 = t338 * t70 + t343 * t54;
t28 = t338 * t54 - t343 * t70;
t24 = t338 * t46 - t343 * t71;
t11 = -pkin(3) * t34 - t368;
t10 = -pkin(3) * t31 - t369;
t9 = -pkin(5) * t34 + t27 * t343 + t338 * t65;
t8 = -pkin(5) * t31 + t22 * t343 + t338 * t60;
t6 = t18 * t338 - t19 * t343;
t4 = -pkin(3) * t24 - t426;
t3 = -pkin(3) * t6 + t392;
t2 = -pkin(5) * t24 + t14 * t338 + t15 * t402;
t1 = -pkin(5) * t6 + (-t19 * t402 + t20 * t338) * pkin(6);
t5 = [0, 0, 0, 0, 0, qJDD(1), t355, t356, 0, 0, (t320 + t380) * t340, t319 * t345 - t340 * t357, t340 * t370 + t345 * (-t329 + t346), -t357 * t345, t340 * (t330 - t346) + t345 * (qJDD(2) - t323), 0, -pkin(1) * t357 + t317 * t345, -pkin(1) * t319 - t317 * t340, t340 * t302 + t345 * t303 + pkin(1) * (t329 + t330), pkin(1) * t317, t340 * (t279 * t344 - t313 * t409) + t345 * (t279 * t339 + t313 * t408), t340 * (-t260 * t344 - t339 * t432) + t345 * (-t260 * t339 + t344 * t432), t340 * (-t301 * t339 + t436) + t345 * (t284 * t339 + t301 * t344), t340 * (t311 * t408 + t339 * t360) + t345 * (t311 * t409 - t344 * t360), t340 * (-t339 * t285 + t300 * t344) + t345 * (t285 * t344 + t300 * t339), (t340 * (-t311 * t344 + t313 * t339) + t345 * (-t311 * t339 - t313 * t344)) * t333, -t289 * t405 + t345 * (-pkin(2) * t260 + t289 * t344) - pkin(1) * t260, -t289 * t404 + t345 * (-pkin(2) * t432 - t289 * t339) - pkin(1) * t432, t340 * t363 + t345 * (-pkin(2) * t280 + t265 * t339 + t266 * t344) - pkin(1) * t280, (t345 * pkin(2) + pkin(1)) * t289, t340 * (t220 * t344 + t386) + t345 * (t220 * t339 - t385), t340 * (t186 * t344 + t268 * t339) + t345 * (t186 * t339 - t268 * t344), t340 * (t212 * t344 + t231 * t339) + t345 * (t212 * t339 - t231 * t344), t340 * (t218 * t344 - t386) + t345 * (t218 * t339 + t385), t340 * (t213 * t344 - t227 * t339) + t345 * (t213 * t339 + t227 * t344), t340 * (t244 * t344 + t278 * t339) + t345 * (t244 * t339 - t278 * t344), t340 * (-t136 * t339 + t157 * t344) + t345 * (-pkin(2) * t200 + t136 * t344 + t157 * t339) - pkin(1) * t200, t340 * (-t139 * t339 + t164 * t344) + t345 * (-pkin(2) * t205 + t139 * t344 + t164 * t339) - pkin(1) * t205, t361 * (-pkin(5) * t185 - t366) + (pkin(3) * t405 + t345 * t382 - pkin(1)) * t185, t349 * t366, t340 * (t148 * t344 + t169 * t339) + t345 * (t148 * t339 - t169 * t344), t340 * (t117 * t339 + t344 * t96) + t345 * (-t117 * t344 + t339 * t96), t340 * (t114 * t344 + t173 * t339) + t345 * (t114 * t339 - t173 * t344), t340 * (t147 * t344 - t167 * t339) + t345 * (t147 * t339 + t167 * t344), t340 * (t115 * t344 + t174 * t339) + t345 * (t115 * t339 - t174 * t344), t340 * (t189 * t344 + t208 * t339) + t345 * (t189 * t339 - t208 * t344), t340 * (-t339 * t78 + t344 * t42) + t345 * (-pkin(2) * t102 + t339 * t42 + t344 * t78) - pkin(1) * t102, t340 * (-t339 * t79 + t344 * t43) + t345 * (-pkin(2) * t108 + t339 * t43 + t344 * t79) - pkin(1) * t108, t340 * (-t339 * t37 + t344 * t36) + t345 * (-pkin(2) * t89 + t339 * t36 + t344 * t37) - pkin(1) * t89, t349 * (t338 * t84 - t420), t340 * (t339 * t92 + t344 * t50) + t345 * (t339 * t50 - t344 * t92), t340 * (t29 * t344 + t339 * t53) + t345 * (t29 * t339 - t344 * t53), t340 * (t339 * t74 + t344 * t40) + t345 * (t339 * t40 - t344 * t74), t340 * (t339 * t91 + t344 * t49) + t345 * (t339 * t49 - t344 * t91), t340 * (t339 * t75 + t344 * t41) + t345 * (t339 * t41 - t344 * t75), t340 * (t137 * t339 + t344 * t87) + t345 * (-t137 * t344 + t339 * t87), t340 * (-t10 * t339 + t344 * t8) + t345 * (-pkin(2) * t31 + t10 * t344 + t339 * t8) - pkin(1) * t31, t340 * (-t11 * t339 + t344 * t9) + t345 * (-pkin(2) * t34 + t11 * t344 + t339 * t9) - pkin(1) * t34, t340 * (t2 * t344 - t339 * t4) + t345 * (-pkin(2) * t24 + t2 * t339 + t344 * t4) - pkin(1) * t24, t340 * (t1 * t344 - t3 * t339) + t345 * (-pkin(2) * t6 + t1 * t339 + t3 * t344) - pkin(1) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323, t329 - t330, t328, t323, t393, qJDD(2), -t302, -t303, 0, 0, t290, t288, t264, -t290, t261, t332, pkin(2) * (t339 * (-t331 - t309) + t436) - t265, -t401 + t339 * t302 + (t344 * (-t310 - t331) + (-t285 - t370) * t339) * pkin(2), pkin(2) * (t261 * t339 - t344 * t264), -pkin(2) * t363, t219, t184, t210, t217, t211, t243, pkin(2) * (t201 * t339 + t228 * t344) + t383, pkin(2) * (t206 * t339 + t232 * t344) + t384, pkin(2) * (t187 * t339 + t255 * t344) + t371, pkin(2) * (t100 * t339 - t235 * t344) + t425, t146, t95, t112, t145, t113, t188, pkin(2) * (t103 * t339 + t155 * t344) + t359, pkin(2) * (t109 * t339 + t165 * t344) + t372, pkin(2) * (t118 * t344 + t339 * t90) + t391, pkin(2) * (t339 * t57 + t344 * t367) + t427, t48, t28, t38, t47, t39, t86, pkin(2) * (t32 * t339 + t344 * t62) + t378, pkin(2) * (t339 * t35 + t344 * t68) + t377, pkin(2) * (t25 * t339 + t344 * t45) + t379, pkin(2) * (t17 * t344 + t339 * t7) + t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t290, t288, t264, -t290, t261, t332, -t265, -t266, 0, 0, t219, t184, t210, t217, t211, t243, t383, t384, t371, t425, t146, t95, t112, t145, t113, t188, t359, t372, t391, t427, t48, t28, t38, t47, t39, t86, t378, t377, t379, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, t268, t231, -t270, -t227, t278, -t161, -t162, 0, 0, t169, t117, t173, -t167, t174, t208, -t403, t407, t84, 0, t92, t53, t74, t91, t75, t137, t369, t368, t426, -t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t242, t241, t181, -t242, -t177, t246, -t143, -t144, 0, 0, t124, t70, t132, -t122, t133, t171, t60, t65, t14, pkin(6) * t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, t204, t130, -t207, -t126, t192, -t51, -t52, 0, 0;];
tauJ_reg = t5;
