% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRRRR10V2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d4,d6]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-06-19 10:42
% Revision: caa0dbda1e8a16d11faaa29ba3bbef6afcd619f7 (2020-05-25)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRRRR10V2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR10V2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRR10V2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRR10V2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRR10V2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S6RRRRRR10V2_invdynB_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-06-19 10:35:04
% EndTime: 2020-06-19 10:36:09
% DurationCPUTime: 59.11s
% Computational Cost: add. (161547->799), mult. (320216->1306), div. (0->0), fcn. (250889->12), ass. (0->624)
t1035 = sin(qJ(2));
t1034 = sin(qJ(3));
t1040 = cos(qJ(3));
t1041 = cos(qJ(2));
t1044 = qJD(1) ^ 2;
t1015 = t1041 * t1044 * t1035;
t1006 = qJDD(2) + t1015;
t1036 = sin(qJ(1));
t1042 = cos(qJ(1));
t1009 = t1042 * g(1) + t1036 * g(2);
t1048 = -t1044 * pkin(1) - t1009;
t978 = t1041 * g(3) + t1035 * t1048;
t1046 = pkin(2) * t1006 - t978;
t1030 = t1041 ^ 2;
t1025 = t1030 * t1044;
t1043 = qJD(2) ^ 2;
t1013 = -t1025 - t1043;
t979 = -g(3) * t1035 + t1041 * t1048;
t954 = pkin(2) * t1013 + t979;
t898 = t1034 * t954 - t1040 * t1046;
t899 = t1034 * t1046 + t1040 * t954;
t828 = t1034 * t899 - t1040 * t898;
t1137 = t1035 * t828;
t1136 = t1041 * t828;
t1091 = qJD(1) * qJD(2);
t1062 = t1035 * t1091;
t1023 = t1041 * qJDD(1);
t999 = t1023 - t1062;
t1135 = t999 - t1062;
t1031 = sin(qJ(6));
t1032 = sin(qJ(5));
t1038 = cos(qJ(5));
t1027 = qJDD(2) + qJDD(3);
t1033 = sin(qJ(4));
t1039 = cos(qJ(4));
t1081 = t1040 * t1041;
t1087 = t1034 * t1035;
t988 = (-t1081 + t1087) * qJD(1);
t1061 = t1041 * t1091;
t1076 = t1035 * qJDD(1);
t998 = t1061 + t1076;
t924 = -qJD(3) * t988 + t1034 * t999 + t1040 * t998;
t1028 = qJD(2) + qJD(3);
t1083 = t1035 * t1040;
t1086 = t1034 * t1041;
t990 = (t1083 + t1086) * qJD(1);
t961 = -t1039 * t1028 + t1033 * t990;
t873 = -t961 * qJD(4) + t1033 * t1027 + t1039 * t924;
t963 = t1028 * t1033 + t1039 * t990;
t984 = qJD(4) + t988;
t922 = t1032 * t984 + t1038 * t963;
t1058 = t1034 * t998 - t1040 * t999;
t1049 = -qJD(3) * t990 - t1058;
t923 = qJDD(4) - t1049;
t1072 = t922 * qJD(5) + t1032 * t873 - t1038 * t923;
t1056 = qJDD(6) + t1072;
t1037 = cos(qJ(6));
t958 = qJD(5) + t961;
t877 = t1031 * t922 - t1037 * t958;
t879 = t1031 * t958 + t1037 * t922;
t810 = t879 * t877;
t1124 = -t810 + t1056;
t1134 = t1031 * t1124;
t920 = t1032 * t963 - t1038 * t984;
t863 = t922 * t920;
t1057 = -t1039 * t1027 + t1033 * t924;
t872 = -qJD(4) * t963 - t1057;
t871 = qJDD(5) - t872;
t1126 = -t863 + t871;
t1133 = t1032 * t1126;
t912 = t963 * t961;
t1125 = -t912 + t923;
t1132 = t1033 * t1125;
t950 = t990 * t988;
t1123 = -t950 + t1027;
t1131 = t1034 * t1123;
t1130 = t1037 * t1124;
t1129 = t1038 * t1126;
t1128 = t1039 * t1125;
t1127 = t1040 * t1123;
t797 = -t920 * qJD(5) + t1032 * t923 + t1038 * t873;
t724 = -t877 * qJD(6) + t1031 * t871 + t1037 * t797;
t917 = qJD(6) + t920;
t841 = t917 * t877;
t700 = -t841 + t724;
t801 = t863 + t871;
t885 = t958 * t920;
t775 = -t885 + t797;
t982 = t1028 * t988;
t896 = t924 - t982;
t935 = t984 * t961;
t850 = -t935 + t873;
t1121 = t958 ^ 2;
t1122 = t922 ^ 2;
t856 = -t1121 - t1122;
t847 = (qJD(4) - t984) * t963 + t1057;
t893 = (qJD(3) - t1028) * t990 + t1058;
t1059 = t1031 * t797 - t1037 * t871;
t697 = (qJD(6) - t917) * t879 + t1059;
t875 = t877 ^ 2;
t876 = t879 ^ 2;
t915 = t917 ^ 2;
t919 = t920 ^ 2;
t959 = t961 ^ 2;
t960 = t963 ^ 2;
t983 = t984 ^ 2;
t986 = t988 ^ 2;
t987 = t990 ^ 2;
t1120 = t1028 ^ 2;
t926 = t1035 * t979 - t1041 * t978;
t1119 = pkin(1) * t926;
t1118 = pkin(3) * t1034;
t1117 = t922 * t958;
t892 = (qJD(3) + t1028) * t990 + t1058;
t1008 = t1036 * g(1) - t1042 * g(2);
t996 = qJDD(1) * pkin(1) + t1008;
t948 = t1135 * pkin(2) + t996;
t1045 = pkin(3) * t892 - pkin(5) * t896 - t948;
t946 = pkin(3) * t988 - pkin(5) * t990;
t855 = -pkin(3) * t1120 + pkin(5) * t1027 - t946 * t988 + t899;
t747 = t1033 * t1045 + t1039 * t855;
t854 = -t1027 * pkin(3) - t1120 * pkin(5) + t946 * t990 + t898;
t712 = t1032 * t854 + t1038 * t747;
t711 = t1032 * t747 - t1038 * t854;
t692 = pkin(6) * t856 + t711;
t1116 = t1031 * t692;
t726 = t810 + t1056;
t1115 = t1031 * t726;
t1114 = t1031 * t917;
t1113 = t1032 * t801;
t1112 = t1032 * t958;
t746 = t1033 * t855 - t1039 * t1045;
t1111 = t1033 * t746;
t1110 = t1033 * t854;
t860 = t912 + t923;
t1109 = t1033 * t860;
t1108 = t1033 * t984;
t942 = t950 + t1027;
t1107 = t1034 * t942;
t1106 = t1036 * t996;
t1105 = t1037 * t692;
t1104 = t1037 * t726;
t1103 = t1037 * t917;
t1102 = t1038 * t801;
t1101 = t1038 * t958;
t1100 = t1039 * t746;
t1099 = t1039 * t854;
t1098 = t1039 * t860;
t1097 = t1039 * t984;
t1096 = t1040 * t942;
t1095 = t1041 * t996;
t1094 = t1042 * t996;
t1090 = t1028 * t1034;
t1089 = t1028 * t1040;
t1088 = t1033 * t1038;
t1085 = t1035 * t1006;
t1007 = qJDD(2) - t1015;
t1084 = t1035 * t1007;
t1082 = t1038 * t1039;
t1080 = t1041 * t1007;
t1029 = t1035 ^ 2;
t1079 = t1044 * t1029;
t1077 = t1029 + t1030;
t1075 = t1036 * qJDD(1);
t1074 = t1042 * qJDD(1);
t1073 = pkin(2) * t1035 * t948;
t1071 = t1032 * t810;
t1070 = t1033 * t863;
t1069 = t1034 * t912;
t1068 = t1036 * t950;
t1067 = t1038 * t810;
t1066 = t1039 * t863;
t1065 = t1040 * t912;
t1064 = t1042 * t950;
t1063 = -pkin(3) * t1040 - pkin(2);
t832 = t1034 * t898 + t1040 * t899;
t928 = t1035 * t978 + t1041 * t979;
t965 = -t1008 * t1036 - t1042 * t1009;
t1055 = t1036 * t1015;
t1054 = t1042 * t1015;
t1053 = -pkin(5) * t1040 + t1118;
t1003 = -t1036 * t1044 + t1074;
t1052 = -pkin(4) * t1003 - g(3) * t1036;
t1047 = -pkin(6) * t775 + t746;
t668 = t801 * pkin(6) + t712;
t599 = t1031 * t668 - t1037 * t1047;
t600 = t1031 * t1047 + t1037 * t668;
t536 = t1031 * t600 - t1037 * t599;
t537 = t1031 * t599 + t1037 * t600;
t1051 = -t1032 * t712 + t1038 * t711;
t634 = t1032 * t711 + t1038 * t712;
t671 = t1033 * t747 - t1100;
t672 = t1039 * t747 + t1111;
t1050 = -pkin(5) * t1034 + t1063;
t774 = -t1072 + t1117;
t964 = t1042 * t1008 - t1036 * t1009;
t1012 = t1025 - t1043;
t1011 = -t1043 - t1079;
t1010 = t1043 - t1079;
t1005 = t1025 - t1079;
t1004 = t1025 + t1079;
t1002 = t1042 * t1044 + t1075;
t1001 = t1077 * qJDD(1);
t1000 = t1023 - 0.2e1 * t1062;
t997 = 0.2e1 * t1061 + t1076;
t994 = t1041 * t1006;
t993 = t1077 * t1091;
t985 = -pkin(4) * t1002 + t1042 * g(3);
t977 = -t987 + t1120;
t976 = t986 - t1120;
t975 = -t1029 * t1091 + t1041 * t998;
t974 = -t1030 * t1091 - t1035 * t999;
t972 = -t987 - t1120;
t971 = -t1035 * t1011 - t1080;
t970 = -t1010 * t1035 + t994;
t969 = t1013 * t1041 - t1085;
t968 = t1012 * t1041 - t1084;
t967 = t1011 * t1041 - t1084;
t966 = t1013 * t1035 + t994;
t957 = t1042 * t1001 - t1036 * t1004;
t956 = t1036 * t1001 + t1042 * t1004;
t952 = t1000 * t1041 - t1035 * t997;
t947 = -t987 + t986;
t940 = -t1120 - t986;
t939 = t1036 * t997 + t1042 * t971;
t938 = -t1036 * t1000 + t1042 * t969;
t937 = t1036 * t971 - t1042 * t997;
t936 = t1042 * t1000 + t1036 * t969;
t934 = -t960 + t983;
t933 = t959 - t983;
t932 = (t1034 * t990 - t1040 * t988) * t1028;
t931 = (-t1034 * t988 - t1040 * t990) * t1028;
t930 = -pkin(1) * t967 + t979;
t929 = -pkin(1) * t966 + t978;
t925 = -t986 - t987;
t909 = -t960 + t959;
t908 = -t960 - t983;
t907 = t1040 * t976 - t1107;
t906 = -t1034 * t977 + t1127;
t905 = t1034 * t976 + t1096;
t904 = t1040 * t977 + t1131;
t903 = -t1034 * t972 - t1096;
t902 = t1040 * t972 - t1107;
t901 = t1042 * t928 - t1106;
t900 = t1036 * t928 + t1094;
t897 = -t924 - t982;
t890 = -t983 - t959;
t889 = t1040 * t924 - t1090 * t990;
t888 = t1034 * t924 + t1089 * t990;
t887 = -t1034 * t1049 + t1089 * t988;
t886 = t1040 * t1049 + t1090 * t988;
t884 = t1040 * t940 - t1131;
t883 = t1034 * t940 + t1127;
t882 = t1121 - t1122;
t881 = t919 - t1121;
t880 = t959 + t960;
t866 = (t1033 * t963 - t1039 * t961) * t984;
t865 = (t1033 * t961 + t1039 * t963) * t984;
t864 = -t1035 * t931 + t1041 * t932;
t862 = t919 - t1122;
t858 = -pkin(2) * t892 + t1040 * t948;
t857 = -pkin(2) * t896 - t1034 * t948;
t853 = -t1121 - t919;
t851 = -t935 - t873;
t848 = (-qJD(4) - t984) * t963 - t1057;
t843 = -t1035 * t905 + t1041 * t907;
t842 = -t1035 * t904 + t1041 * t906;
t840 = t1039 * t873 - t963 * t1108;
t839 = -t1033 * t873 - t963 * t1097;
t838 = -t1033 * t872 + t961 * t1097;
t837 = -t1039 * t872 - t961 * t1108;
t836 = -t876 + t915;
t835 = t875 - t915;
t834 = -t1035 * t902 + t1041 * t903;
t833 = t1035 * t903 + t1041 * t902;
t830 = -t1034 * t897 - t1040 * t893;
t829 = -t1034 * t896 - t1040 * t892;
t827 = -t1034 * t893 + t1040 * t897;
t826 = -t1034 * t892 + t1040 * t896;
t825 = -t1035 * t857 - t1081 * t948;
t824 = -t1035 * t858 - t1086 * t948;
t823 = t1034 * t923 + t1040 * t866;
t822 = t1034 * t866 - t1040 * t923;
t821 = t919 + t1122;
t820 = t1039 * t933 - t1109;
t819 = -t1033 * t934 + t1128;
t818 = -t1033 * t933 - t1098;
t817 = -t1039 * t934 - t1132;
t816 = -t1035 * t888 + t1041 * t889;
t815 = -t1035 * t886 + t1041 * t887;
t814 = (t1032 * t922 - t1038 * t920) * t958;
t813 = (t1032 * t920 + t1038 * t922) * t958;
t812 = -t1035 * t883 + t1041 * t884;
t811 = t1035 * t884 + t1041 * t883;
t809 = -t1033 * t908 - t1098;
t808 = t1039 * t908 - t1109;
t807 = -t876 + t875;
t804 = t1039 * t890 - t1132;
t803 = t1033 * t890 + t1128;
t799 = -t876 - t915;
t798 = -pkin(2) * t925 + t832;
t795 = t1040 * t840 + t1069;
t794 = t1040 * t838 - t1069;
t793 = t1034 * t840 - t1065;
t792 = t1034 * t838 + t1065;
t789 = t1036 * t896 + t1042 * t834;
t788 = t1036 * t834 - t1042 * t896;
t787 = -t915 - t875;
t786 = t1036 * t892 + t1042 * t812;
t785 = t1036 * t812 - t1042 * t892;
t784 = t875 + t876;
t783 = t1033 * t871 + t1039 * t814;
t782 = -t1033 * t814 + t1039 * t871;
t781 = -t1033 * t851 - t1039 * t847;
t780 = -t1033 * t850 + t1039 * t848;
t779 = -t1033 * t847 + t1039 * t851;
t778 = -t1033 * t848 - t1039 * t850;
t776 = -t885 - t797;
t773 = -t1072 - t1117;
t771 = t1038 * t881 - t1113;
t770 = -t1032 * t882 + t1129;
t769 = -t1032 * t881 - t1102;
t768 = -t1038 * t882 - t1133;
t767 = -pkin(1) * t833 - pkin(2) * t902 + t899;
t766 = (t1031 * t879 - t1037 * t877) * t917;
t765 = (t1031 * t877 + t1037 * t879) * t917;
t764 = t1038 * t797 - t922 * t1112;
t763 = -t1032 * t797 - t922 * t1101;
t762 = t1032 * t1072 + t920 * t1101;
t761 = t1038 * t1072 - t920 * t1112;
t760 = t1041 * t832 - t1137;
t759 = -t1035 * t827 + t1041 * t830;
t758 = -t1035 * t826 + t1041 * t829;
t757 = t1035 * t832 + t1136;
t756 = t1035 * t830 + t1041 * t827;
t755 = -t1034 * t847 + t1040 * t820;
t754 = -t1034 * t851 + t1040 * t819;
t753 = t1034 * t820 + t1040 * t847;
t752 = t1034 * t819 + t1040 * t851;
t751 = -t1032 * t856 - t1102;
t750 = -t1038 * t856 + t1113;
t749 = -pkin(5) * t808 + t1099;
t748 = -t1035 * t822 + t1041 * t823;
t745 = t1034 * t850 + t1040 * t809;
t744 = t1034 * t809 - t1040 * t850;
t742 = -pkin(1) * t811 - pkin(2) * t883 + t898;
t741 = -pkin(5) * t803 + t1110;
t740 = -t1034 * t848 + t1040 * t804;
t739 = t1034 * t804 + t1040 * t848;
t738 = t1038 * t853 - t1133;
t737 = -t1032 * t853 - t1129;
t736 = -t1034 * t909 + t1040 * t780;
t735 = t1034 * t780 + t1040 * t909;
t734 = -t1036 * t948 + t1042 * t760;
t733 = t1036 * t760 + t1042 * t948;
t732 = -t1035 * t798 - t1136;
t731 = t1036 * t925 + t1042 * t759;
t730 = t1036 * t759 - t1042 * t925;
t729 = -t1034 * t880 + t1040 * t781;
t728 = t1034 * t781 + t1040 * t880;
t723 = -qJD(6) * t879 - t1059;
t722 = t1039 * t764 + t1070;
t721 = t1039 * t762 - t1070;
t720 = -t1033 * t764 + t1066;
t719 = -t1033 * t762 - t1066;
t718 = -t1035 * t793 + t1041 * t795;
t717 = -t1035 * t792 + t1041 * t794;
t716 = -t1034 * t813 + t1040 * t783;
t715 = t1034 * t783 + t1040 * t813;
t714 = -pkin(1) * t757 - pkin(2) * t828;
t713 = -pkin(1) * t756 - pkin(2) * t827;
t710 = -pkin(3) * t808 + t747;
t709 = t1032 * t1056 + t1038 * t766;
t708 = -t1032 * t766 + t1038 * t1056;
t707 = -pkin(3) * t803 + t746;
t706 = t1037 * t835 - t1115;
t705 = -t1031 * t836 + t1130;
t704 = -t1031 * t835 - t1104;
t703 = -t1037 * t836 - t1134;
t701 = -t841 - t724;
t698 = (-qJD(6) - t917) * t879 - t1059;
t696 = t1037 * t724 - t879 * t1114;
t695 = -t1031 * t724 - t879 * t1103;
t694 = -t1031 * t723 + t877 * t1103;
t693 = -t1037 * t723 - t877 * t1114;
t691 = -t1032 * t776 + t1038 * t774;
t690 = -t1032 * t775 + t1038 * t773;
t689 = -t1032 * t774 - t1038 * t776;
t688 = -t1032 * t773 - t1038 * t775;
t687 = t1033 * t774 + t1039 * t771;
t686 = -t1033 * t776 + t1039 * t770;
t685 = -t1033 * t771 + t1039 * t774;
t684 = -t1033 * t770 - t1039 * t776;
t683 = -t1031 * t799 - t1104;
t682 = t1037 * t799 - t1115;
t681 = t1033 * t775 + t1039 * t751;
t680 = t1033 * t751 - t1039 * t775;
t678 = -t1035 * t753 + t1041 * t755;
t677 = -t1035 * t752 + t1041 * t754;
t676 = t1037 * t787 - t1134;
t675 = t1031 * t787 + t1130;
t674 = -t1033 * t773 + t1039 * t738;
t673 = t1033 * t738 + t1039 * t773;
t670 = -t1035 * t744 + t1041 * t745;
t669 = t1035 * t745 + t1041 * t744;
t667 = -t1035 * t739 + t1041 * t740;
t666 = t1035 * t740 + t1041 * t739;
t665 = -t1033 * t862 + t1039 * t690;
t664 = -t1033 * t690 - t1039 * t862;
t663 = -t1035 * t735 + t1041 * t736;
t662 = -t1034 * t763 + t1040 * t722;
t661 = -t1034 * t761 + t1040 * t721;
t660 = t1034 * t722 + t1040 * t763;
t659 = t1034 * t721 + t1040 * t761;
t658 = t1038 * t696 + t1071;
t657 = t1038 * t694 - t1071;
t656 = -t1032 * t696 + t1067;
t655 = -t1032 * t694 - t1067;
t654 = -t1033 * t821 + t1039 * t691;
t653 = t1033 * t691 + t1039 * t821;
t652 = -t1035 * t728 + t1041 * t729;
t651 = t1035 * t729 + t1041 * t728;
t650 = t1034 * t854 + t1040 * t672;
t649 = t1034 * t672 - t1040 * t854;
t648 = -t1033 * t765 + t1039 * t709;
t647 = -t1033 * t709 - t1039 * t765;
t646 = -t1034 * t710 + t1040 * t749;
t645 = t1036 * t808 + t1042 * t670;
t644 = t1036 * t670 - t1042 * t808;
t643 = -t1034 * t707 + t1040 * t741;
t642 = t1036 * t803 + t1042 * t667;
t641 = t1036 * t667 - t1042 * t803;
t640 = -t1034 * t769 + t1040 * t687;
t639 = -t1034 * t768 + t1040 * t686;
t638 = t1034 * t687 + t1040 * t769;
t637 = t1034 * t686 + t1040 * t768;
t636 = -t1035 * t715 + t1041 * t716;
t635 = -pkin(5) * t779 - t671;
t631 = -t1034 * t750 + t1040 * t681;
t630 = t1034 * t681 + t1040 * t750;
t629 = -pkin(3) * t680 - t1032 * t746;
t628 = -pkin(3) * t673 + t1038 * t746;
t627 = -t1034 * t737 + t1040 * t674;
t626 = t1034 * t674 + t1040 * t737;
t625 = -pkin(2) * t808 + t1034 * t749 + t1040 * t710;
t624 = -pkin(2) * t803 + t1034 * t741 + t1040 * t707;
t623 = t1036 * t779 + t1042 * t652;
t622 = t1036 * t652 - t1042 * t779;
t621 = -t1032 * t697 + t1038 * t706;
t620 = -t1032 * t701 + t1038 * t705;
t619 = -t1032 * t706 - t1038 * t697;
t618 = -t1032 * t705 - t1038 * t701;
t617 = -t1031 * t701 - t1037 * t697;
t616 = -t1031 * t700 + t1037 * t698;
t615 = -t1031 * t697 + t1037 * t701;
t614 = -t1031 * t698 - t1037 * t700;
t613 = t1032 * t700 + t1038 * t683;
t612 = -t1032 * t683 + t1038 * t700;
t611 = -pkin(6) * t682 + t1105;
t610 = -pkin(6) * t683 - t1116;
t609 = -t1032 * t698 + t1038 * t676;
t608 = -t1032 * t676 - t1038 * t698;
t607 = -pkin(6) * t676 + t1105;
t606 = -pkin(6) * t675 + t1116;
t605 = t1040 * t635 + t779 * t1118;
t604 = t1039 * t634 + t1111;
t603 = t1033 * t634 - t1100;
t602 = -t1032 * t807 + t1038 * t616;
t601 = -t1032 * t616 - t1038 * t807;
t598 = -t1034 * t688 + t1040 * t665;
t597 = t1034 * t665 + t1040 * t688;
t596 = -t1033 * t695 + t1039 * t658;
t595 = -t1033 * t693 + t1039 * t657;
t594 = -t1033 * t658 - t1039 * t695;
t593 = -t1033 * t657 - t1039 * t693;
t592 = t1053 * t671;
t591 = -t1034 * t708 + t1040 * t648;
t590 = t1034 * t648 + t1040 * t708;
t589 = -t1034 * t689 + t1040 * t654;
t588 = t1034 * t654 + t1040 * t689;
t587 = -t1032 * t784 + t1038 * t617;
t586 = -t1032 * t617 - t1038 * t784;
t585 = -pkin(5) * t680 - t1033 * t712 + t1082 * t746;
t584 = -t1035 * t660 + t1041 * t662;
t583 = -t1035 * t659 + t1041 * t661;
t582 = -pkin(5) * t673 + t1032 * t1100 - t1033 * t711;
t581 = -pkin(1) * t669 - pkin(2) * t744 + pkin(3) * t850 - pkin(5) * t809 - t1110;
t580 = -pkin(1) * t666 - pkin(2) * t739 - pkin(3) * t848 - pkin(5) * t804 + t1099;
t579 = t1034 * t635 + t1063 * t779;
t578 = -t1035 * t649 + t1041 * t650;
t577 = t1035 * t650 + t1041 * t649;
t576 = -t1033 * t704 + t1039 * t621;
t575 = -t1033 * t703 + t1039 * t620;
t574 = -t1033 * t621 - t1039 * t704;
t573 = -t1033 * t620 - t1039 * t703;
t572 = -pkin(3) * t653 - t634;
t571 = -pkin(5) * t653 + t1039 * t1051;
t570 = t1033 * t682 + t1039 * t613;
t569 = t1033 * t613 - t1039 * t682;
t568 = -t1035 * t638 + t1041 * t640;
t567 = -t1035 * t637 + t1041 * t639;
t566 = t1033 * t675 + t1039 * t609;
t565 = t1033 * t609 - t1039 * t675;
t564 = -t1035 * t625 + t1041 * t646;
t563 = -t1035 * t630 + t1041 * t631;
t562 = t1035 * t631 + t1041 * t630;
t561 = -t1035 * t624 + t1041 * t643;
t560 = t1050 * t671;
t559 = -t1035 * t626 + t1041 * t627;
t558 = t1035 * t627 + t1041 * t626;
t557 = -t1034 * t656 + t1040 * t596;
t556 = -t1034 * t655 + t1040 * t595;
t555 = t1034 * t596 + t1040 * t656;
t554 = t1034 * t595 + t1040 * t655;
t553 = -pkin(1) * t651 - pkin(2) * t728 - pkin(3) * t880 - pkin(5) * t781 - t672;
t552 = -t1034 * t1051 + t1040 * t604;
t551 = t1034 * t604 + t1040 * t1051;
t550 = t1036 * t671 + t1042 * t578;
t549 = t1036 * t578 - t1042 * t671;
t548 = -t1034 * t629 + t1040 * t585;
t547 = -t1033 * t614 + t1039 * t602;
t546 = -t1033 * t602 - t1039 * t614;
t545 = -t1034 * t628 + t1040 * t582;
t544 = -t1032 * t600 + t1038 * t611;
t543 = t1033 * t615 + t1039 * t587;
t542 = t1033 * t587 - t1039 * t615;
t541 = -t1032 * t599 + t1038 * t606;
t540 = t1036 * t680 + t1042 * t563;
t539 = t1036 * t563 - t1042 * t680;
t538 = t1053 * t603;
t535 = -t1035 * t597 + t1041 * t598;
t534 = t1036 * t673 + t1042 * t559;
t533 = t1036 * t559 - t1042 * t673;
t532 = -t1035 * t590 + t1041 * t591;
t531 = -t1035 * t588 + t1041 * t589;
t530 = t1035 * t589 + t1041 * t588;
t529 = -t1034 * t619 + t1040 * t576;
t528 = -t1034 * t618 + t1040 * t575;
t527 = t1034 * t576 + t1040 * t619;
t526 = t1034 * t575 + t1040 * t618;
t525 = -t1035 * t579 + t1041 * t605;
t524 = -t1034 * t612 + t1040 * t570;
t523 = t1034 * t570 + t1040 * t612;
t522 = -pkin(2) * t680 + t1034 * t585 + t1040 * t629;
t521 = -t1034 * t608 + t1040 * t566;
t520 = t1034 * t566 + t1040 * t608;
t519 = -pkin(2) * t673 + t1034 * t582 + t1040 * t628;
t518 = t1032 * t692 + t1038 * t537;
t517 = -t1032 * t537 + t1038 * t692;
t516 = -pkin(1) * t577 - pkin(2) * t649 + pkin(3) * t854 - pkin(5) * t672;
t515 = -t1035 * t560 + t1041 * t592;
t514 = -t1034 * t572 + t1040 * t571;
t513 = t1036 * t653 + t1042 * t531;
t512 = t1036 * t531 - t1042 * t653;
t511 = -t1034 * t601 + t1040 * t547;
t510 = t1034 * t547 + t1040 * t601;
t509 = -pkin(6) * t615 - t536;
t508 = -pkin(6) * t617 - t537;
t507 = t1050 * t603;
t506 = -t1034 * t586 + t1040 * t543;
t505 = t1034 * t543 + t1040 * t586;
t504 = -t1035 * t555 + t1041 * t557;
t503 = -t1035 * t554 + t1041 * t556;
t502 = -pkin(2) * t653 + t1034 * t571 + t1040 * t572;
t501 = -pkin(3) * t569 - t1032 * t611 - t1038 * t600;
t500 = -pkin(3) * t565 - t1032 * t606 - t1038 * t599;
t499 = -t1035 * t551 + t1041 * t552;
t498 = t1035 * t552 + t1041 * t551;
t497 = -pkin(1) * t562 - pkin(2) * t630 - pkin(3) * t750 - pkin(5) * t681 - t1039 * t712 - t1088 * t746;
t496 = -pkin(1) * t558 - pkin(2) * t626 - pkin(3) * t737 - pkin(5) * t674 - t1032 * t1111 - t1039 * t711;
t495 = -pkin(5) * t569 - t1033 * t610 + t1039 * t544;
t494 = -t1035 * t522 + t1041 * t548;
t493 = -t1035 * t527 + t1041 * t529;
t492 = -t1035 * t526 + t1041 * t528;
t491 = -t1035 * t519 + t1041 * t545;
t490 = -pkin(5) * t565 - t1033 * t607 + t1039 * t541;
t489 = t1036 * t603 + t1042 * t499;
t488 = t1036 * t499 - t1042 * t603;
t487 = t1033 * t536 + t1039 * t518;
t486 = t1033 * t518 - t1039 * t536;
t485 = -t1035 * t523 + t1041 * t524;
t484 = t1035 * t524 + t1041 * t523;
t483 = -t1035 * t520 + t1041 * t521;
t482 = t1035 * t521 + t1041 * t520;
t481 = -pkin(3) * t542 - t1032 * t509;
t480 = -pkin(1) * t530 - pkin(2) * t588 - pkin(3) * t689 - pkin(5) * t654 - t1033 * t1051;
t479 = -t1035 * t507 + t1041 * t538;
t478 = -t1035 * t510 + t1041 * t511;
t477 = t1036 * t569 + t1042 * t485;
t476 = t1036 * t485 - t1042 * t569;
t475 = -t1035 * t502 + t1041 * t514;
t474 = -t1035 * t505 + t1041 * t506;
t473 = t1035 * t506 + t1041 * t505;
t472 = t1036 * t565 + t1042 * t483;
t471 = t1036 * t483 - t1042 * t565;
t470 = pkin(6) * t1032 * t536 - pkin(3) * t486;
t469 = -pkin(1) * t498 - pkin(2) * t551 - pkin(3) * t1051 - pkin(5) * t604;
t468 = -t1034 * t517 + t1040 * t487;
t467 = t1034 * t487 + t1040 * t517;
t466 = -t1034 * t501 + t1040 * t495;
t465 = -t1034 * t500 + t1040 * t490;
t464 = -pkin(5) * t542 - t1033 * t508 + t1082 * t509;
t463 = t1036 * t542 + t1042 * t474;
t462 = t1036 * t474 - t1042 * t542;
t461 = -pkin(5) * t486 + (t1033 * t537 - t1082 * t536) * pkin(6);
t460 = -pkin(2) * t569 + t1034 * t495 + t1040 * t501;
t459 = -pkin(2) * t565 + t1034 * t490 + t1040 * t500;
t458 = -pkin(1) * t484 - pkin(2) * t523 - pkin(3) * t612 - pkin(5) * t570 - t1033 * t544 - t1039 * t610;
t457 = -pkin(1) * t482 - pkin(2) * t520 - pkin(3) * t608 - pkin(5) * t566 - t1033 * t541 - t1039 * t607;
t456 = -t1034 * t481 + t1040 * t464;
t455 = -t1035 * t467 + t1041 * t468;
t454 = t1035 * t468 + t1041 * t467;
t453 = -pkin(2) * t542 + t1034 * t464 + t1040 * t481;
t452 = -t1034 * t470 + t1040 * t461;
t451 = -t1035 * t460 + t1041 * t466;
t450 = -t1035 * t459 + t1041 * t465;
t449 = -pkin(1) * t473 - pkin(2) * t505 - pkin(3) * t586 - pkin(5) * t543 - t1039 * t508 - t1088 * t509;
t448 = t1036 * t486 + t1042 * t455;
t447 = t1036 * t455 - t1042 * t486;
t446 = -pkin(2) * t486 + t1034 * t461 + t1040 * t470;
t445 = -t1035 * t453 + t1041 * t456;
t444 = -pkin(1) * t454 - pkin(2) * t467 - pkin(3) * t517 - pkin(5) * t487 + (t1039 * t537 + t536 * t1088) * pkin(6);
t443 = -t1035 * t446 + t1041 * t452;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1002, -t1003, 0, t965, 0, 0, 0, 0, 0, 0, t938, t939, t957, t901, 0, 0, 0, 0, 0, 0, t786, t789, t731, t734, 0, 0, 0, 0, 0, 0, t642, t645, t623, t550, 0, 0, 0, 0, 0, 0, t534, t540, t513, t489, 0, 0, 0, 0, 0, 0, t472, t477, t463, t448; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1003, -t1002, 0, t964, 0, 0, 0, 0, 0, 0, t936, t937, t956, t900, 0, 0, 0, 0, 0, 0, t785, t788, t730, t733, 0, 0, 0, 0, 0, 0, t641, t644, t622, t549, 0, 0, 0, 0, 0, 0, t533, t539, t512, t488, 0, 0, 0, 0, 0, 0, t471, t476, t462, t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t966, t967, 0, t926, 0, 0, 0, 0, 0, 0, t811, t833, t756, t757, 0, 0, 0, 0, 0, 0, t666, t669, t651, t577, 0, 0, 0, 0, 0, 0, t558, t562, t530, t498, 0, 0, 0, 0, 0, 0, t482, t484, t473, t454; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1003, 0, -t1002, 0, t1052, -t985, -t964, -pkin(4) * t964, t1042 * t975 - t1055, -t1036 * t1005 + t1042 * t952, t1035 * t1075 + t1042 * t970, t1042 * t974 + t1055, t1023 * t1036 + t1042 * t968, t1036 * qJDD(2) + t1042 * t993, -pkin(4) * t936 - t1035 * t1094 - t1036 * t929, -pkin(4) * t937 - t1036 * t930 - t1041 * t1094, -pkin(4) * t956 - t1042 * t926, -pkin(4) * t900 + t1036 * t1119, t1042 * t816 + t1068, -t1036 * t947 + t1042 * t758, -t1036 * t897 + t1042 * t842, t1042 * t815 - t1068, -t1036 * t893 + t1042 * t843, t1036 * t1027 + t1042 * t864, -pkin(4) * t785 - t1036 * t742 + t1042 * t824, -pkin(4) * t788 - t1036 * t767 + t1042 * t825, -pkin(4) * t730 - t1036 * t713 + t1042 * t732, -pkin(4) * t733 - t1036 * t714 - t1042 * t1073, -t1036 * t839 + t1042 * t718, -t1036 * t778 + t1042 * t663, -t1036 * t817 + t1042 * t677, -t1036 * t837 + t1042 * t717, -t1036 * t818 + t1042 * t678, -t1036 * t865 + t1042 * t748, -pkin(4) * t641 - t1036 * t580 + t1042 * t561, -pkin(4) * t644 - t1036 * t581 + t1042 * t564, -pkin(4) * t622 - t1036 * t553 + t1042 * t525, -pkin(4) * t549 - t1036 * t516 + t1042 * t515, -t1036 * t720 + t1042 * t584, -t1036 * t664 + t1042 * t535, -t1036 * t684 + t1042 * t567, -t1036 * t719 + t1042 * t583, -t1036 * t685 + t1042 * t568, -t1036 * t782 + t1042 * t636, -pkin(4) * t533 - t1036 * t496 + t1042 * t491, -pkin(4) * t539 - t1036 * t497 + t1042 * t494, -pkin(4) * t512 - t1036 * t480 + t1042 * t475, -pkin(4) * t488 - t1036 * t469 + t1042 * t479, -t1036 * t594 + t1042 * t504, -t1036 * t546 + t1042 * t478, -t1036 * t573 + t1042 * t492, -t1036 * t593 + t1042 * t503, -t1036 * t574 + t1042 * t493, -t1036 * t647 + t1042 * t532, -pkin(4) * t471 - t1036 * t457 + t1042 * t450, -pkin(4) * t476 - t1036 * t458 + t1042 * t451, -pkin(4) * t462 - t1036 * t449 + t1042 * t445, -pkin(4) * t447 - t1036 * t444 + t1042 * t443; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1002, 0, t1003, 0, t985, t1052, t965, pkin(4) * t965, t1036 * t975 + t1054, t1042 * t1005 + t1036 * t952, -t1035 * t1074 + t1036 * t970, t1036 * t974 - t1054, t1036 * t968 - t1041 * t1074, -t1042 * qJDD(2) + t1036 * t993, pkin(4) * t938 - t1035 * t1106 + t1042 * t929, pkin(4) * t939 - t1036 * t1095 + t1042 * t930, pkin(4) * t957 - t1036 * t926, pkin(4) * t901 - t1042 * t1119, t1036 * t816 - t1064, t1036 * t758 + t1042 * t947, t1036 * t842 + t1042 * t897, t1036 * t815 + t1064, t1036 * t843 + t1042 * t893, -t1042 * t1027 + t1036 * t864, pkin(4) * t786 + t1036 * t824 + t1042 * t742, pkin(4) * t789 + t1036 * t825 + t1042 * t767, pkin(4) * t731 + t1036 * t732 + t1042 * t713, pkin(4) * t734 - t1036 * t1073 + t1042 * t714, t1036 * t718 + t1042 * t839, t1036 * t663 + t1042 * t778, t1036 * t677 + t1042 * t817, t1036 * t717 + t1042 * t837, t1036 * t678 + t1042 * t818, t1036 * t748 + t1042 * t865, pkin(4) * t642 + t1036 * t561 + t1042 * t580, pkin(4) * t645 + t1036 * t564 + t1042 * t581, pkin(4) * t623 + t1036 * t525 + t1042 * t553, pkin(4) * t550 + t1036 * t515 + t1042 * t516, t1036 * t584 + t1042 * t720, t1036 * t535 + t1042 * t664, t1036 * t567 + t1042 * t684, t1036 * t583 + t1042 * t719, t1036 * t568 + t1042 * t685, t1036 * t636 + t1042 * t782, pkin(4) * t534 + t1036 * t491 + t1042 * t496, pkin(4) * t540 + t1036 * t494 + t1042 * t497, pkin(4) * t513 + t1036 * t475 + t1042 * t480, pkin(4) * t489 + t1036 * t479 + t1042 * t469, t1036 * t504 + t1042 * t594, t1036 * t478 + t1042 * t546, t1036 * t492 + t1042 * t573, t1036 * t503 + t1042 * t593, t1036 * t493 + t1042 * t574, t1036 * t532 + t1042 * t647, pkin(4) * t472 + t1036 * t450 + t1042 * t457, pkin(4) * t477 + t1036 * t451 + t1042 * t458, pkin(4) * t463 + t1036 * t445 + t1042 * t449, pkin(4) * t448 + t1036 * t443 + t1042 * t444; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1008, t1009, 0, 0, (t998 + t1061) * t1035, t1035 * t1000 + t1041 * t997, t1041 * t1010 + t1085, t1135 * t1041, t1035 * t1012 + t1080, 0, pkin(1) * t1000 + t1095, -pkin(1) * t997 - t1035 * t996, pkin(1) * t1004 + t928, pkin(1) * t996, t1035 * t889 + t1041 * t888, t1035 * t829 + t1041 * t826, t1035 * t906 + t1041 * t904, t1035 * t887 + t1041 * t886, t1035 * t907 + t1041 * t905, t1035 * t932 + t1041 * t931, -pkin(1) * t892 + t1041 * t858 - t1087 * t948, -pkin(1) * t896 + t1041 * t857 - t1083 * t948, -pkin(1) * t925 + t1041 * t798 - t1137, (pkin(2) * t1041 + pkin(1)) * t948, t1035 * t795 + t1041 * t793, t1035 * t736 + t1041 * t735, t1035 * t754 + t1041 * t752, t1035 * t794 + t1041 * t792, t1035 * t755 + t1041 * t753, t1035 * t823 + t1041 * t822, -pkin(1) * t803 + t1035 * t643 + t1041 * t624, -pkin(1) * t808 + t1035 * t646 + t1041 * t625, -pkin(1) * t779 + t1035 * t605 + t1041 * t579, -pkin(1) * t671 + t1035 * t592 + t1041 * t560, t1035 * t662 + t1041 * t660, t1035 * t598 + t1041 * t597, t1035 * t639 + t1041 * t637, t1035 * t661 + t1041 * t659, t1035 * t640 + t1041 * t638, t1035 * t716 + t1041 * t715, -pkin(1) * t673 + t1035 * t545 + t1041 * t519, -pkin(1) * t680 + t1035 * t548 + t1041 * t522, -pkin(1) * t653 + t1035 * t514 + t1041 * t502, -pkin(1) * t603 + t1035 * t538 + t1041 * t507, t1035 * t557 + t1041 * t555, t1035 * t511 + t1041 * t510, t1035 * t528 + t1041 * t526, t1035 * t556 + t1041 * t554, t1035 * t529 + t1041 * t527, t1035 * t591 + t1041 * t590, -pkin(1) * t565 + t1035 * t465 + t1041 * t459, -pkin(1) * t569 + t1035 * t466 + t1041 * t460, -pkin(1) * t542 + t1035 * t456 + t1041 * t453, -pkin(1) * t486 + t1035 * t452 + t1041 * t446;];
tauB_reg = t1;
