% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:23
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR14_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR14_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPRR14_inertiaJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 16:43:13
% EndTime: 2019-05-07 16:43:19
% DurationCPUTime: 1.38s
% Computational Cost: add. (1337->179), mult. (3104->333), div. (0->0), fcn. (3557->10), ass. (0->121)
t74 = sin(pkin(6));
t79 = sin(qJ(2));
t112 = t74 * t79;
t75 = cos(pkin(6));
t78 = sin(qJ(3));
t82 = cos(qJ(3));
t46 = t82 * t112 + t75 * t78;
t132 = -0.2e1 * t46;
t131 = 0.2e1 * t46;
t77 = sin(qJ(5));
t63 = t77 * pkin(5) + qJ(4);
t130 = 0.2e1 * t63;
t129 = -0.2e1 * t78;
t128 = 0.2e1 * t78;
t127 = 0.2e1 * t82;
t126 = 0.2e1 * qJ(4);
t125 = pkin(3) + pkin(10);
t124 = pkin(1) * t79;
t83 = cos(qJ(2));
t123 = pkin(1) * t83;
t122 = t46 * pkin(5);
t76 = sin(qJ(6));
t121 = t76 * pkin(5);
t120 = t78 * pkin(5);
t80 = cos(qJ(6));
t119 = t80 * pkin(5);
t111 = t74 * t83;
t45 = t78 * t112 - t75 * t82;
t81 = cos(qJ(5));
t29 = t77 * t111 + t45 * t81;
t97 = pkin(8) * t111;
t37 = t97 + (pkin(9) + t124) * t75;
t38 = (-pkin(2) * t83 - pkin(9) * t79 - pkin(1)) * t74;
t20 = -t78 * t37 + t82 * t38;
t61 = pkin(3) * t111;
t19 = -t20 + t61;
t12 = t46 * pkin(4) + pkin(10) * t111 + t19;
t60 = pkin(8) * t112;
t36 = t60 + (-pkin(2) - t123) * t75;
t86 = -t46 * qJ(4) + t36;
t13 = t125 * t45 + t86;
t7 = t77 * t12 + t81 * t13;
t5 = t29 * pkin(11) + t7;
t118 = t80 * t5;
t30 = -t81 * t111 + t45 * t77;
t117 = t30 * t81;
t116 = t46 * t77;
t39 = t46 * t78;
t51 = t76 * t81 + t80 * t77;
t115 = t51 * t46;
t114 = t51 * t78;
t69 = t74 ^ 2;
t113 = t69 * t83;
t110 = t75 * t79;
t66 = t78 * pkin(9);
t57 = t78 * pkin(4) + t66;
t109 = t77 * t57;
t108 = t77 * t78;
t107 = t77 * t82;
t106 = t77 * t125;
t105 = t78 * t82;
t92 = -t78 * qJ(4) - pkin(2);
t50 = -t125 * t82 + t92;
t93 = pkin(11) * t82 - t50;
t24 = -t93 * t81 + t109;
t104 = t80 * t24;
t103 = t81 * t77;
t102 = t81 * t82;
t65 = t81 * t125;
t21 = t82 * t37 + t78 * t38;
t67 = t82 * pkin(9);
t58 = t82 * pkin(4) + t67;
t71 = t78 ^ 2;
t73 = t82 ^ 2;
t101 = t71 + t73;
t100 = qJ(4) * t82;
t99 = 0.2e1 * t111;
t98 = -0.2e1 * t105;
t96 = t78 * t111;
t95 = t82 * t111;
t94 = qJ(4) * t111;
t6 = t81 * t12 - t77 * t13;
t4 = -t30 * pkin(11) + t122 + t6;
t1 = t80 * t4 - t76 * t5;
t53 = t81 * t57;
t23 = t93 * t77 + t120 + t53;
t9 = t80 * t23 - t76 * t24;
t91 = pkin(9) * t96;
t90 = pkin(9) * t95;
t89 = -pkin(3) * t78 + t100;
t18 = t94 - t21;
t88 = -t18 * t82 + t19 * t78;
t87 = -t125 * t78 + t100;
t14 = -t45 * pkin(4) - t18;
t72 = t81 ^ 2;
t70 = t77 ^ 2;
t64 = t81 * t78;
t56 = -t82 * pkin(3) + t92;
t55 = -t81 * pkin(11) - t65;
t54 = (-pkin(11) - t125) * t77;
t52 = -t76 * t77 + t80 * t81;
t49 = pkin(1) * t110 + t97;
t48 = t75 * t123 - t60;
t47 = t52 * t78;
t44 = pkin(5) * t102 + t58;
t43 = t46 ^ 2;
t42 = t51 * t82;
t41 = -t80 * t102 + t76 * t107;
t40 = t46 * t81;
t32 = t80 * t54 + t76 * t55;
t31 = -t76 * t54 + t80 * t55;
t28 = t52 * t46;
t27 = t81 * t50 + t109;
t26 = -t77 * t50 + t53;
t17 = t45 * pkin(3) + t86;
t16 = t76 * t29 + t80 * t30;
t15 = -t80 * t29 + t76 * t30;
t10 = t76 * t23 + t104;
t8 = -t29 * pkin(5) + t14;
t2 = t76 * t4 + t118;
t3 = [1, 0, 0, t69 * t79 ^ 2, 0.2e1 * t79 * t113, 0.2e1 * t74 * t110, t75 * t99, t75 ^ 2, 0.2e1 * pkin(1) * t113 + 0.2e1 * t48 * t75, -0.2e1 * t69 * t124 - 0.2e1 * t49 * t75, t43, t45 * t132, t111 * t132, t45 * t99, t69 * t83 ^ 2, -0.2e1 * t20 * t111 + 0.2e1 * t36 * t45, 0.2e1 * t21 * t111 + 0.2e1 * t36 * t46, 0.2e1 * t18 * t45 + 0.2e1 * t19 * t46, -0.2e1 * t19 * t111 - 0.2e1 * t17 * t45, 0.2e1 * t18 * t111 - 0.2e1 * t17 * t46, t17 ^ 2 + t18 ^ 2 + t19 ^ 2, t30 ^ 2, 0.2e1 * t30 * t29, t30 * t131, t29 * t131, t43, -0.2e1 * t14 * t29 + 0.2e1 * t6 * t46, 0.2e1 * t14 * t30 - 0.2e1 * t7 * t46, t16 ^ 2, -0.2e1 * t16 * t15, t16 * t131, t15 * t132, t43, 0.2e1 * t1 * t46 + 0.2e1 * t8 * t15, 0.2e1 * t8 * t16 - 0.2e1 * t2 * t46; 0, 0, 0, 0, 0, t112, t111, t75, t48, -t49, t39, -t78 * t45 + t46 * t82, -t96, -t95, 0, -pkin(2) * t45 - t36 * t82 + t91, -pkin(2) * t46 + t36 * t78 + t90 (-t45 * t82 + t39) * pkin(9) + t88, t17 * t82 - t56 * t45 - t91, -t17 * t78 - t56 * t46 - t90, t88 * pkin(9) + t17 * t56, -t30 * t107 (-t29 * t77 - t117) * t82, -t46 * t107 + t30 * t78, -t46 * t102 + t29 * t78, t39, t14 * t102 + t26 * t46 - t58 * t29 + t6 * t78, -t14 * t107 - t27 * t46 + t58 * t30 - t7 * t78, -t16 * t42, t42 * t15 + t16 * t41, t16 * t78 - t42 * t46, -t15 * t78 + t41 * t46, t39, t1 * t78 + t44 * t15 - t8 * t41 + t9 * t46, -t10 * t46 + t44 * t16 - t2 * t78 - t8 * t42; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t71, 0.2e1 * t105, 0, 0, 0, pkin(2) * t127, pkin(2) * t129, 0.2e1 * t101 * pkin(9), t56 * t127, t56 * t129, t101 * pkin(9) ^ 2 + t56 ^ 2, t70 * t73, 0.2e1 * t73 * t103, t77 * t98, t81 * t98, t71, 0.2e1 * t58 * t102 + 0.2e1 * t26 * t78, -0.2e1 * t58 * t107 - 0.2e1 * t27 * t78, t42 ^ 2, -0.2e1 * t42 * t41, -t42 * t128, t41 * t128, t71, -0.2e1 * t44 * t41 + 0.2e1 * t9 * t78, -0.2e1 * t10 * t78 - 0.2e1 * t44 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t45, -t111, t20, -t21, -t46 * pkin(3) - qJ(4) * t45, -t20 + 0.2e1 * t61, -0.2e1 * t94 + t21, -t19 * pkin(3) - t18 * qJ(4), t117, t81 * t29 - t30 * t77, t40, -t116, 0, -qJ(4) * t29 + t14 * t77 - t46 * t65, qJ(4) * t30 + t46 * t106 + t14 * t81, t16 * t52, -t52 * t15 - t16 * t51, t28, -t115, 0, t63 * t15 + t31 * t46 + t8 * t51, t63 * t16 - t32 * t46 + t8 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, t82, 0, -t66, -t67, t89, t66, t67, t89 * pkin(9), -t77 * t102 (t70 - t72) * t82, t64, -t108, 0, t58 * t77 + t87 * t81, t58 * t81 - t87 * t77, -t42 * t52, t52 * t41 + t42 * t51, t47, -t114, 0, t31 * t78 - t63 * t41 + t44 * t51, -t32 * t78 - t63 * t42 + t44 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, -0.2e1 * pkin(3), t126, pkin(3) ^ 2 + qJ(4) ^ 2, t72, -0.2e1 * t103, 0, 0, 0, t77 * t126, t81 * t126, t52 ^ 2, -0.2e1 * t52 * t51, 0, 0, 0, t51 * t130, t52 * t130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t111, 0, t19, 0, 0, 0, 0, 0, t40, -t116, 0, 0, 0, 0, 0, t28, -t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, 0, t66, 0, 0, 0, 0, 0, t64, -t108, 0, 0, 0, 0, 0, t47, -t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, t29, t46, t6, -t7, 0, 0, t16, -t15, t46, t46 * t119 + t1, -t118 + (-t4 - t122) * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, -t102, t78, t26, -t27, 0, 0, -t42, t41, t78, t78 * t119 + t9, -t104 + (-t23 - t120) * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t77, 0, -t65, t106, 0, 0, t52, -t51, 0, t31, -t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, -t77, 0, 0, 0, 0, 0, t52, -t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t119, -0.2e1 * t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, -t15, t46, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t41, t78, t9, -t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t51, 0, t31, -t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t119, -t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t3;
