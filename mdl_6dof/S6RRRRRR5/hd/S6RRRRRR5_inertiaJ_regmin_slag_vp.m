% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d4,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x38]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 04:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRRR5_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRR5_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRR5_inertiaJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 10:16:05
% EndTime: 2019-05-08 10:16:14
% DurationCPUTime: 1.82s
% Computational Cost: add. (2729->185), mult. (6239->327), div. (0->0), fcn. (7578->12), ass. (0->128)
t84 = sin(pkin(6));
t90 = sin(qJ(2));
t123 = t84 * t90;
t85 = cos(pkin(6));
t89 = sin(qJ(3));
t93 = cos(qJ(3));
t59 = t89 * t123 - t85 * t93;
t60 = t93 * t123 + t85 * t89;
t88 = sin(qJ(4));
t92 = cos(qJ(4));
t102 = t92 * t59 + t88 * t60;
t128 = cos(qJ(5));
t38 = -t88 * t59 + t92 * t60;
t87 = sin(qJ(5));
t26 = t128 * t102 + t87 * t38;
t139 = -0.2e1 * t26;
t101 = -t88 * t89 + t92 * t93;
t77 = -t93 * pkin(3) - pkin(2);
t50 = -pkin(4) * t101 + t77;
t138 = 0.2e1 * t50;
t64 = t88 * t93 + t92 * t89;
t137 = 0.2e1 * t64;
t136 = 0.2e1 * t93;
t135 = pkin(9) + pkin(10);
t134 = pkin(1) * t90;
t86 = sin(qJ(6));
t133 = pkin(5) * t86;
t94 = cos(qJ(2));
t122 = t84 * t94;
t108 = pkin(4) * t122;
t109 = pkin(3) * t122;
t107 = pkin(8) * t122;
t52 = t107 + (pkin(9) + t134) * t85;
t53 = (-pkin(2) * t94 - pkin(9) * t90 - pkin(1)) * t84;
t33 = -t89 * t52 + t93 * t53;
t31 = -t60 * pkin(10) - t109 + t33;
t34 = t93 * t52 + t89 * t53;
t32 = -t59 * pkin(10) + t34;
t15 = t92 * t31 - t88 * t32;
t11 = -t38 * pkin(11) - t108 + t15;
t113 = t92 * t32;
t16 = t88 * t31 + t113;
t12 = -pkin(11) * t102 + t16;
t103 = -t128 * t11 + t87 * t12;
t4 = pkin(5) * t122 + t103;
t91 = cos(qJ(6));
t132 = t4 * t91;
t131 = t87 * pkin(4);
t130 = t88 * pkin(3);
t129 = t94 * pkin(1);
t27 = -t87 * t102 + t128 * t38;
t19 = -t86 * t122 + t91 * t27;
t17 = t19 * t86;
t65 = t135 * t89;
t66 = t135 * t93;
t47 = -t88 * t65 + t92 * t66;
t37 = pkin(11) * t101 + t47;
t46 = -t92 * t65 - t88 * t66;
t95 = -t64 * pkin(11) + t46;
t24 = -t128 * t95 + t87 * t37;
t127 = t24 * t91;
t79 = t92 * pkin(3);
t76 = t79 + pkin(4);
t99 = -t128 * t76 + t87 * t130;
t55 = -pkin(5) + t99;
t126 = t55 * t91;
t78 = t128 * pkin(4);
t75 = -t78 - pkin(5);
t125 = t75 * t91;
t81 = t84 ^ 2;
t124 = t81 * t94;
t121 = t85 * t90;
t21 = t86 * t26;
t45 = t87 * t101 + t128 * t64;
t120 = t86 * t45;
t100 = t128 * t130;
t58 = t87 * t76 + t100;
t56 = pkin(12) + t58;
t119 = t86 * t56;
t74 = pkin(12) + t131;
t118 = t86 * t74;
t117 = t86 * t91;
t22 = t91 * t26;
t116 = t91 * t45;
t115 = t91 * t56;
t114 = t91 * t74;
t44 = -t128 * t101 + t87 * t64;
t112 = -0.2e1 * t45 * t44;
t111 = -0.2e1 * t122;
t110 = 0.2e1 * t122;
t106 = t89 * t122;
t105 = t93 * t122;
t104 = t128 * t12;
t98 = -pkin(5) * t45 - pkin(12) * t44;
t97 = -t44 * t56 + t45 * t55;
t96 = -t44 * t74 + t45 * t75;
t69 = pkin(8) * t123;
t51 = t69 + (-pkin(2) - t129) * t85;
t7 = t87 * t11 + t104;
t40 = t59 * pkin(3) + t51;
t28 = pkin(4) * t102 + t40;
t83 = t91 ^ 2;
t82 = t86 ^ 2;
t80 = pkin(5) * t91;
t71 = t81 * t94 ^ 2;
t70 = 0.2e1 * t117;
t68 = t75 * t86;
t63 = pkin(1) * t121 + t107;
t62 = t85 * t129 - t69;
t49 = t55 * t86;
t43 = t45 ^ 2;
t42 = t91 * t44;
t41 = t86 * t44;
t39 = t86 * t116;
t30 = (-t82 + t83) * t45;
t25 = t128 * t37 + t87 * t95;
t23 = t44 * pkin(5) - t45 * pkin(12) + t50;
t20 = t24 * t86;
t18 = t91 * t122 + t86 * t27;
t14 = t86 * t23 + t91 * t25;
t13 = t91 * t23 - t86 * t25;
t9 = -t86 * t18 + t19 * t91;
t8 = t26 * pkin(5) - t27 * pkin(12) + t28;
t5 = -pkin(12) * t122 + t7;
t3 = t4 * t86;
t2 = t91 * t5 + t86 * t8;
t1 = -t86 * t5 + t91 * t8;
t6 = [1, 0, 0, t81 * t90 ^ 2, 0.2e1 * t90 * t124, 0.2e1 * t84 * t121, t85 * t110, t85 ^ 2, 0.2e1 * pkin(1) * t124 + 0.2e1 * t62 * t85, -0.2e1 * t81 * t134 - 0.2e1 * t63 * t85, t60 ^ 2, -0.2e1 * t60 * t59, t60 * t111, t59 * t110, t71, -0.2e1 * t33 * t122 + 0.2e1 * t51 * t59, 0.2e1 * t34 * t122 + 0.2e1 * t51 * t60, t38 ^ 2, -0.2e1 * t38 * t102, t38 * t111, t102 * t110, t71, 0.2e1 * t102 * t40 - 0.2e1 * t15 * t122, 0.2e1 * t16 * t122 + 0.2e1 * t40 * t38, t27 ^ 2, t27 * t139, t27 * t111, t26 * t110, t71, 0.2e1 * t103 * t122 + 0.2e1 * t28 * t26, 0.2e1 * t7 * t122 + 0.2e1 * t28 * t27, t19 ^ 2, -0.2e1 * t19 * t18, 0.2e1 * t19 * t26, t18 * t139, t26 ^ 2, 0.2e1 * t1 * t26 + 0.2e1 * t4 * t18, 0.2e1 * t4 * t19 - 0.2e1 * t2 * t26; 0, 0, 0, 0, 0, t123, t122, t85, t62, -t63, t60 * t89, -t89 * t59 + t60 * t93, -t106, -t105, 0, -pkin(2) * t59 + pkin(9) * t106 - t51 * t93, -pkin(2) * t60 + pkin(9) * t105 + t51 * t89, t38 * t64, t101 * t38 - t102 * t64, -t64 * t122, -t101 * t122, 0, -t101 * t40 + t102 * t77 - t46 * t122, t47 * t122 + t77 * t38 + t40 * t64, t27 * t45, -t45 * t26 - t27 * t44, -t45 * t122, t44 * t122, 0, t24 * t122 + t50 * t26 + t28 * t44, t25 * t122 + t50 * t27 + t28 * t45, t19 * t116 (-t18 * t91 - t17) * t45, t26 * t116 + t19 * t44, -t26 * t120 - t18 * t44, t26 * t44, t1 * t44 + t4 * t120 + t13 * t26 + t24 * t18, t4 * t116 - t14 * t26 + t24 * t19 - t2 * t44; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t89 ^ 2, t89 * t136, 0, 0, 0, pkin(2) * t136, -0.2e1 * pkin(2) * t89, t64 ^ 2, t101 * t137, 0, 0, 0, -0.2e1 * t77 * t101, t77 * t137, t43, t112, 0, 0, 0, t44 * t138, t45 * t138, t83 * t43, -0.2e1 * t43 * t117, 0.2e1 * t44 * t116, t86 * t112, t44 ^ 2, 0.2e1 * t24 * t120 + 0.2e1 * t13 * t44, 0.2e1 * t24 * t116 - 0.2e1 * t14 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t59, -t122, t33, -t34, 0, 0, t38, -t102, -t122, -t92 * t109 + t15, -t113 + (-t31 + t109) * t88, 0, 0, t27, -t26, -t122, t122 * t99 - t103, t58 * t122 - t7, t17, t9, t21, t22, 0, -t26 * t119 + t55 * t18 - t132, -t26 * t115 + t55 * t19 + t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t93, 0, -t89 * pkin(9), -t93 * pkin(9), 0, 0, t64, t101, 0, t46, -t47, 0, 0, t45, -t44, 0, -t24, -t25, t39, t30, t41, t42, 0, t86 * t97 - t127, t91 * t97 + t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t79, -0.2e1 * t130, 0, 0, 0, 0, 1, -0.2e1 * t99, -0.2e1 * t58, t82, t70, 0, 0, 0, -0.2e1 * t126, 0.2e1 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, -t102, -t122, t15, -t16, 0, 0, t27, -t26, -t122, -t78 * t122 - t103, -t104 + (-t11 + t108) * t87, t17, t9, t21, t22, 0, -t26 * t118 + t75 * t18 - t132, -t114 * t26 + t75 * t19 + t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, t101, 0, t46, -t47, 0, 0, t45, -t44, 0, -t24, -t25, t39, t30, t41, t42, 0, t86 * t96 - t127, t91 * t96 + t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t79, -t130, 0, 0, 0, 0, 1, t78 - t99, -t100 + (-pkin(4) - t76) * t87, t82, t70, 0, 0, 0 (-t55 - t75) * t91, t68 + t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t78, -0.2e1 * t131, t82, t70, 0, 0, 0, -0.2e1 * t125, 0.2e1 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t26, -t122, -t103, -t7, t17, t9, t21, t22, 0, -pkin(5) * t18 - pkin(12) * t21 - t132, -pkin(5) * t19 - pkin(12) * t22 + t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, -t44, 0, -t24, -t25, t39, t30, t41, t42, 0, t86 * t98 - t127, t91 * t98 + t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t99, -t58, t82, t70, 0, 0, 0, t80 - t126, t49 - t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t78, -t131, t82, t70, 0, 0, 0, t80 - t125, t68 - t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t82, t70, 0, 0, 0, 0.2e1 * t80, -0.2e1 * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t18, t26, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, -t120, t44, t13, -t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t91, 0, -t119, -t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t91, 0, -t118, -t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, t91, 0, -t86 * pkin(12), -t91 * pkin(12); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t6;
