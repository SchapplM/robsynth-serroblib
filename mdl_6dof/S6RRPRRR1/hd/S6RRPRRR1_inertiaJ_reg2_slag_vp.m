% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR1_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:32:02
% EndTime: 2019-05-06 19:32:10
% DurationCPUTime: 1.89s
% Computational Cost: add. (3200->139), mult. (5973->256), div. (0->0), fcn. (7346->10), ass. (0->94)
t63 = sin(pkin(11));
t108 = t63 * pkin(2);
t64 = cos(pkin(11));
t107 = t64 * pkin(2);
t51 = pkin(3) + t107;
t67 = sin(qJ(4));
t71 = cos(qJ(4));
t39 = t71 * t108 + t67 * t51;
t70 = cos(qJ(5));
t100 = t70 * t39;
t38 = -t67 * t108 + t71 * t51;
t37 = pkin(4) + t38;
t66 = sin(qJ(5));
t29 = t66 * t37 + t100;
t27 = pkin(10) + t29;
t65 = sin(qJ(6));
t59 = t65 ^ 2;
t69 = cos(qJ(6));
t61 = t69 ^ 2;
t95 = t59 + t61;
t98 = t95 * t27;
t106 = t66 * pkin(4);
t52 = pkin(10) + t106;
t122 = t95 * t52;
t99 = -qJ(3) - pkin(7);
t117 = t71 * t99;
t118 = t67 * t99;
t121 = t117 * t64 - t118 * t63;
t120 = t117 * t63 + t118 * t64;
t68 = sin(qJ(2));
t72 = cos(qJ(2));
t41 = t63 * t68 - t64 * t72;
t43 = t63 * t72 + t64 * t68;
t31 = -t71 * t41 - t67 * t43;
t80 = t67 * t41 - t71 * t43;
t20 = t66 * t31 - t70 * t80;
t119 = -0.2e1 * t20;
t87 = t99 * t68;
t88 = t99 * t72;
t33 = t63 * t88 + t64 * t87;
t78 = -t43 * pkin(8) + t33;
t34 = t63 * t87 - t64 * t88;
t79 = -t41 * pkin(8) + t34;
t11 = t31 * pkin(9) + t67 * t78 + t71 * t79;
t77 = pkin(9) * t80 - t67 * t79 + t71 * t78;
t5 = t66 * t11 - t70 * t77;
t116 = t5 ^ 2;
t18 = -t70 * t31 - t66 * t80;
t115 = t18 ^ 2;
t54 = -t72 * pkin(2) - pkin(1);
t36 = t41 * pkin(3) + t54;
t21 = -t31 * pkin(4) + t36;
t114 = 0.2e1 * t21;
t113 = -0.2e1 * t80;
t112 = 0.2e1 * t54;
t111 = 0.2e1 * t72;
t110 = pkin(5) * t65;
t109 = t5 * t69;
t85 = -t70 * t37 + t66 * t39;
t26 = -pkin(5) + t85;
t105 = t26 * t69;
t57 = t70 * pkin(4);
t53 = -t57 - pkin(5);
t104 = t53 * t69;
t15 = t65 * t18;
t103 = t65 * t20;
t102 = t65 * t69;
t101 = t69 * t20;
t96 = pkin(10) * t95;
t60 = t68 ^ 2;
t62 = t72 ^ 2;
t94 = t60 + t62;
t93 = t18 * t119;
t84 = -pkin(5) * t20 - pkin(10) * t18;
t7 = t70 * t11 + t66 * t77;
t8 = t18 * pkin(5) - t20 * pkin(10) + t21;
t2 = -t65 * t7 + t69 * t8;
t3 = t65 * t8 + t69 * t7;
t83 = t2 * t69 + t3 * t65;
t1 = -t2 * t65 + t3 * t69;
t82 = -t18 * t27 + t20 * t26;
t81 = -t18 * t52 + t20 * t53;
t58 = pkin(5) * t69;
t48 = 0.2e1 * t102;
t47 = t53 * t65;
t24 = t26 * t65;
t17 = t20 ^ 2;
t16 = t69 * t18;
t14 = t65 * t101;
t13 = t31 * pkin(8) + t120 * t68 - t121 * t72;
t12 = t80 * pkin(8) + t120 * t72 + t121 * t68;
t9 = (-t59 + t61) * t20;
t4 = t5 * t65;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t60, t68 * t111, 0, t62, 0, 0, pkin(1) * t111, -0.2e1 * pkin(1) * t68, 0.2e1 * t94 * pkin(7), t94 * pkin(7) ^ 2 + pkin(1) ^ 2, t43 ^ 2, -0.2e1 * t43 * t41, 0, t41 ^ 2, 0, 0, t41 * t112, t43 * t112, -0.2e1 * t33 * t43 - 0.2e1 * t34 * t41, t33 ^ 2 + t34 ^ 2 + t54 ^ 2, t80 ^ 2, t31 * t113, 0, t31 ^ 2, 0, 0, -0.2e1 * t36 * t31, t36 * t113, 0.2e1 * t12 * t80 + 0.2e1 * t13 * t31, t12 ^ 2 + t13 ^ 2 + t36 ^ 2, t17, t93, 0, t115, 0, 0, t18 * t114, t20 * t114, -0.2e1 * t7 * t18 + 0.2e1 * t5 * t20, t21 ^ 2 + t7 ^ 2 + t116, t61 * t17, -0.2e1 * t17 * t102, 0.2e1 * t18 * t101, t59 * t17, t65 * t93, t115, 0.2e1 * t5 * t103 + 0.2e1 * t2 * t18, 0.2e1 * t5 * t101 - 0.2e1 * t3 * t18, t83 * t119, t2 ^ 2 + t3 ^ 2 + t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t72, 0, -t68 * pkin(7), -t72 * pkin(7), 0, 0, 0, 0, t43, 0, -t41, 0, t33, -t34 (-t41 * t63 - t43 * t64) * pkin(2) (t33 * t64 + t34 * t63) * pkin(2), 0, 0, -t80, 0, t31, 0, t12, -t13, t39 * t31 + t38 * t80, t12 * t38 + t13 * t39, 0, 0, t20, 0, -t18, 0, -t5, -t7, -t29 * t18 + t20 * t85, t7 * t29 + t5 * t85, t14, t9, t15, -t14, t16, 0, t82 * t65 - t109, t82 * t69 + t4, t1, t1 * t27 + t5 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t107, -0.2e1 * t108, 0 (t63 ^ 2 + t64 ^ 2) * pkin(2) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t38, -0.2e1 * t39, 0, t38 ^ 2 + t39 ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t85, -0.2e1 * t29, 0, t29 ^ 2 + t85 ^ 2, t59, t48, 0, t61, 0, 0, -0.2e1 * t105, 0.2e1 * t24, 0.2e1 * t98, t95 * t27 ^ 2 + t26 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t43, 0, t54, 0, 0, 0, 0, 0, 0, -t31, -t80, 0, t36, 0, 0, 0, 0, 0, 0, t18, t20, 0, t21, 0, 0, 0, 0, 0, 0, t16, -t15, -t95 * t20, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, 0, t31, 0, t12, -t13, 0, 0, 0, 0, t20, 0, -t18, 0, -t5, -t7 (-t18 * t66 - t20 * t70) * pkin(4) (-t5 * t70 + t66 * t7) * pkin(4), t14, t9, t15, -t14, t16, 0, t81 * t65 - t109, t81 * t69 + t4, t1, t1 * t52 + t5 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t38, -t39, 0, 0, 0, 0, 0, 0, 0, 1, t57 - t85, -t100 + (-pkin(4) - t37) * t66, 0 (t29 * t66 - t70 * t85) * pkin(4), t59, t48, 0, t61, 0, 0 (-t26 - t53) * t69, t47 + t24, t122 + t98, t122 * t27 + t26 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t57, -0.2e1 * t106, 0 (t66 ^ 2 + t70 ^ 2) * pkin(4) ^ 2, t59, t48, 0, t61, 0, 0, -0.2e1 * t104, 0.2e1 * t47, 0.2e1 * t122, t95 * t52 ^ 2 + t53 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, 0, -t5, -t7, 0, 0, t14, t9, t15, -t14, t16, 0, t84 * t65 - t109, t84 * t69 + t4, t1, -t5 * pkin(5) + t1 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t85, -t29, 0, 0, t59, t48, 0, t61, 0, 0, t58 - t105, t24 - t110, t96 + t98, -t26 * pkin(5) + pkin(10) * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t57, -t106, 0, 0, t59, t48, 0, t61, 0, 0, t58 - t104, t47 - t110, t96 + t122, -t53 * pkin(5) + pkin(10) * t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t59, t48, 0, t61, 0, 0, 0.2e1 * t58, -0.2e1 * t110, 0.2e1 * t96, t95 * pkin(10) ^ 2 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, -t103, t18, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t65 * t27, -t69 * t27, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, -t65, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t65 * t52, -t69 * t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t69, 0, -t65 * pkin(10), -t69 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
