% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d6,theta1,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:30
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRPR5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRPR5_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 08:05:16
% EndTime: 2019-05-05 08:05:27
% DurationCPUTime: 2.82s
% Computational Cost: add. (2682->219), mult. (6595->441), div. (0->0), fcn. (7901->14), ass. (0->125)
t77 = sin(pkin(13));
t80 = cos(pkin(13));
t84 = sin(qJ(4));
t88 = cos(qJ(4));
t57 = t77 * t88 + t80 * t84;
t148 = -0.2e1 * t57;
t81 = cos(pkin(7));
t90 = cos(qJ(2));
t122 = t81 * t90;
t78 = sin(pkin(7));
t85 = sin(qJ(3));
t127 = t78 * t85;
t79 = sin(pkin(6));
t82 = cos(pkin(6));
t86 = sin(qJ(2));
t89 = cos(qJ(3));
t38 = t82 * t127 + (t85 * t122 + t86 * t89) * t79;
t124 = t79 * t90;
t47 = -t78 * t124 + t82 * t81;
t22 = -t38 * t84 + t47 * t88;
t23 = t38 * t88 + t47 * t84;
t10 = -t80 * t22 + t77 * t23;
t147 = t10 ^ 2;
t49 = t84 * t127 - t88 * t81;
t51 = t88 * t127 + t84 * t81;
t30 = t80 * t49 + t77 * t51;
t146 = t30 ^ 2;
t125 = t79 * t86;
t126 = t78 * t89;
t36 = -t79 * t89 * t122 + t85 * t125 - t82 * t126;
t35 = t36 ^ 2;
t114 = -qJ(5) - pkin(10);
t103 = t114 * t84;
t60 = t114 * t88;
t39 = -t80 * t103 - t77 * t60;
t145 = t39 ^ 2;
t55 = t77 * t84 - t80 * t88;
t144 = t55 ^ 2;
t143 = -0.2e1 * t30;
t70 = -t88 * pkin(4) - pkin(3);
t142 = 0.2e1 * t70;
t141 = 0.2e1 * t78;
t140 = 0.2e1 * t88;
t139 = pkin(2) * t85;
t138 = pkin(2) * t89;
t137 = t77 * pkin(4);
t136 = t80 * pkin(4);
t135 = t10 * t39;
t32 = -t77 * t49 + t80 * t51;
t83 = sin(qJ(6));
t87 = cos(qJ(6));
t24 = t87 * t126 + t83 * t32;
t134 = t24 * t87;
t26 = -t83 * t126 + t87 * t32;
t133 = t26 * t83;
t132 = t26 * t87;
t131 = t30 * t55;
t130 = t49 * t88;
t129 = t51 * t84;
t71 = t78 ^ 2;
t128 = t71 * t89;
t123 = t81 * t85;
t121 = t83 * t30;
t120 = t83 * t55;
t119 = t83 * t57;
t68 = pkin(11) + t137;
t118 = t83 * t68;
t117 = t83 * t87;
t116 = t87 * t57;
t115 = t87 * t68;
t108 = pkin(4) * t126;
t107 = pkin(9) * t126;
t44 = t107 + (pkin(10) + t139) * t81;
t45 = (-pkin(3) * t89 - pkin(10) * t85 - pkin(2)) * t78;
t27 = -t84 * t44 + t88 * t45;
t15 = -t51 * qJ(5) - t108 + t27;
t28 = t88 * t44 + t84 * t45;
t19 = -t49 * qJ(5) + t28;
t8 = t77 * t15 + t80 * t19;
t73 = t83 ^ 2;
t75 = t87 ^ 2;
t113 = t73 + t75;
t74 = t84 ^ 2;
t76 = t88 ^ 2;
t112 = t74 + t76;
t111 = t55 * t148;
t110 = -0.2e1 * t126;
t109 = 0.2e1 * t126;
t106 = t84 * t126;
t105 = t83 * t116;
t104 = t88 * t126;
t102 = -t80 * t15 + t77 * t19;
t6 = -pkin(11) * t126 + t8;
t64 = pkin(9) * t127;
t43 = t64 + (-pkin(3) - t138) * t81;
t33 = t49 * pkin(4) + t43;
t9 = t30 * pkin(5) - t32 * pkin(11) + t33;
t1 = -t83 * t6 + t87 * t9;
t2 = t87 * t6 + t83 * t9;
t101 = t1 * t87 + t2 * t83;
t100 = -t1 * t83 + t2 * t87;
t12 = t77 * t22 + t80 * t23;
t3 = -t83 * t12 + t36 * t87;
t4 = t87 * t12 + t36 * t83;
t99 = t3 * t87 + t4 * t83;
t98 = -t3 * t83 + t4 * t87;
t34 = t55 * pkin(5) - t57 * pkin(11) + t70;
t41 = t77 * t103 - t80 * t60;
t16 = t87 * t34 - t83 * t41;
t17 = t83 * t34 + t87 * t41;
t97 = t16 * t87 + t17 * t83;
t96 = -t16 * t83 + t17 * t87;
t95 = -t22 * t84 + t23 * t88;
t94 = -t27 * t84 + t28 * t88;
t69 = -pkin(5) - t136;
t93 = -t55 * t68 + t57 * t69;
t66 = t71 * t89 ^ 2;
t54 = t57 ^ 2;
t53 = pkin(2) * t123 + t107;
t52 = t81 * t138 - t64;
t48 = t87 * t55;
t29 = t87 * t30;
t21 = t83 * t24;
t5 = pkin(5) * t126 + t102;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82 ^ 2 + (t86 ^ 2 + t90 ^ 2) * t79 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38 ^ 2 + t47 ^ 2 + t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 ^ 2 + t23 ^ 2 + t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 ^ 2 + t147 + t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, -t125, 0, 0, 0, 0, 0, 0, 0, 0, -t47 * t126 - t36 * t81, t47 * t127 - t38 * t81 (t36 * t85 + t38 * t89) * t78, -t47 * t78 * pkin(2) - t36 * t52 + t38 * t53, 0, 0, 0, 0, 0, 0, -t22 * t126 + t36 * t49, t23 * t126 + t36 * t51, -t22 * t51 - t23 * t49, t22 * t27 + t23 * t28 + t36 * t43, 0, 0, 0, 0, 0, 0, t10 * t126 + t36 * t30, t12 * t126 + t36 * t32, t10 * t32 - t12 * t30, t10 * t102 + t12 * t8 + t36 * t33, 0, 0, 0, 0, 0, 0, t10 * t24 + t3 * t30, t10 * t26 - t4 * t30, -t4 * t24 - t3 * t26, t3 * t1 + t10 * t5 + t4 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t71 * t85 ^ 2, 0.2e1 * t85 * t128, t123 * t141, t66, t81 * t109, t81 ^ 2, 0.2e1 * pkin(2) * t128 + 0.2e1 * t52 * t81, -0.2e1 * t71 * t139 - 0.2e1 * t53 * t81 (-t52 * t85 + t53 * t89) * t141, t71 * pkin(2) ^ 2 + t52 ^ 2 + t53 ^ 2, t51 ^ 2, -0.2e1 * t51 * t49, t51 * t110, t49 ^ 2, t49 * t109, t66, -0.2e1 * t27 * t126 + 0.2e1 * t43 * t49, 0.2e1 * t28 * t126 + 0.2e1 * t43 * t51, -0.2e1 * t27 * t51 - 0.2e1 * t28 * t49, t27 ^ 2 + t28 ^ 2 + t43 ^ 2, t32 ^ 2, t32 * t143, t32 * t110, t146, t30 * t109, t66, 0.2e1 * t102 * t126 + 0.2e1 * t33 * t30, 0.2e1 * t8 * t126 + 0.2e1 * t33 * t32, 0.2e1 * t102 * t32 - 0.2e1 * t8 * t30, t102 ^ 2 + t33 ^ 2 + t8 ^ 2, t26 ^ 2, -0.2e1 * t26 * t24, 0.2e1 * t26 * t30, t24 ^ 2, t24 * t143, t146, 0.2e1 * t1 * t30 + 0.2e1 * t5 * t24, -0.2e1 * t2 * t30 + 0.2e1 * t5 * t26, -0.2e1 * t1 * t26 - 0.2e1 * t2 * t24, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, -t38, 0, 0, 0, 0, 0, 0, 0, 0, -t36 * t88, t36 * t84, t95, -t36 * pkin(3) + t95 * pkin(10), 0, 0, 0, 0, 0, 0, t36 * t55, t36 * t57, t10 * t57 - t12 * t55, t12 * t41 + t36 * t70 + t135, 0, 0, 0, 0, 0, 0, t10 * t119 + t3 * t55, t10 * t116 - t4 * t55, -t99 * t57, t3 * t16 + t4 * t17 + t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, 0, t126, t81, t52, -t53, 0, 0, t129, -t84 * t49 + t51 * t88, -t106, -t130, -t104, 0, -pkin(3) * t49 + pkin(10) * t106 - t43 * t88, -pkin(3) * t51 + pkin(10) * t104 + t43 * t84 (t129 - t130) * pkin(10) + t94, -t43 * pkin(3) + pkin(10) * t94, t32 * t57, -t57 * t30 - t32 * t55, -t57 * t126, t131, t55 * t126, 0, t39 * t126 + t70 * t30 + t33 * t55, t41 * t126 + t70 * t32 + t33 * t57, t102 * t57 - t41 * t30 + t39 * t32 - t8 * t55, t102 * t39 + t33 * t70 + t8 * t41, t26 * t116 (-t133 - t134) * t57, t30 * t116 + t26 * t55, t24 * t119, -t119 * t30 - t24 * t55, t131, t1 * t55 + t119 * t5 + t16 * t30 + t39 * t24, t116 * t5 - t17 * t30 - t2 * t55 + t39 * t26, -t101 * t57 - t16 * t26 - t17 * t24, t1 * t16 + t2 * t17 + t5 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t74, t84 * t140, 0, t76, 0, 0, pkin(3) * t140, -0.2e1 * pkin(3) * t84, 0.2e1 * t112 * pkin(10), t112 * pkin(10) ^ 2 + pkin(3) ^ 2, t54, t111, 0, t144, 0, 0, t55 * t142, t57 * t142, 0.2e1 * t39 * t57 - 0.2e1 * t41 * t55, t41 ^ 2 + t70 ^ 2 + t145, t75 * t54, -0.2e1 * t54 * t117, 0.2e1 * t55 * t116, t73 * t54, t83 * t111, t144, 0.2e1 * t119 * t39 + 0.2e1 * t16 * t55, 0.2e1 * t116 * t39 - 0.2e1 * t17 * t55, t97 * t148, t16 ^ 2 + t17 ^ 2 + t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, -t23, 0, 0, 0, 0, 0, 0, 0, 0, -t10, -t12, 0 (-t10 * t80 + t12 * t77) * pkin(4), 0, 0, 0, 0, 0, 0, -t10 * t87, t10 * t83, t98, t10 * t69 + t68 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t49, -t126, t27, -t28, 0, 0, 0, 0, t32, 0, -t30, -t126, -t80 * t108 - t102, t77 * t108 - t8 (-t30 * t77 - t32 * t80) * pkin(4) (-t102 * t80 + t77 * t8) * pkin(4), t133, -t21 + t132, t121, -t134, t29, 0, -t118 * t30 + t69 * t24 - t5 * t87, -t115 * t30 + t69 * t26 + t5 * t83 (t133 - t134) * t68 + t100, t100 * t68 + t5 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, t88, 0, -t84 * pkin(10), -t88 * pkin(10), 0, 0, 0, 0, t57, 0, -t55, 0, -t39, -t41 (-t55 * t77 - t57 * t80) * pkin(4) (-t39 * t80 + t41 * t77) * pkin(4), t105 (-t73 + t75) * t57, t120, -t105, t48, 0, -t39 * t87 + t83 * t93, t39 * t83 + t87 * t93, t96, t39 * t69 + t68 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t136, -0.2e1 * t137, 0 (t77 ^ 2 + t80 ^ 2) * pkin(4) ^ 2, t73, 0.2e1 * t117, 0, t75, 0, 0, -0.2e1 * t69 * t87, 0.2e1 * t69 * t83, 0.2e1 * t113 * t68, t113 * t68 ^ 2 + t69 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, t32, 0, t33, 0, 0, 0, 0, 0, 0, t29, -t121, -t21 - t132, t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, t57, 0, t70, 0, 0, 0, 0, 0, 0, t48, -t120, -t113 * t57, t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t24, t30, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, 0, -t119, t55, t16, -t17, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, t87, 0, -t118, -t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, -t83, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t7;
