% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d6,theta1,theta4,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 21:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPPR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPPR1_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPPR1_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 02:34:00
% EndTime: 2019-05-05 02:34:04
% DurationCPUTime: 1.49s
% Computational Cost: add. (1317->137), mult. (2787->268), div. (0->0), fcn. (3424->12), ass. (0->90)
t63 = sin(pkin(11));
t66 = cos(pkin(11));
t69 = sin(qJ(3));
t71 = cos(qJ(3));
t45 = t63 * t71 + t66 * t69;
t108 = -0.2e1 * t45;
t62 = sin(pkin(12));
t65 = cos(pkin(12));
t68 = sin(qJ(6));
t98 = cos(qJ(6));
t107 = -t68 * t62 + t98 * t65;
t67 = cos(pkin(6));
t64 = sin(pkin(6));
t70 = sin(qJ(2));
t91 = t64 * t70;
t33 = t67 * t71 - t69 * t91;
t34 = t67 * t69 + t71 * t91;
t17 = -t66 * t33 + t63 * t34;
t13 = t17 ^ 2;
t87 = -qJ(4) - pkin(8);
t49 = t87 * t71;
t81 = t87 * t69;
t27 = -t63 * t49 - t66 * t81;
t106 = t27 ^ 2;
t41 = t63 * t69 - t66 * t71;
t37 = t41 ^ 2;
t105 = 0.2e1 * t41;
t100 = t66 * pkin(3);
t55 = -pkin(4) - t100;
t48 = -t65 * pkin(5) + t55;
t104 = 0.2e1 * t48;
t56 = -t71 * pkin(3) - pkin(2);
t103 = 0.2e1 * t56;
t102 = 0.2e1 * t71;
t101 = t63 * pkin(3);
t51 = qJ(5) + t101;
t99 = pkin(9) + t51;
t16 = t107 * t45;
t97 = t16 * t107;
t96 = t17 * t27;
t46 = t98 * t62 + t68 * t65;
t95 = t46 * t41;
t94 = t62 * t41;
t93 = t62 * t45;
t92 = t62 * t65;
t72 = cos(qJ(2));
t90 = t64 * t72;
t89 = t65 * t45;
t24 = t41 * pkin(4) - t45 * qJ(5) + t56;
t29 = -t66 * t49 + t63 * t81;
t8 = t62 * t24 + t65 * t29;
t57 = t62 ^ 2;
t59 = t65 ^ 2;
t86 = t57 + t59;
t60 = t69 ^ 2;
t61 = t71 ^ 2;
t85 = t60 + t61;
t84 = t41 * t108;
t83 = t62 * t89;
t7 = t65 * t24 - t62 * t29;
t80 = t8 * t62 + t7 * t65;
t79 = -t7 * t62 + t8 * t65;
t19 = t63 * t33 + t66 * t34;
t10 = -t62 * t19 - t65 * t90;
t11 = t65 * t19 - t62 * t90;
t78 = t10 * t65 + t11 * t62;
t77 = -t10 * t62 + t11 * t65;
t76 = -t33 * t69 + t34 * t71;
t75 = -t41 * t51 + t45 * t55;
t58 = t64 ^ 2;
t52 = t58 * t72 ^ 2;
t40 = t46 ^ 2;
t39 = t45 ^ 2;
t38 = t107 ^ 2;
t36 = t99 * t65;
t35 = t99 * t62;
t32 = t65 * t41;
t26 = t107 * t41;
t23 = -t68 * t35 + t98 * t36;
t22 = -t98 * t35 - t68 * t36;
t14 = t46 * t45;
t12 = pkin(5) * t93 + t27;
t9 = t46 * t14;
t6 = -pkin(9) * t93 + t8;
t5 = t41 * pkin(5) - pkin(9) * t89 + t7;
t4 = t68 * t10 + t98 * t11;
t3 = t98 * t10 - t68 * t11;
t2 = t68 * t5 + t98 * t6;
t1 = t98 * t5 - t68 * t6;
t15 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 * t70 ^ 2 + t67 ^ 2 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33 ^ 2 + t34 ^ 2 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19 ^ 2 + t13 + t52, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 ^ 2 + t11 ^ 2 + t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, -t91, 0, 0, 0, 0, 0, 0, 0, 0, t71 * t90, -t69 * t90, t76, pkin(2) * t90 + t76 * pkin(8), 0, 0, 0, 0, 0, 0, -t41 * t90, -t45 * t90, t17 * t45 - t19 * t41, t19 * t29 - t56 * t90 + t96, 0, 0, 0, 0, 0, 0, t10 * t41 + t17 * t93, -t11 * t41 + t17 * t89, -t78 * t45, t10 * t7 + t11 * t8 + t96, 0, 0, 0, 0, 0, 0, t17 * t14 + t3 * t41, t17 * t16 - t4 * t41, -t4 * t14 - t3 * t16, t3 * t1 + t17 * t12 + t4 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t60, t69 * t102, 0, t61, 0, 0, pkin(2) * t102, -0.2e1 * pkin(2) * t69, 0.2e1 * t85 * pkin(8), t85 * pkin(8) ^ 2 + pkin(2) ^ 2, t39, t84, 0, t37, 0, 0, t41 * t103, t45 * t103, 0.2e1 * t27 * t45 - 0.2e1 * t29 * t41, t29 ^ 2 + t56 ^ 2 + t106, t59 * t39, -0.2e1 * t39 * t92, t89 * t105, t57 * t39, t62 * t84, t37, 0.2e1 * t27 * t93 + 0.2e1 * t7 * t41, 0.2e1 * t27 * t89 - 0.2e1 * t8 * t41, t80 * t108, t7 ^ 2 + t8 ^ 2 + t106, t16 ^ 2, -0.2e1 * t16 * t14, t16 * t105, t14 ^ 2, -t14 * t105, t37, 0.2e1 * t1 * t41 + 0.2e1 * t12 * t14, 0.2e1 * t12 * t16 - 0.2e1 * t2 * t41, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t12 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t34, 0, 0, 0, 0, 0, 0, 0, 0, -t17, -t19, 0 (-t17 * t66 + t19 * t63) * pkin(3), 0, 0, 0, 0, 0, 0, -t17 * t65, t17 * t62, t77, t17 * t55 + t77 * t51, 0, 0, 0, 0, 0, 0, -t17 * t107, t17 * t46, t107 * t4 - t3 * t46, t17 * t48 + t3 * t22 + t4 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, t71, 0, -t69 * pkin(8), -t71 * pkin(8), 0, 0, 0, 0, t45, 0, -t41, 0, -t27, -t29 (-t41 * t63 - t45 * t66) * pkin(3) (-t27 * t66 + t29 * t63) * pkin(3), t83 (-t57 + t59) * t45, t94, -t83, t32, 0, -t27 * t65 + t75 * t62, t27 * t62 + t75 * t65, t79, t27 * t55 + t79 * t51, t16 * t46, -t9 + t97, t95, -t14 * t107, t26, 0, -t107 * t12 + t48 * t14 + t22 * t41, t12 * t46 + t48 * t16 - t23 * t41, -t1 * t46 + t107 * t2 - t23 * t14 - t22 * t16, t1 * t22 + t12 * t48 + t2 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t100, -0.2e1 * t101, 0 (t63 ^ 2 + t66 ^ 2) * pkin(3) ^ 2, t57, 0.2e1 * t92, 0, t59, 0, 0, -0.2e1 * t55 * t65, 0.2e1 * t55 * t62, 0.2e1 * t86 * t51, t86 * t51 ^ 2 + t55 ^ 2, t40, 0.2e1 * t46 * t107, 0, t38, 0, 0, -t107 * t104, t46 * t104, 0.2e1 * t107 * t23 - 0.2e1 * t22 * t46, t22 ^ 2 + t23 ^ 2 + t48 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107 * t3 + t4 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t45, 0, t56, 0, 0, 0, 0, 0, 0, t32, -t94, -t86 * t45, t80, 0, 0, 0, 0, 0, 0, t26, -t95, -t9 - t97, t1 * t107 + t2 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107 * t22 + t23 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 + t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, t89, 0, t27, 0, 0, 0, 0, 0, 0, t14, t16, 0, t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, t62, 0, t55, 0, 0, 0, 0, 0, 0, -t107, t46, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, t41, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, t107, 0, t22, -t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, -t46, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t15;
