% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRR9_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR9_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RPRPRR9_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 19:36:51
% EndTime: 2019-05-05 19:36:59
% DurationCPUTime: 2.69s
% Computational Cost: add. (6084->222), mult. (16678->441), div. (0->0), fcn. (19469->14), ass. (0->133)
t89 = cos(pkin(7));
t96 = cos(qJ(3));
t126 = t89 * t96;
t85 = sin(pkin(7));
t129 = t85 * t96;
t84 = sin(pkin(12));
t86 = sin(pkin(6));
t88 = cos(pkin(12));
t90 = cos(pkin(6));
t93 = sin(qJ(3));
t41 = -t90 * t129 - (t88 * t126 - t84 * t93) * t86;
t127 = t88 * t89;
t130 = t85 * t93;
t43 = t90 * t130 + (t93 * t127 + t84 * t96) * t86;
t83 = sin(pkin(13));
t87 = cos(pkin(13));
t34 = -t83 * t41 + t87 * t43;
t128 = t86 * t88;
t58 = t85 * t128 - t90 * t89;
t92 = sin(qJ(5));
t95 = cos(qJ(5));
t27 = t92 * t34 + t58 * t95;
t158 = t27 ^ 2;
t32 = t87 * t41 + t83 * t43;
t157 = t32 ^ 2;
t56 = (t83 * t96 + t87 * t93) * t85;
t47 = t92 * t56 - t95 * t89;
t156 = t47 ^ 2;
t54 = -t87 * t129 + t83 * t130;
t155 = t54 ^ 2;
t154 = -0.2e1 * t27;
t153 = -0.2e1 * t32;
t152 = -0.2e1 * t58;
t151 = 0.2e1 * t58;
t150 = 0.2e1 * t86;
t149 = 0.2e1 * t92;
t148 = pkin(1) * t90;
t94 = cos(qJ(6));
t147 = pkin(5) * t94;
t131 = t84 * t86;
t67 = t88 * t148;
t44 = t90 * pkin(2) + t67 + (-pkin(9) * t89 - qJ(2)) * t131;
t52 = (-pkin(9) * t84 * t85 - pkin(2) * t88 - pkin(1)) * t86;
t35 = -t85 * t44 + t89 * t52;
t26 = t41 * pkin(3) + t35;
t12 = t32 * pkin(4) - t34 * pkin(10) + t26;
t111 = qJ(2) * t86;
t61 = t88 * t111 + t84 * t148;
t40 = (t86 * t127 + t85 * t90) * pkin(9) + t61;
t23 = t44 * t126 + t52 * t129 - t93 * t40;
t19 = -t58 * pkin(3) - t43 * qJ(4) + t23;
t24 = t96 * t40 + (t44 * t89 + t52 * t85) * t93;
t22 = -t41 * qJ(4) + t24;
t11 = t83 * t19 + t87 * t22;
t9 = -t58 * pkin(10) + t11;
t5 = t95 * t12 - t92 * t9;
t3 = -t32 * pkin(5) - t5;
t91 = sin(qJ(6));
t146 = t3 * t91;
t145 = t3 * t94;
t144 = t83 * pkin(3);
t143 = t87 * pkin(3);
t142 = t95 * pkin(5);
t29 = t95 * t34 - t58 * t92;
t14 = t91 * t29 - t94 * t32;
t141 = t14 * t94;
t16 = t94 * t29 + t91 * t32;
t140 = t16 * t91;
t139 = t16 * t95;
t138 = t27 * t95;
t137 = t29 * t92;
t136 = t29 * t95;
t135 = t47 * t95;
t77 = t86 ^ 2;
t134 = t77 * t88;
t79 = t91 ^ 2;
t133 = t79 * t92;
t71 = pkin(10) + t144;
t80 = t92 ^ 2;
t132 = t80 * t71;
t125 = t91 * t27;
t124 = t91 * t92;
t123 = t91 * t94;
t122 = t91 * t95;
t25 = t92 * t27;
t121 = t92 * t32;
t120 = t92 * t71;
t119 = t94 * t27;
t118 = t94 * t92;
t117 = t94 * t95;
t116 = t95 * t14;
t115 = t95 * t71;
t114 = -t87 * t19 + t83 * t22;
t81 = t94 ^ 2;
t113 = t79 + t81;
t82 = t95 ^ 2;
t112 = t80 + t82;
t110 = t90 * t150;
t109 = t95 * t149;
t108 = t16 * t124;
t107 = t91 * t25;
t106 = t27 * t118;
t105 = t91 * t118;
t72 = -pkin(4) - t143;
t104 = t113 * pkin(11);
t8 = t58 * pkin(4) + t114;
t6 = t92 * t12 + t95 * t9;
t4 = t32 * pkin(11) + t6;
t7 = t27 * pkin(5) - t29 * pkin(11) + t8;
t1 = -t91 * t4 + t94 * t7;
t2 = t94 * t4 + t91 * t7;
t103 = -t1 * t91 + t2 * t94;
t102 = -t5 * t92 + t6 * t95;
t49 = t95 * t56 + t92 * t89;
t36 = -t91 * t49 + t94 * t54;
t37 = t94 * t49 + t91 * t54;
t101 = -t36 * t91 + t37 * t94;
t62 = -t92 * pkin(11) - t142 + t72;
t45 = -t91 * t115 + t94 * t62;
t46 = t94 * t115 + t91 * t62;
t100 = -t45 * t91 + t46 * t94;
t99 = t47 * t92 + t49 * t95;
t78 = t89 ^ 2;
t75 = t81 * t92;
t74 = t81 * t80;
t73 = t79 * t80;
t68 = t71 ^ 2;
t63 = t80 * t68;
t60 = -t84 * t111 + t67;
t57 = t58 ^ 2;
t31 = t95 * t32;
t13 = t14 * t118;
t10 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t77 * t84 ^ 2, 0.2e1 * t84 * t134, t84 * t110, t77 * t88 ^ 2, t88 * t110, t90 ^ 2, 0.2e1 * pkin(1) * t134 + 0.2e1 * t60 * t90, -0.2e1 * t77 * pkin(1) * t84 - 0.2e1 * t61 * t90 (-t60 * t84 + t61 * t88) * t150, t77 * pkin(1) ^ 2 + t60 ^ 2 + t61 ^ 2, t43 ^ 2, -0.2e1 * t43 * t41, t43 * t152, t41 ^ 2, t41 * t151, t57, -0.2e1 * t23 * t58 + 0.2e1 * t35 * t41, 0.2e1 * t24 * t58 + 0.2e1 * t35 * t43, -0.2e1 * t23 * t43 - 0.2e1 * t24 * t41, t23 ^ 2 + t24 ^ 2 + t35 ^ 2, t34 ^ 2, t34 * t153, t34 * t152, t157, t32 * t151, t57, 0.2e1 * t114 * t58 + 0.2e1 * t26 * t32, 0.2e1 * t11 * t58 + 0.2e1 * t26 * t34, -0.2e1 * t11 * t32 + 0.2e1 * t114 * t34, t11 ^ 2 + t114 ^ 2 + t26 ^ 2, t29 ^ 2, t29 * t154, 0.2e1 * t29 * t32, t158, t27 * t153, t157, 0.2e1 * t8 * t27 + 0.2e1 * t5 * t32, 0.2e1 * t8 * t29 - 0.2e1 * t6 * t32, -0.2e1 * t6 * t27 - 0.2e1 * t5 * t29, t5 ^ 2 + t6 ^ 2 + t8 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, 0.2e1 * t16 * t27, t14 ^ 2, t14 * t154, t158, 0.2e1 * t1 * t27 + 0.2e1 * t3 * t14, 0.2e1 * t3 * t16 - 0.2e1 * t2 * t27, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128, t131, 0, -t86 * pkin(1), 0, 0, 0, 0, 0, 0, -t58 * t129 + t89 * t41, t58 * t130 + t89 * t43 (-t41 * t93 - t43 * t96) * t85, t35 * t89 + (t23 * t96 + t24 * t93) * t85, 0, 0, 0, 0, 0, 0, t89 * t32 + t54 * t58, t89 * t34 + t56 * t58, -t56 * t32 + t54 * t34, t11 * t56 + t114 * t54 + t26 * t89, 0, 0, 0, 0, 0, 0, t54 * t27 - t47 * t32, t54 * t29 - t49 * t32, -t49 * t27 + t47 * t29, -t5 * t47 + t6 * t49 + t8 * t54, 0, 0, 0, 0, 0, 0, t47 * t14 + t36 * t27, t47 * t16 - t37 * t27, -t37 * t14 - t36 * t16, t1 * t36 + t2 * t37 + t3 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78 + (t93 ^ 2 + t96 ^ 2) * t85 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56 ^ 2 + t155 + t78, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 ^ 2 + t155 + t156, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 ^ 2 + t37 ^ 2 + t156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, -t41, -t58, t23, -t24, 0, 0, 0, 0, t34, 0, -t32, -t58, -t58 * t143 - t114, t58 * t144 - t11 (-t32 * t83 - t34 * t87) * pkin(3) (t11 * t83 - t114 * t87) * pkin(3), t137, -t25 + t136, t121, -t138, t31, 0, -t32 * t120 + t72 * t27 - t8 * t95, -t115 * t32 + t72 * t29 + t8 * t92 (t137 - t138) * t71 + t102, t102 * t71 + t8 * t72, t16 * t118, -t13 - t108, t106 - t139, t14 * t124, -t107 + t116, -t138, -t1 * t95 + t45 * t27 + (t14 * t71 + t146) * t92, t2 * t95 - t46 * t27 + (t16 * t71 + t145) * t92, -t46 * t14 - t45 * t16 + (-t1 * t94 - t2 * t91) * t92, t1 * t45 + t120 * t3 + t2 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, -t130, 0, 0, 0, 0, 0, 0, 0, 0, -t54, -t56, 0 (-t54 * t87 + t56 * t83) * pkin(3), 0, 0, 0, 0, 0, 0, -t54 * t95, t54 * t92, t99, t54 * t72 + t71 * t99, 0, 0, 0, 0, 0, 0, t124 * t47 - t36 * t95, t118 * t47 + t37 * t95 (-t36 * t94 - t37 * t91) * t92, t120 * t47 + t36 * t45 + t37 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t143, -0.2e1 * t144, 0 (t83 ^ 2 + t87 ^ 2) * pkin(3) ^ 2, t80, t109, 0, t82, 0, 0, -0.2e1 * t72 * t95, t72 * t149, 0.2e1 * t112 * t71, t82 * t68 + t72 ^ 2 + t63, t74, -0.2e1 * t80 * t123, -0.2e1 * t92 * t117, t73, t91 * t109, t82, 0.2e1 * t132 * t91 - 0.2e1 * t45 * t95, 0.2e1 * t132 * t94 + 0.2e1 * t46 * t95 (-t45 * t94 - t46 * t91) * t149, t45 ^ 2 + t46 ^ 2 + t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, t34, 0, t26, 0, 0, 0, 0, 0, 0, t31, -t121, -t25 - t136, t5 * t95 + t6 * t92, 0, 0, 0, 0, 0, 0, -t107 - t116, -t106 - t139, -t13 + t108, t103 * t92 - t3 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * t92 - t135, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101 * t92 - t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t100 - t115) * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74 + t73 + t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t27, t32, t5, -t6, 0, 0, t140, -t91 * t14 + t16 * t94, t125, -t141, t119, 0, -pkin(5) * t14 - pkin(11) * t125 - t145, -pkin(5) * t16 - pkin(11) * t119 + t146 (t140 - t141) * pkin(11) + t103, -t3 * pkin(5) + pkin(11) * t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t49, 0, 0, 0, 0, 0, 0, 0, 0, -t47 * t94, t47 * t91, t101, -t47 * pkin(5) + pkin(11) * t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t95, 0, -t120, -t115, 0, 0, t105, t75 - t133, -t122, -t105, -t117, 0, -t71 * t118 + (-pkin(5) * t92 + pkin(11) * t95) * t91, pkin(11) * t117 + (t71 * t91 - t147) * t92, t100, -pkin(5) * t120 + pkin(11) * t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t92, 0, 0, 0, 0, 0, 0, 0, 0, t117, -t122, t75 + t133, t104 * t92 + t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t79, 0.2e1 * t123, 0, t81, 0, 0, 0.2e1 * t147, -0.2e1 * pkin(5) * t91, 0.2e1 * t104, pkin(11) ^ 2 * t113 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, t27, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t37, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, 0, -t124, -t95, t45, -t46, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t124, -t118, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, t94, 0, -t91 * pkin(11), -t94 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t10;
