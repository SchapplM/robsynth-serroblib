% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP5_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:48:58
% EndTime: 2019-05-05 17:49:02
% DurationCPUTime: 1.53s
% Computational Cost: add. (1608->121), mult. (3150->226), div. (0->0), fcn. (3756->8), ass. (0->90)
t105 = cos(qJ(5));
t67 = sin(pkin(10));
t69 = cos(pkin(10));
t71 = sin(qJ(5));
t116 = t105 * t69 - t71 * t67;
t106 = cos(qJ(3));
t68 = sin(pkin(9));
t70 = cos(pkin(9));
t72 = sin(qJ(3));
t55 = t106 * t68 + t72 * t70;
t24 = t116 * t55;
t15 = t24 * t116;
t54 = t105 * t67 + t71 * t69;
t22 = t54 * t55;
t99 = t54 * t22;
t120 = -t99 + t15;
t61 = -t69 * pkin(4) - pkin(3);
t78 = pkin(5) * t116 + t54 * qJ(6);
t27 = t61 - t78;
t119 = -0.2e1 * t27;
t118 = -0.2e1 * t55;
t117 = -t99 - t15;
t112 = t116 ^ 2;
t46 = t54 ^ 2;
t115 = t46 + t112;
t114 = t22 ^ 2;
t93 = pkin(7) + qJ(2);
t56 = t93 * t68;
t58 = t93 * t70;
t33 = t106 * t56 + t72 * t58;
t113 = t33 ^ 2;
t52 = -t106 * t70 + t72 * t68;
t45 = t52 ^ 2;
t111 = 0.2e1 * t52;
t110 = 0.2e1 * t61;
t62 = -t70 * pkin(2) - pkin(1);
t109 = 0.2e1 * t62;
t108 = 0.2e1 * t70;
t28 = t52 * pkin(3) - t55 * qJ(4) + t62;
t36 = t106 * t58 - t72 * t56;
t12 = t67 * t28 + t69 * t36;
t97 = t67 * t55;
t10 = -pkin(8) * t97 + t12;
t11 = t69 * t28 - t67 * t36;
t95 = t69 * t55;
t8 = t52 * pkin(4) - pkin(8) * t95 + t11;
t4 = t105 * t10 + t71 * t8;
t107 = t52 * pkin(5);
t104 = t22 * t116;
t103 = t24 * t22;
t92 = pkin(8) + qJ(4);
t57 = t92 * t69;
t83 = t92 * t67;
t31 = t105 * t83 + t71 * t57;
t102 = t31 * t52;
t35 = t105 * t57 - t71 * t83;
t101 = t35 * t52;
t38 = t116 * t54;
t100 = t52 * t22;
t37 = t52 * t116;
t39 = t54 * t52;
t98 = t67 * t52;
t96 = t67 * t69;
t63 = t67 ^ 2;
t65 = t69 ^ 2;
t91 = t63 + t65;
t64 = t68 ^ 2;
t66 = t70 ^ 2;
t90 = t64 + t66;
t89 = t52 * qJ(6);
t88 = t52 * t118;
t87 = t31 ^ 2 + t35 ^ 2;
t86 = t67 * t95;
t84 = t71 * t10 - t105 * t8;
t82 = -t35 * t22 + t31 * t24;
t81 = -t116 * t31 + t54 * t35;
t18 = pkin(4) * t97 + t33;
t79 = -pkin(3) * t55 - qJ(4) * t52;
t77 = t11 * t69 + t12 * t67;
t76 = -t11 * t67 + t12 * t69;
t75 = 0.2e1 * t116 * t35 + 0.2e1 * t31 * t54;
t47 = t55 ^ 2;
t42 = t69 * t52;
t21 = t24 ^ 2;
t16 = t24 * t54;
t14 = t24 * t111;
t5 = t22 * pkin(5) - t24 * qJ(6) + t18;
t2 = t84 - t107;
t1 = t89 + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64, t68 * t108, 0, t66, 0, 0, pkin(1) * t108, -0.2e1 * pkin(1) * t68, 0.2e1 * t90 * qJ(2), t90 * qJ(2) ^ 2 + pkin(1) ^ 2, t47, t88, 0, t45, 0, 0, t52 * t109, t55 * t109, 0.2e1 * t33 * t55 - 0.2e1 * t36 * t52, t36 ^ 2 + t62 ^ 2 + t113, t65 * t47, -0.2e1 * t47 * t96, t95 * t111, t63 * t47, t67 * t88, t45, 0.2e1 * t11 * t52 + 0.2e1 * t33 * t97, -0.2e1 * t12 * t52 + 0.2e1 * t33 * t95, t77 * t118, t11 ^ 2 + t12 ^ 2 + t113, t21, -0.2e1 * t103, t14, t114, -0.2e1 * t100, t45, 0.2e1 * t18 * t22 - 0.2e1 * t52 * t84, 0.2e1 * t18 * t24 - 0.2e1 * t4 * t52, -0.2e1 * t4 * t22 + 0.2e1 * t24 * t84, t18 ^ 2 + t4 ^ 2 + t84 ^ 2, t21, t14, 0.2e1 * t103, t45, 0.2e1 * t100, t114, -0.2e1 * t2 * t52 + 0.2e1 * t5 * t22, -0.2e1 * t1 * t22 + 0.2e1 * t2 * t24, 0.2e1 * t1 * t52 - 0.2e1 * t5 * t24, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70, t68, 0, -pkin(1), 0, 0, 0, 0, 0, 0, t52, t55, 0, t62, 0, 0, 0, 0, 0, 0, t42, -t98, -t91 * t55, t77, 0, 0, 0, 0, 0, 0, t37, -t39, t117, -t116 * t84 + t4 * t54, 0, 0, 0, 0, 0, 0, t37, t117, t39, t1 * t54 - t116 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, -t52, 0, -t33, -t36, 0, 0, t86 (-t63 + t65) * t55, t98, -t86, t42, 0, -t33 * t69 + t79 * t67, t33 * t67 + t79 * t69, t76, -t33 * pkin(3) + t76 * qJ(4), t16, t120, t39, -t104, t37, 0, -t116 * t18 + t61 * t22 - t102, t18 * t54 + t61 * t24 - t101, t116 * t4 + t54 * t84 + t82, t18 * t61 + t31 * t84 + t4 * t35, t16, t39, -t120, 0, -t37, -t104, -t116 * t5 + t27 * t22 - t102, t1 * t116 + t2 * t54 + t82, -t27 * t24 - t5 * t54 + t101, t1 * t35 + t2 * t31 + t5 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t63, 0.2e1 * t96, 0, t65, 0, 0, 0.2e1 * pkin(3) * t69, -0.2e1 * pkin(3) * t67, 0.2e1 * t91 * qJ(4), t91 * qJ(4) ^ 2 + pkin(3) ^ 2, t46, 0.2e1 * t38, 0, t112, 0, 0, -t116 * t110, t54 * t110, t75, t61 ^ 2 + t87, t46, 0, -0.2e1 * t38, 0, 0, t112, t116 * t119, t75, t54 * t119, t27 ^ 2 + t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, t95, 0, t33, 0, 0, 0, 0, 0, 0, t22, t24, 0, t18, 0, 0, 0, 0, 0, 0, t22, 0, -t24, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t67, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t116, t54, 0, t61, 0, 0, 0, 0, 0, 0, -t116, 0, -t54, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t22, t52, -t84, -t4, 0, 0, 0, t24, 0, t52, t22, 0, -t84 + 0.2e1 * t107, -pkin(5) * t24 - t22 * qJ(6), 0.2e1 * t89 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116, -t54, 0, 0, 0, 0, 0, 0, 0, 0, t116, 0, t54, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t116, 0, -t31, -t35, 0, 0, 0, t54, 0, 0, -t116, 0, -t31, -pkin(5) * t54 + qJ(6) * t116, t35, -t31 * pkin(5) + t35 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t52, t24, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
