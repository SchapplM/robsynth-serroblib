% Calculate minimal parameter regressor of joint inertia matrix for
% S6RRRPRR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x35]
%   minimal parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR15_inertiaJ_regmin_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR15_inertiaJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR15_inertiaJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 17:21:03
% EndTime: 2019-05-07 17:21:11
% DurationCPUTime: 2.27s
% Computational Cost: add. (2530->219), mult. (6844->460), div. (0->0), fcn. (7881->12), ass. (0->132)
t85 = cos(pkin(7));
t94 = cos(qJ(2));
t125 = t85 * t94;
t84 = sin(pkin(6));
t104 = t84 * t125;
t128 = t84 * t94;
t90 = sin(qJ(2));
t142 = pkin(1) * t90;
t86 = cos(pkin(6));
t61 = pkin(9) * t128 + t142 * t86;
t83 = sin(pkin(7));
t35 = (t83 * t86 + t104) * pkin(10) + t61;
t129 = t84 * t90;
t71 = t86 * t94 * pkin(1);
t40 = t86 * pkin(2) + t71 + (-pkin(10) * t85 - pkin(9)) * t129;
t49 = (-pkin(10) * t83 * t90 - pkin(2) * t94 - pkin(1)) * t84;
t89 = sin(qJ(3));
t93 = cos(qJ(3));
t16 = -t89 * t35 + (t40 * t85 + t49 * t83) * t93;
t150 = -2 * pkin(3);
t130 = t83 * t93;
t38 = -t104 * t93 + t129 * t89 - t130 * t86;
t54 = t128 * t83 - t85 * t86;
t88 = sin(qJ(5));
t92 = cos(qJ(5));
t26 = -t38 * t92 - t54 * t88;
t149 = -0.2e1 * t26;
t74 = t83 * t89;
t39 = t86 * t74 + (t125 * t89 + t90 * t93) * t84;
t148 = -0.2e1 * t39;
t56 = t130 * t92 + t85 * t88;
t147 = -0.2e1 * t56;
t146 = 0.2e1 * t83;
t91 = cos(qJ(6));
t145 = 0.2e1 * t91;
t144 = 2 * qJ(4);
t143 = pkin(3) + pkin(11);
t141 = pkin(2) * t93;
t8 = t39 * pkin(4) + t143 * t54 - t16;
t25 = -t83 * t40 + t49 * t85;
t97 = -t39 * qJ(4) + t25;
t9 = t143 * t38 + t97;
t5 = t8 * t92 - t88 * t9;
t3 = -pkin(5) * t39 - t5;
t87 = sin(qJ(6));
t140 = t3 * t87;
t139 = t3 * t91;
t138 = t54 * pkin(3);
t27 = t38 * t88 - t54 * t92;
t19 = t27 * t91 + t39 * t87;
t137 = t19 * t87;
t102 = -pkin(3) - t141;
t67 = pkin(10) * t74;
t37 = pkin(4) * t74 + t67 + (-pkin(11) + t102) * t85;
t101 = -qJ(4) * t89 - pkin(2);
t45 = (-t143 * t93 + t101) * t83;
t22 = t37 * t92 - t45 * t88;
t20 = -pkin(5) * t74 - t22;
t136 = t20 * t87;
t135 = t20 * t91;
t134 = t39 * t88;
t57 = -t130 * t88 + t85 * t92;
t42 = t57 * t91 + t74 * t87;
t133 = t42 * t87;
t77 = t83 ^ 2;
t132 = t77 * t93;
t78 = t84 ^ 2;
t131 = t78 * t94;
t127 = t85 * t89;
t126 = t85 * t93;
t124 = t87 * t26;
t123 = t87 * t56;
t122 = t87 * t88;
t121 = t87 * t91;
t120 = t87 * t92;
t119 = t88 * t143;
t118 = t91 * t26;
t117 = t91 * t56;
t116 = t91 * t88;
t75 = t91 * t92;
t115 = t91 * t143;
t114 = t92 * t19;
t113 = t92 * t26;
t112 = t92 * t42;
t111 = t92 * t56;
t110 = t92 * t88;
t109 = t92 * t143;
t60 = pkin(2) * t127 + pkin(10) * t130;
t80 = t88 ^ 2;
t82 = t92 ^ 2;
t108 = -t80 - t82;
t53 = qJ(4) * t54;
t107 = 0.2e1 * t74;
t106 = 0.2e1 * t84 * t86;
t105 = -0.2e1 * t110;
t103 = t88 * t74;
t66 = t92 * t74;
t17 = t127 * t40 + t35 * t93 + t49 * t74;
t76 = t85 * qJ(4);
t50 = -t76 - t60;
t100 = -t53 + t17;
t44 = pkin(4) * t130 - t50;
t99 = -pkin(5) * t92 - pkin(12) * t88;
t6 = t8 * t88 + t9 * t92;
t23 = t37 * t88 + t45 * t92;
t10 = -pkin(4) * t38 + t100;
t81 = t91 ^ 2;
t79 = t87 ^ 2;
t73 = t77 * t89 ^ 2;
t63 = pkin(5) * t88 - pkin(12) * t92 + qJ(4);
t59 = -pkin(9) * t129 + t71;
t58 = pkin(2) * t126 - t67;
t52 = t102 * t85 + t67;
t51 = (-pkin(3) * t93 + t101) * t83;
t48 = -t115 * t88 + t63 * t87;
t47 = t119 * t87 + t63 * t91;
t41 = t57 * t87 - t74 * t91;
t36 = t39 ^ 2;
t34 = t39 * t92;
t28 = t39 * t74;
t24 = pkin(5) * t56 - pkin(12) * t57 + t44;
t21 = pkin(12) * t74 + t23;
t18 = t27 * t87 - t39 * t91;
t15 = -t16 + t138;
t13 = pkin(3) * t38 + t97;
t12 = t21 * t91 + t24 * t87;
t11 = -t21 * t87 + t24 * t91;
t7 = pkin(5) * t26 - pkin(12) * t27 + t10;
t4 = pkin(12) * t39 + t6;
t2 = t4 * t91 + t7 * t87;
t1 = -t4 * t87 + t7 * t91;
t14 = [1, 0, 0, t78 * t90 ^ 2, 0.2e1 * t90 * t131, t90 * t106, t94 * t106, t86 ^ 2, 0.2e1 * pkin(1) * t131 + 0.2e1 * t59 * t86, -0.2e1 * t142 * t78 - 0.2e1 * t61 * t86, t36, t38 * t148, t54 * t148, 0.2e1 * t38 * t54, t54 ^ 2, -0.2e1 * t16 * t54 + 0.2e1 * t25 * t38, 0.2e1 * t17 * t54 + 0.2e1 * t25 * t39, -0.2e1 * t100 * t38 + 0.2e1 * t15 * t39, -0.2e1 * t13 * t38 - 0.2e1 * t15 * t54, -0.2e1 * t100 * t54 - 0.2e1 * t13 * t39, t100 ^ 2 + t13 ^ 2 + t15 ^ 2, t27 ^ 2, t27 * t149, 0.2e1 * t27 * t39, t26 * t148, t36, 0.2e1 * t10 * t26 + 0.2e1 * t39 * t5, 0.2e1 * t10 * t27 - 0.2e1 * t39 * t6, t19 ^ 2, -0.2e1 * t19 * t18, 0.2e1 * t19 * t26, t18 * t149, t26 ^ 2, 0.2e1 * t1 * t26 + 0.2e1 * t18 * t3, 0.2e1 * t19 * t3 - 0.2e1 * t2 * t26; 0, 0, 0, 0, 0, t129, t128, t86, t59, -t61, t28 (-t38 * t89 + t39 * t93) * t83, t39 * t85 - t54 * t74, -t130 * t54 - t38 * t85, -t54 * t85, t16 * t85 - t58 * t54 + (-pkin(2) * t38 - t25 * t93) * t83, -t17 * t85 + t60 * t54 + (-pkin(2) * t39 + t25 * t89) * t83, t50 * t38 + t52 * t39 + (t100 * t93 + t15 * t89) * t83, t13 * t130 + t15 * t85 - t38 * t51 - t52 * t54, t100 * t85 - t13 * t74 - t39 * t51 + t50 * t54, -t100 * t50 + t13 * t51 + t15 * t52, t27 * t57, -t26 * t57 - t27 * t56, t27 * t74 + t39 * t57, -t26 * t74 - t39 * t56, t28, t10 * t56 + t22 * t39 + t26 * t44 + t5 * t74, t10 * t57 - t23 * t39 + t27 * t44 - t6 * t74, t19 * t42, -t18 * t42 - t19 * t41, t19 * t56 + t26 * t42, -t18 * t56 - t26 * t41, t26 * t56, t1 * t56 + t11 * t26 + t18 * t20 + t3 * t41, -t12 * t26 + t19 * t20 - t2 * t56 + t3 * t42; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t73, 0.2e1 * t89 * t132, t85 * t107, t126 * t146, t85 ^ 2, 0.2e1 * pkin(2) * t132 + 0.2e1 * t58 * t85, -0.2e1 * pkin(2) * t77 * t89 - 0.2e1 * t60 * t85 (-t50 * t93 + t52 * t89) * t146, 0.2e1 * t130 * t51 + 0.2e1 * t52 * t85, -0.2e1 * t50 * t85 - 0.2e1 * t51 * t74, t50 ^ 2 + t51 ^ 2 + t52 ^ 2, t57 ^ 2, t57 * t147, t57 * t107, t74 * t147, t73, 0.2e1 * t22 * t74 + 0.2e1 * t44 * t56, -0.2e1 * t23 * t74 + 0.2e1 * t44 * t57, t42 ^ 2, -0.2e1 * t42 * t41, 0.2e1 * t42 * t56, t41 * t147, t56 ^ 2, 0.2e1 * t11 * t56 + 0.2e1 * t20 * t41, -0.2e1 * t12 * t56 + 0.2e1 * t20 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, -t38, -t54, t16, -t17, -pkin(3) * t39 - qJ(4) * t38, -t16 + 0.2e1 * t138, t100 - t53, -pkin(3) * t15 + qJ(4) * t100, t27 * t92, -t27 * t88 - t113, t34, -t134, 0, qJ(4) * t26 + t10 * t88 - t109 * t39, qJ(4) * t27 + t10 * t92 + t119 * t39, t91 * t114 (-t18 * t91 - t137) * t92, t113 * t91 + t19 * t88, -t113 * t87 - t18 * t88, t26 * t88, t1 * t88 + t47 * t26 + (t143 * t18 + t140) * t92, -t2 * t88 - t48 * t26 + (t143 * t19 + t139) * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t130, t85, t58, -t60 (-pkin(3) * t89 + qJ(4) * t93) * t83, t67 + (t150 - t141) * t85, 0.2e1 * t76 + t60, -pkin(3) * t52 - qJ(4) * t50, t57 * t92, -t57 * t88 - t111, t66, -t103, 0, qJ(4) * t56 - t143 * t66 + t44 * t88, qJ(4) * t57 + t103 * t143 + t44 * t92, t91 * t112 (-t41 * t91 - t133) * t92, t111 * t91 + t42 * t88, -t111 * t87 - t41 * t88, t56 * t88, t11 * t88 + t47 * t56 + (t143 * t41 + t136) * t92, -t12 * t88 - t48 * t56 + (t143 * t42 + t135) * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, t150, t144, pkin(3) ^ 2 + qJ(4) ^ 2, t82, t105, 0, 0, 0, t88 * t144, t92 * t144, t81 * t82, -0.2e1 * t82 * t121, t110 * t145, t87 * t105, t80, 0.2e1 * t143 * t82 * t87 + 0.2e1 * t47 * t88, 0.2e1 * t115 * t82 - 0.2e1 * t48 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, -t54, 0, t15, 0, 0, 0, 0, 0, t34, -t134, 0, 0, 0, 0, 0, -t122 * t26 - t18 * t92, -t116 * t26 - t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, t85, 0, t52, 0, 0, 0, 0, 0, t66, -t103, 0, 0, 0, 0, 0, -t122 * t56 - t41 * t92, -t116 * t56 - t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108 * t87, t108 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t26, t39, t5, -t6, t137, -t18 * t87 + t19 * t91, t124, t118, 0, -pkin(5) * t18 - pkin(12) * t124 - t139, -pkin(5) * t19 - pkin(12) * t118 + t140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, -t56, t74, t22, -t23, t133, -t41 * t87 + t42 * t91, t123, t117, 0, -pkin(5) * t41 - pkin(12) * t123 - t135, -pkin(5) * t42 - pkin(12) * t117 + t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t88, 0, -t109, t119, t87 * t75 (-t79 + t81) * t92, t122, t116, 0, -t109 * t91 + t87 * t99, t109 * t87 + t91 * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, -t88, 0, 0, 0, 0, 0, t75, -t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t79, 0.2e1 * t121, 0, 0, 0, pkin(5) * t145, -0.2e1 * pkin(5) * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t18, t26, t1, -t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t41, t56, t11, -t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, -t120, t88, t47, -t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t122, -t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, t91, 0, -t87 * pkin(12), -t91 * pkin(12); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0;];
MM_reg  = t14;
