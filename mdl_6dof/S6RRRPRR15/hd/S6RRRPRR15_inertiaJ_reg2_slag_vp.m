% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:42
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRR15_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR15_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRPRR15_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 17:21:03
% EndTime: 2019-05-07 17:21:18
% DurationCPUTime: 4.55s
% Computational Cost: add. (5338->315), mult. (13975->622), div. (0->0), fcn. (15828->12), ass. (0->169)
t101 = cos(pkin(7));
t105 = sin(qJ(3));
t109 = cos(qJ(3));
t102 = cos(pkin(6));
t100 = sin(pkin(6));
t110 = cos(qJ(2));
t149 = t101 * t110;
t133 = t100 * t149;
t152 = t100 * t110;
t106 = sin(qJ(2));
t181 = pkin(1) * t106;
t69 = pkin(9) * t152 + t102 * t181;
t99 = sin(pkin(7));
t37 = (t102 * t99 + t133) * pkin(10) + t69;
t153 = t100 * t106;
t83 = t102 * t110 * pkin(1);
t44 = t102 * pkin(2) + t83 + (-pkin(10) * t101 - pkin(9)) * t153;
t54 = (-pkin(10) * t106 * t99 - pkin(2) * t110 - pkin(1)) * t100;
t16 = -t105 * t37 + (t101 * t44 + t54 * t99) * t109;
t195 = -2 * pkin(3);
t104 = sin(qJ(5));
t108 = cos(qJ(5));
t154 = t99 * t109;
t40 = -t102 * t154 + t105 * t153 - t109 * t133;
t61 = -t101 * t102 + t152 * t99;
t27 = -t104 * t61 - t108 * t40;
t194 = t27 ^ 2;
t193 = t40 ^ 2;
t87 = t99 * t105;
t42 = t102 * t87 - (-t105 * t149 - t106 * t109) * t100;
t38 = t42 ^ 2;
t63 = t101 * t104 + t108 * t154;
t192 = t63 ^ 2;
t191 = -0.2e1 * t27;
t190 = -0.2e1 * t42;
t189 = -0.2e1 * t63;
t188 = 0.2e1 * t99;
t187 = 2 * qJ(4);
t186 = 0.2e1 * t100;
t107 = cos(qJ(6));
t185 = 0.2e1 * t107;
t184 = 0.2e1 * t108;
t183 = pkin(3) + pkin(11);
t182 = t61 * pkin(3);
t180 = pkin(2) * t109;
t179 = t108 * pkin(5);
t178 = t27 * t63;
t103 = sin(qJ(6));
t8 = t42 * pkin(4) + t183 * t61 - t16;
t26 = t101 * t54 - t99 * t44;
t118 = -t42 * qJ(4) + t26;
t9 = t183 * t40 + t118;
t5 = -t104 * t9 + t108 * t8;
t3 = -pkin(5) * t42 - t5;
t177 = t3 * t103;
t176 = t3 * t107;
t175 = t42 * t61;
t174 = t61 * t40;
t151 = t101 * t105;
t68 = pkin(2) * t151 + pkin(10) * t154;
t94 = t103 ^ 2;
t96 = t107 ^ 2;
t173 = t94 + t96;
t95 = t104 ^ 2;
t97 = t108 ^ 2;
t78 = t95 + t97;
t59 = qJ(4) * t61;
t172 = t103 * t27;
t171 = t103 * t63;
t170 = t107 * t27;
t169 = t107 * t63;
t91 = t99 ^ 2;
t168 = t109 * t91;
t92 = t100 ^ 2;
t167 = t110 * t92;
t29 = t104 * t40 - t108 * t61;
t18 = t103 * t29 - t107 * t42;
t166 = t18 * t107;
t20 = t103 * t42 + t107 * t29;
t165 = t20 * t103;
t131 = -pkin(3) - t180;
t79 = pkin(10) * t87;
t39 = pkin(4) * t87 + t79 + (-pkin(11) + t131) * t101;
t129 = -qJ(4) * t105 - pkin(2);
t50 = (-t109 * t183 + t129) * t99;
t23 = -t104 * t50 + t108 * t39;
t21 = -pkin(5) * t87 - t23;
t164 = t21 * t103;
t163 = t21 * t107;
t162 = t27 * t104;
t161 = t29 * t108;
t160 = t42 * t104;
t65 = t101 * t108 - t104 * t154;
t45 = t103 * t65 - t107 * t87;
t159 = t45 * t107;
t47 = t103 * t87 + t107 * t65;
t158 = t47 * t103;
t157 = t63 * t104;
t156 = t65 * t108;
t155 = t97 * t183;
t150 = t101 * t109;
t148 = t103 * t104;
t147 = t103 * t107;
t146 = t103 * t108;
t145 = t104 * t183;
t144 = t107 * t104;
t88 = t107 * t108;
t143 = t107 * t183;
t142 = t108 * t104;
t141 = t108 * t183;
t140 = t40 * t190;
t139 = t102 * t186;
t138 = -0.2e1 * t142;
t17 = t109 * t37 + t151 * t44 + t54 * t87;
t90 = t101 * qJ(4);
t56 = -t90 - t68;
t137 = t40 * t154;
t30 = t42 * t87;
t136 = t104 * t87;
t77 = t108 * t87;
t135 = t99 * t151;
t134 = t99 * t150;
t132 = t103 * t88;
t130 = t173 * t104;
t128 = -t59 + t17;
t49 = pkin(4) * t154 - t56;
t127 = -pkin(12) * t104 - t179;
t6 = t104 * t8 + t108 * t9;
t4 = pkin(12) * t42 + t6;
t10 = -pkin(4) * t40 + t128;
t7 = pkin(5) * t27 - pkin(12) * t29 + t10;
t1 = -t103 * t4 + t107 * t7;
t2 = t103 * t7 + t107 * t4;
t126 = -t1 * t103 + t2 * t107;
t125 = t6 * t104 + t5 * t108;
t24 = t104 * t39 + t108 * t50;
t22 = pkin(12) * t87 + t24;
t25 = pkin(5) * t63 - pkin(12) * t65 + t49;
t11 = -t103 * t22 + t107 * t25;
t12 = t103 * t25 + t107 * t22;
t123 = -t11 * t103 + t12 * t107;
t122 = t165 - t166;
t121 = t158 - t159;
t72 = pkin(5) * t104 - pkin(12) * t108 + qJ(4);
t52 = t103 * t145 + t107 * t72;
t53 = t103 * t72 - t104 * t143;
t120 = -t103 * t52 + t107 * t53;
t119 = t24 * t104 + t23 * t108;
t117 = -t101 * t42 + t61 * t87;
t116 = t101 * t40 + t154 * t61;
t115 = (-t105 * t40 + t109 * t42) * t99;
t112 = qJ(4) ^ 2;
t98 = t183 ^ 2;
t93 = t101 ^ 2;
t89 = t97 * t98;
t86 = t91 * t109 ^ 2;
t85 = t91 * t105 ^ 2;
t73 = 0.2e1 * t105 * t168;
t70 = t78 * t183;
t67 = -pkin(9) * t153 + t83;
t66 = pkin(2) * t150 - t79;
t60 = t61 ^ 2;
t58 = t101 * t131 + t79;
t57 = (-pkin(3) * t109 + t129) * t99;
t55 = t61 * t101;
t36 = t42 * t108;
t15 = -t16 + t182;
t13 = pkin(3) * t40 + t118;
t14 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t92 * t106 ^ 2, 0.2e1 * t106 * t167, t106 * t139, t92 * t110 ^ 2, t110 * t139, t102 ^ 2, 0.2e1 * pkin(1) * t167 + 0.2e1 * t102 * t67, -0.2e1 * t102 * t69 - 0.2e1 * t181 * t92 (-t106 * t67 + t110 * t69) * t186, pkin(1) ^ 2 * t92 + t67 ^ 2 + t69 ^ 2, t38, t140, -0.2e1 * t175, t193, 0.2e1 * t174, t60, -0.2e1 * t16 * t61 + 0.2e1 * t26 * t40, 0.2e1 * t17 * t61 + 0.2e1 * t26 * t42, -0.2e1 * t16 * t42 - 0.2e1 * t17 * t40, t16 ^ 2 + t17 ^ 2 + t26 ^ 2, t60, 0.2e1 * t175, -0.2e1 * t174, t38, t140, t193, -0.2e1 * t128 * t40 + 0.2e1 * t15 * t42, -0.2e1 * t13 * t40 - 0.2e1 * t15 * t61, -0.2e1 * t128 * t61 - 0.2e1 * t13 * t42, t128 ^ 2 + t13 ^ 2 + t15 ^ 2, t29 ^ 2, t29 * t191, 0.2e1 * t29 * t42, t194, t27 * t190, t38, 0.2e1 * t10 * t27 + 0.2e1 * t42 * t5, 0.2e1 * t10 * t29 - 0.2e1 * t42 * t6, -0.2e1 * t27 * t6 - 0.2e1 * t29 * t5, t10 ^ 2 + t5 ^ 2 + t6 ^ 2, t20 ^ 2, -0.2e1 * t20 * t18, 0.2e1 * t20 * t27, t18 ^ 2, t18 * t191, t194, 0.2e1 * t1 * t27 + 0.2e1 * t18 * t3, -0.2e1 * t2 * t27 + 0.2e1 * t20 * t3, -0.2e1 * t1 * t20 - 0.2e1 * t18 * t2, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153, 0, t152, t102, t67, -t69, 0, 0, t30, t115, -t117, -t137, -t116, -t55, t16 * t101 - t66 * t61 + (-pkin(2) * t40 - t109 * t26) * t99, -t17 * t101 + t68 * t61 + (-pkin(2) * t42 + t105 * t26) * t99, -t68 * t40 - t66 * t42 + (-t105 * t16 + t109 * t17) * t99, -pkin(2) * t26 * t99 + t16 * t66 + t17 * t68, -t55, t117, t116, t30, t115, -t137, t56 * t40 + t58 * t42 + (t105 * t15 + t109 * t128) * t99, t101 * t15 + t13 * t154 - t40 * t57 - t58 * t61, t101 * t128 - t13 * t87 - t42 * t57 + t56 * t61, -t128 * t56 + t13 * t57 + t15 * t58, t29 * t65, -t27 * t65 - t29 * t63, t29 * t87 + t42 * t65, t178, -t27 * t87 - t42 * t63, t30, t10 * t63 + t23 * t42 + t27 * t49 + t5 * t87, t10 * t65 - t24 * t42 + t29 * t49 - t6 * t87, -t23 * t29 - t24 * t27 - t5 * t65 - t6 * t63, t10 * t49 + t23 * t5 + t24 * t6, t20 * t47, -t18 * t47 - t20 * t45, t20 * t63 + t27 * t47, t18 * t45, -t18 * t63 - t27 * t45, t178, t1 * t63 + t11 * t27 + t18 * t21 + t3 * t45, -t12 * t27 - t2 * t63 + t20 * t21 + t3 * t47, -t1 * t47 - t11 * t20 - t12 * t18 - t2 * t45, t1 * t11 + t12 * t2 + t21 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t85, t73, 0.2e1 * t135, t86, 0.2e1 * t134, t93, 0.2e1 * pkin(2) * t168 + 0.2e1 * t101 * t66, -0.2e1 * pkin(2) * t105 * t91 - 0.2e1 * t101 * t68 (-t105 * t66 + t109 * t68) * t188, pkin(2) ^ 2 * t91 + t66 ^ 2 + t68 ^ 2, t93, -0.2e1 * t135, -0.2e1 * t134, t85, t73, t86 (t105 * t58 - t109 * t56) * t188, 0.2e1 * t101 * t58 + 0.2e1 * t154 * t57, -0.2e1 * t101 * t56 - 0.2e1 * t57 * t87, t56 ^ 2 + t57 ^ 2 + t58 ^ 2, t65 ^ 2, t65 * t189, 0.2e1 * t65 * t87, t192, t87 * t189, t85, 0.2e1 * t23 * t87 + 0.2e1 * t49 * t63, -0.2e1 * t24 * t87 + 0.2e1 * t49 * t65, -0.2e1 * t23 * t65 - 0.2e1 * t24 * t63, t23 ^ 2 + t24 ^ 2 + t49 ^ 2, t47 ^ 2, -0.2e1 * t47 * t45, 0.2e1 * t47 * t63, t45 ^ 2, t45 * t189, t192, 0.2e1 * t11 * t63 + 0.2e1 * t21 * t45, -0.2e1 * t12 * t63 + 0.2e1 * t21 * t47, -0.2e1 * t11 * t47 - 0.2e1 * t12 * t45, t11 ^ 2 + t12 ^ 2 + t21 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t40, -t61, t16, -t17, 0, 0, -t61, -t42, t40, 0, 0, 0, -pkin(3) * t42 - qJ(4) * t40, -t16 + 0.2e1 * t182, t128 - t59, -pkin(3) * t15 + qJ(4) * t128, t161, -t104 * t29 - t108 * t27, t36, t162, -t160, 0, qJ(4) * t27 + t10 * t104 - t141 * t42, qJ(4) * t29 + t10 * t108 + t145 * t42 (t183 * t29 - t5) * t108 + (t183 * t27 - t6) * t104, t10 * qJ(4) - t125 * t183, t20 * t88 (-t165 - t166) * t108, t104 * t20 + t27 * t88, t18 * t146, -t104 * t18 - t146 * t27, t162, t1 * t104 + t52 * t27 + (t18 * t183 + t177) * t108, -t2 * t104 - t53 * t27 + (t183 * t20 + t176) * t108, -t53 * t18 - t52 * t20 + (-t1 * t107 - t103 * t2) * t108, t1 * t52 + t141 * t3 + t2 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, 0, t154, t101, t66, -t68, 0, 0, t101, -t87, -t154, 0, 0, 0 (-pkin(3) * t105 + qJ(4) * t109) * t99, t79 + (t195 - t180) * t101, 0.2e1 * t90 + t68, -pkin(3) * t58 - qJ(4) * t56, t156, -t104 * t65 - t108 * t63, t77, t157, -t136, 0, qJ(4) * t63 + t104 * t49 - t183 * t77, qJ(4) * t65 + t108 * t49 + t136 * t183 (t183 * t65 - t23) * t108 + (t183 * t63 - t24) * t104, t49 * qJ(4) - t119 * t183, t47 * t88 (-t158 - t159) * t108, t104 * t47 + t63 * t88, t45 * t146, -t104 * t45 - t146 * t63, t157, t11 * t104 + t52 * t63 + (t183 * t45 + t164) * t108, -t12 * t104 - t53 * t63 + (t183 * t47 + t163) * t108, -t53 * t45 - t52 * t47 + (-t103 * t12 - t107 * t11) * t108, t11 * t52 + t12 * t53 + t141 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t195, t187, pkin(3) ^ 2 + t112, t97, t138, 0, t95, 0, 0, t104 * t187, qJ(4) * t184, 0.2e1 * t70, t95 * t98 + t112 + t89, t96 * t97, -0.2e1 * t97 * t147, t142 * t185, t94 * t97, t103 * t138, t95, 0.2e1 * t103 * t155 + 0.2e1 * t104 * t52, -0.2e1 * t104 * t53 + 0.2e1 * t143 * t97 (-t103 * t53 - t107 * t52) * t184, t52 ^ 2 + t53 ^ 2 + t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, -t61, 0, t15, 0, 0, 0, 0, 0, 0, t36, -t160, -t161 - t162, t125, 0, 0, 0, 0, 0, 0, -t108 * t18 - t148 * t27, -t108 * t20 - t144 * t27, t122 * t104, t104 * t126 - t3 * t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, t101, 0, t58, 0, 0, 0, 0, 0, 0, t77, -t136, -t156 - t157, t119, 0, 0, 0, 0, 0, 0, -t108 * t45 - t148 * t63, -t108 * t47 - t144 * t63, t121 * t104, t104 * t123 - t21 * t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t78, -t70, 0, 0, 0, 0, 0, 0, -t78 * t103, -t78 * t107, 0, t104 * t120 - t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173 * t95 + t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, 0, -t27, t42, t5, -t6, 0, 0, t165, -t103 * t18 + t107 * t20, t172, -t166, t170, 0, -pkin(5) * t18 - pkin(12) * t172 - t176, -pkin(5) * t20 - pkin(12) * t170 + t177, pkin(12) * t122 + t126, -t3 * pkin(5) + pkin(12) * t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, -t63, t87, t23, -t24, 0, 0, t158, -t103 * t45 + t107 * t47, t171, -t159, t169, 0, -pkin(5) * t45 - pkin(12) * t171 - t163, -pkin(5) * t47 - pkin(12) * t169 + t164, pkin(12) * t121 + t123, -t21 * pkin(5) + pkin(12) * t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, -t104, 0, -t141, t145, 0, 0, t132 (-t94 + t96) * t108, t148, -t132, t144, 0, t103 * t127 - t107 * t141, t103 * t141 + t107 * t127, t120, -pkin(5) * t141 + pkin(12) * t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, -t104, 0, 0, 0, 0, 0, 0, 0, 0, t88, -t146, t130, pkin(12) * t130 + t179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t94, 0.2e1 * t147, 0, t96, 0, 0, pkin(5) * t185, -0.2e1 * pkin(5) * t103, 0.2e1 * t173 * pkin(12), pkin(12) ^ 2 * t173 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, t27, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t45, t63, t11, -t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, -t146, t104, t52, -t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, -t144, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, 0, t107, 0, -t103 * pkin(12), -t107 * pkin(12), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t14;
