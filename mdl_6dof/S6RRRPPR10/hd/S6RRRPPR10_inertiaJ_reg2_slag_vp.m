% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d3,d6,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:29
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPPR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR10_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRRPPR10_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:05:30
% EndTime: 2019-05-07 07:05:39
% DurationCPUTime: 2.81s
% Computational Cost: add. (2728->236), mult. (6030->431), div. (0->0), fcn. (6768->10), ass. (0->143)
t99 = sin(qJ(3));
t91 = t99 ^ 2;
t101 = cos(qJ(3));
t92 = t101 ^ 2;
t167 = t91 + t92;
t154 = cos(qJ(6));
t93 = sin(pkin(11));
t95 = cos(pkin(11));
t98 = sin(qJ(6));
t61 = t154 * t93 + t98 * t95;
t164 = t61 ^ 2;
t119 = t154 * t95;
t63 = -t98 * t93 + t119;
t59 = t63 ^ 2;
t166 = t59 + t164;
t100 = sin(qJ(2));
t94 = sin(pkin(6));
t134 = t94 * t100;
t96 = cos(pkin(6));
t52 = -t96 * t101 + t99 * t134;
t165 = t52 ^ 2;
t54 = t101 * t134 + t96 * t99;
t50 = t54 ^ 2;
t163 = -0.2e1 * t54;
t162 = 0.2e1 * t54;
t77 = t93 * pkin(5) + qJ(4);
t161 = 0.2e1 * t77;
t160 = 0.2e1 * t94;
t159 = -0.2e1 * t99;
t158 = 0.2e1 * t99;
t157 = 0.2e1 * qJ(4);
t156 = 0.2e1 * t101;
t139 = pkin(3) + qJ(5);
t155 = -pkin(10) - t139;
t153 = pkin(1) * t100;
t102 = cos(qJ(2));
t152 = pkin(1) * t102;
t133 = t94 * t102;
t33 = t93 * t133 + t52 * t95;
t34 = t95 * t133 - t52 * t93;
t19 = -t154 * t34 + t98 * t33;
t151 = t19 * t63;
t150 = t33 * t93;
t149 = t54 * t93;
t148 = t54 * t139;
t44 = t54 * t99;
t17 = -t154 * t33 - t98 * t34;
t147 = t61 * t17;
t135 = t93 * t101;
t45 = -t101 * t119 + t98 * t135;
t146 = t61 * t45;
t145 = t61 * t54;
t144 = t61 * t99;
t46 = t61 * t101;
t143 = t63 * t46;
t142 = t93 * t99;
t141 = t95 * t34;
t140 = t95 * t93;
t126 = pkin(8) * t133;
t40 = t126 + (pkin(9) + t153) * t96;
t41 = (-pkin(2) * t102 - pkin(9) * t100 - pkin(1)) * t94;
t23 = t101 * t41 - t99 * t40;
t75 = pkin(3) * t133;
t22 = -t23 + t75;
t12 = t54 * pkin(4) + qJ(5) * t133 + t22;
t74 = pkin(8) * t134;
t39 = t74 + (-pkin(2) - t152) * t96;
t105 = -t54 * qJ(4) + t39;
t14 = t139 * t52 + t105;
t6 = t93 * t12 + t95 * t14;
t24 = t101 * t40 + t99 * t41;
t118 = -t99 * qJ(4) - pkin(2);
t58 = -t139 * t101 + t118;
t83 = t99 * pkin(9);
t70 = t99 * pkin(4) + t83;
t29 = t95 * t58 + t93 * t70;
t138 = t167 * pkin(9) ^ 2;
t85 = t101 * pkin(9);
t71 = t101 * pkin(4) + t85;
t87 = t93 ^ 2;
t89 = t95 ^ 2;
t73 = t87 + t89;
t88 = t94 ^ 2;
t137 = t102 * t88;
t136 = t52 * t101;
t132 = t95 * t101;
t131 = t99 * t101;
t130 = qJ(4) * t101;
t129 = t52 * t163;
t128 = t96 * t160;
t127 = -0.2e1 * t131;
t125 = t54 * t133;
t124 = t93 * t132;
t123 = t52 * t133;
t122 = t99 * t133;
t121 = qJ(4) * t133;
t120 = t101 * t133;
t5 = t95 * t12 - t93 * t14;
t117 = pkin(9) * t122;
t116 = pkin(9) * t120;
t3 = t54 * pkin(5) + t34 * pkin(10) + t5;
t4 = t33 * pkin(10) + t6;
t1 = t154 * t3 - t98 * t4;
t2 = t154 * t4 + t98 * t3;
t115 = t1 * t63 + t2 * t61;
t114 = t5 * t95 + t6 * t93;
t65 = t95 * t70;
t25 = t99 * pkin(5) + t65 + (pkin(10) * t101 - t58) * t93;
t26 = -pkin(10) * t132 + t29;
t8 = t154 * t25 - t98 * t26;
t9 = t154 * t26 + t98 * t25;
t113 = t9 * t61 + t8 * t63;
t28 = -t93 * t58 + t65;
t15 = t28 * t95 + t29 * t93;
t66 = t155 * t93;
t67 = t155 * t95;
t30 = t154 * t67 - t98 * t66;
t31 = t154 * t66 + t98 * t67;
t112 = t30 * t63 + t31 * t61;
t111 = -pkin(3) * t99 + t130;
t21 = t121 - t24;
t110 = -t21 * t101 + t22 * t99;
t109 = t24 * t101 - t23 * t99;
t108 = t54 * t101 - t99 * t52;
t107 = -t139 * t99 + t130;
t106 = (-t136 + t44) * pkin(9);
t16 = -t52 * pkin(4) - t21;
t103 = qJ(4) ^ 2;
t80 = t95 * t99;
t79 = t88 * t102 ^ 2;
t76 = 0.2e1 * t131;
t69 = -t101 * pkin(3) + t118;
t68 = 0.2e1 * t167 * pkin(9);
t60 = t73 * t139;
t57 = t96 * t153 + t126;
t56 = t96 * t152 - t74;
t51 = pkin(5) * t132 + t71;
t49 = t63 * t99;
t43 = t54 * t95;
t32 = t63 * t54;
t20 = t52 * pkin(3) + t105;
t7 = -t33 * pkin(5) + t16;
t10 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88 * t100 ^ 2, 0.2e1 * t100 * t137, t100 * t128, t79, t102 * t128, t96 ^ 2, 0.2e1 * pkin(1) * t137 + 0.2e1 * t56 * t96, -0.2e1 * t88 * t153 - 0.2e1 * t57 * t96 (-t100 * t56 + t102 * t57) * t160, t88 * pkin(1) ^ 2 + t56 ^ 2 + t57 ^ 2, t50, t129, -0.2e1 * t125, t165, 0.2e1 * t123, t79, -0.2e1 * t133 * t23 + 0.2e1 * t39 * t52, 0.2e1 * t133 * t24 + 0.2e1 * t39 * t54, -0.2e1 * t23 * t54 - 0.2e1 * t24 * t52, t23 ^ 2 + t24 ^ 2 + t39 ^ 2, t79, 0.2e1 * t125, -0.2e1 * t123, t50, t129, t165, 0.2e1 * t21 * t52 + 0.2e1 * t22 * t54, -0.2e1 * t133 * t22 - 0.2e1 * t20 * t52, 0.2e1 * t133 * t21 - 0.2e1 * t20 * t54, t20 ^ 2 + t21 ^ 2 + t22 ^ 2, t34 ^ 2, -0.2e1 * t34 * t33, t34 * t163, t33 ^ 2, t33 * t162, t50, -0.2e1 * t16 * t33 + 0.2e1 * t5 * t54, -0.2e1 * t16 * t34 - 0.2e1 * t6 * t54, 0.2e1 * t6 * t33 + 0.2e1 * t5 * t34, t16 ^ 2 + t5 ^ 2 + t6 ^ 2, t19 ^ 2, -0.2e1 * t19 * t17, t19 * t162, t17 ^ 2, t17 * t163, t50, 0.2e1 * t1 * t54 + 0.2e1 * t7 * t17, 0.2e1 * t7 * t19 - 0.2e1 * t2 * t54, -0.2e1 * t1 * t19 - 0.2e1 * t2 * t17, t1 ^ 2 + t2 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, 0, t133, t96, t56, -t57, 0, 0, t44, t108, -t122, -t136, -t120, 0, -pkin(2) * t52 - t39 * t101 + t117, -pkin(2) * t54 + t39 * t99 + t116, t106 + t109, -t39 * pkin(2) + pkin(9) * t109, 0, t122, t120, t44, t108, -t136, t106 + t110, t20 * t101 - t69 * t52 - t117, -t20 * t99 - t69 * t54 - t116, pkin(9) * t110 + t20 * t69, t34 * t135 (t141 - t150) * t101, -t135 * t54 - t34 * t99, -t33 * t132, -t132 * t54 + t33 * t99, t44, t132 * t16 + t28 * t54 - t71 * t33 + t5 * t99, -t135 * t16 - t29 * t54 - t71 * t34 - t6 * t99, t28 * t34 + t29 * t33 + (t5 * t93 - t6 * t95) * t101, t16 * t71 + t5 * t28 + t6 * t29, -t19 * t46, t46 * t17 + t19 * t45, t19 * t99 - t46 * t54, -t17 * t45, -t17 * t99 + t45 * t54, t44, t1 * t99 + t51 * t17 - t7 * t45 + t8 * t54, t51 * t19 - t2 * t99 - t7 * t46 - t9 * t54, t1 * t46 - t9 * t17 - t8 * t19 + t2 * t45, t1 * t8 + t2 * t9 + t7 * t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t91, t76, 0, t92, 0, 0, pkin(2) * t156, pkin(2) * t159, t68, pkin(2) ^ 2 + t138, 0, 0, 0, t91, t76, t92, t68, t69 * t156, t69 * t159, t69 ^ 2 + t138, t87 * t92, 0.2e1 * t92 * t140, t93 * t127, t89 * t92, t95 * t127, t91, 0.2e1 * t132 * t71 + 0.2e1 * t28 * t99, -0.2e1 * t135 * t71 - 0.2e1 * t29 * t99 (t28 * t93 - t29 * t95) * t156, t28 ^ 2 + t29 ^ 2 + t71 ^ 2, t46 ^ 2, -0.2e1 * t46 * t45, -t46 * t158, t45 ^ 2, t45 * t158, t91, -0.2e1 * t51 * t45 + 0.2e1 * t8 * t99, -0.2e1 * t51 * t46 - 0.2e1 * t9 * t99, 0.2e1 * t9 * t45 + 0.2e1 * t8 * t46, t51 ^ 2 + t8 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, -t133, t23, -t24, 0, 0, -t133, -t54, t52, 0, 0, 0, -t54 * pkin(3) - qJ(4) * t52, -t23 + 0.2e1 * t75, -0.2e1 * t121 + t24, -t22 * pkin(3) - t21 * qJ(4), -t141, t95 * t33 + t34 * t93, t43, -t150, -t149, 0, -qJ(4) * t33 - t148 * t95 + t16 * t93, -qJ(4) * t34 + t148 * t93 + t16 * t95 (-t139 * t34 - t5) * t95 + (-t139 * t33 - t6) * t93, t16 * qJ(4) - t114 * t139, t151, -t63 * t17 - t19 * t61, t32, t147, -t145, 0, t77 * t17 + t30 * t54 + t7 * t61, t77 * t19 - t31 * t54 + t7 * t63, -t31 * t17 - t30 * t19 - t115, t1 * t30 + t2 * t31 + t7 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, t101, 0, -t83, -t85, 0, 0, 0, -t99, -t101, 0, 0, 0, t111, t83, t85, t111 * pkin(9), -t124 (t87 - t89) * t101, t80, t124, -t142, 0, t107 * t95 + t71 * t93, -t107 * t93 + t71 * t95, -t15, t71 * qJ(4) - t139 * t15, -t143, t63 * t45 + t46 * t61, t49, -t146, -t144, 0, t30 * t99 - t77 * t45 + t51 * t61, -t31 * t99 - t77 * t46 + t51 * t63, t30 * t46 + t31 * t45 - t113, t8 * t30 + t9 * t31 + t51 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(3), t157, pkin(3) ^ 2 + t103, t89, -0.2e1 * t140, 0, t87, 0, 0, t93 * t157, t95 * t157, 0.2e1 * t60, t139 ^ 2 * t73 + t103, t59, -0.2e1 * t63 * t61, 0, t164, 0, 0, t61 * t161, t63 * t161, -0.2e1 * t112, t30 ^ 2 + t31 ^ 2 + t77 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, -t133, 0, t22, 0, 0, 0, 0, 0, 0, t43, -t149, t141 + t150, t114, 0, 0, 0, 0, 0, 0, t32, -t145, -t147 - t151, t115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, 0, 0, t83, 0, 0, 0, 0, 0, 0, t80, -t142, 0, t15, 0, 0, 0, 0, 0, 0, t49, -t144, t143 + t146, t113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(3), 0, 0, 0, 0, 0, 0, 0, 0, -t73, -t60, 0, 0, 0, 0, 0, 0, 0, 0, -t166, t112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -t34, 0, t16, 0, 0, 0, 0, 0, 0, t17, t19, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, -t135, 0, t71, 0, 0, 0, 0, 0, 0, -t45, -t46, 0, t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, t95, 0, qJ(4), 0, 0, 0, 0, 0, 0, t61, t63, 0, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, -t17, t54, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, 0, t45, t99, t8, -t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, -t61, 0, t30, -t31, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, -t61, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t10;
