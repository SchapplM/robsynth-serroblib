% Calculate inertial parameters regressor of joint inertia matrix for
% S6PPRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [14x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,alpha4,d3,d4,d5,d6,theta1,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:12
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PPRRRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(14,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PPRRRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [14 1]), ...
  'S6PPRRRR3_inertiaJ_reg2_slag_vp: pkin has to be [14x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 21:15:48
% EndTime: 2019-05-04 21:15:55
% DurationCPUTime: 2.02s
% Computational Cost: add. (2059->222), mult. (5821->425), div. (0->0), fcn. (7280->16), ass. (0->117)
t65 = cos(pkin(14));
t67 = cos(pkin(7));
t104 = t65 * t67;
t63 = sin(pkin(7));
t76 = cos(qJ(3));
t105 = t63 * t76;
t61 = sin(pkin(14));
t64 = sin(pkin(6));
t68 = cos(pkin(6));
t72 = sin(qJ(3));
t24 = t68 * t105 + (t104 * t76 - t61 * t72) * t64;
t106 = t63 * t72;
t25 = t68 * t106 + (t104 * t72 + t61 * t76) * t64;
t39 = -t63 * t64 * t65 + t67 * t68;
t62 = sin(pkin(8));
t66 = cos(pkin(8));
t71 = sin(qJ(4));
t75 = cos(qJ(4));
t10 = t25 * t75 + (t24 * t66 + t39 * t62) * t71;
t14 = -t24 * t62 + t39 * t66;
t70 = sin(qJ(5));
t74 = cos(qJ(5));
t3 = t10 * t70 - t14 * t74;
t133 = t3 ^ 2;
t102 = t66 * t75;
t107 = t62 * t75;
t8 = -t102 * t24 - t107 * t39 + t25 * t71;
t132 = t8 ^ 2;
t101 = t66 * t76;
t108 = t62 * t71;
t28 = t67 * t108 + (t101 * t71 + t72 * t75) * t63;
t40 = -t105 * t62 + t66 * t67;
t15 = t28 * t70 - t40 * t74;
t131 = t15 ^ 2;
t26 = -t101 * t63 * t75 + t106 * t71 - t107 * t67;
t130 = t26 ^ 2;
t41 = t108 * t70 - t66 * t74;
t129 = t41 ^ 2;
t43 = t108 * t74 + t66 * t70;
t69 = sin(qJ(6));
t73 = cos(qJ(6));
t29 = t107 * t73 + t43 * t69;
t128 = -0.2e1 * t29;
t127 = -0.2e1 * t43;
t126 = 0.2e1 * t62;
t125 = -0.2e1 * t70;
t124 = 0.2e1 * t74;
t123 = pkin(3) * t71;
t122 = pkin(5) * t73;
t121 = t3 * t15;
t58 = t70 ^ 2;
t120 = t58 * pkin(11);
t119 = t62 * pkin(3);
t118 = t70 * pkin(11);
t117 = t8 * t26;
t116 = t15 * t70;
t89 = pkin(10) * t107;
t37 = t89 + (pkin(11) + t123) * t66;
t38 = (-pkin(4) * t75 - pkin(11) * t71 - pkin(3)) * t62;
t21 = -t37 * t70 + t38 * t74;
t19 = pkin(5) * t107 - t21;
t115 = t19 * t69;
t114 = t19 * t73;
t113 = t29 * t73;
t31 = -t107 * t69 + t43 * t73;
t112 = t31 * t69;
t111 = t41 * t74;
t110 = t43 * t70;
t54 = t62 ^ 2;
t109 = t54 * t75;
t103 = t66 * t71;
t100 = t69 * t41;
t99 = t69 * t70;
t98 = t69 * t73;
t97 = t69 * t74;
t96 = t70 * t41;
t95 = t73 * t41;
t94 = t73 * t70;
t93 = t73 * t74;
t57 = t69 ^ 2;
t59 = t73 ^ 2;
t92 = t57 + t59;
t91 = 0.2e1 * t107;
t90 = t70 * t124;
t88 = t70 * t107;
t87 = t69 * t94;
t86 = t74 * t107;
t5 = t10 * t74 + t14 * t70;
t1 = -t5 * t69 + t73 * t8;
t2 = t5 * t73 + t69 * t8;
t85 = -t1 * t69 + t2 * t73;
t84 = t3 * t70 + t5 * t74;
t50 = pkin(10) * t108;
t36 = t50 + (-pkin(3) * t75 - pkin(4)) * t66;
t18 = t41 * pkin(5) - t43 * pkin(12) + t36;
t22 = t37 * t74 + t38 * t70;
t20 = -pkin(12) * t107 + t22;
t6 = t18 * t73 - t20 * t69;
t7 = t18 * t69 + t20 * t73;
t83 = -t6 * t69 + t7 * t73;
t17 = t28 * t74 + t40 * t70;
t11 = -t17 * t69 + t26 * t73;
t12 = t17 * t73 + t26 * t69;
t82 = -t11 * t69 + t12 * t73;
t81 = t17 * t74 + t116;
t80 = -t21 * t70 + t22 * t74;
t47 = -pkin(5) * t74 - pkin(12) * t70 - pkin(4);
t33 = -pkin(11) * t97 + t47 * t73;
t34 = pkin(11) * t93 + t47 * t69;
t79 = -t33 * t69 + t34 * t73;
t78 = pkin(11) ^ 2;
t60 = t74 ^ 2;
t53 = t58 * t78;
t51 = t54 * t75 ^ 2;
t45 = pkin(3) * t103 + t89;
t44 = pkin(3) * t102 - t50;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 ^ 2 + (t61 ^ 2 + t65 ^ 2) * t64 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 ^ 2 + t25 ^ 2 + t39 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 ^ 2 + t14 ^ 2 + t132, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 ^ 2 + t132 + t133, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 ^ 2 + t2 ^ 2 + t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39 * t67 + (t24 * t76 + t25 * t72) * t63, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t28 + t14 * t40 + t117, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * t5 + t117 + t121, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t11 + t12 * t2 + t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67 ^ 2 + (t72 ^ 2 + t76 ^ 2) * t63 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28 ^ 2 + t40 ^ 2 + t130, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t130 + t131, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11 ^ 2 + t12 ^ 2 + t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, -t25, 0, 0, 0, 0, 0, 0, 0, 0, -t107 * t14 - t66 * t8, -t10 * t66 + t108 * t14 (t10 * t75 + t71 * t8) * t62, t10 * t45 - t119 * t14 - t44 * t8, 0, 0, 0, 0, 0, 0, t107 * t3 + t41 * t8, t107 * t5 + t43 * t8, t3 * t43 - t41 * t5, -t21 * t3 + t22 * t5 + t36 * t8, 0, 0, 0, 0, 0, 0, t1 * t41 + t29 * t3, -t2 * t41 + t3 * t31, -t1 * t31 - t2 * t29, t1 * t6 + t19 * t3 + t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -t106, 0, 0, 0, 0, 0, 0, 0, 0, -t107 * t40 - t26 * t66, t108 * t40 - t28 * t66 (t26 * t71 + t28 * t75) * t62, -t119 * t40 - t26 * t44 + t28 * t45, 0, 0, 0, 0, 0, 0, t107 * t15 + t26 * t41, t107 * t17 + t26 * t43, t15 * t43 - t17 * t41, -t15 * t21 + t17 * t22 + t26 * t36, 0, 0, 0, 0, 0, 0, t11 * t41 + t15 * t29, -t12 * t41 + t15 * t31, -t11 * t31 - t12 * t29, t11 * t6 + t12 * t7 + t15 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t54 * t71 ^ 2, 0.2e1 * t71 * t109, t103 * t126, t51, t66 * t91, t66 ^ 2, 0.2e1 * pkin(3) * t109 + 0.2e1 * t44 * t66, -0.2e1 * t123 * t54 - 0.2e1 * t45 * t66 (-t44 * t71 + t45 * t75) * t126, pkin(3) ^ 2 * t54 + t44 ^ 2 + t45 ^ 2, t43 ^ 2, t41 * t127, t107 * t127, t129, t41 * t91, t51, -0.2e1 * t107 * t21 + 0.2e1 * t36 * t41, 0.2e1 * t107 * t22 + 0.2e1 * t36 * t43, -0.2e1 * t21 * t43 - 0.2e1 * t22 * t41, t21 ^ 2 + t22 ^ 2 + t36 ^ 2, t31 ^ 2, t31 * t128, 0.2e1 * t31 * t41, t29 ^ 2, t41 * t128, t129, 0.2e1 * t19 * t29 + 0.2e1 * t41 * t6, 0.2e1 * t19 * t31 - 0.2e1 * t41 * t7, -0.2e1 * t29 * t7 - 0.2e1 * t31 * t6, t19 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t8, -t10, 0, 0, 0, 0, 0, 0, 0, 0, -t8 * t74, t8 * t70, t84, -t8 * pkin(4) + pkin(11) * t84, 0, 0, 0, 0, 0, 0, -t1 * t74 + t3 * t99, t2 * t74 + t3 * t94 (-t1 * t73 - t2 * t69) * t70, t1 * t33 + t118 * t3 + t2 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, -t28, 0, 0, 0, 0, 0, 0, 0, 0, -t26 * t74, t26 * t70, t81, -t26 * pkin(4) + pkin(11) * t81, 0, 0, 0, 0, 0, 0, -t11 * t74 + t15 * t99, t12 * t74 + t15 * t94 (-t11 * t73 - t12 * t69) * t70, pkin(11) * t116 + t11 * t33 + t12 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, 0, t107, t66, t44, -t45, 0, 0, t110, t43 * t74 - t96, -t88, -t111, -t86, 0, -pkin(4) * t41 + pkin(11) * t88 - t36 * t74, -pkin(4) * t43 + pkin(11) * t86 + t36 * t70 (t110 - t111) * pkin(11) + t80, -t36 * pkin(4) + pkin(11) * t80, t31 * t94 (-t112 - t113) * t70, -t31 * t74 + t41 * t94, t29 * t99, t29 * t74 - t69 * t96, -t111, t33 * t41 - t6 * t74 + (pkin(11) * t29 + t115) * t70, -t34 * t41 + t7 * t74 + (pkin(11) * t31 + t114) * t70, -t34 * t29 - t33 * t31 + (-t6 * t73 - t69 * t7) * t70, t118 * t19 + t33 * t6 + t34 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t58, t90, 0, t60, 0, 0, pkin(4) * t124, pkin(4) * t125, 0.2e1 * (t58 + t60) * pkin(11), pkin(4) ^ 2 + t60 * t78 + t53, t59 * t58, -0.2e1 * t58 * t98, t93 * t125, t57 * t58, t69 * t90, t60, 0.2e1 * t120 * t69 - 0.2e1 * t33 * t74, 0.2e1 * t120 * t73 + 0.2e1 * t34 * t74, 0.2e1 * (-t33 * t73 - t34 * t69) * t70, t33 ^ 2 + t34 ^ 2 + t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3, -t5, 0, 0, 0, 0, 0, 0, 0, 0, -t3 * t73, t3 * t69, t85, -t3 * pkin(5) + pkin(12) * t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0, 0, 0, 0, 0, 0, 0, 0, -t15 * t73, t15 * t69, t82, -t15 * pkin(5) + pkin(12) * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, -t41, -t107, t21, -t22, 0, 0, t112, -t29 * t69 + t31 * t73, t100, -t113, t95, 0, -pkin(5) * t29 - pkin(12) * t100 - t114, -pkin(5) * t31 - pkin(12) * t95 + t115 (t112 - t113) * pkin(12) + t83, -t19 * pkin(5) + pkin(12) * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t74, 0, -t118, -t74 * pkin(11), 0, 0, t87 (-t57 + t59) * t70, -t97, -t87, -t93, 0, -pkin(11) * t94 + (-pkin(5) * t70 + pkin(12) * t74) * t69, pkin(12) * t93 + (pkin(11) * t69 - t122) * t70, t79, -pkin(5) * t118 + pkin(12) * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, 0.2e1 * t98, 0, t59, 0, 0, 0.2e1 * t122, -0.2e1 * pkin(5) * t69, 0.2e1 * t92 * pkin(12), pkin(12) ^ 2 * t92 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, -t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t29, t41, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0, -t99, -t74, t33, -t34, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69, 0, t73, 0, -t69 * pkin(12), -t73 * pkin(12), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t4;
