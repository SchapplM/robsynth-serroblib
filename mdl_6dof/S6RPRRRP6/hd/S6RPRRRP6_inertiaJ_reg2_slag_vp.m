% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:17
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRRRP6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRRRP6_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 01:36:58
% EndTime: 2019-05-06 01:37:02
% DurationCPUTime: 1.73s
% Computational Cost: add. (1892->157), mult. (3711->263), div. (0->0), fcn. (4421->8), ass. (0->98)
t104 = cos(qJ(3));
t77 = sin(pkin(10));
t78 = cos(pkin(10));
t81 = sin(qJ(3));
t54 = t104 * t77 + t81 * t78;
t114 = -0.2e1 * t54;
t96 = pkin(7) + qJ(2);
t61 = t96 * t77;
t62 = t96 * t78;
t31 = t104 * t61 + t62 * t81;
t113 = t31 ^ 2;
t52 = -t104 * t78 + t81 * t77;
t49 = t52 ^ 2;
t79 = sin(qJ(5));
t80 = sin(qJ(4));
t82 = cos(qJ(5));
t83 = cos(qJ(4));
t57 = t79 * t80 - t82 * t83;
t106 = t57 * pkin(5);
t69 = -pkin(4) * t83 - pkin(3);
t41 = t69 + t106;
t112 = 0.2e1 * t41;
t111 = 0.2e1 * t52;
t66 = -pkin(2) * t78 - pkin(1);
t110 = 0.2e1 * t66;
t109 = 0.2e1 * t69;
t108 = 0.2e1 * t78;
t107 = -pkin(9) - pkin(8);
t105 = t79 * pkin(4);
t72 = t82 * pkin(4);
t100 = t80 * t54;
t97 = t83 * t54;
t28 = -t79 * t100 + t82 * t97;
t103 = t28 * t57;
t59 = t79 * t83 + t80 * t82;
t102 = t59 * t52;
t101 = t80 * t52;
t99 = t80 * t83;
t33 = t104 * t62 - t81 * t61;
t98 = t83 * t33;
t73 = t77 ^ 2;
t74 = t78 ^ 2;
t95 = t73 + t74;
t75 = t80 ^ 2;
t76 = t83 ^ 2;
t94 = t75 + t76;
t93 = t52 * t114;
t92 = t80 * t97;
t30 = pkin(3) * t52 - pkin(8) * t54 + t66;
t12 = t83 * t30 - t33 * t80;
t8 = pkin(4) * t52 - pkin(9) * t97 + t12;
t9 = t98 + (-pkin(9) * t54 + t30) * t80;
t3 = -t79 * t9 + t82 * t8;
t63 = t107 * t80;
t64 = t107 * t83;
t39 = t82 * t63 + t64 * t79;
t20 = pkin(4) * t100 + t31;
t91 = -pkin(3) * t54 - pkin(8) * t52;
t4 = t79 * t8 + t82 * t9;
t13 = t30 * t80 + t98;
t90 = t12 * t83 + t13 * t80;
t89 = -t12 * t80 + t13 * t83;
t40 = t63 * t79 - t64 * t82;
t88 = -qJ(6) * t28 + t3;
t48 = t52 * pkin(5);
t1 = t48 + t88;
t26 = t59 * t54;
t2 = -qJ(6) * t26 + t4;
t87 = pkin(4) ^ 2;
t85 = 0.2e1 * pkin(5);
t71 = t79 ^ 2 * t87;
t70 = -0.2e1 * t105;
t68 = t72 + pkin(5);
t56 = t59 ^ 2;
t55 = t57 ^ 2;
t50 = t54 ^ 2;
t47 = t83 * t52;
t46 = t59 * t105;
t45 = t57 * t105;
t43 = t52 * t105;
t36 = t57 * t52;
t35 = -0.2e1 * t59 * t57;
t34 = t56 + t55;
t25 = t28 ^ 2;
t24 = t26 ^ 2;
t23 = -qJ(6) * t57 + t40;
t22 = -qJ(6) * t59 + t39;
t21 = t26 * t105;
t19 = t59 * t26;
t18 = t28 * t59;
t17 = t26 * t57;
t15 = t28 * t111;
t14 = t26 * t111;
t11 = -0.2e1 * t28 * t26;
t10 = pkin(5) * t26 + t20;
t7 = -t19 + t103;
t6 = -t19 - t103;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t73, t77 * t108, 0, t74, 0, 0, pkin(1) * t108, -0.2e1 * pkin(1) * t77, 0.2e1 * t95 * qJ(2), t95 * qJ(2) ^ 2 + pkin(1) ^ 2, t50, t93, 0, t49, 0, 0, t52 * t110, t54 * t110, 0.2e1 * t31 * t54 - 0.2e1 * t33 * t52, t33 ^ 2 + t66 ^ 2 + t113, t76 * t50, -0.2e1 * t50 * t99, t97 * t111, t75 * t50, t80 * t93, t49, 0.2e1 * t31 * t100 + 0.2e1 * t12 * t52, -0.2e1 * t13 * t52 + 0.2e1 * t31 * t97, t90 * t114, t12 ^ 2 + t13 ^ 2 + t113, t25, t11, t15, t24, -t14, t49, 0.2e1 * t20 * t26 + 0.2e1 * t3 * t52, 0.2e1 * t20 * t28 - 0.2e1 * t4 * t52, -0.2e1 * t26 * t4 - 0.2e1 * t28 * t3, t20 ^ 2 + t3 ^ 2 + t4 ^ 2, t25, t11, t15, t24, -t14, t49, 0.2e1 * t1 * t52 + 0.2e1 * t10 * t26, 0.2e1 * t10 * t28 - 0.2e1 * t2 * t52, -0.2e1 * t1 * t28 - 0.2e1 * t2 * t26, t1 ^ 2 + t10 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t78, t77, 0, -pkin(1), 0, 0, 0, 0, 0, 0, t52, t54, 0, t66, 0, 0, 0, 0, 0, 0, t47, -t101, -t94 * t54, t90, 0, 0, 0, 0, 0, 0, -t36, -t102, t7, -t3 * t57 + t4 * t59, 0, 0, 0, 0, 0, 0, -t36, -t102, t7, -t1 * t57 + t2 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, -t52, 0, -t31, -t33, 0, 0, t92 (-t75 + t76) * t54, t101, -t92, t47, 0, -t31 * t83 + t91 * t80, t31 * t80 + t91 * t83, t89, -t31 * pkin(3) + t89 * pkin(8), t18, t6, t102, t17, -t36, 0, t20 * t57 + t26 * t69 + t39 * t52, t20 * t59 + t28 * t69 - t40 * t52, -t26 * t40 - t28 * t39 - t3 * t59 - t4 * t57, t20 * t69 + t3 * t39 + t4 * t40, t18, t6, t102, t17, -t36, 0, t10 * t57 + t22 * t52 + t26 * t41, t10 * t59 - t23 * t52 + t28 * t41, -t1 * t59 - t2 * t57 - t22 * t28 - t23 * t26, t1 * t22 + t10 * t41 + t2 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t39 * t57 + t40 * t59, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22 * t57 + t23 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t75, 0.2e1 * t99, 0, t76, 0, 0, 0.2e1 * pkin(3) * t83, -0.2e1 * pkin(3) * t80, 0.2e1 * t94 * pkin(8), t94 * pkin(8) ^ 2 + pkin(3) ^ 2, t56, t35, 0, t55, 0, 0, t57 * t109, t59 * t109, -0.2e1 * t39 * t59 - 0.2e1 * t40 * t57, t39 ^ 2 + t40 ^ 2 + t69 ^ 2, t56, t35, 0, t55, 0, 0, t57 * t112, t59 * t112, -0.2e1 * t22 * t59 - 0.2e1 * t23 * t57, t22 ^ 2 + t23 ^ 2 + t41 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, -t100, t52, t12, -t13, 0, 0, 0, 0, t28, 0, -t26, t52, t52 * t72 + t3, -t4 - t43, -t28 * t72 - t21 (t3 * t82 + t4 * t79) * pkin(4), 0, 0, t28, 0, -t26, t52, t52 * t68 + t1, -t2 - t43, -t28 * t68 - t21, t1 * t68 + t2 * t105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, -t80, 0, 0, 0, 0, 0, 0, 0, 0, -t57, -t59, 0, -t57 * t72 + t46, 0, 0, 0, 0, 0, 0, -t57, -t59, 0, -t57 * t68 + t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, t83, 0, -t80 * pkin(8), -t83 * pkin(8), 0, 0, 0, 0, t59, 0, -t57, 0, t39, -t40, -t59 * t72 - t45 (t39 * t82 + t40 * t79) * pkin(4), 0, 0, t59, 0, -t57, 0, t22, -t23, -t59 * t68 - t45, t23 * t105 + t22 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t72, t70, 0, t82 ^ 2 * t87 + t71, 0, 0, 0, 0, 0, 1, 0.2e1 * t68, t70, 0, t68 ^ 2 + t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, t52, t3, -t4, 0, 0, 0, 0, t28, 0, -t26, t52, 0.2e1 * t48 + t88, -t2, -t28 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57, -t59, 0, 0, 0, 0, 0, 0, 0, 0, -t57, -t59, 0, -t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t57, 0, t39, -t40, 0, 0, 0, 0, t59, 0, -t57, 0, t22, -t23, -t59 * pkin(5), t22 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t72, -t105, 0, 0, 0, 0, 0, 0, 0, 1, t85 + t72, -t105, 0, t68 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t85, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, t28, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57, t59, 0, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t5;
