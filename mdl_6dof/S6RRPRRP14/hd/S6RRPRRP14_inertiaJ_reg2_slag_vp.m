% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRP14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRP14_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP14_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRRP14_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 19:24:33
% EndTime: 2019-05-06 19:24:44
% DurationCPUTime: 2.96s
% Computational Cost: add. (1841->214), mult. (4126->390), div. (0->0), fcn. (4412->8), ass. (0->148)
t91 = sin(qJ(5));
t84 = t91 ^ 2;
t94 = cos(qJ(5));
t86 = t94 ^ 2;
t129 = t84 + t86;
t89 = sin(pkin(6));
t96 = cos(qJ(2));
t142 = t89 * t96;
t90 = cos(pkin(6));
t92 = sin(qJ(4));
t95 = cos(qJ(4));
t42 = -t142 * t92 + t90 * t95;
t93 = sin(qJ(2));
t71 = t89 * t93;
t23 = t42 * t91 - t71 * t94;
t147 = t23 * t94;
t25 = t42 * t94 + t71 * t91;
t19 = t25 * t91;
t168 = (t19 + t147) * t95;
t167 = -2 * pkin(2);
t166 = 2 * pkin(5);
t165 = t23 ^ 2;
t40 = t142 * t95 + t90 * t92;
t38 = t40 ^ 2;
t164 = -0.2e1 * t40;
t163 = 0.2e1 * t89;
t162 = -0.2e1 * t91;
t161 = 0.2e1 * t94;
t160 = 0.2e1 * t95;
t159 = 2 * qJ(3);
t97 = -pkin(2) - pkin(9);
t158 = pkin(1) * t96;
t157 = pkin(4) * t95;
t156 = pkin(5) * t40;
t155 = pkin(10) * t25;
t154 = pkin(10) * t92;
t128 = qJ(6) * t40;
t141 = t90 * t93;
t44 = pkin(1) * t141 + pkin(8) * t142;
t79 = t90 * qJ(3);
t33 = -t79 - t44;
t27 = pkin(3) * t142 - t33;
t13 = pkin(4) * t40 - pkin(10) * t42 + t27;
t117 = -pkin(2) - t158;
t63 = pkin(8) * t71;
t20 = pkin(3) * t71 + t63 + (-pkin(9) + t117) * t90;
t115 = -qJ(3) * t93 - pkin(1);
t28 = (t96 * t97 + t115) * t89;
t10 = t20 * t92 + t28 * t95;
t8 = pkin(10) * t71 + t10;
t4 = t13 * t91 + t8 * t94;
t1 = t128 + t4;
t153 = t1 * t94;
t152 = t4 * t94;
t9 = t20 * t95 - t28 * t92;
t7 = -pkin(4) * t71 - t9;
t151 = t7 * t91;
t150 = t7 * t94;
t149 = t91 * pkin(10);
t148 = t94 * pkin(10);
t146 = t25 * t23;
t145 = t40 * t23;
t37 = t40 * t92;
t144 = t42 * t95;
t82 = t89 ^ 2;
t143 = t82 * t96;
t140 = t90 * t96;
t36 = t91 * t40;
t73 = t91 * t92;
t139 = t91 * t94;
t74 = t91 * t95;
t138 = t91 * t97;
t137 = t92 * t97;
t136 = t94 * t40;
t76 = t94 * t92;
t77 = t94 * t95;
t135 = t94 * t97;
t108 = -pkin(5) * t94 - qJ(6) * t91;
t54 = -pkin(4) + t108;
t134 = t95 * t54;
t133 = t95 * t92;
t132 = t95 * t97;
t53 = pkin(4) * t92 - pkin(10) * t95 + qJ(3);
t31 = t135 * t92 + t53 * t91;
t131 = t129 * t154;
t130 = t129 * pkin(10) ^ 2;
t85 = t92 ^ 2;
t87 = t95 ^ 2;
t62 = t85 + t87;
t127 = qJ(6) * t92;
t126 = pkin(10) * t36;
t125 = pkin(10) * t136;
t124 = t23 * t74;
t123 = t89 * t141;
t122 = t92 * t71;
t121 = t97 * t71;
t120 = t89 * t140;
t119 = t91 * t133;
t118 = t87 * t139;
t116 = -t13 * t94 + t8 * t91;
t114 = -t23 * t76 + t25 * t73;
t113 = -t154 - t157;
t2 = t116 - t156;
t112 = t2 * t91 + t153;
t111 = t116 * t91 + t152;
t110 = -t134 + t154;
t109 = t10 * t92 + t9 * t95;
t107 = -pkin(5) * t91 + qJ(6) * t94;
t105 = t23 * t91 - t25 * t94;
t26 = t127 + t31;
t46 = t94 * t53;
t29 = -t46 + (-pkin(5) + t138) * t92;
t104 = t26 * t94 + t29 * t91;
t30 = -t137 * t91 + t46;
t103 = -t30 * t91 + t31 * t94;
t102 = t23 * t92 + t40 * t74;
t101 = -t23 * t95 - t40 * t73;
t100 = t25 * t95 + t40 * t76;
t98 = qJ(3) ^ 2;
t88 = t97 ^ 2;
t83 = t90 ^ 2;
t78 = t87 * t88;
t75 = t86 * t87;
t72 = t84 * t87;
t70 = t82 * t96 ^ 2;
t69 = t82 * t93 ^ 2;
t60 = t91 * t77;
t58 = t95 * t71;
t56 = t133 * t161;
t55 = 0.2e1 * t93 * t143;
t52 = 0.2e1 * t129 * pkin(10);
t51 = t62 * t97;
t50 = t62 * t94;
t49 = t129 * t92;
t48 = t62 * t91;
t47 = (t84 - t86) * t95;
t43 = pkin(1) * t140 - t63;
t39 = t129 * t85 + t87;
t35 = t117 * t90 + t63;
t34 = (-pkin(2) * t96 + t115) * t89;
t32 = (-t107 - t97) * t95;
t22 = t25 ^ 2;
t18 = pkin(10) * t147;
t17 = t25 * t77;
t15 = 0.2e1 * t25 * t40;
t14 = t25 * t92 + t40 * t77;
t5 = pkin(5) * t23 - qJ(6) * t25 + t7;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, t55, 0.2e1 * t123, t70, 0.2e1 * t120, t83, 0.2e1 * pkin(1) * t143 + 0.2e1 * t43 * t90, -0.2e1 * pkin(1) * t82 * t93 - 0.2e1 * t44 * t90 (-t43 * t93 + t44 * t96) * t163, pkin(1) ^ 2 * t82 + t43 ^ 2 + t44 ^ 2, t83, -0.2e1 * t123, -0.2e1 * t120, t69, t55, t70 (-t33 * t96 + t35 * t93) * t163, 0.2e1 * t142 * t34 + 0.2e1 * t35 * t90, -0.2e1 * t33 * t90 - 0.2e1 * t34 * t71, t33 ^ 2 + t34 ^ 2 + t35 ^ 2, t42 ^ 2, t42 * t164, 0.2e1 * t42 * t71, t38, t71 * t164, t69, 0.2e1 * t27 * t40 + 0.2e1 * t71 * t9, -0.2e1 * t10 * t71 + 0.2e1 * t27 * t42, -0.2e1 * t10 * t40 - 0.2e1 * t42 * t9, t10 ^ 2 + t27 ^ 2 + t9 ^ 2, t22, -0.2e1 * t146, t15, t165, -0.2e1 * t145, t38, -0.2e1 * t116 * t40 + 0.2e1 * t23 * t7, 0.2e1 * t25 * t7 - 0.2e1 * t4 * t40, 0.2e1 * t116 * t25 - 0.2e1 * t23 * t4, t116 ^ 2 + t4 ^ 2 + t7 ^ 2, t22, t15, 0.2e1 * t146, t38, 0.2e1 * t145, t165, -0.2e1 * t2 * t40 + 0.2e1 * t23 * t5, -0.2e1 * t1 * t23 + 0.2e1 * t2 * t25, 0.2e1 * t1 * t40 - 0.2e1 * t25 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t142, t90, t43, -t44, 0, 0, t90, -t71, -t142, 0, 0, 0 (-pkin(2) * t93 + qJ(3) * t96) * t89, t63 + (t167 - t158) * t90, 0.2e1 * t79 + t44, -pkin(2) * t35 - qJ(3) * t33, t144, -t40 * t95 - t42 * t92, t58, t37, -t122, 0, qJ(3) * t40 + t121 * t95 + t27 * t92, qJ(3) * t42 - t121 * t92 + t27 * t95 (-t42 * t97 - t9) * t95 + (-t40 * t97 - t10) * t92, qJ(3) * t27 + t109 * t97, t17, -t168, t14, t124, -t102, t37, -t116 * t92 + t30 * t40 + (-t23 * t97 + t151) * t95, -t31 * t40 - t4 * t92 + (-t25 * t97 + t150) * t95, -t23 * t31 - t25 * t30 + (t116 * t94 - t4 * t91) * t95, -t116 * t30 - t132 * t7 + t31 * t4, t17, t14, t168, t37, t102, t124, -t2 * t92 + t23 * t32 - t29 * t40 + t5 * t74, -t23 * t26 + t25 * t29 + (-t1 * t91 + t2 * t94) * t95, t1 * t92 - t25 * t32 + t26 * t40 - t5 * t77, t1 * t26 + t2 * t29 + t32 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t167, t159, pkin(2) ^ 2 + t98, t87, -0.2e1 * t133, 0, t85, 0, 0, t92 * t159, t95 * t159, -0.2e1 * t51, t85 * t88 + t78 + t98, t75, -0.2e1 * t118, t56, t72, -0.2e1 * t119, t85, -0.2e1 * t138 * t87 + 0.2e1 * t30 * t92, -0.2e1 * t135 * t87 - 0.2e1 * t31 * t92 (-t30 * t94 - t31 * t91) * t160, t30 ^ 2 + t31 ^ 2 + t78, t75, t56, 0.2e1 * t118, t85, 0.2e1 * t119, t72, -0.2e1 * t29 * t92 + 0.2e1 * t32 * t74 (-t26 * t91 + t29 * t94) * t160, 0.2e1 * t26 * t92 - 0.2e1 * t32 * t77, t26 ^ 2 + t29 ^ 2 + t32 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t90, 0, t35, 0, 0, 0, 0, 0, 0, t58, -t122, -t144 - t37, t109, 0, 0, 0, 0, 0, 0, t101, -t100, t114, t111 * t92 - t7 * t95, 0, 0, 0, 0, 0, 0, t101, t114, t100, t112 * t92 - t5 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t62, t51, 0, 0, 0, 0, 0, 0, -t48, -t50, 0, t103 * t92 + t87 * t97, 0, 0, 0, 0, 0, 0, -t48, 0, t50, t104 * t92 - t32 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t40, t71, t9, -t10, 0, 0, t19, -t105, t36, -t147, t136, 0, -pkin(4) * t23 - t126 - t150, -pkin(4) * t25 - t125 + t151, t152 - t18 + (t116 + t155) * t91, -pkin(4) * t7 + pkin(10) * t111, t19, t36, t105, 0, -t136, -t147, t23 * t54 - t5 * t94 - t126, t153 - t18 + (t2 + t155) * t91, -t25 * t54 - t5 * t91 + t125, pkin(10) * t112 + t5 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t92, 0, t132, -t137, 0, 0, t60, -t47, t73, -t60, t76, 0, t113 * t91 + t132 * t94, t113 * t94 - t132 * t91, t103, pkin(4) * t132 + pkin(10) * t103, t60, t73, t47, 0, -t76, -t60, -t110 * t91 - t32 * t94, t104, t110 * t94 - t32 * t91, pkin(10) * t104 + t32 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t92, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t74, t49, t131 + t157, 0, 0, 0, 0, 0, 0, t77, t49, t74, t131 - t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t84, 0.2e1 * t139, 0, t86, 0, 0, pkin(4) * t161, pkin(4) * t162, t52, pkin(4) ^ 2 + t130, t84, 0, -0.2e1 * t139, 0, 0, t86, -0.2e1 * t54 * t94, t52, t54 * t162, t54 ^ 2 + t130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, -t23, t40, -t116, -t4, 0, 0, 0, t25, 0, t40, t23, 0, -t116 + 0.2e1 * t156, -pkin(5) * t25 - qJ(6) * t23, 0.2e1 * t128 + t4, -pkin(5) * t2 + qJ(6) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, -t74, t92, t30, -t31, 0, 0, 0, t77, 0, t92, t74, 0, t46 + (t166 - t138) * t92, t108 * t95, 0.2e1 * t127 + t31, -pkin(5) * t29 + qJ(6) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t73, -t76, 0, 0, 0, 0, 0, 0, 0, 0, -t73, 0, t76, t107 * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, t94, 0, -t149, -t148, 0, 0, 0, t91, 0, 0, -t94, 0, -t149, t107, t148, t107 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t166, 0, 0.2e1 * qJ(6) (pkin(5) ^ 2) + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, t25, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, t77, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, 0, t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
