% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 17:20
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRP8_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP8_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRPRP8_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 08:35:51
% EndTime: 2019-05-07 08:36:00
% DurationCPUTime: 2.10s
% Computational Cost: add. (1186->181), mult. (2282->299), div. (0->0), fcn. (2381->6), ass. (0->110)
t92 = sin(qJ(3));
t87 = t92 ^ 2;
t95 = cos(qJ(3));
t89 = t95 ^ 2;
t135 = t87 + t89;
t134 = -t95 * pkin(3) - t92 * qJ(4);
t94 = cos(qJ(5));
t112 = t94 * t92;
t93 = sin(qJ(2));
t77 = t95 * t93;
t91 = sin(qJ(5));
t38 = -t93 * t112 + t91 * t77;
t133 = -0.2e1 * t38;
t50 = t91 * t92 + t94 * t95;
t132 = 0.2e1 * t50;
t53 = -t91 * t95 + t112;
t131 = 0.2e1 * t53;
t62 = -pkin(2) + t134;
t130 = -0.2e1 * t62;
t129 = -0.2e1 * t93;
t128 = 0.2e1 * t93;
t96 = cos(qJ(2));
t127 = 0.2e1 * t96;
t126 = -pkin(3) - pkin(4);
t125 = pkin(2) * t92;
t124 = pkin(2) * t95;
t123 = pkin(3) * t92;
t88 = t93 ^ 2;
t122 = t88 * pkin(7);
t121 = t92 * pkin(8);
t120 = t93 * pkin(7);
t119 = t96 * pkin(5);
t61 = t94 * qJ(4) + t91 * t126;
t118 = t61 * t96;
t117 = t91 * t96;
t116 = t92 * t93;
t115 = t92 * t95;
t114 = t92 * t96;
t113 = t93 * t96;
t111 = t95 * t96;
t63 = -t96 * pkin(2) - t93 * pkin(8) - pkin(1);
t109 = pkin(7) * t114 - t95 * t63;
t86 = t96 * pkin(3);
t29 = t86 + t109;
t14 = t96 * pkin(4) - pkin(9) * t77 + t29;
t106 = t96 * qJ(4);
t34 = pkin(7) * t111 + t92 * t63;
t28 = -t106 + t34;
t18 = pkin(9) * t116 + t28;
t110 = -t94 * t14 + t91 * t18;
t4 = t91 * t14 + t94 * t18;
t108 = t135 * pkin(8) ^ 2;
t107 = t95 * qJ(4);
t105 = t92 * t113;
t104 = t88 * t115;
t103 = (pkin(8) - pkin(9)) * t92;
t83 = t95 * pkin(8);
t65 = -t95 * pkin(9) + t83;
t25 = -t94 * t103 + t91 * t65;
t43 = t95 * pkin(4) - t62;
t59 = t91 * qJ(4) - t94 * t126;
t2 = -t38 * qJ(6) + t4;
t40 = t50 * t93;
t102 = t40 * qJ(6) + t110;
t101 = t107 - t123;
t100 = t28 * t95 + t29 * t92;
t99 = t109 * t92 + t34 * t95;
t27 = t91 * t103 + t94 * t65;
t69 = t93 * t107;
t24 = t69 + (t126 * t92 - pkin(7)) * t93;
t98 = pkin(7) ^ 2;
t90 = t96 ^ 2;
t81 = t88 * t98;
t76 = t89 * t88;
t75 = t94 * t96;
t74 = t87 * t88;
t71 = pkin(8) * t114;
t68 = t91 ^ 2 + t94 ^ 2;
t67 = t92 * t77;
t64 = t111 * t129;
t58 = t61 ^ 2;
t57 = 0.2e1 * t135 * pkin(8);
t55 = pkin(5) + t59;
t52 = (t87 - t89) * t93;
t49 = t53 ^ 2;
t48 = t50 ^ 2;
t45 = 0.2e1 * t61;
t44 = t61 * t91;
t42 = t96 * t53;
t41 = t96 * t50;
t37 = t40 ^ 2;
t36 = t38 ^ 2;
t35 = -t69 + (pkin(7) + t123) * t93;
t32 = t40 * t127;
t31 = t96 * t133;
t30 = t61 * t50;
t23 = -0.2e1 * t53 * t50;
t22 = t50 * pkin(5) + t43;
t21 = t61 * t38;
t20 = t40 * t53;
t19 = t38 * t50;
t17 = -t91 * t50 - t94 * t53;
t13 = t40 * t133;
t10 = -t50 * qJ(6) + t27;
t8 = t53 * qJ(6) + t25;
t7 = -t91 * t38 - t94 * t40;
t6 = t38 * pkin(5) + t24;
t5 = -t53 * t38 - t40 * t50;
t1 = -t102 + t119;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88, 0.2e1 * t113, 0, t90, 0, 0, pkin(1) * t127, pkin(1) * t129, 0.2e1 * (t88 + t90) * pkin(7), pkin(1) ^ 2 + t90 * t98 + t81, t76, -0.2e1 * t104, t64, t74, 0.2e1 * t105, t90, 0.2e1 * t109 * t96 + 0.2e1 * t92 * t122, 0.2e1 * t95 * t122 + 0.2e1 * t34 * t96 (t109 * t95 - t34 * t92) * t128, t109 ^ 2 + t34 ^ 2 + t81, t76, t64, 0.2e1 * t104, t90, -0.2e1 * t105, t74, 0.2e1 * t35 * t116 + 0.2e1 * t29 * t96 (-t28 * t92 + t29 * t95) * t128, -0.2e1 * t28 * t96 - 0.2e1 * t35 * t77, t28 ^ 2 + t29 ^ 2 + t35 ^ 2, t37, t13, t32, t36, t31, t90, -0.2e1 * t110 * t96 + 0.2e1 * t24 * t38, 0.2e1 * t24 * t40 - 0.2e1 * t4 * t96, 0.2e1 * t110 * t40 - 0.2e1 * t4 * t38, t110 ^ 2 + t24 ^ 2 + t4 ^ 2, t37, t13, t32, t36, t31, t90, 0.2e1 * t1 * t96 + 0.2e1 * t6 * t38, -0.2e1 * t2 * t96 + 0.2e1 * t6 * t40, -0.2e1 * t1 * t40 - 0.2e1 * t2 * t38, t1 ^ 2 + t2 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, t96, 0, -t120, -t96 * pkin(7), 0, 0, t67, -t52, -t114, -t67, -t111, 0, t71 + (-pkin(7) * t95 - t125) * t93, pkin(8) * t111 + (pkin(7) * t92 - t124) * t93, t99, -pkin(2) * t120 + t99 * pkin(8), t67, -t114, t52, 0, t111, -t67, t62 * t116 - t35 * t95 + t71, t100, -t35 * t92 + (-pkin(8) * t96 - t62 * t93) * t95, t100 * pkin(8) + t35 * t62, t20, t5, t42, t19, -t41, 0, t24 * t50 - t25 * t96 + t43 * t38, t24 * t53 - t27 * t96 + t43 * t40, t110 * t53 + t25 * t40 - t27 * t38 - t4 * t50, t110 * t25 + t24 * t43 + t4 * t27, t20, t5, t42, t19, -t41, 0, t22 * t38 + t6 * t50 - t8 * t96, -t10 * t96 + t22 * t40 + t6 * t53, -t1 * t53 - t10 * t38 - t2 * t50 + t8 * t40, -t1 * t8 + t2 * t10 + t6 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t87, 0.2e1 * t115, 0, t89, 0, 0, 0.2e1 * t124, -0.2e1 * t125, t57, pkin(2) ^ 2 + t108, t87, 0, -0.2e1 * t115, 0, 0, t89, t95 * t130, t57, t92 * t130, t62 ^ 2 + t108, t49, t23, 0, t48, 0, 0, t43 * t132, t43 * t131, 0.2e1 * t25 * t53 - 0.2e1 * t27 * t50, t25 ^ 2 + t27 ^ 2 + t43 ^ 2, t49, t23, 0, t48, 0, 0, t22 * t132, t22 * t131, -0.2e1 * t10 * t50 + 0.2e1 * t8 * t53, t10 ^ 2 + t22 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, -t116, -t96, -t109, -t34, 0, 0, 0, t77, 0, -t96, t116, 0, -0.2e1 * t86 - t109, t134 * t93, -0.2e1 * t106 + t34, -t29 * pkin(3) + t28 * qJ(4), 0, 0, -t40, 0, t38, -t96, -t59 * t96 + t110, t4 - t118, t59 * t40 - t21, t110 * t59 + t4 * t61, 0, 0, -t40, 0, t38, -t96 (-pkin(5) - t55) * t96 + t102, t2 - t118, t55 * t40 - t21, -t1 * t55 + t2 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t95, 0, -t121, -t83, 0, 0, 0, t92, 0, 0, -t95, 0, -t121, t101, t83, t101 * pkin(8), 0, 0, -t53, 0, t50, 0, t25, t27, t59 * t53 - t30, t25 * t59 + t27 * t61, 0, 0, -t53, 0, t50, 0, t8, t10, t55 * t53 - t30, t10 * t61 + t8 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(3), 0, 0.2e1 * qJ(4), pkin(3) ^ 2 + qJ(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t59, t45, 0, t59 ^ 2 + t58, 0, 0, 0, 0, 0, 1, 0.2e1 * t55, t45, 0, t55 ^ 2 + t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, t77, 0, t29, 0, 0, 0, 0, 0, 0, t75, -t117, t7, -t110 * t94 + t4 * t91, 0, 0, 0, 0, 0, 0, t75, -t117, t7, t1 * t94 + t2 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, t121, 0, 0, 0, 0, 0, 0, 0, 0, t17, -t25 * t94 + t27 * t91, 0, 0, 0, 0, 0, 0, 0, 0, t17, t10 * t91 - t8 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(3), 0, 0, 0, 0, 0, 0, -t94, t91, 0, -t59 * t94 + t44, 0, 0, 0, 0, 0, 0, -t94, t91, 0, -t55 * t94 + t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, -t38, t96, -t110, -t4, 0, 0, 0, 0, t40, 0, -t38, t96, -t102 + 0.2e1 * t119, -t2, -t40 * pkin(5), t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, 0, -t50, 0, -t25, -t27, 0, 0, 0, 0, t53, 0, -t50, 0, -t8, -t10, -t53 * pkin(5), -t8 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t59, -t61, 0, 0, 0, 0, 0, 0, 0, -1, -0.2e1 * pkin(5) - t59, -t61, 0, -t55 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t91, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t91, 0, t94 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * pkin(5), 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t40, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, t53, 0, t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
