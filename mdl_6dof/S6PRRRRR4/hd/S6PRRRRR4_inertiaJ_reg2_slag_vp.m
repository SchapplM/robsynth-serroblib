% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d2,d3,d4,d5,d6,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 01:02
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRRRR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRRR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6PRRRRR4_inertiaJ_reg2_slag_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 11:28:45
% EndTime: 2019-05-05 11:28:55
% DurationCPUTime: 3.10s
% Computational Cost: add. (2993->243), mult. (7351->469), div. (0->0), fcn. (8773->14), ass. (0->134)
t95 = sin(qJ(6));
t87 = t95 ^ 2;
t100 = cos(qJ(6));
t89 = t100 ^ 2;
t137 = t87 + t89;
t96 = sin(qJ(5));
t151 = t96 * pkin(4);
t80 = pkin(12) + t151;
t139 = t137 * t80;
t101 = cos(qJ(5));
t102 = cos(qJ(4));
t91 = sin(pkin(7));
t98 = sin(qJ(3));
t144 = t91 * t98;
t93 = cos(pkin(7));
t97 = sin(qJ(4));
t57 = t102 * t93 - t144 * t97;
t58 = t102 * t144 + t93 * t97;
t36 = -t101 * t57 + t58 * t96;
t38 = t101 * t58 + t57 * t96;
t103 = cos(qJ(3));
t75 = pkin(9) * t144;
t51 = t75 + (-pkin(2) * t103 - pkin(3)) * t93;
t39 = -t57 * pkin(4) + t51;
t14 = t36 * pkin(5) - t38 * pkin(12) + t39;
t126 = t91 * t103;
t120 = pkin(9) * t126;
t153 = pkin(2) * t98;
t52 = t120 + (pkin(10) + t153) * t93;
t53 = (-pkin(3) * t103 - pkin(10) * t98 - pkin(2)) * t91;
t33 = t102 * t52 + t53 * t97;
t23 = pkin(11) * t57 + t33;
t133 = t101 * t23;
t119 = pkin(4) * t126;
t32 = t102 * t53 - t52 * t97;
t20 = -pkin(11) * t58 - t119 + t32;
t11 = t20 * t96 + t133;
t9 = -pkin(12) * t126 + t11;
t3 = t100 * t14 - t9 * t95;
t4 = t100 * t9 + t14 * t95;
t163 = t100 * t4 - t3 * t95;
t104 = cos(qJ(2));
t142 = t93 * t98;
t92 = sin(pkin(6));
t94 = cos(pkin(6));
t99 = sin(qJ(2));
t45 = t94 * t144 + (t103 * t99 + t104 * t142) * t92;
t125 = t92 * t104;
t56 = -t125 * t91 + t93 * t94;
t27 = t102 * t56 - t45 * t97;
t28 = t102 * t45 + t56 * t97;
t15 = -t101 * t27 + t28 * t96;
t162 = t15 ^ 2;
t161 = t36 ^ 2;
t131 = t103 * t93;
t143 = t92 * t99;
t43 = -t125 * t131 - t126 * t94 + t143 * t98;
t42 = t43 ^ 2;
t154 = -pkin(11) - pkin(10);
t117 = t154 * t97;
t70 = t154 * t102;
t47 = -t101 * t117 - t70 * t96;
t160 = t47 ^ 2;
t64 = -t101 * t102 + t96 * t97;
t159 = t64 ^ 2;
t158 = -0.2e1 * t36;
t82 = -pkin(4) * t102 - pkin(3);
t157 = 0.2e1 * t82;
t156 = 0.2e1 * t91;
t155 = 0.2e1 * t102;
t149 = t101 * pkin(4);
t81 = -pkin(5) - t149;
t150 = pkin(5) - t81;
t148 = t15 * t47;
t31 = t100 * t38 - t126 * t95;
t26 = t31 * t95;
t147 = t36 * t64;
t146 = t58 * t97;
t114 = -t101 * t20 + t23 * t96;
t8 = pkin(5) * t126 + t114;
t145 = t8 * t100;
t34 = t95 * t36;
t66 = t101 * t97 + t102 * t96;
t141 = t95 * t66;
t140 = t95 * t80;
t138 = t137 * pkin(12);
t88 = t97 ^ 2;
t90 = t102 ^ 2;
t136 = t88 + t90;
t35 = t100 * t36;
t135 = t100 * t66;
t134 = t100 * t80;
t85 = t91 ^ 2;
t132 = t103 * t85;
t130 = t15 * t100;
t29 = t100 * t126 + t38 * t95;
t25 = t29 * t100;
t129 = t31 * t100;
t128 = t47 * t100;
t127 = t57 * t102;
t124 = t95 * t100;
t123 = -0.2e1 * t66 * t64;
t122 = -0.2e1 * t126;
t121 = 0.2e1 * t126;
t118 = t97 * t126;
t116 = t102 * t126;
t113 = -pkin(5) * t66 - pkin(12) * t64;
t17 = t101 * t28 + t27 * t96;
t5 = t100 * t43 - t17 * t95;
t6 = t100 * t17 + t43 * t95;
t1 = t100 * t6 - t5 * t95;
t111 = -t64 * t80 + t66 * t81;
t40 = pkin(5) * t64 - pkin(12) * t66 + t82;
t49 = -t101 * t70 + t117 * t96;
t21 = t100 * t40 - t49 * t95;
t22 = t100 * t49 + t40 * t95;
t12 = t100 * t22 - t21 * t95;
t110 = -t25 + t26;
t109 = t102 * t28 - t27 * t97;
t108 = t33 * t102 - t32 * t97;
t78 = t85 * t103 ^ 2;
t76 = 0.2e1 * t124;
t63 = t66 ^ 2;
t62 = pkin(2) * t142 + t120;
t61 = pkin(2) * t131 - t75;
t60 = t100 * t64;
t59 = t95 * t64;
t55 = t66 * t124;
t46 = t47 * t95;
t41 = (-t87 + t89) * t66;
t18 = -t29 * t95 + t129;
t13 = t15 * t95;
t7 = t8 * t95;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94 ^ 2 + (t104 ^ 2 + t99 ^ 2) * t92 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 ^ 2 + t56 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 ^ 2 + t28 ^ 2 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t162 + t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 ^ 2 + t6 ^ 2 + t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, -t143, 0, 0, 0, 0, 0, 0, 0, 0, -t126 * t56 - t43 * t93, t144 * t56 - t45 * t93 (t103 * t45 + t43 * t98) * t91, -pkin(2) * t56 * t91 - t43 * t61 + t45 * t62, 0, 0, 0, 0, 0, 0, -t126 * t27 - t43 * t57, t126 * t28 + t43 * t58, -t27 * t58 + t28 * t57, t27 * t32 + t28 * t33 + t43 * t51, 0, 0, 0, 0, 0, 0, t126 * t15 + t36 * t43, t126 * t17 + t38 * t43, t15 * t38 - t17 * t36, t11 * t17 + t114 * t15 + t39 * t43, 0, 0, 0, 0, 0, 0, t15 * t29 + t36 * t5, t15 * t31 - t36 * t6, -t29 * t6 - t31 * t5, t15 * t8 + t3 * t5 + t4 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t85 * t98 ^ 2, 0.2e1 * t98 * t132, t142 * t156, t78, t93 * t121, t93 ^ 2, 0.2e1 * pkin(2) * t132 + 0.2e1 * t61 * t93, -0.2e1 * t153 * t85 - 0.2e1 * t62 * t93 (t103 * t62 - t61 * t98) * t156, pkin(2) ^ 2 * t85 + t61 ^ 2 + t62 ^ 2, t58 ^ 2, 0.2e1 * t58 * t57, t58 * t122, t57 ^ 2, t57 * t122, t78, -0.2e1 * t126 * t32 - 0.2e1 * t51 * t57, 0.2e1 * t126 * t33 + 0.2e1 * t51 * t58, -0.2e1 * t32 * t58 + 0.2e1 * t33 * t57, t32 ^ 2 + t33 ^ 2 + t51 ^ 2, t38 ^ 2, t38 * t158, t38 * t122, t161, t36 * t121, t78, 0.2e1 * t114 * t126 + 0.2e1 * t36 * t39, 0.2e1 * t11 * t126 + 0.2e1 * t38 * t39, -0.2e1 * t11 * t36 + 0.2e1 * t114 * t38, t11 ^ 2 + t114 ^ 2 + t39 ^ 2, t31 ^ 2, -0.2e1 * t31 * t29, 0.2e1 * t31 * t36, t29 ^ 2, t29 * t158, t161, 0.2e1 * t29 * t8 + 0.2e1 * t3 * t36, 0.2e1 * t31 * t8 - 0.2e1 * t36 * t4, -0.2e1 * t29 * t4 - 0.2e1 * t3 * t31, t3 ^ 2 + t4 ^ 2 + t8 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, -t45, 0, 0, 0, 0, 0, 0, 0, 0, -t43 * t102, t43 * t97, t109, -t43 * pkin(3) + pkin(10) * t109, 0, 0, 0, 0, 0, 0, t43 * t64, t43 * t66, t15 * t66 - t17 * t64, t17 * t49 + t43 * t82 + t148, 0, 0, 0, 0, 0, 0, t141 * t15 + t5 * t64, t130 * t66 - t6 * t64 (-t100 * t5 - t6 * t95) * t66, t21 * t5 + t22 * t6 + t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, 0, t126, t93, t61, -t62, 0, 0, t146, t102 * t58 + t57 * t97, -t118, t127, -t116, 0, pkin(3) * t57 + pkin(10) * t118 - t102 * t51, -pkin(3) * t58 + pkin(10) * t116 + t51 * t97 (t127 + t146) * pkin(10) + t108, -t51 * pkin(3) + pkin(10) * t108, t38 * t66, -t36 * t66 - t38 * t64, -t66 * t126, t147, t64 * t126, 0, t126 * t47 + t36 * t82 + t39 * t64, t126 * t49 + t38 * t82 + t39 * t66, -t11 * t64 + t114 * t66 - t36 * t49 + t38 * t47, t11 * t49 + t114 * t47 + t39 * t82, t66 * t129 (-t25 - t26) * t66, t135 * t36 + t31 * t64, t29 * t141, -t141 * t36 - t29 * t64, t147, t141 * t8 + t21 * t36 + t29 * t47 + t3 * t64, t135 * t8 - t22 * t36 + t31 * t47 - t4 * t64, -t21 * t31 - t22 * t29 + (-t100 * t3 - t4 * t95) * t66, t21 * t3 + t22 * t4 + t47 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t88, t97 * t155, 0, t90, 0, 0, pkin(3) * t155, -0.2e1 * pkin(3) * t97, 0.2e1 * t136 * pkin(10), pkin(10) ^ 2 * t136 + pkin(3) ^ 2, t63, t123, 0, t159, 0, 0, t64 * t157, t66 * t157, 0.2e1 * t47 * t66 - 0.2e1 * t49 * t64, t49 ^ 2 + t82 ^ 2 + t160, t89 * t63, -0.2e1 * t63 * t124, 0.2e1 * t64 * t135, t87 * t63, t95 * t123, t159, 0.2e1 * t141 * t47 + 0.2e1 * t21 * t64, 0.2e1 * t128 * t66 - 0.2e1 * t22 * t64, 0.2e1 * (-t100 * t21 - t22 * t95) * t66, t21 ^ 2 + t22 ^ 2 + t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t28, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0 (-t101 * t15 + t17 * t96) * pkin(4), 0, 0, 0, 0, 0, 0, -t130, t13, t1, t1 * t80 + t15 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t57, -t126, t32, -t33, 0, 0, 0, 0, t38, 0, -t36, -t126, -t101 * t119 - t114, -t133 + (-t20 + t119) * t96 (-t101 * t38 - t36 * t96) * pkin(4) (-t101 * t114 + t11 * t96) * pkin(4), t26, t18, t34, -t25, t35, 0, -t140 * t36 + t29 * t81 - t145, -t134 * t36 + t31 * t81 + t7, t110 * t80 + t163, t163 * t80 + t8 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, t102, 0, -t97 * pkin(10), -t102 * pkin(10), 0, 0, 0, 0, t66, 0, -t64, 0, -t47, -t49 (-t101 * t66 - t64 * t96) * pkin(4) (-t101 * t47 + t49 * t96) * pkin(4), t55, t41, t59, -t55, t60, 0, t111 * t95 - t128, t100 * t111 + t46, t12, t12 * t80 + t47 * t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t149, -0.2e1 * t151, 0 (t101 ^ 2 + t96 ^ 2) * pkin(4) ^ 2, t87, t76, 0, t89, 0, 0, -0.2e1 * t81 * t100, 0.2e1 * t81 * t95, 0.2e1 * t139, t137 * t80 ^ 2 + t81 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0, 0, 0, 0, 0, 0, 0, 0, -t130, t13, t1, -t15 * pkin(5) + pkin(12) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, -t36, -t126, -t114, -t11, 0, 0, t26, t18, t34, -t25, t35, 0, -pkin(5) * t29 - pkin(12) * t34 - t145, -pkin(5) * t31 - pkin(12) * t35 + t7, pkin(12) * t110 + t163, -t8 * pkin(5) + pkin(12) * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, -t64, 0, -t47, -t49, 0, 0, t55, t41, t59, -t55, t60, 0, t113 * t95 - t128, t100 * t113 + t46, t12, -t47 * pkin(5) + pkin(12) * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t149, -t151, 0, 0, t87, t76, 0, t89, 0, 0, t150 * t100, -t150 * t95, t138 + t139, -t81 * pkin(5) + pkin(12) * t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t87, t76, 0, t89, 0, 0, 0.2e1 * pkin(5) * t100, -0.2e1 * pkin(5) * t95, 0.2e1 * t138, pkin(12) ^ 2 * t137 + pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t29, t36, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, 0, -t141, t64, t21, -t22, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, t100, 0, -t140, -t134, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, t100, 0, -t95 * pkin(12), -t100 * pkin(12), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t2;
