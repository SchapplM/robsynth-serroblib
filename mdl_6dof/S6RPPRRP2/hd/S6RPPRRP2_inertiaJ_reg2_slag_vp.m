% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5,theta2,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:01
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRP2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPPRRP2_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:48:06
% EndTime: 2019-05-05 14:48:09
% DurationCPUTime: 1.17s
% Computational Cost: add. (848->94), mult. (1548->154), div. (0->0), fcn. (1741->8), ass. (0->77)
t52 = cos(pkin(10));
t55 = sin(qJ(4));
t50 = sin(pkin(10));
t78 = cos(qJ(4));
t68 = t78 * t50;
t35 = t52 * t55 + t68;
t54 = sin(qJ(5));
t48 = t54 ^ 2;
t22 = t48 * t35;
t56 = cos(qJ(5));
t49 = t56 ^ 2;
t26 = t49 * t35;
t94 = t22 + t26;
t39 = t48 + t49;
t93 = -0.2e1 * t35;
t59 = pkin(5) * t54 - qJ(6) * t56;
t92 = t59 * t35;
t51 = sin(pkin(9));
t83 = t51 * pkin(1);
t41 = qJ(3) + t83;
t79 = pkin(7) + t41;
t29 = t79 * t52;
t11 = t55 * t29 + t68 * t79;
t91 = t11 ^ 2;
t75 = t55 * t50;
t33 = -t52 * t78 + t75;
t90 = t33 ^ 2;
t53 = cos(pkin(9));
t82 = t53 * pkin(1);
t43 = -pkin(2) - t82;
t37 = -pkin(3) * t52 + t43;
t89 = 0.2e1 * t37;
t88 = 0.2e1 * t50;
t87 = -0.2e1 * t54;
t85 = t33 * pkin(4);
t10 = -pkin(8) * t35 + t37 + t85;
t13 = t29 * t78 - t75 * t79;
t4 = t10 * t54 + t13 * t56;
t86 = pkin(8) * t33;
t84 = t33 * pkin(5);
t81 = t54 * pkin(8);
t80 = t56 * pkin(8);
t77 = t11 * t33;
t23 = t54 * t33;
t24 = t54 * t35;
t76 = t54 * t56;
t27 = t56 * t33;
t28 = t56 * t35;
t74 = t94 * pkin(8);
t73 = t39 * pkin(8) ^ 2;
t46 = t50 ^ 2;
t47 = t52 ^ 2;
t72 = t46 + t47;
t71 = t33 * qJ(6);
t70 = t33 * t24;
t32 = t35 ^ 2;
t69 = t32 * t76;
t67 = -t10 * t56 + t13 * t54;
t66 = -pkin(4) * t35 - t86;
t1 = t71 + t4;
t2 = t67 - t84;
t65 = t1 * t56 + t2 * t54;
t64 = t1 * t54 - t2 * t56;
t63 = t4 * t54 - t56 * t67;
t62 = t4 * t56 + t54 * t67;
t60 = pkin(5) * t56 + qJ(6) * t54;
t38 = -pkin(4) - t60;
t61 = -t35 * t38 + t86;
t36 = 0.2e1 * t39 * pkin(8);
t25 = t49 * t32;
t21 = t48 * t32;
t17 = t54 * t28;
t16 = 0.2e1 * t33 * t28;
t14 = t22 - t26;
t6 = t25 + t21 + t90;
t5 = t11 + t92;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t82, -0.2e1 * t83, 0 (t51 ^ 2 + t53 ^ 2) * pkin(1) ^ 2, t46, t52 * t88, 0, t47, 0, 0, -0.2e1 * t43 * t52, t43 * t88, 0.2e1 * t72 * t41, t41 ^ 2 * t72 + t43 ^ 2, t32, t33 * t93, 0, t90, 0, 0, t33 * t89, t35 * t89, 0.2e1 * t11 * t35 - 0.2e1 * t13 * t33, t13 ^ 2 + t37 ^ 2 + t91, t25, -0.2e1 * t69, t16, t21, -0.2e1 * t70, t90, 0.2e1 * t11 * t24 - 0.2e1 * t33 * t67, 0.2e1 * t11 * t28 - 0.2e1 * t33 * t4, t63 * t93, t4 ^ 2 + t67 ^ 2 + t91, t25, t16, 0.2e1 * t69, t90, 0.2e1 * t70, t21, -0.2e1 * t2 * t33 + 0.2e1 * t24 * t5, t64 * t93, 0.2e1 * t1 * t33 - 0.2e1 * t28 * t5, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * t35 + t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35 * t62 + t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5 * t33 + t35 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 + t90, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t52, t50, 0, t43, 0, 0, 0, 0, 0, 0, t33, t35, 0, t37, 0, 0, 0, 0, 0, 0, t27, -t23, -t94, t63, 0, 0, 0, 0, 0, 0, t27, -t94, t23, t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, -t33, 0, -t11, -t13, 0, 0, t17, -t14, t23, -t17, t27, 0, -t11 * t56 + t54 * t66, t11 * t54 + t56 * t66, t62, -t11 * pkin(4) + pkin(8) * t62, t17, t23, t14, 0, -t27, -t17, -t5 * t56 - t54 * t61, t65, -t5 * t54 + t56 * t61, pkin(8) * t65 + t5 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, -t35, 0, 0, 0, 0, 0, 0, 0, 0, -t27, t23, t94, t74 - t85, 0, 0, 0, 0, 0, 0, -t27, t94, -t23, t33 * t38 + t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t48, 0.2e1 * t76, 0, t49, 0, 0, 0.2e1 * pkin(4) * t56, pkin(4) * t87, t36, pkin(4) ^ 2 + t73, t48, 0, -0.2e1 * t76, 0, 0, t49, -0.2e1 * t38 * t56, t36, t38 * t87, t38 ^ 2 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t24, t33, -t67, -t4, 0, 0, 0, t28, 0, t33, t24, 0, -t67 + 0.2e1 * t84, -t60 * t35, 0.2e1 * t71 + t4, -pkin(5) * t2 + qJ(6) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, -t28, 0, 0, 0, 0, 0, 0, 0, 0, -t24, 0, t28, -t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, -t54, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, t54, t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t56, 0, -t81, -t80, 0, 0, 0, t54, 0, 0, -t56, 0, -t81, -t59, t80, -t59 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(5), 0, 0.2e1 * qJ(6), pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, t28, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, 0, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
