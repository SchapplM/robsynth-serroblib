% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d5,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 16:52
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPRP5_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 07:55:18
% EndTime: 2019-05-07 07:55:24
% DurationCPUTime: 2.07s
% Computational Cost: add. (2330->186), mult. (4732->339), div. (0->0), fcn. (5288->8), ass. (0->102)
t111 = cos(qJ(5));
t69 = sin(pkin(10));
t70 = cos(pkin(10));
t72 = sin(qJ(3));
t74 = cos(qJ(3));
t54 = t69 * t74 + t70 * t72;
t73 = sin(qJ(2));
t45 = t54 * t73;
t101 = t74 * t73;
t104 = t72 * t73;
t47 = t70 * t101 - t69 * t104;
t71 = sin(qJ(5));
t24 = t111 * t45 + t71 * t47;
t125 = t24 ^ 2;
t52 = t69 * t72 - t70 * t74;
t31 = t111 * t52 + t71 * t54;
t124 = t31 ^ 2;
t62 = -t74 * pkin(3) - pkin(2);
t43 = t52 * pkin(4) + t62;
t123 = 0.2e1 * t43;
t122 = 0.2e1 * t62;
t121 = -0.2e1 * t73;
t75 = cos(qJ(2));
t120 = -0.2e1 * t75;
t119 = 0.2e1 * t75;
t118 = pkin(2) * t74;
t117 = pkin(7) * t72;
t66 = t73 ^ 2;
t116 = t66 * pkin(7);
t115 = t69 * pkin(3);
t114 = t70 * pkin(3);
t64 = t73 * pkin(7);
t113 = t75 * pkin(3);
t112 = t75 * pkin(5);
t57 = -t75 * pkin(2) - t73 * pkin(8) - pkin(1);
t55 = t74 * t57;
t95 = qJ(4) * t73;
t34 = -t74 * t95 + t55 + (-pkin(3) - t117) * t75;
t100 = t74 * t75;
t91 = pkin(7) * t100;
t37 = t91 + (t57 - t95) * t72;
t19 = t70 * t34 - t69 * t37;
t10 = -t75 * pkin(4) - t47 * pkin(9) + t19;
t20 = t69 * t34 + t70 * t37;
t17 = -t45 * pkin(9) + t20;
t4 = t71 * t10 + t111 * t17;
t97 = -qJ(4) - pkin(8);
t86 = t97 * t72;
t87 = t97 * t74;
t39 = t69 * t86 - t70 * t87;
t27 = -t52 * pkin(9) + t39;
t38 = t69 * t87 + t70 * t86;
t81 = -t54 * pkin(9) + t38;
t14 = -t111 * t81 + t71 * t27;
t110 = t14 * t75;
t16 = t111 * t27 + t71 * t81;
t109 = t16 * t75;
t108 = t24 * t31;
t26 = t111 * t47 - t71 * t45;
t107 = t26 * t24;
t33 = t111 * t54 - t71 * t52;
t106 = t33 * t31;
t105 = t33 * t75;
t103 = t72 * t74;
t102 = t72 * t75;
t99 = t75 * t24;
t98 = t75 * t31;
t56 = pkin(3) * t104 + t64;
t65 = t72 ^ 2;
t67 = t74 ^ 2;
t96 = t65 + t67;
t94 = t75 * qJ(6);
t93 = t73 * t119;
t92 = t14 ^ 2 + t16 ^ 2;
t90 = t72 * t101;
t89 = t14 * t26 - t16 * t24;
t88 = -t111 * t10 + t71 * t17;
t61 = pkin(4) + t114;
t85 = -t111 * t61 + t71 * t115;
t35 = t45 * pkin(4) + t56;
t84 = t33 * t24 + t26 * t31;
t41 = -pkin(7) * t102 + t55;
t42 = t72 * t57 + t91;
t83 = -t41 * t72 + t42 * t74;
t82 = 0.2e1 * t14 * t33 - 0.2e1 * t16 * t31;
t50 = t111 * t115 + t71 * t61;
t79 = pkin(7) ^ 2;
t77 = 0.2e1 * pkin(5);
t76 = 0.2e1 * qJ(6);
t68 = t75 ^ 2;
t63 = t66 * t79;
t48 = -pkin(5) + t85;
t44 = qJ(6) + t50;
t30 = t33 ^ 2;
t23 = t26 ^ 2;
t21 = t26 * t120;
t18 = t26 * t33;
t11 = t31 * pkin(5) - t33 * qJ(6) + t43;
t7 = t24 * pkin(5) - t26 * qJ(6) + t35;
t2 = t88 + t112;
t1 = -t94 + t4;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t66, t93, 0, t68, 0, 0, pkin(1) * t119, pkin(1) * t121, 0.2e1 * (t66 + t68) * pkin(7), pkin(1) ^ 2 + t68 * t79 + t63, t67 * t66, -0.2e1 * t66 * t103, t100 * t121, t65 * t66, t72 * t93, t68, 0.2e1 * t72 * t116 - 0.2e1 * t41 * t75, 0.2e1 * t74 * t116 + 0.2e1 * t42 * t75, 0.2e1 * (-t41 * t74 - t42 * t72) * t73, t41 ^ 2 + t42 ^ 2 + t63, t47 ^ 2, -0.2e1 * t47 * t45, t47 * t120, t45 ^ 2, -t45 * t120, t68, -0.2e1 * t19 * t75 + 0.2e1 * t56 * t45, 0.2e1 * t20 * t75 + 0.2e1 * t56 * t47, -0.2e1 * t19 * t47 - 0.2e1 * t20 * t45, t19 ^ 2 + t20 ^ 2 + t56 ^ 2, t23, -0.2e1 * t107, t21, t125, 0.2e1 * t99, t68, 0.2e1 * t35 * t24 + 0.2e1 * t75 * t88, 0.2e1 * t35 * t26 + 0.2e1 * t4 * t75, -0.2e1 * t4 * t24 + 0.2e1 * t26 * t88, t35 ^ 2 + t4 ^ 2 + t88 ^ 2, t23, t21, 0.2e1 * t107, t68, -0.2e1 * t99, t125, 0.2e1 * t2 * t75 + 0.2e1 * t7 * t24, -0.2e1 * t1 * t24 + 0.2e1 * t2 * t26, -0.2e1 * t1 * t75 - 0.2e1 * t7 * t26, t1 ^ 2 + t2 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t75, 0, -t64, -t75 * pkin(7), 0, 0, t90 (-t65 + t67) * t73, -t102, -t90, -t100, 0, -pkin(7) * t101 + (-pkin(2) * t73 + pkin(8) * t75) * t72, pkin(8) * t100 + (t117 - t118) * t73, t83, -pkin(2) * t64 + t83 * pkin(8), t47 * t54, -t54 * t45 - t47 * t52, -t54 * t75, t45 * t52, t52 * t75, 0, -t38 * t75 + t62 * t45 + t56 * t52, t39 * t75 + t62 * t47 + t56 * t54, -t19 * t54 - t20 * t52 - t38 * t47 - t39 * t45, t19 * t38 + t20 * t39 + t56 * t62, t18, -t84, -t105, t108, t98, 0, t43 * t24 + t35 * t31 + t110, t43 * t26 + t35 * t33 + t109, -t4 * t31 + t33 * t88 + t89, t14 * t88 + t4 * t16 + t35 * t43, t18, -t105, t84, 0, -t98, t108, t11 * t24 + t7 * t31 + t110, -t1 * t31 + t2 * t33 + t89, -t11 * t26 - t7 * t33 - t109, t1 * t16 + t7 * t11 + t2 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, 0.2e1 * t103, 0, t67, 0, 0, 0.2e1 * t118, -0.2e1 * pkin(2) * t72, 0.2e1 * t96 * pkin(8), t96 * pkin(8) ^ 2 + pkin(2) ^ 2, t54 ^ 2, -0.2e1 * t54 * t52, 0, t52 ^ 2, 0, 0, t52 * t122, t54 * t122, -0.2e1 * t38 * t54 - 0.2e1 * t39 * t52, t38 ^ 2 + t39 ^ 2 + t62 ^ 2, t30, -0.2e1 * t106, 0, t124, 0, 0, t31 * t123, t33 * t123, t82, t43 ^ 2 + t92, t30, 0, 0.2e1 * t106, 0, 0, t124, 0.2e1 * t11 * t31, t82, -0.2e1 * t11 * t33, t11 ^ 2 + t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, -t104, -t75, t41, -t42, 0, 0, 0, 0, t47, 0, -t45, -t75, -t70 * t113 + t19, t69 * t113 - t20 (-t45 * t69 - t47 * t70) * pkin(3) (t19 * t70 + t20 * t69) * pkin(3), 0, 0, t26, 0, -t24, -t75, t75 * t85 - t88, t50 * t75 - t4, -t50 * t24 + t26 * t85, t4 * t50 + t85 * t88, 0, t26, 0, -t75, t24, 0 (-pkin(5) + t48) * t75 - t88, -t44 * t24 + t48 * t26 (-qJ(6) - t44) * t75 + t4, t1 * t44 + t2 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t74, 0, -t72 * pkin(8), -t74 * pkin(8), 0, 0, 0, 0, t54, 0, -t52, 0, t38, -t39 (-t52 * t69 - t54 * t70) * pkin(3) (t38 * t70 + t39 * t69) * pkin(3), 0, 0, t33, 0, -t31, 0, -t14, -t16, -t50 * t31 + t33 * t85, t14 * t85 + t16 * t50, 0, t33, 0, 0, t31, 0, -t14, -t44 * t31 + t48 * t33, t16, t14 * t48 + t16 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t114, -0.2e1 * t115, 0 (t69 ^ 2 + t70 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 0, 0, 1, -0.2e1 * t85, -0.2e1 * t50, 0, t50 ^ 2 + t85 ^ 2, 0, 0, 0, 1, 0, 0, -0.2e1 * t48, 0, 0.2e1 * t44, t44 ^ 2 + t48 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45, t47, 0, t56, 0, 0, 0, 0, 0, 0, t24, t26, 0, t35, 0, 0, 0, 0, 0, 0, t24, 0, -t26, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, t54, 0, t62, 0, 0, 0, 0, 0, 0, t31, t33, 0, t43, 0, 0, 0, 0, 0, 0, t31, 0, -t33, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, -t24, -t75, -t88, -t4, 0, 0, 0, t26, 0, -t75, t24, 0, -t88 - 0.2e1 * t112, -pkin(5) * t26 - t24 * qJ(6), -0.2e1 * t94 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, -t31, 0, -t14, -t16, 0, 0, 0, t33, 0, 0, t31, 0, -t14, -pkin(5) * t33 - t31 * qJ(6), t16, -t14 * pkin(5) + t16 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -t85, -t50, 0, 0, 0, 0, 0, 1, 0, 0, t77 - t85, 0, t76 + t50, -t48 * pkin(5) + t44 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t77, 0, t76, pkin(5) ^ 2 + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, t26, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t3;
