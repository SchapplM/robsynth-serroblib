% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRP6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRRP6_inertiaJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:01:23
% EndTime: 2019-05-05 15:01:26
% DurationCPUTime: 1.11s
% Computational Cost: add. (348->87), mult. (584->134), div. (0->0), fcn. (533->4), ass. (0->73)
t43 = sin(qJ(5));
t36 = t43 ^ 2;
t45 = cos(qJ(5));
t38 = t45 ^ 2;
t21 = t36 + t38;
t80 = 2 * pkin(5);
t41 = (pkin(1) + qJ(3));
t79 = (t41 ^ 2);
t78 = 2 * t41;
t77 = -0.2e1 * t43;
t76 = 0.2e1 * t45;
t46 = cos(qJ(4));
t75 = 0.2e1 * t46;
t44 = sin(qJ(4));
t74 = pkin(8) * t44;
t73 = t43 * pkin(8);
t72 = t45 * pkin(8);
t71 = t46 * pkin(4);
t16 = t44 * pkin(4) - t46 * pkin(8) + t41;
t31 = t45 * t44;
t40 = -pkin(7) + qJ(2);
t4 = t43 * t16 + t40 * t31;
t70 = t36 * t46;
t39 = t46 ^ 2;
t69 = t39 * t40;
t68 = t40 * t43;
t67 = t43 * t45;
t28 = t43 * t46;
t66 = t44 * t40;
t32 = t45 * t46;
t51 = -t45 * pkin(5) - t43 * qJ(6);
t17 = -pkin(4) + t51;
t65 = t46 * t17;
t64 = t46 * t40;
t63 = t46 * t44;
t62 = t21 * t74;
t61 = t21 * pkin(8) ^ 2;
t37 = t44 ^ 2;
t22 = t37 + t39;
t60 = t44 * qJ(6);
t59 = t43 * t63;
t58 = t39 * t67;
t57 = -t71 - t74;
t1 = t60 + t4;
t8 = t45 * t16;
t2 = -t8 + (-pkin(5) + t68) * t44;
t56 = t1 * t45 + t2 * t43;
t55 = -t1 * t43 + t2 * t45;
t3 = -t43 * t66 + t8;
t54 = -t3 * t45 - t4 * t43;
t53 = -t3 * t43 + t4 * t45;
t52 = -t65 + t74;
t50 = -pkin(5) * t43 + t45 * qJ(6);
t48 = (qJ(2) ^ 2);
t47 = 2 * qJ(2);
t35 = t40 ^ 2;
t30 = t38 * t46;
t29 = t38 * t39;
t27 = t43 * t44;
t26 = t36 * t39;
t25 = t39 * t35;
t20 = t43 * t32;
t18 = t63 * t76;
t15 = 0.2e1 * t21 * pkin(8);
t14 = t22 * t45;
t13 = t21 * t44;
t12 = t22 * t43;
t11 = -t30 + t70;
t10 = t30 + t70;
t9 = t22 * t40;
t6 = t21 * t37 + t39;
t5 = (-t40 - t50) * t46;
t7 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t47, pkin(1) ^ 2 + t48, 1, 0, 0, 0, 0, 0, 0, t47, t78, t48 + t79, t39, -0.2e1 * t63, 0, t37, 0, 0, t44 * t78, t41 * t75, -0.2e1 * t9, t37 * t35 + t25 + t79, t29, -0.2e1 * t58, t18, t26, -0.2e1 * t59, t37, 0.2e1 * t3 * t44 - 0.2e1 * t39 * t68, -0.2e1 * t4 * t44 - 0.2e1 * t45 * t69, t54 * t75, t3 ^ 2 + t4 ^ 2 + t25, t29, t18, 0.2e1 * t58, t37, 0.2e1 * t59, t26, -0.2e1 * t2 * t44 + 0.2e1 * t5 * t28, t55 * t75, 0.2e1 * t1 * t44 - 0.2e1 * t5 * t32, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -1, -t41, 0, 0, 0, 0, 0, 0, -t44, -t46, 0, -t41, 0, 0, 0, 0, 0, 0, -t31, t27, t10, t54, 0, 0, 0, 0, 0, 0, -t31, t10, -t27, t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, qJ(2), 0, 0, 0, 0, 0, 0, 0, 0, -t22, t9, 0, 0, 0, 0, 0, 0, -t12, -t14, 0, t53 * t44 + t69, 0, 0, 0, 0, 0, 0, -t12, 0, t14, t56 * t44 - t5 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t44, 0, t64, -t66, 0, 0, t20, -t11, t27, -t20, t31, 0, t57 * t43 + t45 * t64, -t43 * t64 + t57 * t45, t53, pkin(4) * t64 + t53 * pkin(8), t20, t27, t11, 0, -t31, -t20, -t52 * t43 - t5 * t45, t56, -t5 * t43 + t52 * t45, t56 * pkin(8) + t5 * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t44, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t28, t13, t62 + t71, 0, 0, 0, 0, 0, 0, t32, t13, t28, t62 - t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t36, 0.2e1 * t67, 0, t38, 0, 0, pkin(4) * t76, pkin(4) * t77, t15, pkin(4) ^ 2 + t61, t36, 0, -0.2e1 * t67, 0, 0, t38, -0.2e1 * t17 * t45, t15, t17 * t77, t17 ^ 2 + t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t28, t44, t3, -t4, 0, 0, 0, t32, 0, t44, t28, 0, t8 + (t80 - t68) * t44, t51 * t46, 0.2e1 * t60 + t4, -t2 * pkin(5) + t1 * qJ(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, t43, 0, 0, 0, 0, 0, 0, 0, 0, -t45, 0, -t43, t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, -t31, 0, 0, 0, 0, 0, 0, 0, 0, -t27, 0, t31, t50 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, t45, 0, -t73, -t72, 0, 0, 0, t43, 0, 0, -t45, 0, -t73, t50, t72, t50 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, t80, 0, 0.2e1 * qJ(6) (pkin(5) ^ 2) + qJ(6) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, t32, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t7;
