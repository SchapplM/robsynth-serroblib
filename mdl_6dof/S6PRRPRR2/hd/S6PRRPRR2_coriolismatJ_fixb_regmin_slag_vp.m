% Calculate minimal parameter regressor of coriolis matrix for
% S6PRRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% cmat_reg [(6*%NQJ)%x29]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-16 03:49
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S6PRRPRR2_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR2_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRPRR2_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR2_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-16 03:46:43
% EndTime: 2021-01-16 03:47:15
% DurationCPUTime: 11.63s
% Computational Cost: add. (7763->502), mult. (18090->749), div. (0->0), fcn. (21423->12), ass. (0->417)
t393 = cos(qJ(3));
t610 = cos(pkin(12));
t476 = t610 * t393;
t385 = sin(pkin(12));
t389 = sin(qJ(3));
t585 = t385 * t389;
t425 = t476 - t585;
t630 = t425 / 0.2e1;
t477 = t610 * t389;
t584 = t385 * t393;
t353 = t477 + t584;
t388 = sin(qJ(5));
t269 = t388 * t353;
t616 = qJ(4) + pkin(8);
t368 = t616 * t389;
t369 = t616 * t393;
t299 = t610 * t368 + t385 * t369;
t226 = pkin(5) * t269 + t299;
t387 = sin(qJ(6));
t391 = cos(qJ(6));
t392 = cos(qJ(5));
t563 = t391 * t392;
t242 = t387 * t269 - t353 * t563;
t378 = t385 * pkin(3) + pkin(9);
t617 = pkin(10) + t378;
t347 = t617 * t388;
t348 = t617 * t392;
t263 = -t387 * t347 + t391 * t348;
t564 = t391 * t388;
t574 = t387 * t392;
t363 = t564 + t574;
t626 = t363 / 0.2e1;
t379 = -t610 * pkin(3) - pkin(4);
t365 = -t392 * pkin(5) + t379;
t667 = -t365 / 0.2e1;
t664 = t226 * t626 + t242 * t667 + t263 * t630;
t185 = t363 * t353;
t575 = t387 * t388;
t361 = -t563 + t575;
t445 = -t391 * t347 - t387 * t348;
t663 = -t226 * t361 / 0.2e1 + t185 * t667 + t445 * t630;
t661 = t299 * t392;
t666 = t661 / 0.2e1;
t386 = sin(pkin(6));
t390 = sin(qJ(2));
t583 = t386 * t390;
t611 = cos(pkin(6));
t344 = t389 * t583 - t611 * t393;
t316 = t610 * t344;
t345 = t611 * t389 + t393 * t583;
t587 = t385 * t345;
t473 = t316 + t587;
t632 = t473 / 0.2e1;
t656 = -t473 / 0.2e1;
t665 = t656 + t632;
t508 = qJD(5) + qJD(6);
t266 = t388 * t425;
t618 = t389 * pkin(3);
t272 = t353 * pkin(4) - pkin(9) * t425 + t618;
t252 = t388 * t272;
t548 = -t252 + t661;
t133 = -pkin(10) * t266 - t548;
t578 = t387 * t133;
t484 = -t578 / 0.2e1;
t253 = t392 * t272;
t271 = t392 * t425;
t573 = t299 * t388;
t619 = t353 * pkin(5);
t115 = -pkin(10) * t271 + t253 + t573 + t619;
t570 = t391 * t115;
t435 = t484 + t570 / 0.2e1;
t15 = t435 - t664;
t567 = t391 * t133;
t481 = -t567 / 0.2e1;
t581 = t387 * t115;
t436 = -t581 / 0.2e1 + t481;
t16 = t436 - t663;
t662 = -t425 / 0.2e1;
t649 = -t385 * t368 + t610 * t369;
t596 = t649 * t388;
t595 = t649 * t392;
t512 = t353 * qJD(2);
t290 = t425 * t512;
t346 = t477 / 0.2e1 + t584 / 0.2e1;
t651 = t346 * qJD(5) - t290;
t659 = -t563 / 0.2e1 + t575 / 0.2e1;
t658 = t508 * t263;
t657 = t508 * t445;
t655 = t425 * t508;
t654 = t361 * t508;
t349 = t425 ^ 2;
t350 = t353 ^ 2;
t650 = -t350 - t349;
t540 = qJD(3) * t365;
t412 = t659 * t473;
t459 = t473 * t361;
t78 = t459 / 0.2e1 - t412;
t553 = t78 * qJD(1);
t648 = t16 * qJD(2) + t361 * t540 + t553;
t432 = t574 / 0.2e1 + t564 / 0.2e1;
t413 = t432 * t473;
t458 = t473 * t363;
t77 = -t458 / 0.2e1 + t413;
t554 = t77 * qJD(1);
t647 = t15 * qJD(2) - t363 * t540 + t554;
t621 = pkin(5) * t388;
t235 = -t365 * t361 + t363 * t621;
t622 = -t392 / 0.2e1;
t624 = t388 / 0.2e1;
t625 = -t387 / 0.2e1;
t3 = (t242 * t624 + (t363 * t622 + t625) * t353) * pkin(5) + t16;
t646 = t3 * qJD(2) - t235 * qJD(3) + t553;
t234 = t361 * t621 + t365 * t363;
t623 = t391 / 0.2e1;
t4 = (-t185 * t624 + (t361 * t622 + t623) * t353) * pkin(5) + t15;
t645 = t4 * qJD(2) - t234 * qJD(3) + t554;
t644 = t346 * qJD(6) + t651;
t500 = t388 * t583;
t394 = cos(qJ(2));
t582 = t386 * t394;
t303 = t425 * t582;
t562 = t392 * t303;
t257 = t500 + t562;
t565 = t391 * t257;
t572 = t388 * t303;
t255 = t392 * t583 - t572;
t577 = t387 * t255;
t434 = -t577 / 0.2e1 - t565 / 0.2e1;
t426 = -t385 * t344 + t610 * t345;
t200 = t388 * t426 + t392 * t582;
t201 = -t388 * t582 + t392 * t426;
t53 = t391 * t200 + t387 * t201;
t640 = t185 * t656 + t53 * t662;
t397 = t434 - t640;
t643 = qJD(1) * t397;
t566 = t391 * t255;
t576 = t387 * t257;
t433 = -t576 / 0.2e1 + t566 / 0.2e1;
t54 = t387 * t200 - t391 * t201;
t641 = t242 * t656 + t54 * t662;
t398 = t433 - t641;
t642 = qJD(1) * t398;
t639 = qJD(2) * t397 + t78 * qJD(3);
t638 = qJD(2) * t398 + t77 * qJD(3);
t383 = t388 ^ 2;
t384 = t392 ^ 2;
t374 = t384 - t383;
t571 = t388 * t392;
t474 = 0.2e1 * t353 * t571;
t418 = qJD(2) * t474 - t374 * qJD(3);
t402 = t433 + t641;
t80 = t458 / 0.2e1 + t413;
t637 = qJD(2) * t402 + t80 * qJD(3) + t508 * t54;
t403 = t434 + t640;
t79 = -t459 / 0.2e1 - t412;
t636 = qJD(2) * t403 + t79 * qJD(3) + t508 * t53;
t381 = -t393 * pkin(3) - pkin(2);
t264 = -pkin(4) * t425 - t353 * pkin(9) + t381;
t152 = -t392 * t264 + t596;
t590 = t353 * t392;
t131 = -pkin(10) * t590 - t152;
t620 = t425 * pkin(5);
t114 = t131 - t620;
t113 = t391 * t114;
t635 = -t113 / 0.2e1;
t634 = -t114 / 0.2e1;
t633 = t426 / 0.2e1;
t629 = -t353 / 0.2e1;
t628 = t353 / 0.2e1;
t627 = t361 / 0.2e1;
t63 = t185 * t361 + t363 * t242;
t615 = t508 * t63;
t614 = pkin(5) * qJD(5);
t613 = pkin(5) * qJD(6);
t612 = qJD(3) * pkin(3);
t502 = t620 / 0.2e1;
t468 = t502 + t131 / 0.2e1;
t11 = (t634 + t468) * t387;
t609 = t11 * qJD(2);
t13 = t468 * t391 + t635;
t608 = t13 * qJD(2);
t607 = t200 * t425;
t606 = t201 * t425;
t605 = t226 * t242;
t604 = t226 * t185;
t601 = t242 * t353;
t243 = t363 * t425;
t600 = t243 * t425;
t246 = t361 * t425;
t599 = t246 * t425;
t302 = t353 * t582;
t593 = t302 * t388;
t592 = t302 * t392;
t591 = t353 * t185;
t580 = t387 * t131;
t153 = t388 * t264 + t595;
t132 = -pkin(10) * t269 + t153;
t579 = t387 * t132;
t569 = t391 * t131;
t568 = t391 * t132;
t431 = t632 - t587 / 0.2e1 - t316 / 0.2e1;
t42 = -t431 * t425 + (-t426 / 0.2e1 + t633) * t353;
t561 = t42 * qJD(2);
t64 = t185 * t246 + t242 * t243;
t555 = t64 * qJD(2);
t81 = -t386 ^ 2 * t394 * t390 + t302 * t473 + t303 * t426;
t552 = t81 * qJD(1);
t108 = -t185 * t626 + t242 * t627;
t551 = t508 * t108;
t162 = (t626 + t432) * t425;
t550 = t508 * t162;
t167 = t363 * t630 - t425 * t432;
t549 = t508 * t167;
t546 = -t266 * t625 - t271 * t623;
t545 = t659 * t425;
t544 = qJD(2) * t242;
t543 = qJD(2) * t390;
t542 = qJD(2) * t393;
t541 = qJD(3) * t363;
t539 = qJD(3) * t389;
t538 = qJD(3) * t392;
t537 = qJD(3) * t393;
t536 = qJD(3) * t394;
t535 = qJD(5) * t388;
t534 = qJD(5) * t392;
t533 = qJD(6) * t365;
t104 = -t591 + t600;
t532 = t104 * qJD(2);
t105 = t591 + t600;
t531 = t105 * qJD(2);
t106 = t599 - t601;
t530 = t106 * qJD(2);
t107 = -t599 - t601;
t529 = t107 * qJD(2);
t142 = t162 * qJD(2);
t488 = -t246 / 0.2e1;
t163 = t488 - t545;
t143 = t163 * qJD(2);
t489 = t246 / 0.2e1;
t164 = t489 + t546;
t145 = t164 * qJD(2);
t182 = t353 * t361;
t528 = t182 * qJD(2);
t527 = t185 * qJD(2);
t507 = t350 - t349;
t208 = t507 * t388;
t526 = t208 * qJD(2);
t209 = t650 * t388;
t525 = t209 * qJD(2);
t210 = t507 * t392;
t524 = t210 * qJD(2);
t499 = -t610 / 0.2e1;
t416 = t353 * t499 + t385 * t630;
t229 = (-t389 / 0.2e1 + t416) * pkin(3);
t523 = t229 * qJD(2);
t522 = t426 * qJD(3);
t521 = t266 * qJD(2);
t520 = t269 * qJD(2);
t519 = t271 * qJD(2);
t274 = t650 * t392;
t518 = t274 * qJD(2);
t517 = t650 * qJD(2);
t516 = t346 * qJD(2);
t514 = t425 * qJD(2);
t513 = t425 * qJD(4);
t511 = t353 * qJD(3);
t510 = t353 * qJD(4);
t375 = -t389 ^ 2 + t393 ^ 2;
t509 = t375 * qJD(2);
t506 = pkin(5) * t590;
t505 = pkin(2) * t389 * qJD(2);
t504 = pkin(2) * t542;
t503 = -t621 / 0.2e1;
t501 = t619 / 0.2e1;
t498 = t425 * t534;
t289 = t425 * t511;
t497 = t386 * t543;
t496 = qJD(2) * t582;
t495 = t388 * t534;
t494 = t388 * t538;
t493 = t389 * t542;
t492 = t392 * t512;
t491 = t302 * t627;
t490 = t302 * t626;
t487 = t583 / 0.2e1;
t486 = -t582 / 0.2e1;
t485 = t582 / 0.2e1;
t482 = -t572 / 0.2e1;
t479 = -t562 / 0.2e1;
t478 = -t252 / 0.2e1 + t666;
t475 = pkin(5) * t508;
t471 = t508 * t363;
t470 = t392 * t501;
t469 = -qJD(5) + t514;
t467 = t501 + t115 / 0.2e1;
t465 = qJD(3) * t474;
t225 = pkin(5) * t266 + t649;
t47 = -t113 + t579;
t1 = -(t570 - t578) * t425 - t47 * t353 + t225 * t185 + t226 * t243;
t395 = -t185 * t633 + t665 * t243 + t53 * t628;
t7 = t491 + t395;
t464 = -t7 * qJD(1) + t1 * qJD(2);
t48 = t387 * t114 + t568;
t2 = (t567 + t581) * t425 - t48 * t353 - t225 * t242 - t226 * t246;
t396 = t242 * t633 - t246 * t656 - t473 * t489 + t54 * t629;
t8 = t490 + t396;
t463 = -t8 * qJD(1) + t2 * qJD(2);
t462 = qJD(6) - t469;
t401 = t665 * t649;
t417 = t303 * t385 / 0.2e1 + t302 * t499;
t19 = (t389 * t485 + t417) * pkin(3) + t401;
t94 = t381 * t618;
t457 = -t19 * qJD(1) + t94 * qJD(2);
t51 = -t568 - t580;
t21 = t185 * t506 - t425 * t51 - t605;
t456 = -t21 * qJD(2) + t642;
t52 = t569 - t579;
t22 = -t242 * t506 + t425 * t52 - t604;
t455 = -t22 * qJD(2) + t643;
t23 = -t425 * t47 - t604;
t454 = -t23 * qJD(2) + t643;
t24 = t425 * t48 - t605;
t453 = -t24 * qJD(2) + t642;
t406 = t426 * t628;
t400 = t200 * t629 + t406 * t388;
t35 = t592 / 0.2e1 + t400;
t39 = (-t152 + t596) * t353 - t253 * t425;
t452 = t35 * qJD(1) + t39 * qJD(2);
t399 = t201 * t629 + t406 * t392;
t38 = -t593 / 0.2e1 + t399;
t40 = (-t153 + t595) * t353 - (t548 - t661) * t425;
t451 = t38 * qJD(1) + t40 * qJD(2);
t450 = t42 * qJD(1);
t439 = t473 * t629;
t408 = t487 + t439;
t56 = t482 - t606 / 0.2e1 + t408 * t392;
t91 = t153 * t425 + t299 * t590;
t449 = t56 * qJD(1) - t91 * qJD(2);
t57 = t479 + t607 / 0.2e1 - t408 * t388;
t90 = -t152 * t425 - t299 * t269;
t448 = -t57 * qJD(1) + t90 * qJD(2);
t95 = t185 ^ 2 - t242 ^ 2;
t33 = t95 * qJD(2) + t63 * qJD(3);
t444 = -t353 * t378 + t379 * t425;
t134 = t299 * t353 + t425 * t649;
t409 = t426 * t630 + t473 * t628;
t96 = t487 - t409;
t443 = -t96 * qJD(1) + t134 * qJD(2);
t239 = t361 ^ 2 - t363 ^ 2;
t45 = t63 * qJD(2) + t239 * qJD(3);
t442 = t469 * t392;
t215 = (t628 - t346) * t582;
t250 = t381 * t353 - t425 * t618;
t441 = -t215 * qJD(1) + t250 * qJD(2);
t415 = -t476 / 0.2e1 + t585 / 0.2e1;
t216 = (t630 + t415) * t582;
t251 = t353 * t618 + t381 * t425;
t440 = -t216 * qJD(1) + t251 * qJD(2);
t438 = t392 * t632;
t437 = t378 * t662 + t379 * t629;
t428 = t353 * t442;
t50 = -t108 * qJD(3) - t185 * t544;
t83 = -t108 * qJD(2) + t361 * t541;
t265 = (t383 / 0.2e1 - t384 / 0.2e1) * t353;
t427 = -t265 * qJD(2) + t494;
t420 = t350 * qJD(2) * t571 + t265 * qJD(3);
t273 = t374 * t350;
t419 = t273 * qJD(2) + t465;
t414 = t437 * t392;
t127 = t431 * t388;
t75 = -t253 / 0.2e1 - t414;
t411 = -t379 * t388 * qJD(3) + t127 * qJD(1) - t75 * qJD(2);
t128 = t431 * t392;
t407 = t437 * t388 + t666;
t73 = t407 - t478;
t410 = t128 * qJD(1) - t73 * qJD(2) - t379 * t538;
t340 = t346 * qJD(3);
t337 = t392 * t511;
t259 = t266 * qJD(5);
t258 = t265 * qJD(5);
t228 = t618 / 0.2e1 + t416 * pkin(3);
t227 = t521 - t535;
t218 = -t346 * t582 + t353 * t486;
t217 = t415 * t582 - t425 * t485;
t166 = t488 + t546;
t165 = t489 - t545;
t151 = t167 * qJD(4);
t146 = t166 * qJD(4);
t144 = t164 * qJD(4);
t141 = t162 * qJD(4);
t130 = -t473 * t622 + t438;
t129 = t388 * t632 + t473 * t624;
t118 = -t471 + t142;
t117 = -t145 + t654;
t116 = -t143 - t654;
t97 = t487 + t409;
t93 = t163 * qJD(3) - t185 * t514;
t92 = -t162 * qJD(3) + t242 * t514;
t76 = t299 * t624 + t573 / 0.2e1 + t253 / 0.2e1 - t414;
t74 = t407 + t478;
t59 = t606 / 0.2e1 + t353 * t438 + t482 + t392 * t487;
t58 = -t607 / 0.2e1 + t388 * t439 + t479 - t500 / 0.2e1;
t44 = t165 * qJD(3) - t185 * t462;
t43 = t167 * qJD(3) + t242 * t462;
t41 = t42 * qJD(3);
t37 = t593 / 0.2e1 + t399;
t36 = -t592 / 0.2e1 + t400;
t20 = pkin(3) * t417 + t486 * t618 - t401;
t18 = t435 + t664;
t17 = t436 + t663;
t14 = t391 * t502 + t579 + t635 - t569 / 0.2e1;
t12 = -t568 - t580 / 0.2e1 + (t502 + t634) * t387;
t10 = t490 - t396;
t9 = t491 - t395;
t6 = t242 * t503 + t363 * t470 - t467 * t387 + t481 + t663;
t5 = -t185 * t503 + t361 * t470 + t467 * t391 + t484 + t664;
t25 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t497, -t496, 0, 0, 0, 0, 0, (-t389 * t536 - t390 * t542) * t386, (t389 * t543 - t393 * t536) * t386, t218 * qJD(3) - t425 * t497, t217 * qJD(3) + t353 * t497, (t302 * t353 + t303 * t425) * qJD(2) + t41, t552 + (t302 * t299 + t303 * t649 + t381 * t583) * qJD(2) + t20 * qJD(3) + t97 * qJD(4), 0, 0, 0, 0, 0, (-t255 * t425 + t269 * t302) * qJD(2) + t36 * qJD(3) + t59 * qJD(5), (t257 * t425 + t302 * t590) * qJD(2) + t37 * qJD(3) + t58 * qJD(5), 0, 0, 0, 0, 0, (-(t566 - t576) * t425 + t302 * t185) * qJD(2) + t9 * qJD(3) + t508 * t402, ((t565 + t577) * t425 - t302 * t242) * qJD(2) + t10 * qJD(3) + t508 * t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t345 * qJD(3) - t389 * t496, t344 * qJD(3) - t393 * t496, t218 * qJD(2) - t522, t217 * qJD(2) + qJD(3) * t473, t561, t20 * qJD(2) + (-t385 * t473 - t426 * t610) * t612, 0, 0, 0, 0, 0, t36 * qJD(2) + t129 * qJD(5) - t392 * t522, t37 * qJD(2) + t130 * qJD(5) + t388 * t522, 0, 0, 0, 0, 0, t9 * qJD(2) + t361 * t522 + t508 * t80, t10 * qJD(2) + t363 * t522 + t508 * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 * qJD(2) + t129 * qJD(3) - t201 * qJD(5), t58 * qJD(2) + t130 * qJD(3) + t200 * qJD(5), 0, 0, 0, 0, 0, t637, t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t637, t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215 * qJD(3), -t216 * qJD(3), t41, -t19 * qJD(3) - t96 * qJD(4) - t552, 0, 0, 0, 0, 0, t35 * qJD(3) - t56 * qJD(5), t38 * qJD(3) - t57 * qJD(5), 0, 0, 0, 0, 0, -qJD(3) * t7 - t508 * t398, -qJD(3) * t8 - t508 * t397; 0, 0, 0, 0, t389 * t537, t375 * qJD(3), 0, 0, 0, -pkin(2) * t539, -pkin(2) * t537, t250 * qJD(3), t251 * qJD(3), -t650 * qJD(4), t94 * qJD(3) + t134 * qJD(4), t289 * t384 - t350 * t495, -t273 * qJD(5) - t425 * t465, t353 * t425 * t535 + t210 * qJD(3), -t208 * qJD(3) + t353 * t498, -t289, t39 * qJD(3) - t209 * qJD(4) + t91 * qJD(5), t40 * qJD(3) - t274 * qJD(4) + t90 * qJD(5), (qJD(3) * t246 + t185 * t508) * t242, t64 * qJD(3) + t508 * t95, t106 * qJD(3) + t185 * t655, t104 * qJD(3) - t242 * t655, -t289, t1 * qJD(3) + t105 * qJD(4) + t21 * qJD(5) + t24 * qJD(6), t2 * qJD(3) + t107 * qJD(4) + t22 * qJD(5) + t23 * qJD(6); 0, 0, 0, 0, t493, t509, t537, -t539, 0, -pkin(8) * t537 - t505, pkin(8) * t539 - t504, -qJD(3) * t649 + t441, qJD(3) * t299 + t440, (-t353 * t385 - t425 * t610) * t612 + t450, (-t299 * t385 - t610 * t649) * t612 + t228 * qJD(4) + t457, -t258 - (-t384 * t512 - t494) * t425, -0.2e1 * t353 * t495 - t418 * t425, t388 * t511 + t524, t337 - t526, t651, (t388 * t444 - t595) * qJD(3) + t76 * qJD(5) + t452, (t392 * t444 + t596) * qJD(3) + t74 * qJD(5) + t451, -(t541 - t544) * t246 + t551, t555 + (-t363 * t243 + t246 * t361) * qJD(3) + t615, t165 * t508 + t363 * t511 + t530, -t361 * t511 + t532 + t549, t644, (t225 * t361 + t365 * t243 + t353 * t445) * qJD(3) + t5 * qJD(5) + t18 * qJD(6) + t464, (t225 * t363 - t365 * t246 - t263 * t353) * qJD(3) + t6 * qJD(5) + t17 * qJD(6) + t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t517, t228 * qJD(3) + t443, 0, 0, 0, 0, 0, -t525, -t518, 0, 0, 0, 0, 0, t531 + t549, t166 * t508 + t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t420, -t419, t469 * t269, t428, t340, t76 * qJD(3) - t153 * qJD(5) - t449, t74 * qJD(3) + t152 * qJD(5) + t448, -t50, t33, t44, t43, t340, t5 * qJD(3) + t51 * qJD(5) + t12 * qJD(6) + t151 - t456, t6 * qJD(3) - t52 * qJD(5) + t14 * qJD(6) + t146 - t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t33, t44, t43, t340, t18 * qJD(3) + t12 * qJD(5) - t48 * qJD(6) + t151 - t453, t17 * qJD(3) + t14 * qJD(5) + t47 * qJD(6) + t146 - t454; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215 * qJD(2), t216 * qJD(2), -t561, t19 * qJD(2), 0, 0, 0, 0, 0, -t35 * qJD(2) - t127 * qJD(5), -t38 * qJD(2) - t128 * qJD(5), 0, 0, 0, 0, 0, t7 * qJD(2) - t508 * t77, t8 * qJD(2) - t508 * t78; 0, 0, 0, 0, -t493, -t509, 0, 0, 0, t505, t504, -t441 - t510, -t440 - t513, -t450, t229 * qJD(4) - t457, -t290 * t384 - t258, 0.2e1 * t388 * t428, -t271 * qJD(5) - t524, t259 + t526, -t651, t75 * qJD(5) - t392 * t510 - t452, t269 * qJD(4) + t73 * qJD(5) - t451, -t246 * t544 + t551, -t555 + t615, -t163 * t508 - t530, -t532 + t550, -t644, t182 * qJD(4) - t4 * qJD(5) - t15 * qJD(6) - t464, t185 * qJD(4) - t3 * qJD(5) - t16 * qJD(6) - t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, t374 * qJD(5), 0, 0, 0, t379 * t535, t379 * t534, -t361 * t471, t508 * t239, 0, 0, 0, t234 * qJD(5) + t363 * t533, t235 * qJD(5) - t361 * t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t512, -t514, 0, t523, 0, 0, 0, 0, 0, -t492, t520, 0, 0, 0, 0, 0, t528, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t427, -t418, -t519 + t534, t227, -t516, -t378 * t534 - t411, t378 * t535 - t410, -t83, t45, t116, t118, -t516, -t645 - t658, -t646 - t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t83, t45, t116, t118, -t516, -t647 - t658, -t648 - t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t511, t425 * qJD(3), t517, -t229 * qJD(3) - t443, 0, 0, 0, 0, 0, t259 + t337 + t525, -t269 * qJD(3) + t498 + t518, 0, 0, 0, 0, 0, -t182 * qJD(3) - t531 + t550, -t185 * qJD(3) - t164 * t508 - t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t512, t514, 0, -t523, 0, 0, 0, 0, 0, t492, -t520, 0, 0, 0, 0, 0, -t528, -t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t227, t442, 0, 0, 0, 0, 0, t118, t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56 * qJD(2) + t127 * qJD(3), t57 * qJD(2) + t128 * qJD(3), 0, 0, 0, 0, 0, t638, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t420, t419, t271 * qJD(3) - t290 * t388, -t266 * qJD(3) - t425 * t492, t340, -t75 * qJD(3) - t266 * qJD(4) + t449, -t73 * qJD(3) - t392 * t513 - t448, t50, -t33, t93, t92, t340, t4 * qJD(3) + t11 * qJD(6) - t141 + t456, t3 * qJD(3) + t13 * qJD(6) + t144 + t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t427, t418, t519, -t521, t516, t411, t410, t83, -t45, t143, -t142, t516, t645, t646; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t521, -t392 * t514, 0, 0, 0, 0, 0, -t142, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t387 * t613, -t391 * t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t387 * t475 + t609, -t391 * t475 + t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t638, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t33, t93, t92, t340, t15 * qJD(3) - t11 * qJD(5) - t141 + t453, t16 * qJD(3) - t13 * qJD(5) + t144 + t454; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, -t45, t143, -t142, t516, t647, t648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t142, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t387 * t614 - t609, t391 * t614 - t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t25;
