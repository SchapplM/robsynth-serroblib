% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d5,d6,theta1,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 22:01
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRRPRR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRPRR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRRPRR2_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 04:32:40
% EndTime: 2019-05-05 04:32:45
% DurationCPUTime: 1.61s
% Computational Cost: add. (1513->161), mult. (3184->300), div. (0->0), fcn. (3904->12), ass. (0->95)
t61 = sin(pkin(12));
t63 = cos(pkin(12));
t67 = sin(qJ(3));
t71 = cos(qJ(3));
t40 = t61 * t71 + t63 * t67;
t110 = -0.2e1 * t40;
t64 = cos(pkin(6));
t62 = sin(pkin(6));
t68 = sin(qJ(2));
t94 = t62 * t68;
t32 = t64 * t71 - t67 * t94;
t33 = t64 * t67 + t71 * t94;
t15 = -t63 * t32 + t61 * t33;
t14 = t15 ^ 2;
t87 = -qJ(4) - pkin(8);
t48 = t87 * t71;
t82 = t87 * t67;
t25 = -t61 * t48 - t63 * t82;
t109 = t25 ^ 2;
t38 = t61 * t67 - t63 * t71;
t36 = t38 ^ 2;
t108 = 0.2e1 * t38;
t102 = t63 * pkin(3);
t53 = -pkin(4) - t102;
t70 = cos(qJ(5));
t47 = -t70 * pkin(5) + t53;
t107 = 0.2e1 * t47;
t55 = -t71 * pkin(3) - pkin(2);
t106 = 0.2e1 * t55;
t105 = 0.2e1 * t71;
t104 = t38 * pkin(5);
t103 = t61 * pkin(3);
t65 = sin(qJ(6));
t101 = t65 * pkin(5);
t69 = cos(qJ(6));
t100 = t69 * pkin(5);
t24 = t38 * pkin(4) - t40 * pkin(9) + t55;
t66 = sin(qJ(5));
t27 = -t63 * t48 + t61 * t82;
t89 = t70 * t27;
t7 = t89 + (-pkin(10) * t40 + t24) * t66;
t99 = t69 * t7;
t52 = pkin(9) + t103;
t98 = pkin(10) + t52;
t97 = t15 * t25;
t88 = t70 * t40;
t91 = t66 * t40;
t20 = -t65 * t91 + t69 * t88;
t44 = t65 * t66 - t69 * t70;
t96 = t20 * t44;
t46 = t65 * t70 + t69 * t66;
t95 = t46 * t38;
t72 = cos(qJ(2));
t93 = t62 * t72;
t92 = t66 * t38;
t90 = t66 * t70;
t57 = t66 ^ 2;
t59 = t70 ^ 2;
t86 = t57 + t59;
t58 = t67 ^ 2;
t60 = t71 ^ 2;
t85 = t58 + t60;
t84 = t38 * t110;
t83 = t66 * t88;
t8 = t70 * t24 - t66 * t27;
t6 = -pkin(10) * t88 + t104 + t8;
t1 = t69 * t6 - t65 * t7;
t9 = t66 * t24 + t89;
t81 = t9 * t66 + t8 * t70;
t80 = -t8 * t66 + t9 * t70;
t17 = t61 * t32 + t63 * t33;
t10 = -t66 * t17 - t70 * t93;
t11 = t70 * t17 - t66 * t93;
t79 = t10 * t70 + t11 * t66;
t78 = -t10 * t66 + t11 * t70;
t77 = -t32 * t67 + t33 * t71;
t76 = -t38 * t52 + t40 * t53;
t56 = t62 ^ 2;
t50 = t56 * t72 ^ 2;
t42 = t46 ^ 2;
t41 = t44 ^ 2;
t37 = t40 ^ 2;
t35 = t98 * t70;
t34 = t98 * t66;
t31 = t70 * t38;
t28 = t44 * t38;
t23 = -t65 * t34 + t69 * t35;
t22 = -t69 * t34 - t65 * t35;
t18 = t46 * t40;
t13 = pkin(5) * t91 + t25;
t12 = t46 * t18;
t4 = t65 * t10 + t69 * t11;
t3 = t69 * t10 - t65 * t11;
t2 = t65 * t6 + t99;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56 * t68 ^ 2 + t64 ^ 2 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32 ^ 2 + t33 ^ 2 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 ^ 2 + t14 + t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 ^ 2 + t11 ^ 2 + t14, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3 ^ 2 + t4 ^ 2 + t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, -t94, 0, 0, 0, 0, 0, 0, 0, 0, t71 * t93, -t67 * t93, t77, pkin(2) * t93 + t77 * pkin(8), 0, 0, 0, 0, 0, 0, -t38 * t93, -t40 * t93, t15 * t40 - t17 * t38, t17 * t27 - t55 * t93 + t97, 0, 0, 0, 0, 0, 0, t10 * t38 + t15 * t91, -t11 * t38 + t15 * t88, -t79 * t40, t10 * t8 + t11 * t9 + t97, 0, 0, 0, 0, 0, 0, t15 * t18 + t3 * t38, t15 * t20 - t4 * t38, -t4 * t18 - t3 * t20, t3 * t1 + t15 * t13 + t4 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t58, t67 * t105, 0, t60, 0, 0, pkin(2) * t105, -0.2e1 * pkin(2) * t67, 0.2e1 * t85 * pkin(8), t85 * pkin(8) ^ 2 + pkin(2) ^ 2, t37, t84, 0, t36, 0, 0, t38 * t106, t40 * t106, 0.2e1 * t25 * t40 - 0.2e1 * t27 * t38, t27 ^ 2 + t55 ^ 2 + t109, t59 * t37, -0.2e1 * t37 * t90, t88 * t108, t57 * t37, t66 * t84, t36, 0.2e1 * t25 * t91 + 0.2e1 * t8 * t38, 0.2e1 * t25 * t88 - 0.2e1 * t9 * t38, t81 * t110, t8 ^ 2 + t9 ^ 2 + t109, t20 ^ 2, -0.2e1 * t20 * t18, t20 * t108, t18 ^ 2, -t18 * t108, t36, 0.2e1 * t1 * t38 + 0.2e1 * t13 * t18, 0.2e1 * t13 * t20 - 0.2e1 * t2 * t38, -0.2e1 * t1 * t20 - 0.2e1 * t2 * t18, t1 ^ 2 + t13 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, -t33, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t17, 0 (-t15 * t63 + t17 * t61) * pkin(3), 0, 0, 0, 0, 0, 0, -t15 * t70, t15 * t66, t78, t15 * t53 + t78 * t52, 0, 0, 0, 0, 0, 0, t15 * t44, t15 * t46, -t3 * t46 - t4 * t44, t15 * t47 + t3 * t22 + t4 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t71, 0, -t67 * pkin(8), -t71 * pkin(8), 0, 0, 0, 0, t40, 0, -t38, 0, -t25, -t27 (-t38 * t61 - t40 * t63) * pkin(3) (-t25 * t63 + t27 * t61) * pkin(3), t83 (-t57 + t59) * t40, t92, -t83, t31, 0, -t25 * t70 + t76 * t66, t25 * t66 + t76 * t70, t80, t25 * t53 + t80 * t52, t20 * t46, -t12 - t96, t95, t18 * t44, -t28, 0, t13 * t44 + t47 * t18 + t22 * t38, t13 * t46 + t47 * t20 - t23 * t38, -t1 * t46 - t23 * t18 - t2 * t44 - t22 * t20, t1 * t22 + t13 * t47 + t2 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t102, -0.2e1 * t103, 0 (t61 ^ 2 + t63 ^ 2) * pkin(3) ^ 2, t57, 0.2e1 * t90, 0, t59, 0, 0, -0.2e1 * t53 * t70, 0.2e1 * t53 * t66, 0.2e1 * t86 * t52, t86 * t52 ^ 2 + t53 ^ 2, t42, -0.2e1 * t46 * t44, 0, t41, 0, 0, t44 * t107, t46 * t107, -0.2e1 * t22 * t46 - 0.2e1 * t23 * t44, t22 ^ 2 + t23 ^ 2 + t47 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3 * t44 + t4 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t40, 0, t55, 0, 0, 0, 0, 0, 0, t31, -t92, -t86 * t40, t81, 0, 0, 0, 0, 0, 0, -t28, -t95, -t12 + t96, -t1 * t44 + t2 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22 * t44 + t23 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42 + t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10, -t11, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0 (t3 * t69 + t4 * t65) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, -t91, t38, t8, -t9, 0, 0, 0, 0, t20, 0, -t18, t38, t38 * t100 + t1, -t99 + (-t6 - t104) * t65 (-t18 * t65 - t20 * t69) * pkin(5) (t1 * t69 + t2 * t65) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, t70, 0, -t66 * t52, -t70 * t52, 0, 0, 0, 0, t46, 0, -t44, 0, t22, -t23 (-t44 * t65 - t46 * t69) * pkin(5) (t22 * t69 + t23 * t65) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, -t66, 0, 0, 0, 0, 0, 0, 0, 0, -t44, -t46, 0 (-t44 * t69 + t46 * t65) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t100, -0.2e1 * t101, 0 (t65 ^ 2 + t69 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3, -t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, t38, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, -t44, 0, t22, -t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, -t46, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t100, -t101, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
