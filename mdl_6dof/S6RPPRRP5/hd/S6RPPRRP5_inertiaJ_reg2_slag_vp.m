% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPPRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:09
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPPRRP5_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP5_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRRP5_inertiaJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 14:58:26
% EndTime: 2019-05-05 14:58:30
% DurationCPUTime: 1.06s
% Computational Cost: add. (349->96), mult. (593->145), div. (0->0), fcn. (553->4), ass. (0->72)
t73 = 2 * pkin(5);
t38 = (pkin(1) + qJ(3));
t72 = (t38 ^ 2);
t71 = 2 * t38;
t42 = cos(qJ(5));
t70 = 0.2e1 * t42;
t43 = cos(qJ(4));
t69 = 0.2e1 * t43;
t40 = sin(qJ(5));
t68 = t40 * pkin(5);
t67 = t42 * pkin(5);
t66 = t43 * pkin(4);
t33 = t40 ^ 2;
t65 = t33 * t43;
t36 = t43 ^ 2;
t37 = -pkin(7) + qJ(2);
t64 = t36 * t37;
t63 = t37 * t40;
t41 = sin(qJ(4));
t26 = t40 * t41;
t62 = t40 * t42;
t61 = t40 * t43;
t60 = t41 * t37;
t29 = t42 * t41;
t30 = t42 * t43;
t31 = -pkin(4) - t67;
t59 = t43 * t31;
t58 = t43 * t37;
t57 = t43 * t41;
t56 = -qJ(6) - pkin(8);
t35 = t42 ^ 2;
t21 = t33 + t35;
t34 = t41 ^ 2;
t22 = t34 + t36;
t55 = qJ(6) * t43;
t54 = -0.2e1 * t57;
t53 = t37 * t29;
t12 = t21 * t41;
t14 = t41 * pkin(4) - t43 * pkin(8) + t38;
t6 = t42 * t14;
t52 = -t42 * t55 + t6;
t51 = -pkin(8) * t41 - t66;
t1 = (pkin(5) - t63) * t41 + t52;
t2 = t53 + (t14 - t55) * t40;
t50 = -t1 * t42 - t2 * t40;
t3 = -t40 * t60 + t6;
t4 = t40 * t14 + t53;
t49 = -t3 * t42 - t4 * t40;
t48 = -t3 * t40 + t4 * t42;
t15 = t56 * t40;
t16 = t56 * t42;
t47 = -t15 * t40 - t16 * t42;
t45 = (qJ(2) ^ 2);
t44 = 2 * qJ(2);
t32 = t37 ^ 2;
t28 = t35 * t43;
t27 = t35 * t36;
t25 = t33 * t36;
t24 = t36 * t32;
t23 = 0.2e1 * t62;
t20 = t40 * t30;
t19 = t57 * t70;
t18 = -0.2e1 * t36 * t62;
t17 = t40 * t54;
t13 = t22 * t42;
t11 = t22 * t40;
t10 = t28 - t65;
t9 = t28 + t65;
t8 = t22 * t37;
t7 = (-t37 + t68) * t43;
t5 = t21 * t34 + t36;
t39 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -2 * pkin(1), t44, pkin(1) ^ 2 + t45, 1, 0, 0, 0, 0, 0, 0, t44, t71, t45 + t72, t36, t54, 0, t34, 0, 0, t41 * t71, t38 * t69, -0.2e1 * t8, t34 * t32 + t24 + t72, t27, t18, t19, t25, t17, t34, 0.2e1 * t3 * t41 - 0.2e1 * t36 * t63, -0.2e1 * t4 * t41 - 0.2e1 * t42 * t64, t49 * t69, t3 ^ 2 + t4 ^ 2 + t24, t27, t18, t19, t25, t17, t34, 0.2e1 * t1 * t41 + 0.2e1 * t7 * t61, -0.2e1 * t2 * t41 + 0.2e1 * t7 * t30, t50 * t69, t1 ^ 2 + t2 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(1), 0, 0, 0, 0, 0, 0, 0, 0, -1, -t38, 0, 0, 0, 0, 0, 0, -t41, -t43, 0, -t38, 0, 0, 0, 0, 0, 0, -t29, t26, t9, t49, 0, 0, 0, 0, 0, 0, -t29, t26, t9, t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, qJ(2), 0, 0, 0, 0, 0, 0, 0, 0, -t22, t8, 0, 0, 0, 0, 0, 0, -t11, -t13, 0, t48 * t41 + t64, 0, 0, 0, 0, 0, 0, -t11, -t13, 0, -t7 * t43 + (-t1 * t40 + t2 * t42) * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, -t41, 0, t58, -t60, 0, 0, t20, t10, t26, -t20, t29, 0, t51 * t40 + t42 * t58, -t40 * t58 + t51 * t42, t48, pkin(4) * t58 + t48 * pkin(8), t20, t10, t26, -t20, t29, 0, t15 * t41 + t40 * t59 - t7 * t42, t16 * t41 + t7 * t40 + t42 * t59 (-t15 * t43 + t2) * t42 + (t16 * t43 - t1) * t40, t1 * t15 - t2 * t16 + t7 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42 * t15 + t40 * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t41, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t61, t12, pkin(8) * t12 + t66, 0, 0, 0, 0, 0, 0, t30, -t61, t12, t47 * t41 - t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t33, t23, 0, t35, 0, 0, pkin(4) * t70, -0.2e1 * pkin(4) * t40, 0.2e1 * t21 * pkin(8), t21 * pkin(8) ^ 2 + pkin(4) ^ 2, t33, t23, 0, t35, 0, 0, -0.2e1 * t31 * t42, 0.2e1 * t31 * t40, 0.2e1 * t47, t15 ^ 2 + t16 ^ 2 + t31 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, -t61, t41, t3, -t4, 0, 0, 0, 0, t30, 0, -t61, t41 (t73 - t63) * t41 + t52, -t2, -pkin(5) * t30, t1 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t40, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t40, 0, -t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, -t29, 0, 0, 0, 0, 0, 0, 0, 0, -t26, -t29, 0, -pkin(5) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, 0, t42, 0, -t40 * pkin(8), -t42 * pkin(8), 0, 0, 0, 0, t40, 0, t42, 0, t15, t16, -t68, t15 * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t73, 0, 0, pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t30, 0, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, t40, 0, t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t39;
