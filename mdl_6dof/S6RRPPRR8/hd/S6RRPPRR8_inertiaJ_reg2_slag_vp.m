% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPPRR8_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR8_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR8_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 11:21:16
% EndTime: 2019-05-06 11:21:22
% DurationCPUTime: 1.85s
% Computational Cost: add. (1501->170), mult. (2998->319), div. (0->0), fcn. (3278->8), ass. (0->91)
t73 = sin(pkin(10));
t69 = t73 ^ 2;
t74 = cos(pkin(10));
t70 = t74 ^ 2;
t111 = t69 + t70;
t76 = sin(qJ(5));
t79 = cos(qJ(5));
t44 = t73 * t79 - t74 * t76;
t104 = pkin(3) + pkin(4);
t86 = t73 * qJ(4) + pkin(2);
t38 = t104 * t74 + t86;
t42 = t73 * t76 + t74 * t79;
t23 = t42 * pkin(5) + t38;
t110 = 0.2e1 * t23;
t109 = 0.2e1 * t38;
t108 = -0.2e1 * t74;
t77 = sin(qJ(2));
t107 = 0.2e1 * t77;
t80 = cos(qJ(2));
t106 = -0.2e1 * t80;
t105 = 0.2e1 * t80;
t103 = pkin(2) * t73;
t71 = t77 ^ 2;
t102 = t71 * pkin(7);
t75 = sin(qJ(6));
t101 = t75 * pkin(5);
t100 = t77 * pkin(7);
t78 = cos(qJ(6));
t99 = t78 * pkin(5);
t34 = t44 * t77;
t49 = -pkin(2) * t80 - qJ(3) * t77 - pkin(1);
t95 = t73 * t80;
t57 = pkin(7) * t95;
t68 = t80 * pkin(3);
t18 = t80 * pkin(4) + t57 + t68 + (-pkin(8) * t77 - t49) * t74;
t94 = t74 * t80;
t31 = pkin(7) * t94 + t49 * t73;
t28 = -qJ(4) * t80 + t31;
t60 = t73 * t77;
t22 = pkin(8) * t60 + t28;
t9 = t18 * t76 + t22 * t79;
t5 = pkin(9) * t34 + t9;
t98 = t78 * t5;
t97 = t80 * pkin(5);
t96 = t73 * t74;
t63 = t74 * t77;
t92 = t77 * t80;
t90 = t111 * qJ(3) ^ 2;
t89 = qJ(3) * t80;
t65 = t73 * qJ(3);
t88 = t73 * t92;
t87 = t71 * t96;
t36 = t42 * t77;
t8 = t18 * t79 - t22 * t76;
t4 = -pkin(9) * t36 + t8 + t97;
t1 = t4 * t78 - t5 * t75;
t50 = -pkin(8) * t73 + t65;
t51 = (-pkin(8) + qJ(3)) * t74;
t24 = t50 * t79 - t51 * t76;
t30 = t49 * t74 - t57;
t29 = -t30 + t68;
t85 = t28 * t74 + t29 * t73;
t84 = -t30 * t73 + t31 * t74;
t25 = t50 * t76 + t51 * t79;
t56 = qJ(4) * t63;
t26 = -t56 - (-t104 * t73 - pkin(7)) * t77;
t82 = pkin(7) ^ 2;
t72 = t80 ^ 2;
t67 = t71 * t82;
t62 = t70 * t71;
t59 = t69 * t71;
t55 = t80 * t65;
t53 = t73 * t63;
t52 = t92 * t108;
t48 = -pkin(3) * t74 - t86;
t47 = t75 * t79 + t76 * t78;
t46 = -t75 * t76 + t78 * t79;
t45 = 0.2e1 * t111 * qJ(3);
t41 = (t69 - t70) * t77;
t33 = -t56 + (pkin(3) * t73 + pkin(7)) * t77;
t21 = -t42 * t75 + t44 * t78;
t19 = t42 * t78 + t44 * t75;
t16 = -pkin(9) * t42 + t25;
t15 = -pkin(9) * t44 + t24;
t14 = t34 * t75 + t36 * t78;
t12 = -t34 * t78 + t36 * t75;
t10 = t34 * pkin(5) + t26;
t7 = t15 * t75 + t16 * t78;
t6 = t15 * t78 - t16 * t75;
t2 = t4 * t75 + t98;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t71, 0.2e1 * t92, 0, t72, 0, 0, pkin(1) * t105, -0.2e1 * pkin(1) * t77, 0.2e1 * (t71 + t72) * pkin(7), pkin(1) ^ 2 + t72 * t82 + t67, t62, -0.2e1 * t87, t52, t59, 0.2e1 * t88, t72, 0.2e1 * t102 * t73 - 0.2e1 * t30 * t80, 0.2e1 * t102 * t74 + 0.2e1 * t31 * t80 (-t30 * t74 - t31 * t73) * t107, t30 ^ 2 + t31 ^ 2 + t67, t62, t52, 0.2e1 * t87, t72, -0.2e1 * t88, t59, 0.2e1 * t29 * t80 + 0.2e1 * t33 * t60 (-t28 * t73 + t29 * t74) * t107, -0.2e1 * t28 * t80 - 0.2e1 * t33 * t63, t28 ^ 2 + t29 ^ 2 + t33 ^ 2, t36 ^ 2, 0.2e1 * t36 * t34, t36 * t105, t34 ^ 2, -t34 * t106, t72, 0.2e1 * t26 * t34 + 0.2e1 * t8 * t80, -0.2e1 * t26 * t36 - 0.2e1 * t80 * t9, 0.2e1 * t34 * t9 - 0.2e1 * t36 * t8, t26 ^ 2 + t8 ^ 2 + t9 ^ 2, t14 ^ 2, -0.2e1 * t14 * t12, t14 * t105, t12 ^ 2, t12 * t106, t72, 0.2e1 * t1 * t80 - 0.2e1 * t10 * t12, -0.2e1 * t10 * t14 - 0.2e1 * t2 * t80, -0.2e1 * t1 * t14 - 0.2e1 * t12 * t2, t1 ^ 2 + t10 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t80, 0, -t100, -t80 * pkin(7), 0, 0, t53, -t41, -t95, -t53, -t94, 0, t55 + (-pkin(7) * t74 - t103) * t77, pkin(7) * t60 + (-pkin(2) * t77 + t89) * t74, t84, -pkin(2) * t100 + qJ(3) * t84, t53, -t95, t41, 0, t94, -t53, -t33 * t74 + t48 * t60 + t55, t85, -t33 * t73 + (-t48 * t77 - t89) * t74, qJ(3) * t85 + t33 * t48, t36 * t44, t34 * t44 - t36 * t42, t44 * t80, -t34 * t42, -t42 * t80, 0, t24 * t80 - t26 * t42 - t34 * t38, -t25 * t80 - t26 * t44 + t36 * t38, -t24 * t36 + t25 * t34 - t42 * t9 - t44 * t8, t24 * t8 + t25 * t9 - t26 * t38, t14 * t21, -t12 * t21 - t14 * t19, t21 * t80, t12 * t19, -t19 * t80, 0, -t10 * t19 + t12 * t23 + t6 * t80, -t10 * t21 + t14 * t23 - t7 * t80, -t1 * t21 - t12 * t7 - t14 * t6 - t19 * t2, t1 * t6 - t10 * t23 + t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, 0.2e1 * t96, 0, t70, 0, 0, 0.2e1 * pkin(2) * t74, -0.2e1 * t103, t45, pkin(2) ^ 2 + t90, t69, 0, -0.2e1 * t96, 0, 0, t70, t48 * t108, t45, -0.2e1 * t48 * t73, t48 ^ 2 + t90, t44 ^ 2, -0.2e1 * t44 * t42, 0, t42 ^ 2, 0, 0, t42 * t109, t44 * t109, -0.2e1 * t24 * t44 - 0.2e1 * t25 * t42, t24 ^ 2 + t25 ^ 2 + t38 ^ 2, t21 ^ 2, -0.2e1 * t21 * t19, 0, t19 ^ 2, 0, 0, t19 * t110, t21 * t110, -0.2e1 * t19 * t7 - 0.2e1 * t21 * t6, t23 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t63, 0, t100, 0, 0, 0, 0, 0, 0, t60, 0, -t63, t33, 0, 0, 0, 0, 0, 0, t34, -t36, 0, t26, 0, 0, 0, 0, 0, 0, -t12, -t14, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, t73, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t74, 0, -t73, t48, 0, 0, 0, 0, 0, 0, -t42, -t44, 0, -t38, 0, 0, 0, 0, 0, 0, -t19, -t21, 0, -t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, t63, 0, t29, 0, 0, 0, 0, 0, 0, t79 * t80, -t76 * t80, t34 * t76 - t36 * t79, t76 * t9 + t79 * t8, 0, 0, 0, 0, 0, 0, t46 * t80, -t47 * t80, -t12 * t47 - t14 * t46, t1 * t46 + t2 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t65, 0, 0, 0, 0, 0, 0, 0, 0, -t42 * t76 - t44 * t79, t24 * t79 + t25 * t76, 0, 0, 0, 0, 0, 0, 0, 0, -t19 * t47 - t21 * t46, t46 * t6 + t47 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 ^ 2 + t79 ^ 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46 ^ 2 + t47 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, t34, t80, t8, -t9, 0, 0, 0, 0, t14, 0, -t12, t80, t78 * t97 + t1, -t98 + (-t4 - t97) * t75 (-t12 * t75 - t14 * t78) * pkin(5) (t1 * t78 + t2 * t75) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, 0, -t42, 0, t24, -t25, 0, 0, 0, 0, t21, 0, -t19, 0, t6, -t7 (-t19 * t75 - t21 * t78) * pkin(5) (t6 * t78 + t7 * t75) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, -t76, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t47, 0 (t46 * t78 + t47 * t75) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t99, -0.2e1 * t101, 0 (t75 ^ 2 + t78 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t14, 0, -t12, t80, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, -t19, 0, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t47, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t99, -t101, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
