% Calculate inertial parameters regressor of joint inertia matrix for
% S6RPRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d6,theta2,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:43
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RPRPPR2_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPPR2_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPPR2_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 16:34:13
% EndTime: 2019-05-05 16:34:16
% DurationCPUTime: 1.02s
% Computational Cost: add. (706->81), mult. (1230->142), div. (0->0), fcn. (1391->8), ass. (0->70)
t45 = sin(pkin(10));
t47 = cos(pkin(10));
t50 = sin(qJ(3));
t52 = cos(qJ(3));
t28 = t45 * t52 + t47 * t50;
t82 = t28 ^ 2;
t26 = t45 * t50 - t47 * t52;
t83 = t26 ^ 2;
t85 = t82 + t83;
t48 = cos(pkin(9));
t74 = t48 * pkin(1);
t40 = -pkin(2) - t74;
t30 = -t52 * pkin(3) + t40;
t55 = -t28 * qJ(5) + t30;
t7 = t26 * pkin(4) + t55;
t84 = -0.2e1 * t7;
t77 = t45 * pkin(3);
t35 = qJ(5) + t77;
t81 = t35 ^ 2;
t80 = 0.2e1 * t30;
t79 = 0.2e1 * t35;
t78 = 0.2e1 * t50;
t46 = sin(pkin(9));
t76 = t46 * pkin(1);
t75 = t47 * pkin(3);
t73 = t26 * t28;
t72 = t28 * t35;
t71 = t35 * t26;
t49 = sin(qJ(6));
t70 = t49 * t26;
t69 = t49 * t28;
t51 = cos(qJ(6));
t19 = t51 * t26;
t20 = t51 * t28;
t68 = t51 * t49;
t41 = t49 ^ 2;
t43 = t51 ^ 2;
t67 = t41 + t43;
t42 = t50 ^ 2;
t44 = t52 ^ 2;
t66 = t42 + t44;
t38 = pkin(7) + t76;
t65 = qJ(4) + t38;
t64 = -0.2e1 * t73;
t63 = 0.2e1 * t73;
t62 = t26 * t68;
t21 = t65 * t52;
t60 = t65 * t50;
t10 = t47 * t21 - t45 * t60;
t8 = t45 * t21 + t47 * t60;
t61 = t10 ^ 2 + t8 ^ 2;
t39 = -pkin(4) - t75;
t33 = -pkin(8) + t39;
t13 = t67 * t33;
t4 = (pkin(4) + pkin(8)) * t26 + t55;
t5 = t28 * pkin(5) + t8;
t2 = -t49 * t4 + t51 * t5;
t3 = t51 * t4 + t49 * t5;
t1 = t2 * t51 + t3 * t49;
t59 = -t2 * t49 + t3 * t51;
t58 = t10 * t28 + t8 * t26;
t57 = -t28 * t33 + t71;
t56 = -0.2e1 * t10 * t26 + 0.2e1 * t8 * t28;
t18 = t43 * t26;
t17 = t43 * t83;
t16 = t41 * t26;
t15 = t41 * t83;
t12 = -t16 - t18;
t6 = -t26 * pkin(5) + t10;
t9 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t74, -0.2e1 * t76, 0 (t46 ^ 2 + t48 ^ 2) * pkin(1) ^ 2, t42, t52 * t78, 0, t44, 0, 0, -0.2e1 * t40 * t52, t40 * t78, 0.2e1 * t66 * t38, t38 ^ 2 * t66 + t40 ^ 2, t82, t64, 0, t83, 0, 0, t26 * t80, t28 * t80, t56, t30 ^ 2 + t61, 0, 0, 0, t82, t64, t83, t56, t26 * t84, t28 * t84, t7 ^ 2 + t61, t15, 0.2e1 * t83 * t68, t49 * t63, t17, t51 * t63, t82, -0.2e1 * t19 * t6 + 0.2e1 * t2 * t28, -0.2e1 * t3 * t28 + 0.2e1 * t6 * t70, 0.2e1 * t59 * t26, t2 ^ 2 + t3 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1 * t26 + t6 * t28; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15 + t17 + t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, t52, 0, -t50 * t38, -t52 * t38, 0, 0, 0, 0, t28, 0, -t26, 0, -t8, -t10 (-t26 * t45 - t28 * t47) * pkin(3) (t10 * t45 - t47 * t8) * pkin(3), 0, -t28, t26, 0, 0, 0, t39 * t28 - t71, t8, t10, t10 * t35 + t8 * t39, t62, t18 - t16, t20, -t62, -t69, 0, t6 * t49 - t57 * t51, t49 * t57 + t6 * t51, -t1, t1 * t33 + t6 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, -t50, 0, 0, 0, 0, 0, 0, 0, 0, -t26, -t28, 0 (-t26 * t47 + t28 * t45) * pkin(3), 0, 0, 0, 0, 0, 0, 0, t26, t28, t26 * t39 + t72, 0, 0, 0, 0, 0, 0, t69, t20, t12, t13 * t26 + t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t75, -0.2e1 * t77, 0 (t45 ^ 2 + t47 ^ 2) * pkin(3) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t39, t79, t39 ^ 2 + t81, t43, -0.2e1 * t68, 0, t41, 0, 0, t49 * t79, t51 * t79, -0.2e1 * t13, t33 ^ 2 * t67 + t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, t28, 0, t30, 0, 0, 0, 0, 0, 0, 0, -t26, -t28, t7, 0, 0, 0, 0, 0, 0, -t69, -t20, -t12, t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, 0, t8, 0, 0, 0, 0, 0, 0, t20, -t69, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t39, 0, 0, 0, 0, 0, 0, 0, 0, -t67, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t19, t28, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t70, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t49, 0, t51 * t33, -t49 * t33, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, -t51, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, -t49, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t9;
