% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRPR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR4_inertiaJ_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 13:37:13
% EndTime: 2019-05-06 13:37:25
% DurationCPUTime: 2.47s
% Computational Cost: add. (3891->195), mult. (9290->401), div. (0->0), fcn. (10749->12), ass. (0->135)
t100 = cos(qJ(4));
t90 = sin(pkin(12));
t93 = cos(pkin(12));
t97 = sin(qJ(4));
t72 = t90 * t100 + t93 * t97;
t161 = -0.2e1 * t72;
t101 = cos(qJ(2));
t91 = sin(pkin(11));
t92 = sin(pkin(6));
t94 = cos(pkin(11));
t98 = sin(qJ(2));
t57 = (t101 * t91 + t94 * t98) * t92;
t95 = cos(pkin(6));
t45 = t95 * t100 - t57 * t97;
t46 = t57 * t100 + t95 * t97;
t26 = -t93 * t45 + t90 * t46;
t160 = t26 ^ 2;
t149 = t91 * pkin(2);
t81 = pkin(9) + t149;
t119 = qJ(5) + t81;
t109 = t119 * t97;
t66 = t119 * t100;
t36 = t93 * t109 + t90 * t66;
t159 = t36 ^ 2;
t120 = t92 * t101;
t136 = t92 * t98;
t55 = -t94 * t120 + t91 * t136;
t54 = t55 ^ 2;
t70 = -t93 * t100 + t90 * t97;
t158 = t70 ^ 2;
t157 = -0.2e1 * t26;
t156 = -0.2e1 * t55;
t155 = 0.2e1 * t55;
t147 = t94 * pkin(2);
t83 = -pkin(3) - t147;
t74 = -t100 * pkin(4) + t83;
t154 = 0.2e1 * t74;
t153 = 0.2e1 * t95;
t152 = 0.2e1 * t97;
t151 = pkin(1) * t98;
t150 = t90 * pkin(4);
t148 = t93 * pkin(4);
t146 = t95 * pkin(2);
t127 = pkin(8) + qJ(3);
t76 = t95 * t101 * pkin(1);
t47 = -t127 * t136 + t146 + t76;
t116 = t95 * t151;
t50 = t127 * t120 + t116;
t32 = t91 * t47 + t94 * t50;
t30 = t95 * pkin(9) + t32;
t73 = (-pkin(2) * t101 - pkin(1)) * t92;
t34 = t55 * pkin(3) - t57 * pkin(9) + t73;
t13 = t100 * t34 - t97 * t30;
t10 = t55 * pkin(4) - t46 * qJ(5) + t13;
t14 = t100 * t30 + t97 * t34;
t12 = t45 * qJ(5) + t14;
t6 = t90 * t10 + t93 * t12;
t28 = t90 * t45 + t93 * t46;
t96 = sin(qJ(6));
t99 = cos(qJ(6));
t18 = t96 * t28 - t55 * t99;
t145 = t18 * t99;
t20 = t99 * t28 + t55 * t96;
t144 = t20 * t96;
t143 = t20 * t99;
t142 = t26 * t70;
t141 = t28 * t70;
t140 = t36 * t70;
t139 = t70 * t18;
t138 = t72 * t55;
t86 = t96 ^ 2;
t137 = t86 * t72;
t135 = t96 * t26;
t60 = t96 * t70;
t134 = t96 * t72;
t80 = pkin(10) + t150;
t133 = t96 * t80;
t132 = t96 * t99;
t131 = t97 * t55;
t130 = t97 * t81;
t129 = t99 * t72;
t128 = t99 * t80;
t126 = -t94 * t47 + t91 * t50;
t88 = t99 ^ 2;
t125 = t86 + t88;
t87 = t97 ^ 2;
t89 = t100 ^ 2;
t124 = t87 + t89;
t123 = t100 * t81;
t84 = t92 ^ 2;
t122 = t101 * t84;
t121 = t46 * t100;
t118 = t70 * t161;
t117 = t92 * t153;
t115 = t20 * t134;
t114 = t26 * t134;
t113 = t26 * t129;
t112 = t96 * t129;
t111 = -t93 * t10 + t90 * t12;
t110 = t125 * t80;
t29 = -t95 * pkin(3) + t126;
t4 = t55 * pkin(10) + t6;
t21 = -t45 * pkin(4) + t29;
t7 = t26 * pkin(5) - t28 * pkin(10) + t21;
t1 = -t96 * t4 + t99 * t7;
t2 = t99 * t4 + t96 * t7;
t108 = t1 * t99 + t2 * t96;
t107 = -t1 * t96 + t2 * t99;
t35 = t70 * pkin(5) - t72 * pkin(10) + t74;
t38 = -t90 * t109 + t93 * t66;
t22 = t99 * t35 - t96 * t38;
t23 = t96 * t35 + t99 * t38;
t106 = t22 * t99 + t23 * t96;
t105 = -t22 * t96 + t23 * t99;
t82 = -pkin(5) - t148;
t104 = -t70 * t80 + t72 * t82;
t85 = t95 ^ 2;
t69 = t72 ^ 2;
t65 = pkin(8) * t120 + t116;
t64 = -pkin(8) * t136 + t76;
t63 = t99 * t70;
t62 = t88 * t72;
t61 = t88 * t69;
t59 = t86 * t69;
t51 = t100 * t55;
t42 = t97 * t45;
t41 = t70 * t55;
t39 = -t62 - t137;
t25 = t99 * t26;
t24 = t72 * t26;
t17 = t96 * t18;
t16 = t20 * t70;
t15 = t18 * t129;
t3 = -t55 * pkin(5) + t111;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t84 * t98 ^ 2, 0.2e1 * t98 * t122, t98 * t117, t84 * t101 ^ 2, t101 * t117, t85, 0.2e1 * pkin(1) * t122 + 0.2e1 * t64 * t95, -0.2e1 * t84 * t151 - 0.2e1 * t65 * t95, 0.2e1 * (t101 * t65 - t64 * t98) * t92, t84 * pkin(1) ^ 2 + t64 ^ 2 + t65 ^ 2, t57 ^ 2, t57 * t156, t57 * t153, t54, t95 * t156, t85, -0.2e1 * t126 * t95 + 0.2e1 * t73 * t55, -0.2e1 * t32 * t95 + 0.2e1 * t73 * t57, 0.2e1 * t126 * t57 - 0.2e1 * t32 * t55, t126 ^ 2 + t32 ^ 2 + t73 ^ 2, t46 ^ 2, 0.2e1 * t46 * t45, t46 * t155, t45 ^ 2, t45 * t155, t54, 0.2e1 * t13 * t55 - 0.2e1 * t29 * t45, -0.2e1 * t14 * t55 + 0.2e1 * t29 * t46, -0.2e1 * t13 * t46 + 0.2e1 * t14 * t45, t13 ^ 2 + t14 ^ 2 + t29 ^ 2, t28 ^ 2, t28 * t157, t28 * t155, t160, t26 * t156, t54, -0.2e1 * t111 * t55 + 0.2e1 * t21 * t26, 0.2e1 * t21 * t28 - 0.2e1 * t6 * t55, 0.2e1 * t111 * t28 - 0.2e1 * t6 * t26, t111 ^ 2 + t21 ^ 2 + t6 ^ 2, t20 ^ 2, -0.2e1 * t20 * t18, 0.2e1 * t20 * t26, t18 ^ 2, t18 * t157, t160, 0.2e1 * t1 * t26 + 0.2e1 * t3 * t18, -0.2e1 * t2 * t26 + 0.2e1 * t3 * t20, -0.2e1 * t1 * t20 - 0.2e1 * t2 * t18, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, t120, t95, t64, -t65, 0, 0, 0, 0, t57, 0, -t55, t95, t94 * t146 - t126, -t91 * t146 - t32 (-t55 * t91 - t57 * t94) * pkin(2) (-t126 * t94 + t32 * t91) * pkin(2), t46 * t97, t42 + t121, t131, t45 * t100, t51, 0, -t29 * t100 - t55 * t130 - t83 * t45, -t55 * t123 + t29 * t97 + t83 * t46 (t46 * t81 - t13) * t97 + (t45 * t81 + t14) * t100, t29 * t83 + (t14 * t100 - t13 * t97) * t81, t28 * t72, -t24 - t141, t138, t142, -t41, 0, t21 * t70 + t74 * t26 - t36 * t55, t21 * t72 + t74 * t28 - t38 * t55, t111 * t72 - t38 * t26 + t36 * t28 - t6 * t70, t111 * t36 + t21 * t74 + t6 * t38, t20 * t129, -t15 - t115, t16 + t113, t18 * t134, -t114 - t139, t142, t1 * t70 + t134 * t3 + t36 * t18 + t22 * t26, t129 * t3 - t2 * t70 + t36 * t20 - t23 * t26, -t108 * t72 - t23 * t18 - t22 * t20, t1 * t22 + t2 * t23 + t3 * t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t147, -0.2e1 * t149, 0 (t91 ^ 2 + t94 ^ 2) * pkin(2) ^ 2, t87, t100 * t152, 0, t89, 0, 0, -0.2e1 * t83 * t100, t83 * t152, 0.2e1 * t124 * t81, t124 * t81 ^ 2 + t83 ^ 2, t69, t118, 0, t158, 0, 0, t70 * t154, t72 * t154, 0.2e1 * t36 * t72 - 0.2e1 * t38 * t70, t38 ^ 2 + t74 ^ 2 + t159, t61, -0.2e1 * t69 * t132, 0.2e1 * t70 * t129, t59, t96 * t118, t158, 0.2e1 * t134 * t36 + 0.2e1 * t22 * t70, 0.2e1 * t129 * t36 - 0.2e1 * t23 * t70, t106 * t161, t22 ^ 2 + t23 ^ 2 + t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, t57, 0, t73, 0, 0, 0, 0, 0, 0, t51, -t131, t42 - t121, t13 * t100 + t14 * t97, 0, 0, 0, 0, 0, 0, -t41, -t138, -t24 + t141, t111 * t70 + t6 * t72, 0, 0, 0, 0, 0, 0, -t114 + t139, t16 - t113, -t15 + t115, t107 * t72 + t3 * t70; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38 * t72 + t140, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * t72 + t140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, 0, 0, 0, 0, 0, 0, 0, 0, 0, t69 + t158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61 + t59 + t158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, 0, t45, t55, t13, -t14, 0, 0, 0, 0, t28, 0, -t26, t55, t55 * t148 - t111, -t55 * t150 - t6 (-t26 * t90 - t28 * t93) * pkin(4) (-t111 * t93 + t6 * t90) * pkin(4), t144, -t17 + t143, t135, -t145, t25, 0, -t133 * t26 + t82 * t18 - t3 * t99, -t128 * t26 + t82 * t20 + t3 * t96 (t144 - t145) * t80 + t107, t107 * t80 + t3 * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, t100, 0, -t130, -t123, 0, 0, 0, 0, t72, 0, -t70, 0, -t36, -t38 (-t70 * t90 - t72 * t93) * pkin(4) (-t36 * t93 + t38 * t90) * pkin(4), t112, t62 - t137, t60, -t112, t63, 0, t104 * t96 - t36 * t99, t104 * t99 + t36 * t96, t105, t105 * t80 + t36 * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, -t97, 0, 0, 0, 0, 0, 0, 0, 0, -t70, -t72, 0 (-t70 * t93 + t72 * t90) * pkin(4), 0, 0, 0, 0, 0, 0, -t63, t60, -t39, t110 * t72 + t70 * t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t148, -0.2e1 * t150, 0 (t90 ^ 2 + t93 ^ 2) * pkin(4) ^ 2, t86, 0.2e1 * t132, 0, t88, 0, 0, -0.2e1 * t82 * t99, 0.2e1 * t82 * t96, 0.2e1 * t110, t125 * t80 ^ 2 + t82 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26, t28, 0, t21, 0, 0, 0, 0, 0, 0, t25, -t135, -t17 - t143, t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, t72, 0, t74, 0, 0, 0, 0, 0, 0, t63, -t60, t39, t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, t26, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, 0, -t134, t70, t22, -t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t134, -t129, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, 0, t99, 0, -t133, -t128, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, -t96, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t5;
