% Calculate inertial parameters regressor of joint inertia matrix for
% S6PRPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d6,theta1]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 19:54
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6PRPRPR7_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRPR7_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6PRPRPR7_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 23:21:40
% EndTime: 2019-05-04 23:21:44
% DurationCPUTime: 1.06s
% Computational Cost: add. (338->92), mult. (664->136), div. (0->0), fcn. (723->8), ass. (0->68)
t47 = sin(qJ(4));
t39 = t47 ^ 2;
t50 = cos(qJ(4));
t41 = t50 ^ 2;
t27 = t39 + t41;
t45 = cos(pkin(6));
t44 = sin(pkin(6));
t51 = cos(qJ(2));
t71 = t44 * t51;
t13 = t45 * t50 - t47 * t71;
t10 = t13 ^ 2;
t11 = t45 * t47 + t50 * t71;
t37 = t44 ^ 2;
t48 = sin(qJ(2));
t29 = t37 * t48 ^ 2;
t77 = t11 ^ 2 + t10 + t29;
t20 = t47 * pkin(4) - t50 * qJ(5) + qJ(3);
t76 = -0.2e1 * t20;
t75 = 0.2e1 * qJ(3);
t74 = 0.2e1 * qJ(5);
t73 = t13 * t47;
t72 = t44 * t48;
t46 = sin(qJ(6));
t30 = t46 * t47;
t70 = t46 * t50;
t49 = cos(qJ(6));
t69 = t49 * t46;
t31 = t49 * t47;
t68 = t50 * t47;
t52 = -pkin(4) - pkin(9);
t67 = t50 * t52;
t53 = -pkin(2) - pkin(8);
t66 = t50 * t53;
t65 = t27 * t53 ^ 2;
t38 = t46 ^ 2;
t40 = t49 ^ 2;
t26 = t38 + t40;
t64 = qJ(5) * t47;
t63 = t13 * qJ(5);
t62 = 0.2e1 * t68;
t60 = t47 * t72;
t59 = t50 * t72;
t58 = t46 * t31;
t15 = t47 * pkin(9) + t20;
t22 = (pkin(5) - t53) * t50;
t5 = -t46 * t15 + t49 * t22;
t6 = t49 * t15 + t46 * t22;
t1 = t6 * t46 + t5 * t49;
t7 = t11 * t49 - t46 * t72;
t8 = t11 * t46 + t49 * t72;
t2 = t8 * t46 + t7 * t49;
t23 = pkin(4) * t50 + t64;
t4 = t11 * t50 - t73;
t57 = t64 - t67;
t56 = t4 * t53;
t55 = qJ(3) ^ 2;
t54 = qJ(5) ^ 2;
t34 = t47 * t53;
t32 = t49 * t50;
t28 = -0.2e1 * t68;
t25 = qJ(3) * t72;
t21 = -t47 * pkin(5) + t34;
t19 = t27 * t53;
t18 = t26 * t52;
t17 = t26 * t50;
t16 = 0.2e1 * t19;
t9 = t37 * t51 ^ 2 + t45 ^ 2 + t29;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 ^ 2 + t8 ^ 2 + t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -t72, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t72, pkin(2) * t71 + t25, 0, 0, 0, 0, 0, 0, t60, t59, t4, t25 - t56, 0, 0, 0, 0, 0, 0, t4, -t60, -t59, t20 * t72 - t56, 0, 0, 0, 0, 0, 0, -t13 * t31 + t7 * t50, t13 * t30 - t8 * t50 (-t46 * t7 + t49 * t8) * t47, t13 * t21 + t7 * t5 + t8 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(2), t75, pkin(2) ^ 2 + t55, t41, t28, 0, t39, 0, 0, t47 * t75, t50 * t75, -t16, t55 + t65, 0, 0, 0, t41, t28, t39, -t16, t47 * t76, t50 * t76, t20 ^ 2 + t65, t38 * t39, 0.2e1 * t39 * t69, t46 * t62, t40 * t39, t49 * t62, t41, -0.2e1 * t21 * t31 + 0.2e1 * t5 * t50, 0.2e1 * t21 * t30 - 0.2e1 * t6 * t50, 0.2e1 * (-t46 * t5 + t49 * t6) * t47, t21 ^ 2 + t5 ^ 2 + t6 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t4, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2 * t50 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, -t27, t19, 0, 0, 0, 0, 0, 0, -t27, 0, 0, t19, 0, 0, 0, 0, 0, 0, -t27 * t49, t27 * t46, 0, -t1 * t50 + t21 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * t41 + t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, -t13, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t13, -t11 * pkin(4) + t63, 0, 0, 0, 0, 0, 0, t13 * t46, t13 * t49, -t2, t2 * t52 + t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, -t47, 0, t66, -t34, 0, 0, 0, -t50, t47, 0, 0, 0, -t23, -t66, t34, t23 * t53, t58 (-t38 + t40) * t47, t32, -t58, -t70, 0, t21 * t46 - t57 * t49, t21 * t49 + t57 * t46, -t1, t21 * qJ(5) + t1 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, -t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, t47, t23, 0, 0, 0, 0, 0, 0, t30, t31, t17, -t26 * t67 + t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, -0.2e1 * pkin(4), t74, pkin(4) ^ 2 + t54, t40, -0.2e1 * t69, 0, t38, 0, 0, t46 * t74, t49 * t74, -0.2e1 * t18, t26 * t52 ^ 2 + t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, 0, 0, -t66, 0, 0, 0, 0, 0, 0, t32, -t70, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t50, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, -t26, t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, -t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, 0, t31, t50, t5, -t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, t70, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t46, 0, t49 * t52, -t46 * t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t46, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
