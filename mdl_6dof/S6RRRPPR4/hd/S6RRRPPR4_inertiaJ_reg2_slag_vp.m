% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d6,theta4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 15:37
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRPPR4_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPPR4_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRRPPR4_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 04:46:10
% EndTime: 2019-05-07 04:46:16
% DurationCPUTime: 2.19s
% Computational Cost: add. (1784->184), mult. (3545->337), div. (0->0), fcn. (3900->8), ass. (0->97)
t73 = sin(pkin(10));
t74 = cos(pkin(10));
t76 = sin(qJ(3));
t79 = cos(qJ(3));
t55 = t73 * t79 + t74 * t76;
t77 = sin(qJ(2));
t48 = t55 * t77;
t106 = t79 * t77;
t109 = t76 * t77;
t50 = t74 * t106 - t73 * t109;
t58 = (pkin(3) * t76 + pkin(7)) * t77;
t14 = t48 * pkin(4) - t50 * qJ(5) + t58;
t127 = t48 ^ 2;
t53 = t73 * t76 - t74 * t79;
t126 = t53 ^ 2;
t66 = -t79 * pkin(3) - pkin(2);
t85 = t55 * qJ(5) - t66;
t15 = (-pkin(4) - pkin(5)) * t53 + t85;
t125 = 0.2e1 * t15;
t124 = 0.2e1 * t66;
t123 = -0.2e1 * t77;
t80 = cos(qJ(2));
t122 = -0.2e1 * t80;
t121 = 0.2e1 * t80;
t120 = pkin(2) * t79;
t119 = pkin(7) * t76;
t118 = t73 * pkin(3);
t117 = t74 * pkin(3);
t116 = t77 * pkin(7);
t102 = -qJ(4) - pkin(8);
t91 = t102 * t76;
t92 = t102 * t79;
t35 = -t73 * t92 - t74 * t91;
t115 = t35 * t80;
t37 = t73 * t91 - t74 * t92;
t114 = t37 * t80;
t113 = t48 * t53;
t112 = t50 * t48;
t111 = t55 * t53;
t110 = t55 * t80;
t108 = t76 * t79;
t107 = t76 * t80;
t105 = t79 * t80;
t104 = t80 * t48;
t103 = t80 * t53;
t60 = -pkin(2) * t80 - pkin(8) * t77 - pkin(1);
t56 = t79 * t60;
t98 = qJ(4) * t77;
t30 = -t79 * t98 + t56 + (-pkin(3) - t119) * t80;
t95 = pkin(7) * t105;
t33 = t95 + (t60 - t98) * t76;
t101 = -t74 * t30 + t73 * t33;
t13 = t73 * t30 + t74 * t33;
t69 = t76 ^ 2;
t71 = t79 ^ 2;
t99 = t69 + t71;
t97 = t77 * t121;
t96 = t35 ^ 2 + t37 ^ 2;
t94 = t76 * t106;
t11 = t80 * pkin(4) + t101;
t64 = pkin(4) + t117;
t90 = t35 * t50 - t37 * t48;
t89 = -pkin(5) - t64;
t8 = -qJ(5) * t80 + t13;
t3 = pkin(5) * t80 - pkin(9) * t50 + t11;
t4 = pkin(9) * t48 + t8;
t75 = sin(qJ(6));
t78 = cos(qJ(6));
t1 = t3 * t78 - t4 * t75;
t2 = t3 * t75 + t4 * t78;
t40 = -pkin(7) * t107 + t56;
t41 = t60 * t76 + t95;
t88 = -t40 * t76 + t41 * t79;
t87 = -t48 * t55 - t50 * t53;
t86 = 0.2e1 * t35 * t55 - 0.2e1 * t37 * t53;
t84 = -t55 * pkin(9) + t35;
t82 = pkin(7) ^ 2;
t72 = t80 ^ 2;
t70 = t77 ^ 2;
t67 = t70 * t82;
t62 = qJ(5) + t118;
t52 = t55 ^ 2;
t47 = t50 ^ 2;
t44 = t78 * t62 + t75 * t89;
t42 = t75 * t62 - t78 * t89;
t38 = t50 * t122;
t29 = t50 * t55;
t28 = t53 * t75 + t55 * t78;
t26 = -t78 * t53 + t55 * t75;
t23 = pkin(4) * t53 - t85;
t21 = t53 * pkin(9) + t37;
t20 = t48 * t75 + t50 * t78;
t18 = -t78 * t48 + t50 * t75;
t9 = t48 * pkin(5) + t14;
t7 = t78 * t21 + t75 * t84;
t5 = t75 * t21 - t78 * t84;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t70, t97, 0, t72, 0, 0, pkin(1) * t121, pkin(1) * t123, 0.2e1 * (t70 + t72) * pkin(7), pkin(1) ^ 2 + t72 * t82 + t67, t71 * t70, -0.2e1 * t70 * t108, t105 * t123, t69 * t70, t76 * t97, t72, 0.2e1 * t70 * t119 - 0.2e1 * t40 * t80, 0.2e1 * pkin(7) * t70 * t79 + 0.2e1 * t41 * t80, 0.2e1 * (-t40 * t79 - t41 * t76) * t77, t40 ^ 2 + t41 ^ 2 + t67, t47, -0.2e1 * t112, t38, t127, 0.2e1 * t104, t72, 0.2e1 * t101 * t80 + 0.2e1 * t48 * t58, 0.2e1 * t13 * t80 + 0.2e1 * t50 * t58, 0.2e1 * t101 * t50 - 0.2e1 * t13 * t48, t101 ^ 2 + t13 ^ 2 + t58 ^ 2, t47, t38, 0.2e1 * t112, t72, -0.2e1 * t104, t127, 0.2e1 * t11 * t80 + 0.2e1 * t14 * t48, 0.2e1 * t11 * t50 - 0.2e1 * t48 * t8, -0.2e1 * t14 * t50 - 0.2e1 * t8 * t80, t11 ^ 2 + t14 ^ 2 + t8 ^ 2, t20 ^ 2, -0.2e1 * t20 * t18, t20 * t121, t18 ^ 2, t18 * t122, t72, 0.2e1 * t1 * t80 - 0.2e1 * t18 * t9, -0.2e1 * t2 * t80 - 0.2e1 * t20 * t9, -0.2e1 * t1 * t20 - 0.2e1 * t18 * t2, t1 ^ 2 + t2 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t80, 0, -t116, -t80 * pkin(7), 0, 0, t94 (-t69 + t71) * t77, -t107, -t94, -t105, 0, -pkin(7) * t106 + (-pkin(2) * t77 + pkin(8) * t80) * t76, pkin(8) * t105 + (t119 - t120) * t77, t88, -pkin(2) * t116 + t88 * pkin(8), t29, t87, -t110, t113, t103, 0, t48 * t66 + t53 * t58 + t115, t50 * t66 + t55 * t58 + t114, t101 * t55 - t13 * t53 + t90, t101 * t35 + t13 * t37 + t58 * t66, t29, -t110, -t87, 0, -t103, t113, t14 * t53 + t23 * t48 + t115, t11 * t55 - t53 * t8 + t90, -t14 * t55 - t23 * t50 - t114, t11 * t35 + t14 * t23 + t37 * t8, t20 * t28, -t18 * t28 - t20 * t26, t28 * t80, t18 * t26, -t26 * t80, 0, t15 * t18 - t26 * t9 - t5 * t80, t15 * t20 - t28 * t9 - t7 * t80, -t1 * t28 - t18 * t7 - t2 * t26 + t20 * t5, -t1 * t5 - t15 * t9 + t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, 0.2e1 * t108, 0, t71, 0, 0, 0.2e1 * t120, -0.2e1 * pkin(2) * t76, 0.2e1 * t99 * pkin(8), t99 * pkin(8) ^ 2 + pkin(2) ^ 2, t52, -0.2e1 * t111, 0, t126, 0, 0, t53 * t124, t55 * t124, t86, t66 ^ 2 + t96, t52, 0, 0.2e1 * t111, 0, 0, t126, 0.2e1 * t23 * t53, t86, -0.2e1 * t23 * t55, t23 ^ 2 + t96, t28 ^ 2, -0.2e1 * t28 * t26, 0, t26 ^ 2, 0, 0, t26 * t125, t28 * t125, -0.2e1 * t26 * t7 + 0.2e1 * t28 * t5, t15 ^ 2 + t5 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, -t109, -t80, t40, -t41, 0, 0, 0, 0, t50, 0, -t48, -t80, -t80 * t117 - t101, t80 * t118 - t13 (-t48 * t73 - t50 * t74) * pkin(3) (-t101 * t74 + t13 * t73) * pkin(3), 0, t50, 0, -t80, t48, 0, -t64 * t80 - t11, -t48 * t62 - t50 * t64 (-qJ(5) - t62) * t80 + t13, -t11 * t64 + t62 * t8, 0, 0, -t20, 0, t18, -t80, -t42 * t80 - t1, -t44 * t80 + t2, -t18 * t44 + t20 * t42, -t1 * t42 + t2 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0, t79, 0, -t76 * pkin(8), -t79 * pkin(8), 0, 0, 0, 0, t55, 0, -t53, 0, -t35, -t37 (-t53 * t73 - t55 * t74) * pkin(3) (-t35 * t74 + t37 * t73) * pkin(3), 0, t55, 0, 0, t53, 0, -t35, -t53 * t62 - t55 * t64, t37, -t35 * t64 + t37 * t62, 0, 0, -t28, 0, t26, 0, t5, t7, -t26 * t44 + t28 * t42, t42 * t5 + t44 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t117, -0.2e1 * t118, 0 (t73 ^ 2 + t74 ^ 2) * pkin(3) ^ 2, 0, 0, 0, 1, 0, 0, 0.2e1 * t64, 0, 0.2e1 * t62, t62 ^ 2 + t64 ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t42, 0.2e1 * t44, 0, t42 ^ 2 + t44 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t50, 0, t58, 0, 0, 0, 0, 0, 0, t48, 0, -t50, t14, 0, 0, 0, 0, 0, 0, -t18, -t20, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, t55, 0, t66, 0, 0, 0, 0, 0, 0, t53, 0, -t55, t23, 0, 0, 0, 0, 0, 0, -t26, -t28, 0, -t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, t50, 0, t11, 0, 0, 0, 0, 0, 0, t78 * t80, -t75 * t80, -t18 * t75 - t20 * t78, t1 * t78 + t2 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, 0, t35, 0, 0, 0, 0, 0, 0, 0, 0, -t26 * t75 - t28 * t78, -t5 * t78 + t7 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -t64, 0, 0, 0, 0, 0, 0, -t78, t75, 0, -t42 * t78 + t44 * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75 ^ 2 + t78 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, -t18, t80, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, 0, -t5, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t42, -t44, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, -t75, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t6;
