% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:19
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:19:30
% EndTime: 2022-01-23 09:19:32
% DurationCPUTime: 2.25s
% Computational Cost: add. (9024->165), mult. (13584->248), div. (0->0), fcn. (8597->10), ass. (0->138)
t1170 = qJD(1) + qJD(3);
t1166 = t1170 ^ 2;
t1177 = sin(qJ(3));
t1167 = qJDD(1) + qJDD(3);
t1180 = cos(qJ(3));
t1195 = t1180 * t1167;
t1143 = t1177 * t1166 - t1195;
t1173 = sin(pkin(8));
t1175 = cos(pkin(8));
t1196 = t1177 * t1167;
t1190 = -t1180 * t1166 - t1196;
t1119 = t1175 * t1143 - t1173 * t1190;
t1178 = sin(qJ(1));
t1181 = cos(qJ(1));
t1209 = t1173 * t1143 + t1175 * t1190;
t1215 = t1178 * t1119 + t1181 * t1209;
t1214 = t1181 * t1119 - t1178 * t1209;
t1213 = 2 * qJD(5);
t1172 = sin(pkin(9));
t1174 = cos(pkin(9));
t1176 = sin(qJ(5));
t1179 = cos(qJ(5));
t1210 = -t1172 * t1176 + t1174 * t1179;
t1189 = t1172 * t1179 + t1174 * t1176;
t1131 = t1189 * t1167;
t1168 = t1172 ^ 2;
t1169 = t1174 ^ 2;
t1193 = t1168 + t1169;
t1140 = t1193 * t1166;
t1132 = t1210 * t1170;
t1206 = t1132 ^ 2;
t1134 = t1189 * t1170;
t1205 = t1134 ^ 2;
t1204 = qJD(4) * t1170;
t1203 = t1134 * t1132;
t1202 = t1166 * t1174;
t1201 = t1168 * t1166;
t1200 = t1169 * t1166;
t1199 = t1172 * t1167;
t1160 = t1174 * t1167;
t1155 = t1178 * g(1) - t1181 * g(2);
t1187 = qJDD(1) * pkin(1) + t1155;
t1156 = -t1181 * g(1) - t1178 * g(2);
t1183 = qJD(1) ^ 2;
t1188 = -t1183 * pkin(1) + t1156;
t1123 = t1173 * t1187 + t1175 * t1188;
t1121 = -t1183 * pkin(2) + t1123;
t1122 = -t1173 * t1188 + t1175 * t1187;
t1186 = qJDD(1) * pkin(2) + t1122;
t1096 = t1180 * t1121 + t1177 * t1186;
t1171 = -g(3) + qJDD(2);
t1194 = t1174 * t1171 - 0.2e1 * t1172 * t1204;
t1092 = -t1166 * pkin(3) + t1167 * qJ(4) + t1096;
t1085 = t1172 * t1171 + (t1092 + 0.2e1 * t1204) * t1174;
t1095 = -t1177 * t1121 + t1180 * t1186;
t1146 = -t1173 * qJDD(1) - t1175 * t1183;
t1147 = t1175 * qJDD(1) - t1173 * t1183;
t1192 = t1181 * t1146 - t1178 * t1147;
t1105 = t1210 * t1167;
t1191 = t1178 * t1146 + t1181 * t1147;
t1091 = -t1167 * pkin(3) - t1166 * qJ(4) + qJDD(4) - t1095;
t1182 = qJD(5) ^ 2;
t1150 = t1172 * t1202;
t1149 = -t1178 * qJDD(1) - t1181 * t1183;
t1148 = t1181 * qJDD(1) - t1178 * t1183;
t1138 = t1193 * t1167;
t1136 = t1174 * t1140;
t1135 = t1172 * t1140;
t1128 = -t1182 - t1205;
t1127 = -t1180 * t1136 - t1174 * t1196;
t1126 = t1180 * t1135 + t1172 * t1196;
t1125 = -t1177 * t1136 + t1174 * t1195;
t1124 = t1177 * t1135 - t1172 * t1195;
t1116 = t1180 * t1138 - t1177 * t1140;
t1115 = t1177 * t1138 + t1180 * t1140;
t1111 = t1132 * t1213 + t1131;
t1110 = t1134 * t1213 - t1105;
t1109 = -qJDD(5) + t1203;
t1108 = qJDD(5) + t1203;
t1107 = -t1182 - t1206;
t1106 = -t1205 - t1206;
t1104 = -t1173 * t1125 + t1175 * t1127;
t1103 = -t1173 * t1124 + t1175 * t1126;
t1102 = t1175 * t1125 + t1173 * t1127;
t1101 = t1175 * t1124 + t1173 * t1126;
t1100 = -t1173 * t1122 + t1175 * t1123;
t1099 = t1175 * t1122 + t1173 * t1123;
t1098 = t1179 * t1109 - t1176 * t1128;
t1097 = t1176 * t1109 + t1179 * t1128;
t1094 = -t1173 * t1115 + t1175 * t1116;
t1093 = t1175 * t1115 + t1173 * t1116;
t1089 = t1179 * t1105 + t1176 * t1131;
t1088 = t1176 * t1105 - t1179 * t1131;
t1087 = t1179 * t1107 - t1176 * t1108;
t1086 = t1176 * t1107 + t1179 * t1108;
t1084 = -t1172 * t1092 + t1194;
t1083 = -pkin(4) * t1160 + t1091 + (-t1200 - t1201) * pkin(7);
t1082 = -pkin(4) * t1200 + pkin(7) * t1160 + t1085;
t1081 = (pkin(4) * t1202 - pkin(7) * t1167 - t1092) * t1172 + t1194;
t1080 = -t1172 * t1097 + t1174 * t1098;
t1079 = t1174 * t1097 + t1172 * t1098;
t1078 = -t1177 * t1095 + t1180 * t1096;
t1077 = t1180 * t1095 + t1177 * t1096;
t1076 = -t1172 * t1088 + t1174 * t1089;
t1075 = t1174 * t1088 + t1172 * t1089;
t1074 = -t1172 * t1086 + t1174 * t1087;
t1073 = t1174 * t1086 + t1172 * t1087;
t1072 = t1180 * t1080 + t1177 * t1111;
t1071 = t1177 * t1080 - t1180 * t1111;
t1070 = -t1172 * t1084 + t1174 * t1085;
t1069 = t1174 * t1084 + t1172 * t1085;
t1068 = t1180 * t1074 + t1177 * t1110;
t1067 = t1177 * t1074 - t1180 * t1110;
t1066 = t1176 * t1081 + t1179 * t1082;
t1065 = t1179 * t1081 - t1176 * t1082;
t1064 = t1180 * t1076 + t1177 * t1106;
t1063 = t1177 * t1076 - t1180 * t1106;
t1062 = t1180 * t1070 + t1177 * t1091;
t1061 = t1177 * t1070 - t1180 * t1091;
t1060 = -t1173 * t1077 + t1175 * t1078;
t1059 = t1175 * t1077 + t1173 * t1078;
t1058 = -t1173 * t1071 + t1175 * t1072;
t1057 = t1175 * t1071 + t1173 * t1072;
t1056 = -t1173 * t1067 + t1175 * t1068;
t1055 = t1175 * t1067 + t1173 * t1068;
t1054 = -t1176 * t1065 + t1179 * t1066;
t1053 = t1179 * t1065 + t1176 * t1066;
t1052 = -t1173 * t1063 + t1175 * t1064;
t1051 = t1175 * t1063 + t1173 * t1064;
t1050 = -t1173 * t1061 + t1175 * t1062;
t1049 = t1175 * t1061 + t1173 * t1062;
t1048 = -t1172 * t1053 + t1174 * t1054;
t1047 = t1174 * t1053 + t1172 * t1054;
t1046 = t1180 * t1048 + t1177 * t1083;
t1045 = t1177 * t1048 - t1180 * t1083;
t1044 = -t1173 * t1045 + t1175 * t1046;
t1043 = t1175 * t1045 + t1173 * t1046;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1149, -t1148, 0, -t1178 * t1155 + t1181 * t1156, 0, 0, 0, 0, 0, 0, t1192, -t1191, 0, -t1178 * t1099 + t1181 * t1100, 0, 0, 0, 0, 0, 0, t1215, t1214, 0, -t1178 * t1059 + t1181 * t1060, 0, 0, 0, 0, 0, 0, -t1178 * t1102 + t1181 * t1104, -t1178 * t1101 + t1181 * t1103, -t1178 * t1093 + t1181 * t1094, -t1178 * t1049 + t1181 * t1050, 0, 0, 0, 0, 0, 0, -t1178 * t1055 + t1181 * t1056, -t1178 * t1057 + t1181 * t1058, -t1178 * t1051 + t1181 * t1052, -t1178 * t1043 + t1181 * t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1148, t1149, 0, t1181 * t1155 + t1178 * t1156, 0, 0, 0, 0, 0, 0, t1191, t1192, 0, t1181 * t1099 + t1178 * t1100, 0, 0, 0, 0, 0, 0, -t1214, t1215, 0, t1181 * t1059 + t1178 * t1060, 0, 0, 0, 0, 0, 0, t1181 * t1102 + t1178 * t1104, t1181 * t1101 + t1178 * t1103, t1181 * t1093 + t1178 * t1094, t1181 * t1049 + t1178 * t1050, 0, 0, 0, 0, 0, 0, t1181 * t1055 + t1178 * t1056, t1181 * t1057 + t1178 * t1058, t1181 * t1051 + t1178 * t1052, t1181 * t1043 + t1178 * t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1073, t1079, t1075, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1183, -qJDD(1), 0, t1156, 0, 0, 0, 0, 0, 0, t1146, -t1147, 0, t1100, 0, 0, 0, 0, 0, 0, t1209, t1119, 0, t1060, 0, 0, 0, 0, 0, 0, t1104, t1103, t1094, t1050, 0, 0, 0, 0, 0, 0, t1056, t1058, t1052, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1183, 0, t1155, 0, 0, 0, 0, 0, 0, t1147, t1146, 0, t1099, 0, 0, 0, 0, 0, 0, -t1119, t1209, 0, t1059, 0, 0, 0, 0, 0, 0, t1102, t1101, t1093, t1049, 0, 0, 0, 0, 0, 0, t1055, t1057, t1051, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1073, t1079, t1075, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1183, -qJDD(1), 0, t1123, 0, 0, 0, 0, 0, 0, t1190, t1143, 0, t1078, 0, 0, 0, 0, 0, 0, t1127, t1126, t1116, t1062, 0, 0, 0, 0, 0, 0, t1068, t1072, t1064, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1183, 0, t1122, 0, 0, 0, 0, 0, 0, -t1143, t1190, 0, t1077, 0, 0, 0, 0, 0, 0, t1125, t1124, t1115, t1061, 0, 0, 0, 0, 0, 0, t1067, t1071, t1063, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1073, t1079, t1075, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1166, -t1167, 0, t1096, 0, 0, 0, 0, 0, 0, -t1136, t1135, t1138, t1070, 0, 0, 0, 0, 0, 0, t1074, t1080, t1076, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, -t1166, 0, t1095, 0, 0, 0, 0, 0, 0, t1160, -t1199, t1140, -t1091, 0, 0, 0, 0, 0, 0, -t1110, -t1111, -t1106, -t1083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1073, t1079, t1075, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1200, t1150, t1160, t1085, 0, 0, 0, 0, 0, 0, t1087, t1098, t1089, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1150, -t1201, -t1199, t1084, 0, 0, 0, 0, 0, 0, t1086, t1097, t1088, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, t1199, -t1140, t1091, 0, 0, 0, 0, 0, 0, t1110, t1111, t1106, t1083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1107, t1109, t1105, t1066; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1108, t1128, -t1131, t1065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1110, t1111, t1106, t1083;];
f_new_reg = t1;
