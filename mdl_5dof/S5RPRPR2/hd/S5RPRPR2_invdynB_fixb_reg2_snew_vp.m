% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:19
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:19:10
% EndTime: 2022-01-23 09:19:18
% DurationCPUTime: 8.37s
% Computational Cost: add. (36153->448), mult. (54314->677), div. (0->0), fcn. (34125->10), ass. (0->303)
t498 = cos(qJ(3));
t486 = qJDD(1) + qJDD(3);
t495 = sin(qJ(3));
t535 = t495 * t486;
t488 = (qJD(1) + qJD(3));
t550 = t488 ^ 2;
t455 = t498 * t550 + t535;
t526 = t498 * t486;
t534 = t495 * t550;
t458 = -t526 + t534;
t491 = sin(pkin(8));
t493 = cos(pkin(8));
t401 = t493 * t455 - t491 * t458;
t489 = g(3) - qJDD(2);
t431 = pkin(6) * t455 - t498 * t489;
t568 = pkin(6) * t458 - t495 * t489;
t336 = qJ(2) * t401 + t493 * t431 - t491 * t568;
t405 = t491 * t455 + t493 * t458;
t496 = sin(qJ(1));
t499 = cos(qJ(1));
t350 = t496 * t401 + t499 * t405;
t578 = qJ(2) * t405 + t491 * t431 + t493 * t568;
t586 = pkin(5) * t350 + t496 * t336 + t499 * t578;
t567 = t499 * t401 - t496 * t405;
t585 = pkin(5) * t567 + t499 * t336 - t496 * t578;
t472 = t499 * g(1) + t496 * g(2);
t549 = qJD(1) ^ 2;
t506 = -t549 * pkin(1) - t472;
t471 = t496 * g(1) - t499 * g(2);
t508 = qJDD(1) * pkin(1) + t471;
t410 = t491 * t508 + t493 * t506;
t408 = -t549 * pkin(2) + t410;
t505 = -t491 * t506 + t493 * t508;
t504 = qJDD(1) * pkin(2) + t505;
t354 = t495 * t408 - t498 * t504;
t355 = t498 * t408 + t495 * t504;
t515 = t495 * t354 + t498 * t355;
t305 = t498 * t354 - t495 * t355;
t539 = t493 * t305;
t256 = -t491 * t515 + t539;
t542 = t491 * t305;
t574 = t493 * t515 + t542;
t222 = t496 * t256 + t499 * t574;
t582 = t499 * t256 - t496 * t574;
t492 = cos(pkin(9));
t490 = sin(pkin(9));
t487 = t490 ^ 2;
t502 = t492 ^ 2;
t552 = t550 * (t487 + t502);
t447 = t492 * t552;
t517 = t492 * t526;
t413 = -t495 * t447 + t517;
t415 = t498 * t447 + t492 * t535;
t370 = t493 * t413 - t491 * t415;
t373 = t491 * t413 + t493 * t415;
t316 = t499 * t370 - t496 * t373;
t579 = t496 * t370 + t499 * t373;
t570 = -t550 * pkin(3) + t486 * qJ(4) + (2 * qJD(4) * t488) + t355;
t514 = t493 * t410 - t491 * t505;
t364 = -t491 * t410 - t493 * t505;
t524 = t499 * t364;
t575 = -t496 * t514 + t524;
t532 = t496 * t364;
t314 = t499 * t514 + t532;
t463 = t491 * qJDD(1) + t493 * t549;
t464 = t493 * qJDD(1) - t491 * t549;
t417 = -t496 * t463 + t499 * t464;
t441 = qJ(2) * t463 - t493 * t489;
t510 = -qJ(2) * t464 - t491 * t489;
t573 = -pkin(5) * t417 + t496 * t441 + t499 * t510;
t494 = sin(qJ(5));
t497 = cos(qJ(5));
t569 = t490 * t494 - t492 * t497;
t442 = t569 * t488;
t509 = t490 * t497 + t492 * t494;
t444 = t509 * t488;
t393 = t444 * t442;
t553 = qJDD(5) - t393;
t572 = t494 * t553;
t571 = t497 * t553;
t554 = t499 * t463 + t496 * t464;
t565 = pkin(5) * t554 + t499 * t441 - t496 * t510;
t544 = t490 * t492;
t421 = t455 * t544;
t422 = t490 * t517 - t534 * t544;
t378 = t493 * t421 + t491 * t422;
t381 = t491 * t421 - t493 * t422;
t564 = t499 * t378 - t496 * t381;
t563 = t496 * t378 + t499 * t381;
t555 = t509 * t486;
t478 = t502 * t550;
t546 = t487 * t550;
t453 = t478 + t546;
t436 = t442 ^ 2;
t437 = t444 ^ 2;
t548 = pkin(1) * t489;
t481 = t486 * pkin(3);
t547 = t486 * t492;
t480 = t492 * t489;
t322 = -t480 + (pkin(4) * t550 * t492 - pkin(7) * t486 - t570) * t490;
t330 = -t490 * t489 + t570 * t492;
t323 = -pkin(4) * t478 + pkin(7) * t547 + t330;
t266 = -t497 * t322 + t494 * t323;
t267 = t494 * t322 + t497 * t323;
t237 = -t497 * t266 + t494 * t267;
t545 = t490 * t237;
t541 = t492 * t237;
t342 = -t550 * qJ(4) + qJDD(4) + t354 - t481;
t326 = -pkin(4) * t547 - t453 * pkin(7) + t342;
t538 = t494 * t326;
t386 = qJDD(5) + t393;
t537 = t494 * t386;
t536 = t495 * t342;
t529 = t497 * t326;
t528 = t497 * t386;
t527 = t498 * t342;
t522 = t442 * qJD(5);
t521 = t444 * qJD(5);
t519 = t495 * t393;
t518 = t498 * t393;
t516 = -t342 + t481;
t238 = t494 * t266 + t497 * t267;
t329 = t570 * t490 + t480;
t282 = t490 * t329 + t492 * t330;
t424 = -t496 * t471 - t499 * t472;
t466 = t499 * qJDD(1) - t496 * t549;
t511 = -pkin(5) * t466 - t496 * g(3);
t434 = t569 * t486;
t281 = t492 * t329 - t490 * t330;
t423 = t499 * t471 - t496 * t472;
t500 = qJD(5) ^ 2;
t477 = t502 * t486;
t476 = t487 * t486;
t465 = t496 * qJDD(1) + t499 * t549;
t454 = t478 - t546;
t451 = t477 - t476;
t450 = t477 + t476;
t448 = -pkin(5) * t465 + t499 * g(3);
t446 = t490 * t552;
t427 = -t437 - t500;
t426 = -t437 + t500;
t425 = t436 - t500;
t414 = t498 * t446 + t490 * t535;
t411 = t495 * t446 - t490 * t526;
t400 = t498 * t451 - t495 * t454;
t399 = t498 * t450 - t495 * t453;
t398 = t495 * t451 + t498 * t454;
t397 = t495 * t450 + t498 * t453;
t392 = -t437 + t436;
t391 = t555 - t522;
t390 = t555 - 0.2e1 * t522;
t389 = -t434 - t521;
t388 = t434 + 0.2e1 * t521;
t384 = -t500 - t436;
t383 = (-t442 * t497 + t444 * t494) * qJD(5);
t382 = (-t442 * t494 - t444 * t497) * qJD(5);
t377 = -t436 - t437;
t375 = t497 * t391 - t494 * t521;
t372 = -t491 * t411 + t493 * t414;
t371 = t494 * t391 + t497 * t521;
t368 = t493 * t411 + t491 * t414;
t367 = -t494 * t389 + t497 * t522;
t366 = t497 * t389 + t494 * t522;
t361 = -t494 * t427 - t528;
t360 = -t494 * t426 + t571;
t359 = t497 * t425 - t537;
t358 = t497 * t427 - t537;
t357 = t497 * t426 + t572;
t356 = t494 * t425 + t528;
t353 = qJ(2) * t514 + t548;
t347 = -t491 * t398 + t493 * t400;
t346 = -t491 * t397 + t493 * t399;
t345 = t493 * t398 + t491 * t400;
t344 = t493 * t397 + t491 * t399;
t340 = -t497 * t388 - t494 * t390;
t339 = -t434 * t497 + t494 * t555;
t338 = -t494 * t388 + t497 * t390;
t337 = -t434 * t494 - t497 * t555;
t332 = t497 * t384 - t572;
t331 = t494 * t384 + t571;
t328 = -t490 * t382 + t492 * t383;
t325 = t495 * qJDD(5) + t498 * t328;
t324 = -t498 * qJDD(5) + t495 * t328;
t317 = -t496 * t368 + t499 * t372;
t315 = t499 * t368 + t496 * t372;
t313 = -t490 * t371 + t492 * t375;
t312 = -t490 * t366 + t492 * t367;
t310 = -t490 * t358 + t492 * t361;
t309 = -t490 * t357 + t492 * t360;
t308 = -t490 * t356 + t492 * t359;
t307 = t492 * t358 + t490 * t361;
t302 = pkin(2) * t489 + pkin(6) * t515;
t301 = -t496 * t344 + t499 * t346;
t300 = t499 * t344 + t496 * t346;
t299 = t498 * t309 + t495 * t555;
t298 = t498 * t308 - t495 * t434;
t297 = t495 * t309 - t498 * t555;
t296 = t495 * t308 + t498 * t434;
t295 = -pkin(7) * t358 + t529;
t294 = -t490 * t338 + t492 * t340;
t293 = -t490 * t337 + t492 * t339;
t292 = t492 * t337 + t490 * t339;
t291 = -t490 * t331 + t492 * t332;
t290 = t492 * t331 + t490 * t332;
t289 = t498 * t313 + t519;
t288 = t498 * t312 - t519;
t287 = t495 * t313 - t518;
t286 = t495 * t312 + t518;
t285 = t498 * t310 + t495 * t390;
t284 = t495 * t310 - t498 * t390;
t283 = -pkin(7) * t331 + t538;
t279 = -pkin(4) * t390 + pkin(7) * t361 + t538;
t278 = -pkin(6) * t411 - t495 * t330 + t492 * t527;
t277 = -pkin(6) * t413 - t495 * t329 + t490 * t527;
t276 = pkin(6) * t414 + t498 * t330 + t492 * t536;
t275 = -pkin(6) * t415 + t498 * t329 + t490 * t536;
t274 = -t491 * t324 + t493 * t325;
t273 = t493 * t324 + t491 * t325;
t272 = t498 * t294 - t495 * t392;
t271 = t495 * t294 + t498 * t392;
t270 = t498 * t291 + t495 * t388;
t269 = t495 * t291 - t498 * t388;
t268 = -pkin(4) * t388 + pkin(7) * t332 - t529;
t264 = t498 * t293 + t495 * t377;
t263 = t495 * t293 - t498 * t377;
t262 = -pkin(6) * t397 + t498 * t281;
t261 = pkin(6) * t399 + t495 * t281;
t260 = -pkin(3) * t292 - pkin(4) * t337;
t259 = t498 * t282 + t536;
t258 = t495 * t282 - t527;
t253 = -t491 * t297 + t493 * t299;
t252 = -t491 * t296 + t493 * t298;
t251 = t493 * t297 + t491 * t299;
t250 = t493 * t296 + t491 * t298;
t249 = -t491 * t287 + t493 * t289;
t248 = -t491 * t286 + t493 * t288;
t247 = t493 * t287 + t491 * t289;
t246 = t493 * t286 + t491 * t288;
t245 = -t491 * t284 + t493 * t285;
t244 = t493 * t284 + t491 * t285;
t243 = -pkin(3) * t307 - pkin(4) * t358 + t267;
t242 = -t491 * t271 + t493 * t272;
t241 = t493 * t271 + t491 * t272;
t240 = -t491 * t269 + t493 * t270;
t239 = t493 * t269 + t491 * t270;
t236 = -t491 * t263 + t493 * t264;
t235 = t493 * t263 + t491 * t264;
t234 = -pkin(3) * t290 - pkin(4) * t331 + t266;
t233 = -qJ(2) * t368 - t491 * t276 + t493 * t278;
t232 = -qJ(2) * t370 - t491 * t275 + t493 * t277;
t231 = qJ(2) * t372 + t493 * t276 + t491 * t278;
t230 = -qJ(2) * t373 + t493 * t275 + t491 * t277;
t229 = -qJ(4) * t307 - t490 * t279 + t492 * t295;
t228 = -pkin(7) * t337 - t237;
t227 = -qJ(2) * t344 - t491 * t261 + t493 * t262;
t226 = qJ(2) * t346 + t493 * t261 + t491 * t262;
t225 = -pkin(4) * t326 + pkin(7) * t238;
t224 = -t491 * t258 + t493 * t259;
t223 = t493 * t258 + t491 * t259;
t220 = pkin(6) * t539 + qJ(2) * t256 - t491 * t302;
t219 = -qJ(4) * t290 - t490 * t268 + t492 * t283;
t218 = pkin(6) * t542 + qJ(2) * t574 + t493 * t302 + t548;
t217 = -pkin(4) * t377 + pkin(7) * t339 + t238;
t216 = -pkin(6) * t258 - (pkin(3) * t495 - qJ(4) * t498) * t281;
t215 = -t496 * t244 + t499 * t245;
t214 = t499 * t244 + t496 * t245;
t213 = pkin(6) * t259 - (-pkin(3) * t498 - qJ(4) * t495 - pkin(2)) * t281;
t212 = -t496 * t239 + t499 * t240;
t211 = t499 * t239 + t496 * t240;
t210 = t492 * t238 - t545;
t209 = t490 * t238 + t541;
t208 = -t496 * t235 + t499 * t236;
t207 = t499 * t235 + t496 * t236;
t206 = t498 * t210 + t495 * t326;
t205 = t495 * t210 - t498 * t326;
t204 = -pkin(6) * t284 + t498 * t229 - t495 * t243;
t203 = -t496 * t223 + t499 * t224;
t202 = t499 * t223 + t496 * t224;
t201 = -pkin(2) * t307 + pkin(6) * t285 + t495 * t229 + t498 * t243;
t200 = -pkin(6) * t269 + t498 * t219 - t495 * t234;
t199 = -qJ(4) * t292 - t490 * t217 + t492 * t228;
t198 = -pkin(3) * t209 - pkin(4) * t237;
t197 = -pkin(2) * t290 + pkin(6) * t270 + t495 * t219 + t498 * t234;
t196 = -pkin(6) * t263 + t498 * t199 - t495 * t260;
t195 = -pkin(7) * t541 - qJ(4) * t209 - t490 * t225;
t194 = -pkin(2) * t292 + pkin(6) * t264 + t495 * t199 + t498 * t260;
t193 = -t491 * t205 + t493 * t206;
t192 = t493 * t205 + t491 * t206;
t191 = -qJ(2) * t223 - t491 * t213 + t493 * t216;
t190 = pkin(1) * t281 + qJ(2) * t224 + t493 * t213 + t491 * t216;
t189 = -qJ(2) * t244 - t491 * t201 + t493 * t204;
t188 = -pkin(1) * t307 + qJ(2) * t245 + t493 * t201 + t491 * t204;
t187 = -qJ(2) * t239 - t491 * t197 + t493 * t200;
t186 = -pkin(1) * t290 + qJ(2) * t240 + t493 * t197 + t491 * t200;
t185 = -t496 * t192 + t499 * t193;
t184 = t499 * t192 + t496 * t193;
t183 = -qJ(2) * t235 - t491 * t194 + t493 * t196;
t182 = -pkin(6) * t205 + t498 * t195 - t495 * t198;
t181 = -pkin(1) * t292 + qJ(2) * t236 + t493 * t194 + t491 * t196;
t180 = -pkin(2) * t209 + pkin(6) * t206 + t495 * t195 + t498 * t198;
t179 = -qJ(2) * t192 - t491 * t180 + t493 * t182;
t178 = -pkin(1) * t209 + qJ(2) * t193 + t493 * t180 + t491 * t182;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t465, -t466, 0, t424, 0, 0, 0, 0, 0, 0, -t554, -t417, 0, t314, 0, 0, 0, 0, 0, 0, -t567, t350, 0, t222, 0, 0, 0, 0, 0, 0, -t579, t317, t301, t203, 0, 0, 0, 0, 0, 0, t212, t215, t208, t185; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t466, -t465, 0, t423, 0, 0, 0, 0, 0, 0, t417, -t554, 0, -t575, 0, 0, 0, 0, 0, 0, -t350, -t567, 0, -t582, 0, 0, 0, 0, 0, 0, t316, t315, t300, t202, 0, 0, 0, 0, 0, 0, t211, t214, t207, t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t489, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t489, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t281, 0, 0, 0, 0, 0, 0, t290, t307, t292, t209; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t466, 0, -t465, 0, t511, -t448, -t423, -pkin(5) * t423, 0, 0, t417, 0, -t554, 0, t573, t565, t575, pkin(5) * t575 + qJ(2) * t524 - t496 * t353, 0, 0, -t350, 0, -t567, 0, t586, t585, t582, pkin(5) * t582 - t496 * t218 + t499 * t220, -t563, -t496 * t345 + t499 * t347, t317, t563, t579, 0, -pkin(5) * t316 - t496 * t230 + t499 * t232, -pkin(5) * t315 - t496 * t231 + t499 * t233, -pkin(5) * t300 - t496 * t226 + t499 * t227, -pkin(5) * t202 - t496 * t190 + t499 * t191, -t496 * t247 + t499 * t249, -t496 * t241 + t499 * t242, -t496 * t251 + t499 * t253, -t496 * t246 + t499 * t248, -t496 * t250 + t499 * t252, -t496 * t273 + t499 * t274, -pkin(5) * t211 - t496 * t186 + t499 * t187, -pkin(5) * t214 - t496 * t188 + t499 * t189, -pkin(5) * t207 - t496 * t181 + t499 * t183, -pkin(5) * t184 - t496 * t178 + t499 * t179; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t465, 0, t466, 0, t448, t511, t424, pkin(5) * t424, 0, 0, t554, 0, t417, 0, -t565, t573, t314, pkin(5) * t314 + qJ(2) * t532 + t499 * t353, 0, 0, t567, 0, -t350, 0, -t585, t586, t222, pkin(5) * t222 + t499 * t218 + t496 * t220, t564, t499 * t345 + t496 * t347, t315, -t564, -t316, 0, -pkin(5) * t579 + t499 * t230 + t496 * t232, pkin(5) * t317 + t499 * t231 + t496 * t233, pkin(5) * t301 + t499 * t226 + t496 * t227, pkin(5) * t203 + t499 * t190 + t496 * t191, t499 * t247 + t496 * t249, t499 * t241 + t496 * t242, t499 * t251 + t496 * t253, t499 * t246 + t496 * t248, t499 * t250 + t496 * t252, t499 * t273 + t496 * t274, pkin(5) * t212 + t499 * t186 + t496 * t187, pkin(5) * t215 + t499 * t188 + t496 * t189, pkin(5) * t208 + t499 * t181 + t496 * t183, pkin(5) * t185 + t499 * t178 + t496 * t179; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t471, t472, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t464 + t505, -pkin(1) * t463 - t410, 0, -pkin(1) * t364, 0, 0, 0, 0, 0, t486, -pkin(1) * t405 - pkin(2) * t458 - t354, -pkin(1) * t401 - pkin(2) * t455 - t355, 0, -pkin(1) * t256 - pkin(2) * t305, t476, 0.2e1 * t486 * t544, 0, t477, 0, 0, pkin(1) * t370 + pkin(2) * t413 - qJ(4) * t447 + t492 * t516, pkin(1) * t368 + pkin(2) * t411 + qJ(4) * t446 - t490 * t516, pkin(1) * t344 + pkin(2) * t397 + pkin(3) * t453 + qJ(4) * t450 + t282, pkin(1) * t223 + pkin(2) * t258 - pkin(3) * t342 + qJ(4) * t282, t492 * t371 + t490 * t375, t492 * t338 + t490 * t340, t492 * t357 + t490 * t360, t492 * t366 + t490 * t367, t492 * t356 + t490 * t359, t492 * t382 + t490 * t383, pkin(1) * t239 + pkin(2) * t269 - pkin(3) * t388 + qJ(4) * t291 + t492 * t268 + t490 * t283, pkin(1) * t244 + pkin(2) * t284 - pkin(3) * t390 + qJ(4) * t310 + t492 * t279 + t490 * t295, pkin(1) * t235 + pkin(2) * t263 - pkin(3) * t377 + qJ(4) * t293 + t492 * t217 + t490 * t228, pkin(1) * t192 + pkin(2) * t205 - pkin(3) * t326 - pkin(7) * t545 + qJ(4) * t210 + t492 * t225;];
tauB_reg = t1;
