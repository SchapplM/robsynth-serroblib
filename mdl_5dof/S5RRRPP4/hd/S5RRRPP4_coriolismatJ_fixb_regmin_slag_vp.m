% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-15 22:26
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRPP4_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP4_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP4_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPP4_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-15 22:24:54
% EndTime: 2021-01-15 22:25:05
% DurationCPUTime: 3.45s
% Computational Cost: add. (5573->254), mult. (10706->331), div. (0->0), fcn. (11842->6), ass. (0->212)
t197 = qJD(2) + qJD(3);
t200 = sin(qJ(2));
t349 = pkin(6) + pkin(7);
t182 = t349 * t200;
t201 = cos(qJ(2));
t183 = t349 * t201;
t199 = sin(qJ(3));
t337 = cos(qJ(3));
t119 = t199 * t182 - t337 * t183;
t178 = t199 * t200 - t337 * t201;
t214 = -t178 * qJ(4) - t119;
t313 = cos(pkin(8));
t363 = t313 * t214;
t198 = sin(pkin(8));
t180 = -t199 * t201 - t337 * t200;
t221 = -t337 * t182 - t199 * t183;
t360 = t180 * qJ(4) + t221;
t370 = t198 * t360;
t202 = -t370 / 0.2e1 - t363 / 0.2e1;
t377 = -0.2e1 * t202;
t378 = t377 * qJD(5);
t205 = t198 * t214;
t362 = t313 * t360;
t369 = t362 - t205;
t374 = t363 + t370;
t361 = -t198 * t178 - t313 * t180;
t140 = t361 ^ 2;
t371 = t361 / 0.2e1;
t235 = t362 / 0.2e1;
t270 = qJD(5) * t361;
t367 = t361 * qJD(1);
t132 = t361 * qJD(4);
t366 = t197 * t221;
t220 = -t178 * t313 + t198 * t180;
t365 = t197 * t220;
t261 = t220 * qJD(4);
t38 = t235 - t362 / 0.2e1;
t359 = -t38 * qJD(3) - t261;
t358 = t197 * t119;
t357 = t38 * qJD(2) - t261;
t336 = pkin(2) * t199;
t186 = t198 * t336;
t253 = t337 * pkin(2);
t172 = t253 * t313 - t186;
t314 = t38 * qJD(1) + t172 * qJD(2);
t230 = t220 * t374 - t361 * t369;
t356 = qJD(4) * t230;
t225 = t220 ^ 2 + t140;
t353 = t225 * qJD(1);
t352 = t230 * qJD(1);
t351 = qJD(4) * t225;
t350 = pkin(4) / 0.2e1;
t348 = -qJ(5) / 0.2e1;
t237 = t313 * t199;
t193 = t253 + pkin(3);
t292 = t198 * t193;
t162 = pkin(2) * t237 + t292;
t155 = qJ(5) + t162;
t347 = -t155 / 0.2e1;
t346 = t155 / 0.2e1;
t161 = t193 * t313 - t186;
t156 = -pkin(4) - t161;
t345 = t156 / 0.2e1;
t344 = t161 / 0.2e1;
t343 = -t162 / 0.2e1;
t333 = t198 * pkin(3);
t187 = qJ(5) + t333;
t342 = -t187 / 0.2e1;
t341 = t187 / 0.2e1;
t188 = -pkin(3) * t313 - pkin(4);
t340 = -t188 / 0.2e1;
t196 = t200 * pkin(2);
t339 = t196 / 0.2e1;
t338 = t198 / 0.2e1;
t335 = t361 * pkin(4);
t334 = t180 * pkin(3);
t35 = 0.2e1 * t202;
t332 = -qJD(2) * t374 + t35 * qJD(3);
t331 = t35 * qJD(2) - qJD(3) * t374;
t330 = pkin(3) * qJD(3);
t194 = -t201 * pkin(2) - pkin(1);
t153 = t178 * pkin(3) + t194;
t66 = -pkin(4) * t220 - qJ(5) * t361 + t153;
t307 = t220 * qJ(5);
t74 = -t307 - t334 + t335;
t67 = t196 + t74;
t5 = t66 * t67;
t329 = t5 * qJD(1);
t6 = t66 * t74;
t328 = t6 * qJD(1);
t327 = t66 * t361;
t326 = t66 * t220;
t248 = t198 * t337;
t171 = (t237 + t248) * pkin(2);
t324 = t369 * t171;
t323 = t374 * t172;
t154 = t196 - t334;
t11 = t153 * t154;
t311 = t11 * qJD(1);
t12 = t153 * t334;
t310 = t12 * qJD(1);
t243 = t171 * t371;
t300 = t172 * t220;
t93 = t300 / 0.2e1;
t236 = t93 + t243;
t14 = (t345 + t340) * t220 + (t347 + t341) * t361 + t236;
t309 = t14 * qJD(1);
t308 = t361 * t198;
t302 = t162 * t361;
t303 = t161 * t220;
t210 = -t303 / 0.2e1 - t302 / 0.2e1 + t243;
t238 = t313 * t220;
t213 = (-t308 / 0.2e1 - t238 / 0.2e1) * pkin(3);
t15 = -t300 / 0.2e1 + t213 - t210;
t306 = t15 * qJD(1);
t305 = t155 * t361;
t304 = t156 * t220;
t17 = -t220 * t67 + t327;
t301 = t17 * qJD(1);
t18 = -t361 * t67 - t326;
t299 = t18 * qJD(1);
t298 = t187 * t361;
t297 = t188 * t220;
t21 = -t220 * t74 + t327;
t290 = t21 * qJD(1);
t22 = -t361 * t74 - t326;
t289 = t22 * qJD(1);
t170 = -t334 / 0.2e1;
t254 = t339 + t170;
t25 = (t348 + t347) * t220 + (t350 - t156 / 0.2e1) * t361 + t254;
t288 = t25 * qJD(1);
t41 = t170 + (t348 + t342) * t220 + (t350 + t340) * t361;
t284 = t41 * qJD(1);
t222 = t220 * t343 + t344 * t361;
t45 = t222 + t254;
t281 = t45 * qJD(1);
t80 = t153 * t361;
t49 = -t154 * t220 + t80;
t280 = t49 * qJD(1);
t81 = t153 * t220;
t50 = t154 * t361 + t81;
t279 = t50 * qJD(1);
t56 = -t220 * t334 - t80;
t278 = t56 * qJD(1);
t57 = t334 * t361 - t81;
t277 = t57 * qJD(1);
t249 = -t313 / 0.2e1;
t212 = (t220 * t338 + t249 * t361) * pkin(3);
t62 = t334 / 0.2e1 + t212;
t276 = t62 * qJD(1);
t273 = qJD(1) * t194;
t272 = qJD(1) * t201;
t271 = qJD(3) * t194;
t117 = t178 ^ 2 - t180 ^ 2;
t269 = t117 * qJD(1);
t127 = t178 * t196 - t194 * t180;
t266 = t127 * qJD(1);
t128 = -t194 * t178 - t180 * t196;
t265 = t128 * qJD(1);
t264 = t140 * qJD(1);
t262 = t220 * qJD(1);
t259 = t172 * qJD(3);
t185 = -t200 ^ 2 + t201 ^ 2;
t258 = t185 * qJD(1);
t257 = t200 * qJD(2);
t256 = t201 * qJD(2);
t255 = t259 + qJD(5);
t252 = pkin(1) * t200 * qJD(1);
t251 = pkin(1) * t272;
t250 = t66 * t367;
t247 = t220 * t367;
t246 = t178 * t273;
t245 = t180 * t273;
t244 = t200 * t272;
t242 = t337 * qJD(2);
t241 = t337 * qJD(3);
t148 = t197 * t180;
t55 = t323 / 0.2e1;
t207 = t55 + t374 * t345 - t324 / 0.2e1 + t369 * t346;
t223 = t340 * t374 + t342 * t369;
t2 = t207 + t223;
t76 = t155 * t172 + t156 * t171;
t229 = t2 * qJD(1) + t76 * qJD(2);
t211 = t374 * t344 + t324 / 0.2e1 + t369 * t343;
t216 = (t249 * t374 + t338 * t369) * pkin(3);
t3 = -t323 / 0.2e1 + t216 + t211;
t77 = -t161 * t171 + t162 * t172;
t228 = t3 * qJD(1) - t77 * qJD(2);
t37 = 0.2e1 * t235 - t205;
t227 = t37 * qJD(2) + qJD(3) * t369;
t226 = qJD(2) * t369 + t37 * qJD(3);
t224 = t155 * qJD(2);
t24 = t171 * qJD(2);
t219 = t170 + t335 / 0.2e1 - t307 / 0.2e1;
t152 = -qJ(5) + (t253 / 0.2e1 - pkin(3) / 0.2e1 - t193 / 0.2e1) * t198;
t217 = t152 * qJD(2) - t187 * qJD(3);
t163 = t171 * qJD(3);
t149 = t180 * t178 * qJD(1);
t147 = t197 * t178;
t146 = t333 / 0.2e1 + qJ(5) + t292 / 0.2e1 + (t237 + t248 / 0.2e1) * pkin(2);
t84 = t220 * qJD(5);
t75 = t197 * t361;
t63 = t170 + t212;
t46 = -t222 + t254;
t42 = t188 * t371 + t220 * t341 + t219;
t26 = t220 * t346 + t345 * t361 + t219 + t339;
t23 = -t163 - t24;
t16 = t93 + t213 + t210;
t13 = -t305 / 0.2e1 + t304 / 0.2e1 - t298 / 0.2e1 + t297 / 0.2e1 + t236;
t4 = t55 + t216 - t211;
t1 = t207 - t223;
t7 = [0, 0, 0, t200 * t256, t185 * qJD(2), 0, 0, 0, -pkin(1) * t257, -pkin(1) * t256, t178 * t148, t197 * t117, 0, 0, 0, t127 * qJD(2) - t180 * t271, t128 * qJD(2) - t178 * t271, t49 * qJD(2) - t56 * qJD(3), t50 * qJD(2) - t57 * qJD(3), t351, t11 * qJD(2) - t12 * qJD(3) + t356, t17 * qJD(2) + t21 * qJD(3) + t220 * t270, t351, t18 * qJD(2) + t22 * qJD(3) + t140 * qJD(5), t5 * qJD(2) + t6 * qJD(3) - t270 * t66 + t356; 0, 0, 0, t244, t258, t256, -t257, 0, -pkin(6) * t256 - t252, pkin(6) * t257 - t251, t149, t269, -t147, t148, 0, t266 + t358, t265 - t366, t280 + t332, -t226 + t279, (-t302 - t303) * qJD(2) + t16 * qJD(3), t311 + (-t161 * t374 + t162 * t369) * qJD(2) + t4 * qJD(3) + t46 * qJD(4), t301 + t332, (t304 - t305) * qJD(2) + t13 * qJD(3) + t84, t226 + t299, t329 + (t155 * t369 + t156 * t374) * qJD(2) + t1 * qJD(3) + t26 * qJD(4) + t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, t269, -t147, t148, 0, -t245 + t358, -t246 - t366, -t278 + t331, -t227 - t277, t16 * qJD(2) + (-t238 - t308) * t330, -t310 + t4 * qJD(2) + (t198 * t369 - t313 * t374) * t330 + t63 * qJD(4), t290 + t331, t13 * qJD(2) + (t297 - t298) * qJD(3) + t84, t227 + t289, t328 + t1 * qJD(2) + (t187 * t369 + t188 * t374) * qJD(3) + t42 * qJD(4) + t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t353, t46 * qJD(2) + t63 * qJD(3) + t352, 0, t353, 0, t26 * qJD(2) + t42 * qJD(3) + t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t247, t365, t264, t197 * t377 - t250; 0, 0, 0, -t244, -t258, 0, 0, 0, t252, t251, -t149, -t269, 0, 0, 0, -t266, -t265, -t280 - t132, -t279 + t359, -t15 * qJD(3), -t3 * qJD(3) - t45 * qJD(4) - t311, -t301 - t132, t14 * qJD(3), -t299 - t359, t2 * qJD(3) - t25 * qJD(4) - t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t336, -pkin(2) * t241, -t163, -t259, 0, t77 * qJD(3), -t163, 0, t255, t76 * qJD(3) + t155 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197 * t336, (-t242 - t241) * pkin(2), t23, -t259 - t314, -t306, (-t171 * t313 + t172 * t198) * t330 - t228, t23, t309, t255 + t314, (t171 * t188 + t172 * t187) * qJD(3) + t146 * qJD(5) + t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, -t262, 0, -t281, -t367, 0, t262, -t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, t146 * qJD(3) + t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t149, -t269, 0, 0, 0, t245, t246, t278 - t132, t277 + t357, t15 * qJD(2), t3 * qJD(2) + t62 * qJD(4) + t310, -t290 - t132, -t14 * qJD(2), -t289 - t357, -t2 * qJD(2) - t41 * qJD(4) - t328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t336, pkin(2) * t242, t24, t314, t306, t228, t24, -t309, qJD(5) - t314, -t152 * qJD(5) - t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), t187 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, -t262, 0, t276, -t367, 0, t262, -t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, -t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, t365, -t353, t45 * qJD(2) - t62 * qJD(3) - t352, t75, -t353, -t365, t25 * qJD(2) + t41 * qJD(3) - t270 - t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t367, t262, 0, t281, t367, 0, -t262, t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t367, t262, 0, -t276, t367, 0, -t262, t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t247, 0, -t264, t132 + t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197, t152 * qJD(3) - t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197, t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t7;
