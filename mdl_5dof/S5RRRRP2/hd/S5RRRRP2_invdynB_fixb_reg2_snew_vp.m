% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:49
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:49:32
% EndTime: 2022-01-20 11:49:43
% DurationCPUTime: 7.54s
% Computational Cost: add. (37913->484), mult. (49296->682), div. (0->0), fcn. (31846->8), ass. (0->356)
t566 = qJD(1) + qJD(2);
t562 = t566 ^ 2;
t575 = cos(qJ(2));
t564 = qJDD(1) + qJDD(2);
t571 = sin(qJ(2));
t619 = t571 * t564;
t532 = t575 * t562 + t619;
t609 = t575 * t564;
t535 = t571 * t562 - t609;
t572 = sin(qJ(1));
t576 = cos(qJ(1));
t484 = t572 * t532 + t576 * t535;
t513 = pkin(6) * t532 - t575 * g(3);
t659 = pkin(6) * t535 - t571 * g(3);
t664 = pkin(5) * t484 + t572 * t513 + t576 * t659;
t582 = t576 * t532 - t572 * t535;
t663 = pkin(5) * t582 + t576 * t513 - t572 * t659;
t569 = sin(qJ(4));
t573 = cos(qJ(4));
t574 = cos(qJ(3));
t570 = sin(qJ(3));
t631 = t566 * t570;
t516 = -t573 * t574 * t566 + t569 * t631;
t518 = (t569 * t574 + t570 * t573) * t566;
t478 = t518 * t516;
t563 = qJDD(3) + qJDD(4);
t588 = -t563 + t478;
t658 = t588 * pkin(4);
t626 = t569 * t588;
t614 = t573 * t588;
t552 = t576 * g(1) + t572 * g(2);
t578 = qJD(1) ^ 2;
t539 = -t578 * pkin(1) - t552;
t551 = t572 * g(1) - t576 * g(2);
t581 = qJDD(1) * pkin(1) + t551;
t487 = t571 * t539 - t575 * t581;
t488 = t575 * t539 + t571 * t581;
t589 = t571 * t487 + t575 * t488;
t442 = t575 * t487 - t571 * t488;
t608 = t576 * t442;
t660 = -t572 * t589 + t608;
t618 = t572 * t442;
t391 = t576 * t589 + t618;
t606 = qJD(3) * t566;
t596 = t574 * t606;
t620 = t570 * t564;
t525 = t596 + t620;
t555 = t574 * t564;
t597 = t570 * t606;
t583 = -t555 + t597;
t449 = -t516 * qJD(4) + t573 * t525 - t569 * t583;
t565 = qJD(3) + qJD(4);
t506 = t565 * t516;
t655 = -t506 + t449;
t515 = t518 ^ 2;
t561 = t565 ^ 2;
t495 = -t515 - t561;
t469 = t478 + t563;
t627 = t569 * t469;
t431 = t573 * t495 - t627;
t615 = t573 * t469;
t432 = -t569 * t495 - t615;
t380 = t574 * t431 + t570 * t432;
t654 = -pkin(2) * t380 - pkin(3) * t431;
t514 = t516 ^ 2;
t463 = -t561 - t514;
t405 = t569 * t463 - t614;
t406 = t573 * t463 + t626;
t363 = t574 * t405 + t570 * t406;
t653 = -pkin(2) * t363 - pkin(3) * t405;
t587 = t569 * t525 + t573 * t583;
t421 = (qJD(4) - t565) * t518 + t587;
t425 = -t506 - t449;
t375 = -t421 * t569 + t573 * t425;
t377 = -t421 * t573 - t569 * t425;
t330 = -t570 * t375 + t574 * t377;
t452 = -t514 - t515;
t318 = t571 * t330 - t575 * t452;
t319 = t575 * t330 + t571 * t452;
t274 = t576 * t318 + t572 * t319;
t648 = pkin(5) * t274;
t364 = -t570 * t405 + t574 * t406;
t420 = (qJD(4) + t565) * t518 + t587;
t338 = t571 * t364 - t575 * t420;
t339 = t575 * t364 + t571 * t420;
t291 = t576 * t338 + t572 * t339;
t647 = pkin(5) * t291;
t381 = -t570 * t431 + t574 * t432;
t343 = t571 * t381 - t575 * t655;
t344 = t575 * t381 + t571 * t655;
t299 = t576 * t343 + t572 * t344;
t646 = pkin(5) * t299;
t645 = pkin(6) * t318;
t644 = pkin(6) * t338;
t643 = pkin(6) * t343;
t328 = t574 * t375 + t570 * t377;
t642 = pkin(7) * t328;
t641 = pkin(7) * t363;
t640 = pkin(7) * t380;
t639 = pkin(8) * t375;
t638 = pkin(8) * t405;
t637 = pkin(8) * t431;
t634 = t562 * t570;
t633 = t565 * t569;
t632 = t565 * t573;
t567 = t570 ^ 2;
t630 = t567 * t562;
t568 = t574 ^ 2;
t556 = t568 * t562;
t476 = -t562 * pkin(2) + t564 * pkin(7) + t488;
t623 = t570 * t476;
t415 = qJDD(3) * pkin(3) - t525 * pkin(8) - t623 + (pkin(3) * t634 + pkin(8) * t606 - g(3)) * t574;
t461 = -t570 * g(3) + t574 * t476;
t542 = qJD(3) * pkin(3) - pkin(8) * t631;
t416 = -pkin(3) * t556 - pkin(8) * t583 - qJD(3) * t542 + t461;
t371 = -t573 * t415 + t569 * t416;
t598 = t449 * qJ(5) + t371;
t580 = -qJ(5) * t506 - t598;
t605 = qJD(5) * t518;
t332 = t580 - 0.2e1 * t605 - t658;
t629 = t569 * t332;
t475 = -t564 * pkin(2) - t562 * pkin(7) + t487;
t419 = t583 * pkin(3) - pkin(8) * t556 + t542 * t631 + t475;
t628 = t569 * t419;
t372 = t569 * t415 + t573 * t416;
t324 = -t573 * t371 + t569 * t372;
t625 = t570 * t324;
t624 = t570 * t475;
t550 = t574 * t634;
t540 = qJDD(3) + t550;
t622 = t570 * t540;
t541 = qJDD(3) - t550;
t621 = t570 * t541;
t617 = t573 * t332;
t616 = t573 * t419;
t613 = t574 * t324;
t612 = t574 * t475;
t526 = t555 - 0.2e1 * t597;
t611 = t574 * t526;
t610 = t574 * t541;
t607 = t567 + t568;
t603 = t571 * t478;
t602 = t575 * t478;
t601 = pkin(1) * t318 - pkin(2) * t452 + pkin(7) * t330;
t600 = pkin(1) * t338 - pkin(2) * t420 + pkin(7) * t364;
t599 = pkin(1) * t343 - pkin(2) * t655 + pkin(7) * t381;
t595 = -pkin(1) * t328 + pkin(6) * t319;
t594 = -pkin(1) * t363 + pkin(6) * t339;
t593 = -pkin(1) * t380 + pkin(6) * t344;
t592 = -pkin(3) * t452 + pkin(8) * t377;
t591 = -pkin(3) * t420 + pkin(8) * t406;
t590 = -pkin(3) * t655 + pkin(8) * t432;
t325 = t569 * t371 + t573 * t372;
t460 = t574 * g(3) + t623;
t403 = t570 * t460 + t574 * t461;
t502 = -t572 * t551 - t576 * t552;
t586 = t571 * t550;
t585 = t575 * t550;
t297 = -pkin(2) * t328 - pkin(3) * t375;
t544 = t576 * qJDD(1) - t572 * t578;
t584 = -pkin(5) * t544 - t572 * g(3);
t402 = t574 * t460 - t570 * t461;
t501 = t576 * t551 - t572 * t552;
t448 = -t518 * qJD(4) - t587;
t498 = t565 * pkin(4) - t518 * qJ(5);
t579 = t448 * qJ(5) - 0.2e1 * qJD(5) * t516 - t565 * t498 + t372;
t359 = -t448 * pkin(4) - t514 * qJ(5) + t518 * t498 + qJDD(5) + t419;
t577 = qJD(3) ^ 2;
t548 = -t556 - t577;
t547 = t556 - t577;
t546 = -t577 - t630;
t545 = t577 - t630;
t543 = t572 * qJDD(1) + t576 * t578;
t537 = t556 - t630;
t536 = t556 + t630;
t531 = t574 * t540;
t530 = t607 * t564;
t524 = 0.2e1 * t596 + t620;
t523 = -pkin(5) * t543 + t576 * g(3);
t522 = t607 * t606;
t508 = 0.2e1 * t605;
t504 = -t515 + t561;
t503 = t514 - t561;
t500 = t571 * qJDD(3) + t575 * t522;
t499 = -t575 * qJDD(3) + t571 * t522;
t497 = t574 * t525 - t567 * t606;
t496 = -t568 * t606 + t570 * t583;
t494 = -t570 * t546 - t610;
t493 = -t570 * t545 + t531;
t492 = t574 * t548 - t622;
t491 = t574 * t547 - t621;
t490 = t574 * t546 - t621;
t489 = t570 * t548 + t531;
t483 = t575 * t530 - t571 * t536;
t480 = t571 * t530 + t575 * t536;
t479 = -t570 * t524 + t611;
t477 = -t515 + t514;
t474 = t575 * t493 + t570 * t619;
t473 = t575 * t491 + t555 * t571;
t472 = t571 * t493 - t570 * t609;
t471 = t571 * t491 - t574 * t609;
t467 = t575 * t497 - t586;
t466 = t575 * t496 + t586;
t465 = t571 * t497 + t585;
t464 = t571 * t496 - t585;
t459 = t575 * t494 + t571 * t524;
t458 = t575 * t492 - t571 * t526;
t457 = t571 * t494 - t575 * t524;
t456 = t571 * t492 + t575 * t526;
t455 = (-t516 * t573 + t518 * t569) * t565;
t454 = (-t516 * t569 - t518 * t573) * t565;
t451 = t575 * t479 - t571 * t537;
t450 = t571 * t479 + t575 * t537;
t439 = pkin(1) * g(3) + pkin(6) * t589;
t438 = t573 * t503 - t627;
t437 = -t569 * t504 - t614;
t436 = t569 * t503 + t615;
t435 = t573 * t504 - t626;
t434 = -pkin(7) * t490 + t612;
t433 = -pkin(7) * t489 + t624;
t430 = -pkin(2) * t490 + t461;
t429 = -pkin(2) * t489 + t460;
t428 = -t572 * t480 + t576 * t483;
t427 = t576 * t480 + t572 * t483;
t414 = t573 * t449 - t518 * t633;
t413 = t569 * t449 + t518 * t632;
t412 = -t569 * t448 + t516 * t632;
t411 = t573 * t448 + t516 * t633;
t400 = -t572 * t457 + t576 * t459;
t399 = -t572 * t456 + t576 * t458;
t398 = t576 * t457 + t572 * t459;
t397 = t576 * t456 + t572 * t458;
t396 = -t570 * t454 + t574 * t455;
t395 = t574 * t454 + t570 * t455;
t394 = t575 * t396 + t571 * t563;
t393 = t571 * t396 - t575 * t563;
t392 = -pkin(4) * t655 - qJ(5) * t469;
t389 = -pkin(6) * t480 + t575 * t402;
t388 = pkin(6) * t483 + t571 * t402;
t387 = t575 * t403 + t571 * t475;
t386 = t571 * t403 - t575 * t475;
t385 = -t570 * t436 + t574 * t438;
t384 = -t570 * t435 + t574 * t437;
t383 = t574 * t436 + t570 * t438;
t382 = t574 * t435 + t570 * t437;
t378 = t616 - t637;
t376 = -t573 * t420 - t569 * t655;
t374 = -t569 * t420 + t573 * t655;
t370 = t628 - t638;
t368 = -t570 * t413 + t574 * t414;
t367 = -t570 * t411 + t574 * t412;
t366 = t574 * t413 + t570 * t414;
t365 = t574 * t411 + t570 * t412;
t361 = -pkin(6) * t457 - t571 * t430 + t575 * t434;
t360 = -pkin(6) * t456 - t571 * t429 + t575 * t433;
t358 = t575 * t368 + t603;
t357 = t575 * t367 - t603;
t356 = t571 * t368 - t602;
t355 = t571 * t367 + t602;
t354 = -pkin(1) * t490 + pkin(6) * t459 + t575 * t430 + t571 * t434;
t353 = -pkin(1) * t489 + pkin(6) * t458 + t575 * t429 + t571 * t433;
t352 = -qJ(5) * t495 + t359;
t351 = t575 * t385 - t571 * t421;
t350 = t575 * t384 - t571 * t425;
t349 = t571 * t385 + t575 * t421;
t348 = t571 * t384 + t575 * t425;
t347 = t590 + t628;
t346 = -t572 * t393 + t576 * t394;
t345 = t576 * t393 + t572 * t394;
t340 = t591 - t616;
t335 = -t572 * t386 + t576 * t387;
t334 = t576 * t386 + t572 * t387;
t333 = -t514 * pkin(4) + t579;
t331 = -pkin(4) * t420 + qJ(5) * t463 - t359;
t329 = -t570 * t374 + t574 * t376;
t327 = t574 * t374 + t570 * t376;
t323 = -pkin(6) * t386 - (pkin(2) * t571 - pkin(7) * t575) * t402;
t322 = t575 * t329 - t571 * t477;
t321 = t571 * t329 + t575 * t477;
t320 = t508 + (-t425 + t506) * qJ(5) + t658 + t598;
t315 = t372 + t654;
t314 = -pkin(3) * t419 + pkin(8) * t325;
t313 = t573 * t352 - t569 * t392 - t637;
t312 = -qJ(5) * t421 + (-t452 - t514) * pkin(4) + t579;
t311 = -t572 * t356 + t576 * t358;
t310 = -t572 * t355 + t576 * t357;
t309 = t576 * t356 + t572 * t358;
t308 = t576 * t355 + t572 * t357;
t307 = t371 + t653;
t306 = pkin(6) * t387 - (-pkin(2) * t575 - pkin(7) * t571 - pkin(1)) * t402;
t305 = qJ(5) * t614 - t569 * t331 - t638;
t304 = -t572 * t349 + t576 * t351;
t303 = -t572 * t348 + t576 * t350;
t302 = t576 * t349 + t572 * t351;
t301 = t576 * t348 + t572 * t350;
t300 = -t572 * t343 + t576 * t344;
t298 = pkin(5) * t300;
t296 = -pkin(4) * t359 + qJ(5) * t333;
t295 = t569 * t352 + t573 * t392 + t590;
t294 = -t324 - t639;
t293 = qJ(5) * t626 + t573 * t331 + t591;
t292 = -t572 * t338 + t576 * t339;
t290 = pkin(5) * t292;
t289 = -t570 * t347 + t574 * t378 - t640;
t288 = (-t495 - t514) * pkin(4) + t579 + t654;
t287 = t325 + t592;
t286 = -pkin(4) * t425 + t297;
t285 = -t570 * t340 + t574 * t370 - t641;
t284 = t573 * t333 - t629;
t283 = t569 * t333 + t617;
t282 = t508 - t580 + t653 + 0.2e1 * t658;
t281 = t574 * t325 - t625;
t280 = t570 * t325 + t613;
t279 = -t572 * t321 + t576 * t322;
t278 = t576 * t321 + t572 * t322;
t277 = t575 * t281 + t571 * t419;
t276 = t571 * t281 - t575 * t419;
t275 = -t572 * t318 + t576 * t319;
t273 = pkin(5) * t275;
t272 = -t569 * t312 + t573 * t320 - t639;
t271 = t573 * t312 + t569 * t320 + t592;
t270 = -pkin(2) * t280 - pkin(3) * t324;
t269 = -t570 * t295 + t574 * t313 - t640;
t268 = -t570 * t293 + t574 * t305 - t641;
t267 = t575 * t289 - t571 * t315 - t643;
t266 = -t570 * t283 + t574 * t284;
t265 = t574 * t283 + t570 * t284;
t264 = t575 * t285 - t571 * t307 - t644;
t263 = t571 * t289 + t575 * t315 + t593;
t262 = -t570 * t287 + t574 * t294 - t642;
t261 = -pkin(8) * t283 - qJ(5) * t617 - t569 * t296;
t260 = t575 * t266 + t571 * t359;
t259 = t571 * t266 - t575 * t359;
t258 = -pkin(7) * t280 - pkin(8) * t613 - t570 * t314;
t257 = t571 * t285 + t575 * t307 + t594;
t256 = -t572 * t276 + t576 * t277;
t255 = t576 * t276 + t572 * t277;
t254 = -pkin(3) * t359 + pkin(8) * t284 - qJ(5) * t629 + t573 * t296;
t253 = t575 * t269 - t571 * t288 - t643;
t252 = t571 * t269 + t575 * t288 + t593;
t251 = t575 * t268 - t571 * t282 - t644;
t250 = -pkin(2) * t265 - pkin(3) * t283 - pkin(4) * t332;
t249 = t571 * t268 + t575 * t282 + t594;
t248 = t575 * t262 - t571 * t297 - t645;
t247 = -t570 * t271 + t574 * t272 - t642;
t246 = t571 * t262 + t575 * t297 + t595;
t245 = -t572 * t259 + t576 * t260;
t244 = t576 * t259 + t572 * t260;
t243 = -pkin(6) * t276 + t575 * t258 - t571 * t270;
t242 = t575 * t247 - t571 * t286 - t645;
t241 = t571 * t247 + t575 * t286 + t595;
t240 = -pkin(1) * t280 + pkin(6) * t277 + t571 * t258 + t575 * t270;
t239 = -pkin(7) * t265 - t570 * t254 + t574 * t261;
t238 = -pkin(6) * t259 + t575 * t239 - t571 * t250;
t237 = -pkin(1) * t265 + pkin(6) * t260 + t571 * t239 + t575 * t250;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t543, -t544, 0, t502, 0, 0, 0, 0, 0, 0, -t582, t484, 0, t391, 0, 0, 0, 0, 0, 0, t399, t400, t428, t335, 0, 0, 0, 0, 0, 0, t292, t300, t275, t256, 0, 0, 0, 0, 0, 0, t292, t300, t275, t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t544, -t543, 0, t501, 0, 0, 0, 0, 0, 0, -t484, -t582, 0, -t660, 0, 0, 0, 0, 0, 0, t397, t398, t427, t334, 0, 0, 0, 0, 0, 0, t291, t299, t274, t255, 0, 0, 0, 0, 0, 0, t291, t299, t274, t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t489, t490, 0, -t402, 0, 0, 0, 0, 0, 0, t363, t380, t328, t280, 0, 0, 0, 0, 0, 0, t363, t380, t328, t265; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t544, 0, -t543, 0, t584, -t523, -t501, -pkin(5) * t501, 0, 0, -t484, 0, -t582, 0, t664, t663, t660, pkin(5) * t660 + pkin(6) * t608 - t572 * t439, -t572 * t465 + t576 * t467, -t572 * t450 + t576 * t451, -t572 * t472 + t576 * t474, -t572 * t464 + t576 * t466, -t572 * t471 + t576 * t473, -t572 * t499 + t576 * t500, -pkin(5) * t397 - t572 * t353 + t576 * t360, -pkin(5) * t398 - t572 * t354 + t576 * t361, -pkin(5) * t427 - t572 * t388 + t576 * t389, -pkin(5) * t334 - t572 * t306 + t576 * t323, t311, t279, t303, t310, t304, t346, -t572 * t257 + t576 * t264 - t647, -t572 * t263 + t576 * t267 - t646, -t572 * t246 + t576 * t248 - t648, -pkin(5) * t255 - t572 * t240 + t576 * t243, t311, t279, t303, t310, t304, t346, -t572 * t249 + t576 * t251 - t647, -t572 * t252 + t576 * t253 - t646, -t572 * t241 + t576 * t242 - t648, -pkin(5) * t244 - t572 * t237 + t576 * t238; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t543, 0, t544, 0, t523, t584, t502, pkin(5) * t502, 0, 0, t582, 0, -t484, 0, -t663, t664, t391, pkin(5) * t391 + pkin(6) * t618 + t576 * t439, t576 * t465 + t572 * t467, t576 * t450 + t572 * t451, t576 * t472 + t572 * t474, t576 * t464 + t572 * t466, t576 * t471 + t572 * t473, t576 * t499 + t572 * t500, pkin(5) * t399 + t576 * t353 + t572 * t360, pkin(5) * t400 + t576 * t354 + t572 * t361, pkin(5) * t428 + t576 * t388 + t572 * t389, pkin(5) * t335 + t576 * t306 + t572 * t323, t309, t278, t301, t308, t302, t345, t576 * t257 + t572 * t264 + t290, t576 * t263 + t572 * t267 + t298, t576 * t246 + t572 * t248 + t273, pkin(5) * t256 + t576 * t240 + t572 * t243, t309, t278, t301, t308, t302, t345, t576 * t249 + t572 * t251 + t290, t576 * t252 + t572 * t253 + t298, t576 * t241 + t572 * t242 + t273, pkin(5) * t245 + t576 * t237 + t572 * t238; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t551, t552, 0, 0, 0, 0, 0, 0, 0, t564, -pkin(1) * t535 - t487, -pkin(1) * t532 - t488, 0, -pkin(1) * t442, (t525 + t596) * t570, t574 * t524 + t570 * t526, t574 * t545 + t622, t611, t570 * t547 + t610, 0, pkin(1) * t456 + pkin(2) * t526 + pkin(7) * t492 - t612, pkin(1) * t457 - pkin(2) * t524 + pkin(7) * t494 + t624, pkin(1) * t480 + pkin(2) * t536 + pkin(7) * t530 + t403, pkin(1) * t386 - pkin(2) * t475 + pkin(7) * t403, t366, t327, t382, t365, t383, t395, t574 * t340 + t570 * t370 + t600, t574 * t347 + t570 * t378 + t599, t574 * t287 + t570 * t294 + t601, pkin(1) * t276 - pkin(2) * t419 + pkin(7) * t281 - pkin(8) * t625 + t574 * t314, t366, t327, t382, t365, t383, t395, t574 * t293 + t570 * t305 + t600, t574 * t295 + t570 * t313 + t599, t574 * t271 + t570 * t272 + t601, pkin(1) * t259 - pkin(2) * t359 + pkin(7) * t266 + t574 * t254 + t570 * t261;];
tauB_reg = t1;
