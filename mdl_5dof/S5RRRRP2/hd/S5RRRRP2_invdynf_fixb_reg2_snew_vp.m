% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:49
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:49:55
% EndTime: 2022-01-20 11:49:57
% DurationCPUTime: 2.40s
% Computational Cost: add. (10372->171), mult. (13463->234), div. (0->0), fcn. (8785->8), ass. (0->138)
t1274 = qJD(1) + qJD(2);
t1271 = t1274 ^ 2;
t1272 = qJDD(1) + qJDD(2);
t1278 = sin(qJ(2));
t1282 = cos(qJ(2));
t1252 = t1278 * t1271 - t1282 * t1272;
t1279 = sin(qJ(1));
t1283 = cos(qJ(1));
t1290 = -t1282 * t1271 - t1278 * t1272;
t1314 = t1279 * t1252 + t1283 * t1290;
t1313 = t1283 * t1252 - t1279 * t1290;
t1273 = qJD(3) + qJD(4);
t1310 = qJD(4) + t1273;
t1276 = sin(qJ(4));
t1280 = cos(qJ(4));
t1281 = cos(qJ(3));
t1301 = t1274 * t1281;
t1277 = sin(qJ(3));
t1302 = t1274 * t1277;
t1238 = t1276 * t1302 - t1280 * t1301;
t1309 = t1238 ^ 2;
t1240 = (t1276 * t1281 + t1277 * t1280) * t1274;
t1308 = t1240 ^ 2;
t1307 = t1273 ^ 2;
t1306 = t1281 ^ 2;
t1305 = -2 * qJD(5);
t1304 = t1240 * t1238;
t1303 = t1271 * t1277;
t1266 = -t1283 * g(1) - t1279 * g(2);
t1285 = qJD(1) ^ 2;
t1255 = -t1285 * pkin(1) + t1266;
t1265 = t1279 * g(1) - t1283 * g(2);
t1287 = qJDD(1) * pkin(1) + t1265;
t1229 = t1282 * t1255 + t1278 * t1287;
t1225 = -t1271 * pkin(2) + t1272 * pkin(7) + t1229;
t1300 = t1277 * t1225;
t1299 = t1277 * t1272;
t1298 = t1281 * t1272;
t1297 = t1306 * t1271;
t1296 = qJD(4) - t1273;
t1292 = qJD(3) * t1301;
t1244 = t1292 + t1299;
t1201 = qJDD(3) * pkin(3) - t1244 * pkin(8) - t1300 + (qJD(3) * t1274 * pkin(8) + pkin(3) * t1303 - g(3)) * t1281;
t1219 = -t1277 * g(3) + t1281 * t1225;
t1258 = qJD(3) * pkin(3) - pkin(8) * t1302;
t1293 = qJD(3) * t1302;
t1289 = -t1293 + t1298;
t1202 = -pkin(3) * t1297 + t1289 * pkin(8) - qJD(3) * t1258 + t1219;
t1187 = t1276 * t1201 + t1280 * t1202;
t1295 = -qJDD(3) - qJDD(4);
t1275 = t1277 ^ 2;
t1294 = t1275 + t1306;
t1186 = t1280 * t1201 - t1276 * t1202;
t1291 = t1276 * t1244 - t1280 * t1289;
t1228 = -t1278 * t1255 + t1282 * t1287;
t1222 = -t1295 - t1304;
t1224 = -t1272 * pkin(2) - t1271 * pkin(7) - t1228;
t1288 = -t1240 * qJD(4) - t1291;
t1286 = -t1280 * t1244 - t1276 * t1289;
t1203 = -t1289 * pkin(3) - pkin(8) * t1297 + t1258 * t1302 + t1224;
t1207 = t1296 * t1238 + t1286;
t1284 = qJD(3) ^ 2;
t1264 = t1281 * t1303;
t1262 = -t1284 - t1297;
t1261 = -t1275 * t1271 - t1284;
t1260 = -t1279 * qJDD(1) - t1283 * t1285;
t1259 = t1283 * qJDD(1) - t1279 * t1285;
t1257 = -qJDD(3) + t1264;
t1256 = qJDD(3) + t1264;
t1254 = t1294 * t1271;
t1249 = t1294 * t1272;
t1245 = -0.2e1 * t1293 + t1298;
t1243 = 0.2e1 * t1292 + t1299;
t1235 = t1273 * pkin(4) - t1240 * qJ(5);
t1234 = -t1307 - t1308;
t1233 = t1281 * t1257 - t1277 * t1261;
t1232 = -t1277 * t1256 + t1281 * t1262;
t1231 = t1277 * t1257 + t1281 * t1261;
t1230 = t1281 * t1256 + t1277 * t1262;
t1227 = t1282 * t1249 - t1278 * t1254;
t1226 = t1278 * t1249 + t1282 * t1254;
t1223 = t1295 - t1304;
t1221 = -t1307 - t1309;
t1218 = -t1281 * g(3) - t1300;
t1217 = t1282 * t1233 + t1278 * t1243;
t1216 = t1282 * t1232 - t1278 * t1245;
t1215 = t1278 * t1233 - t1282 * t1243;
t1214 = t1278 * t1232 + t1282 * t1245;
t1213 = -t1308 - t1309;
t1211 = -t1278 * t1228 + t1282 * t1229;
t1210 = t1282 * t1228 + t1278 * t1229;
t1209 = t1280 * t1223 - t1276 * t1234;
t1208 = t1276 * t1223 + t1280 * t1234;
t1206 = -t1310 * t1238 - t1286;
t1205 = -t1296 * t1240 - t1291;
t1204 = t1310 * t1240 + t1291;
t1197 = t1280 * t1221 - t1276 * t1222;
t1196 = t1276 * t1221 + t1280 * t1222;
t1195 = -t1277 * t1218 + t1281 * t1219;
t1194 = t1281 * t1218 + t1277 * t1219;
t1193 = t1282 * t1195 + t1278 * t1224;
t1192 = t1278 * t1195 - t1282 * t1224;
t1191 = -t1277 * t1208 + t1281 * t1209;
t1190 = t1281 * t1208 + t1277 * t1209;
t1189 = t1280 * t1205 - t1276 * t1207;
t1188 = t1276 * t1205 + t1280 * t1207;
t1185 = -t1277 * t1196 + t1281 * t1197;
t1184 = t1281 * t1196 + t1277 * t1197;
t1183 = -t1288 * pkin(4) - t1309 * qJ(5) + t1240 * t1235 + qJDD(5) + t1203;
t1182 = t1282 * t1191 + t1278 * t1206;
t1181 = t1278 * t1191 - t1282 * t1206;
t1180 = t1282 * t1185 + t1278 * t1204;
t1179 = t1278 * t1185 - t1282 * t1204;
t1178 = -t1273 * t1235 + t1288 * qJ(5) + (-pkin(4) * t1238 + t1305) * t1238 + t1187;
t1177 = t1222 * pkin(4) + t1207 * qJ(5) + t1240 * t1305 + t1186;
t1176 = -t1277 * t1188 + t1281 * t1189;
t1175 = t1281 * t1188 + t1277 * t1189;
t1174 = -t1276 * t1186 + t1280 * t1187;
t1173 = t1280 * t1186 + t1276 * t1187;
t1172 = t1282 * t1176 + t1278 * t1213;
t1171 = t1278 * t1176 - t1282 * t1213;
t1170 = -t1279 * t1181 + t1283 * t1182;
t1169 = t1283 * t1181 + t1279 * t1182;
t1168 = -t1279 * t1179 + t1283 * t1180;
t1167 = t1283 * t1179 + t1279 * t1180;
t1166 = -t1276 * t1177 + t1280 * t1178;
t1165 = t1280 * t1177 + t1276 * t1178;
t1164 = -t1277 * t1173 + t1281 * t1174;
t1163 = t1281 * t1173 + t1277 * t1174;
t1162 = t1282 * t1164 + t1278 * t1203;
t1161 = t1278 * t1164 - t1282 * t1203;
t1160 = -t1279 * t1171 + t1283 * t1172;
t1159 = t1283 * t1171 + t1279 * t1172;
t1158 = -t1277 * t1165 + t1281 * t1166;
t1157 = t1281 * t1165 + t1277 * t1166;
t1156 = t1282 * t1158 + t1278 * t1183;
t1155 = t1278 * t1158 - t1282 * t1183;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1260, -t1259, 0, -t1279 * t1265 + t1283 * t1266, 0, 0, 0, 0, 0, 0, t1314, t1313, 0, -t1279 * t1210 + t1283 * t1211, 0, 0, 0, 0, 0, 0, -t1279 * t1214 + t1283 * t1216, -t1279 * t1215 + t1283 * t1217, -t1279 * t1226 + t1283 * t1227, -t1279 * t1192 + t1283 * t1193, 0, 0, 0, 0, 0, 0, t1168, t1170, t1160, -t1279 * t1161 + t1283 * t1162, 0, 0, 0, 0, 0, 0, t1168, t1170, t1160, -t1279 * t1155 + t1283 * t1156; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1259, t1260, 0, t1283 * t1265 + t1279 * t1266, 0, 0, 0, 0, 0, 0, -t1313, t1314, 0, t1283 * t1210 + t1279 * t1211, 0, 0, 0, 0, 0, 0, t1283 * t1214 + t1279 * t1216, t1283 * t1215 + t1279 * t1217, t1283 * t1226 + t1279 * t1227, t1283 * t1192 + t1279 * t1193, 0, 0, 0, 0, 0, 0, t1167, t1169, t1159, t1283 * t1161 + t1279 * t1162, 0, 0, 0, 0, 0, 0, t1167, t1169, t1159, t1283 * t1155 + t1279 * t1156; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1230, t1231, 0, t1194, 0, 0, 0, 0, 0, 0, t1184, t1190, t1175, t1163, 0, 0, 0, 0, 0, 0, t1184, t1190, t1175, t1157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1285, -qJDD(1), 0, t1266, 0, 0, 0, 0, 0, 0, t1290, t1252, 0, t1211, 0, 0, 0, 0, 0, 0, t1216, t1217, t1227, t1193, 0, 0, 0, 0, 0, 0, t1180, t1182, t1172, t1162, 0, 0, 0, 0, 0, 0, t1180, t1182, t1172, t1156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1285, 0, t1265, 0, 0, 0, 0, 0, 0, -t1252, t1290, 0, t1210, 0, 0, 0, 0, 0, 0, t1214, t1215, t1226, t1192, 0, 0, 0, 0, 0, 0, t1179, t1181, t1171, t1161, 0, 0, 0, 0, 0, 0, t1179, t1181, t1171, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1230, t1231, 0, t1194, 0, 0, 0, 0, 0, 0, t1184, t1190, t1175, t1163, 0, 0, 0, 0, 0, 0, t1184, t1190, t1175, t1157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1271, -t1272, 0, t1229, 0, 0, 0, 0, 0, 0, t1232, t1233, t1249, t1195, 0, 0, 0, 0, 0, 0, t1185, t1191, t1176, t1164, 0, 0, 0, 0, 0, 0, t1185, t1191, t1176, t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1272, -t1271, 0, t1228, 0, 0, 0, 0, 0, 0, t1245, -t1243, t1254, -t1224, 0, 0, 0, 0, 0, 0, -t1204, -t1206, -t1213, -t1203, 0, 0, 0, 0, 0, 0, -t1204, -t1206, -t1213, -t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1230, t1231, 0, t1194, 0, 0, 0, 0, 0, 0, t1184, t1190, t1175, t1163, 0, 0, 0, 0, 0, 0, t1184, t1190, t1175, t1157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1262, t1257, t1298, t1219, 0, 0, 0, 0, 0, 0, t1197, t1209, t1189, t1174, 0, 0, 0, 0, 0, 0, t1197, t1209, t1189, t1166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, t1261, -t1299, t1218, 0, 0, 0, 0, 0, 0, t1196, t1208, t1188, t1173, 0, 0, 0, 0, 0, 0, t1196, t1208, t1188, t1165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1245, t1243, -t1254, t1224, 0, 0, 0, 0, 0, 0, t1204, t1206, t1213, t1203, 0, 0, 0, 0, 0, 0, t1204, t1206, t1213, t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1221, t1223, t1205, t1187, 0, 0, 0, 0, 0, 0, t1221, t1223, t1205, t1178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1222, t1234, t1207, t1186, 0, 0, 0, 0, 0, 0, t1222, t1234, t1207, t1177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, t1206, t1213, t1203, 0, 0, 0, 0, 0, 0, t1204, t1206, t1213, t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1221, t1223, t1205, t1178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1222, t1234, t1207, t1177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, t1206, t1213, t1183;];
f_new_reg = t1;
