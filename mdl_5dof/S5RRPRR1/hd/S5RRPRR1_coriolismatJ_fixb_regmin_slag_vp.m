% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4,d5]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x28]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-15 21:13
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-15 21:13:24
% EndTime: 2021-01-15 21:13:31
% DurationCPUTime: 2.21s
% Computational Cost: add. (1773->201), mult. (3938->297), div. (0->0), fcn. (3970->6), ass. (0->186)
t212 = qJD(2) + qJD(4);
t164 = pkin(1) + pkin(2);
t161 = sin(qJ(2));
t163 = cos(qJ(2));
t262 = sin(qJ(4));
t263 = cos(qJ(4));
t132 = t262 * t161 - t263 * t163;
t151 = t262 * t163;
t152 = t263 * t161;
t134 = -t152 - t151;
t271 = t212 * t134;
t180 = t132 * t271;
t162 = cos(qJ(5));
t143 = t164 * t163;
t261 = t134 * pkin(4);
t176 = -t143 + t261;
t160 = sin(qJ(5));
t260 = pkin(3) + qJ(3);
t138 = t260 * t161;
t139 = t260 * t163;
t171 = -t262 * t138 + t263 * t139;
t273 = t171 * t160;
t26 = -t162 * t176 + t273;
t278 = (t26 - t273) * t134;
t272 = t171 * t162;
t27 = t160 * t176 + t272;
t277 = (t27 - t272) * t134;
t182 = t263 * t138 + t262 * t139;
t276 = t212 * t182;
t275 = t212 * t171;
t274 = 0.2e1 * t134;
t77 = t212 * t132;
t129 = t132 ^ 2;
t130 = t134 ^ 2;
t270 = -t130 - t129;
t211 = t130 - t129;
t204 = t262 * t164;
t144 = t204 + pkin(4);
t264 = t144 / 0.2e1;
t177 = t264 - t204 / 0.2e1;
t269 = t134 * t177 + t261 / 0.2e1;
t242 = t160 * t162;
t158 = t162 ^ 2;
t266 = t160 ^ 2;
t56 = (-t266 / 0.2e1 + t158 / 0.2e1) * t134;
t267 = t130 * qJD(1) * t242 + t212 * t56;
t220 = t134 * qJD(1);
t114 = t162 * t220;
t210 = -t158 + t266;
t45 = -0.2e1 * t160 * t114 + t210 * t212;
t265 = t182 / 0.2e1;
t142 = t164 * t161;
t93 = t132 * pkin(4) + t142;
t254 = t162 * t93;
t1 = t254 * t132 + t278;
t258 = t1 * qJD(1);
t256 = t160 * t93;
t2 = -t256 * t132 + t277;
t253 = t2 * qJD(1);
t3 = pkin(4) * t162 * t129 + t278;
t252 = t3 * qJD(1);
t57 = t160 * t132;
t115 = pkin(4) * t57;
t4 = -t115 * t132 + t277;
t251 = t4 * qJD(1);
t168 = t134 * (-pkin(4) / 0.2e1 + t177);
t5 = t160 * t168;
t250 = t5 * qJD(1);
t205 = t164 * t263;
t169 = t132 * t264 - t134 * t205 / 0.2e1;
t166 = t93 / 0.2e1 + t169;
t7 = t166 * t160;
t249 = t7 * qJD(1);
t20 = t182 * t160;
t25 = t182 * t162;
t9 = t166 * t162;
t246 = t9 * qJD(1);
t12 = t162 * t168;
t245 = t12 * qJD(1);
t244 = t134 * t162;
t59 = t160 * t134;
t16 = t26 * t132 + t182 * t59;
t243 = t16 * qJD(1);
t62 = t162 * t132;
t17 = -t27 * t132 - t182 * t244;
t241 = t17 * qJD(1);
t19 = pkin(4) * t62;
t240 = t19 * qJD(1);
t239 = t115 * qJD(1);
t31 = t142 * t132 + t143 * t134;
t238 = t31 * qJD(1);
t32 = t143 * t132 - t142 * t134;
t237 = t32 * qJD(1);
t33 = t211 * t160;
t236 = t33 * qJD(1);
t34 = t270 * t160;
t235 = t34 * qJD(1);
t35 = t211 * t162;
t234 = t35 * qJD(1);
t233 = t211 * qJD(1);
t232 = t56 * qJD(1);
t231 = t57 * qJD(1);
t230 = t59 * qJD(1);
t55 = t62 * qJD(1);
t65 = t210 * t130;
t229 = t65 * qJD(1);
t66 = t270 * t162;
t228 = t66 * qJD(1);
t227 = t212 * t244;
t157 = t161 ^ 2;
t159 = t163 ^ 2;
t147 = t159 - t157;
t146 = t159 + t157;
t226 = qJ(3) * qJD(2);
t225 = qJD(4) * t143;
t224 = qJD(5) * t160;
t223 = qJD(5) * t162;
t128 = t152 / 0.2e1 + t151 / 0.2e1;
t222 = t128 * qJD(1);
t221 = t132 * qJD(1);
t118 = t132 * qJD(3);
t121 = t134 * qJD(3);
t136 = t146 * qJ(3);
t219 = t136 * qJD(1);
t141 = t147 * pkin(1);
t218 = t141 * qJD(1);
t217 = t146 * qJD(1);
t216 = t147 * qJD(1);
t215 = t161 * qJD(1);
t214 = t161 * qJD(2);
t213 = t163 * qJD(1);
t154 = t163 * qJD(2);
t209 = pkin(1) * t215;
t203 = t132 * t223;
t83 = t132 * t220;
t202 = t143 * t221;
t201 = t143 * t220;
t150 = t160 * t223;
t200 = t161 * t154;
t199 = t161 * t213;
t198 = t162 * t121;
t197 = qJD(5) * t263;
t196 = t263 * qJD(2);
t195 = t263 * qJD(4);
t194 = t262 * qJD(2);
t193 = t262 * qJD(4);
t191 = t212 * t160;
t190 = qJD(5) + t221;
t187 = t164 * t193;
t186 = t160 * t197;
t185 = t162 * t197;
t184 = t164 * t196;
t183 = t164 * t194;
t181 = t162 * t191;
t179 = t212 * t242;
t178 = t134 * t190;
t175 = t162 * t178;
t37 = -t128 * qJD(5) + t83;
t174 = t132 * t205 + t134 * t144;
t172 = t181 * t274;
t170 = -t194 - t193;
t167 = (-t196 - t195) * t164;
t165 = pkin(1) ^ 2;
t140 = t210 * qJD(5);
t137 = t160 * t187;
t63 = t212 * t128;
t53 = t59 * qJD(3);
t48 = t57 * qJD(5);
t47 = t56 * qJD(5);
t41 = t223 + t55;
t40 = -t224 - t231;
t30 = t179 - t232;
t29 = -t181 + t232;
t28 = 0.2e1 * t160 * t175;
t24 = -t158 * t83 - t47;
t22 = t62 * qJD(5) - t234;
t21 = -t48 + t236;
t18 = -t47 + (t158 * t220 - t181) * t132;
t15 = -t134 * t191 + t234;
t14 = -t227 - t236;
t13 = t210 * t77 + (qJD(5) - t221) * t242 * t274;
t11 = t269 * t162 + t273;
t10 = t20 / 0.2e1 + t160 * t265 + t254 / 0.2e1 - t169 * t162;
t8 = t25 / 0.2e1 + t162 * t265 - t256 / 0.2e1 + t169 * t160;
t6 = t269 * t160 - t272;
t23 = [0, 0, 0, t200, t147 * qJD(2), 0, 0, 0, 0, 0, -0.2e1 * pkin(1) * t200, -t141 * qJD(2), t146 * qJD(3), t136 * qJD(3) - t165 * t200, t180, -t212 * t211, 0, 0, 0, t31 * qJD(2) + t134 * t225, t32 * qJD(2) + t132 * t225, -t130 * t150 + t158 * t180, t65 * qJD(5) - t132 * t172, t134 * t132 * t224 + t212 * t35, t134 * t203 - t212 * t33, -t180, t1 * qJD(2) - t34 * qJD(3) + t3 * qJD(4) + t17 * qJD(5), t2 * qJD(2) - t66 * qJD(3) + t4 * qJD(4) + t16 * qJD(5); 0, 0, 0, t199, t216, t154, -t214, 0, 0, 0, (-0.2e1 * t209 - t226) * t163, qJ(3) * t214 - t218, -pkin(1) * t154, (-pkin(1) * t226 - t165 * t215) * t163, t83, -t233, -t77, t271, 0, t238 - t275, t237 + t276, t18, t13, t15, t14, -t37, t258 + (t160 * t174 - t272) * qJD(2) + t6 * qJD(4) + t10 * qJD(5), t253 + (t162 * t174 + t273) * qJD(2) + t11 * qJD(4) + t8 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t217, t219, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t235, -t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, -t233, -t77, t271, 0, t201 - t275, t202 + t276, t18, t13, t15, t14, -t37, t252 + t6 * qJD(2) + (pkin(4) * t59 - t272) * qJD(4) + t20 * qJD(5), t251 + t11 * qJD(2) + (pkin(4) * t244 + t273) * qJD(4) + t25 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t267, t179 * t274 + t229, t160 * t178, t175, t63, t10 * qJD(2) + t20 * qJD(4) - t27 * qJD(5) + t241, t8 * qJD(2) + t25 * qJD(4) + t26 * qJD(5) + t243; 0, 0, 0, -t199, -t216, 0, 0, 0, 0, 0, (0.2e1 * pkin(1) * t213 - qJD(3)) * t161, -t163 * qJD(3) + t218, 0, (-pkin(1) * qJD(3) + t165 * t213) * t161, -t83, t233, 0, 0, 0, t121 - t238, t118 - t237, t24, t28, t22, t21, t37, t5 * qJD(4) - t9 * qJD(5) + t198 - t258, t12 * qJD(4) + t7 * qJD(5) - t253 - t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t187, -t164 * t195, t150, -t140, 0, 0, 0, (-t162 * t193 - t186) * t164, -t164 * t185 + t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t213, 0, -t209, 0, 0, 0, 0, 0, t220, t221, 0, 0, 0, 0, 0, t114, -t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170 * t164, t167, t150, -t140, 0, 0, 0, t250 + (t162 * t170 - t186) * t164, t245 + t137 + (t160 * t194 - t185) * t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t45, t41, t40, -t222, -t144 * t223 + t160 * t167 - t246, t144 * t224 + t162 * t167 + t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214, t154, -t217, pkin(1) * t214 - t219, 0, 0, 0, 0, 0, -t271, -t77, 0, 0, 0, 0, 0, -t227 - t48 + t235, t212 * t59 - t203 + t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, t213, 0, t209, 0, 0, 0, 0, 0, -t220, -t221, 0, 0, 0, 0, 0, -t114, t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t220, -t221, 0, 0, 0, 0, 0, -t114, t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t190 * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t83, t233, 0, 0, 0, t121 - t201, t118 - t202, t24, t28, t22, t21, t37, -t5 * qJD(2) - t19 * qJD(5) + t198 - t252, -t12 * qJD(2) + qJD(5) * t115 - t251 - t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, t184, t150, -t140, 0, 0, 0, t162 * t183 - t250, -t160 * t183 - t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t220, t221, 0, 0, 0, 0, 0, t114, -t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, -t140, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t45, t41, t40, -t222, -pkin(4) * t223 - t240, pkin(4) * t224 + t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t267, -t172 - t229, -t160 * t83 - t212 * t62, -t114 * t132 + t212 * t57, t63, t9 * qJD(2) + t57 * qJD(3) + t19 * qJD(4) - t241, -t7 * qJD(2) - qJD(4) * t115 + t118 * t162 - t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, t45, -t55, t231, t222, t160 * t184 + t246, t162 * t184 - t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t231, t162 * t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, t45, -t55, t231, t222, t240, -t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t23;
