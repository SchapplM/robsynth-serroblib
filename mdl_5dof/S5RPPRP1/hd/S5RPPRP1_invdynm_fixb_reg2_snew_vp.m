% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta2,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:13
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:12:54
% EndTime: 2022-01-23 09:13:02
% DurationCPUTime: 8.09s
% Computational Cost: add. (25157->507), mult. (55484->635), div. (0->0), fcn. (32584->8), ass. (0->366)
t900 = sin(qJ(1));
t902 = cos(qJ(1));
t867 = g(1) * t902 + g(2) * t900;
t903 = qJD(1) ^ 2;
t851 = -pkin(1) * t903 - t867;
t896 = sin(pkin(7));
t898 = cos(pkin(7));
t866 = g(1) * t900 - t902 * g(2);
t919 = qJDD(1) * pkin(1) + t866;
t803 = t896 * t851 - t898 * t919;
t804 = t898 * t851 + t896 * t919;
t949 = t803 * t896 + t898 * t804;
t751 = t803 * t898 - t804 * t896;
t989 = t751 * t902;
t1035 = -t900 * t949 + t989;
t990 = t751 * t900;
t1034 = t902 * t949 + t990;
t856 = qJDD(1) * t898 - t896 * t903;
t976 = g(3) - qJDD(2);
t1022 = -qJ(2) * t856 - t896 * t976;
t855 = qJDD(1) * t896 + t898 * t903;
t810 = -t855 * t900 + t902 * t856;
t824 = -qJ(2) * t855 + t898 * t976;
t1033 = -pkin(5) * t810 + t1022 * t902 - t824 * t900;
t1023 = t902 * t855 + t856 * t900;
t1032 = -pkin(5) * t1023 + t1022 * t900 + t824 * t902;
t1021 = 2 * qJD(3);
t895 = sin(pkin(8));
t899 = sin(qJ(4));
t967 = qJD(1) * t899;
t957 = t895 * t967;
t868 = qJD(4) * t957;
t883 = t895 * qJDD(1);
t901 = cos(qJ(4));
t832 = t901 * t883 - t868;
t789 = -qJDD(1) * pkin(2) - t903 * qJ(3) + qJDD(3) + t803;
t897 = cos(pkin(8));
t1013 = pkin(3) * t897;
t932 = -pkin(6) * t895 - t1013;
t907 = t932 * qJDD(1) + t789;
t766 = t901 * t907;
t885 = t897 * qJDD(1);
t876 = t885 - qJDD(4);
t968 = qJD(1) * t895;
t955 = qJD(5) * t968;
t917 = t876 * pkin(4) + 0.2e1 * t901 * t955 - t766;
t792 = -t903 * pkin(2) + qJDD(1) * qJ(3) + t804;
t848 = t932 * qJD(1);
t922 = t792 + (t1021 + t848) * qJD(1);
t950 = t895 * t976;
t746 = t922 * t897 - t950;
t890 = t895 ^ 2;
t977 = t901 * t903;
t923 = pkin(4) * t890 * t977 + t746;
t877 = qJD(1) * t897 - qJD(4);
t959 = t877 * t968;
t670 = t899 * (-qJ(5) * t959 + t923) + t832 * qJ(5) + t917;
t961 = t899 * t977;
t862 = t890 * t961;
t830 = -t862 - t876;
t1031 = pkin(4) * t830 - t670;
t905 = t897 ^ 2;
t846 = (t890 + t905) * t897 * t903;
t814 = -t846 * t896 + t898 * t885;
t816 = t846 * t898 + t896 * t885;
t1028 = t814 * t902 - t816 * t900;
t1027 = t814 * t900 + t816 * t902;
t880 = t897 * t976;
t946 = qJD(1) * t1021 + t792;
t763 = t946 * t895 + t880;
t764 = t946 * t897 - t950;
t716 = t895 * t763 + t897 * t764;
t874 = t877 ^ 2;
t964 = qJDD(1) * t899;
t966 = qJD(1) * t901;
t799 = (t964 + (qJD(4) + t877) * t966) * t895;
t958 = t877 * t967;
t963 = qJDD(1) * t901;
t801 = -t868 + (-t958 + t963) * t895;
t755 = -t799 * t901 + t801 * t899;
t892 = t899 ^ 2;
t982 = t890 * t903;
t875 = t892 * t982;
t893 = t901 ^ 2;
t962 = t893 * t982;
t838 = t875 + t962;
t726 = t755 * t895 + t838 * t897;
t1020 = pkin(2) * t726;
t819 = -t962 - t874;
t829 = -t862 + t876;
t987 = t829 * t901;
t775 = -t819 * t899 + t987;
t910 = -t868 + (t958 + t963) * t895;
t733 = t775 * t895 - t897 * t910;
t1019 = pkin(2) * t733;
t836 = -t875 - t874;
t986 = t830 * t899;
t788 = t836 * t901 - t986;
t798 = (t964 + (qJD(4) - t877) * t966) * t895;
t738 = t788 * t895 - t798 * t897;
t1018 = pkin(2) * t738;
t753 = -t799 * t899 - t801 * t901;
t1017 = pkin(3) * t753;
t988 = t829 * t899;
t774 = t819 * t901 + t988;
t1016 = pkin(3) * t774;
t985 = t830 * t901;
t785 = t836 * t899 + t985;
t1015 = pkin(3) * t785;
t1014 = pkin(3) * t895;
t1012 = pkin(4) * t670;
t1011 = pkin(4) * t801;
t728 = t755 * t897 - t838 * t895;
t680 = t728 * t896 - t753 * t898;
t682 = t728 * t898 + t753 * t896;
t1009 = pkin(5) * (t680 * t902 + t682 * t900);
t734 = t775 * t897 + t895 * t910;
t691 = t734 * t896 - t774 * t898;
t692 = t734 * t898 + t774 * t896;
t1008 = pkin(5) * (t691 * t902 + t692 * t900);
t741 = t788 * t897 + t798 * t895;
t705 = t741 * t896 - t785 * t898;
t708 = t741 * t898 + t785 * t896;
t1007 = pkin(5) * (t705 * t902 + t708 * t900);
t1005 = pkin(6) * t753;
t1004 = pkin(6) * t774;
t1003 = pkin(6) * t785;
t1002 = qJ(2) * t680;
t1001 = qJ(2) * t691;
t1000 = qJ(2) * t705;
t997 = qJ(3) * t726;
t996 = qJ(3) * t733;
t995 = qJ(3) * t738;
t994 = t670 * t899;
t993 = t670 * t901;
t745 = t922 * t895 + t880;
t992 = t745 * t899;
t991 = t745 * t901;
t778 = t895 * t789;
t981 = t895 * t876;
t980 = t895 * t896;
t979 = t895 * t897;
t978 = t895 * t898;
t779 = t897 * t789;
t975 = -pkin(2) * t753 + qJ(3) * t728;
t974 = -pkin(2) * t774 + qJ(3) * t734;
t973 = -pkin(2) * t785 + qJ(3) * t741;
t699 = t901 * t746 + t899 * t907;
t972 = pkin(3) * t838 + pkin(6) * t755;
t971 = -pkin(2) * t789 + qJ(3) * t716;
t970 = pkin(3) * t798 - pkin(6) * t788;
t969 = pkin(3) * t910 - pkin(6) * t775;
t873 = t903 * t979;
t960 = pkin(2) * t885 - qJ(3) * t846 - t779;
t956 = t895 * t966;
t954 = t895 * t885;
t953 = -pkin(1) * t726 + qJ(2) * t682;
t952 = -pkin(1) * t733 + qJ(2) * t692;
t951 = -pkin(1) * t738 + qJ(2) * t708;
t698 = t899 * t746 - t766;
t648 = t698 * t899 + t901 * t699;
t828 = -pkin(4) * t877 - qJ(5) * t956;
t948 = -t828 * t901 - t848;
t947 = -t866 * t900 - t902 * t867;
t889 = t895 * t890;
t945 = t889 * t961;
t935 = t899 * t955;
t864 = -0.2e1 * t935;
t831 = (-qJD(4) * t966 - t964) * t895;
t927 = pkin(4) * t875 - t831 * qJ(5) - t877 * t828 - t699;
t671 = t864 - t927;
t627 = t671 * t899 - t993;
t934 = -t831 * pkin(4) - qJ(5) * t875 + qJDD(5) + t880;
t709 = (t792 + (t1021 - t948) * qJD(1)) * t895 + t934;
t642 = -pkin(4) * t709 + qJ(5) * t671;
t596 = -pkin(6) * t627 + qJ(5) * t993 - t642 * t899;
t613 = -pkin(3) * t627 + t1012;
t628 = t671 * t901 + t994;
t621 = t628 * t897 + t709 * t895;
t944 = -pkin(2) * t627 + qJ(3) * t621 + t895 * t596 + t897 * t613;
t663 = pkin(4) * t838 - qJ(5) * t799 + t671;
t936 = t877 * t957;
t665 = t923 * t899 + (t801 + t832 - t936) * qJ(5) + t917;
t617 = -t663 * t899 + t665 * t901 - t1005;
t718 = t1011 - t1017;
t943 = t895 * t617 + t897 * t718 + t975;
t914 = pkin(4) * t819 + t927;
t649 = t864 - t914 - t1016;
t688 = -qJ(5) * t819 + t709;
t767 = -pkin(4) * t910 + qJ(5) * t829;
t657 = t688 * t901 - t767 * t899 - t1004;
t942 = t897 * t649 + t895 * t657 + t974;
t659 = -t1015 - t1031;
t674 = -pkin(4) * t798 + qJ(5) * t836 - t934 + (t948 * qJD(1) - t946) * t895;
t662 = -qJ(5) * t985 - t674 * t899 - t1003;
t941 = t897 * t659 + t895 * t662 + t973;
t673 = t699 - t1016;
t710 = t991 - t1004;
t940 = t897 * t673 + t895 * t710 + t974;
t679 = t698 - t1015;
t713 = t992 - t1003;
t939 = t897 * t679 + t895 * t713 + t973;
t882 = t890 * qJDD(1);
t884 = t905 * qJDD(1);
t852 = t884 + t882;
t887 = t905 * t903;
t858 = t887 + t982;
t938 = pkin(2) * t858 + qJ(3) * t852 + t716;
t937 = t877 * t956;
t933 = -pkin(3) * t745 + pkin(6) * t648;
t861 = qJDD(1) * t902 - t900 * t903;
t931 = -pkin(5) * t861 - g(3) * t900;
t930 = -t969 + t992;
t929 = -t970 - t991;
t928 = t897 * t862;
t647 = -t698 * t901 + t699 * t899;
t715 = t763 * t897 - t764 * t895;
t820 = t855 * t979;
t821 = -t896 * t873 + t898 * t954;
t926 = t820 * t902 + t821 * t900;
t925 = t820 * t900 - t821 * t902;
t924 = t866 * t902 - t867 * t900;
t845 = (t895 * t905 + t889) * t903;
t921 = -pkin(2) * t883 + qJ(3) * t845 + t778;
t920 = t648 + t972;
t640 = -t647 - t1005;
t918 = -t753 * t1013 + t895 * t640 + t975;
t916 = t663 * t901 + t665 * t899 + t972;
t915 = t688 * t899 + t767 * t901 - t969;
t913 = -qJ(5) * t986 + t674 * t901 - t970;
t638 = t648 * t897 + t745 * t895;
t912 = qJ(3) * t638 + (-pkin(2) + t932) * t647;
t908 = -pkin(3) * t709 + pkin(6) * t628 + qJ(5) * t994 + t642 * t901;
t870 = 0.2e1 * t954;
t860 = qJDD(1) * t900 + t902 * t903;
t859 = -t887 + t982;
t854 = t897 * t876;
t853 = t884 - t882;
t839 = -t875 + t962;
t837 = t874 - t962;
t835 = t875 - t874;
t834 = -pkin(5) * t860 + g(3) * t902;
t815 = t845 * t898 + t896 * t883;
t812 = t845 * t896 - t898 * t883;
t809 = t853 * t898 + t859 * t896;
t808 = t852 * t898 - t858 * t896;
t807 = t853 * t896 - t859 * t898;
t806 = t852 * t896 + t858 * t898;
t805 = (-t892 - t893) * t959;
t794 = t832 * t899 - t893 * t959;
t793 = t831 * t901 - t892 * t959;
t791 = (t832 + t936) * t901;
t790 = (-t831 - t937) * t899;
t787 = t835 * t901 + t988;
t786 = -t837 * t899 + t985;
t784 = t835 * t899 - t987;
t783 = t837 * t901 + t986;
t777 = -pkin(1) * t855 - t804;
t776 = pkin(1) * t856 - t803;
t773 = -t805 * t896 - t876 * t978;
t772 = t805 * t898 - t876 * t980;
t769 = t791 * t897 + t945;
t768 = t790 * t897 - t945;
t762 = t791 * t895 - t928;
t761 = t790 * t895 + t928;
t758 = -t812 * t900 + t815 * t902;
t757 = t812 * t902 + t815 * t900;
t756 = -t798 * t901 - t899 * t910;
t754 = -t798 * t899 + t901 * t910;
t744 = pkin(1) * t751;
t742 = pkin(1) * t976 + qJ(2) * t949;
t740 = t787 * t897 - t799 * t895;
t739 = t786 * t897 + t801 * t895;
t737 = t787 * t895 + t799 * t897;
t736 = t786 * t895 - t801 * t897;
t731 = pkin(1) * t814 + t960;
t730 = pkin(1) * t812 + t921;
t729 = t756 * t897 + t839 * t895;
t727 = t756 * t895 - t839 * t897;
t724 = t769 * t898 + t794 * t896;
t723 = t768 * t898 + t793 * t896;
t722 = t769 * t896 - t794 * t898;
t721 = t768 * t896 - t793 * t898;
t720 = -t772 * t900 + t773 * t902;
t719 = t772 * t902 + t773 * t900;
t707 = t740 * t898 + t784 * t896;
t706 = t739 * t898 + t783 * t896;
t704 = t740 * t896 - t784 * t898;
t703 = t739 * t896 - t783 * t898;
t701 = pkin(1) * t705;
t697 = -qJ(2) * t812 - t764 * t896 + t898 * t779;
t696 = -qJ(2) * t814 - t763 * t896 + t789 * t978;
t695 = qJ(2) * t815 + t764 * t898 + t896 * t779;
t694 = -qJ(2) * t816 + t763 * t898 + t789 * t980;
t690 = pkin(1) * t691;
t687 = -qJ(2) * t806 + t715 * t898;
t686 = qJ(2) * t808 + t715 * t896;
t685 = t716 * t898 + t789 * t896;
t684 = t716 * t896 - t789 * t898;
t683 = t729 * t898 + t754 * t896;
t681 = t729 * t896 - t754 * t898;
t678 = pkin(1) * t806 + t938;
t677 = pkin(1) * t680;
t669 = -t722 * t900 + t724 * t902;
t668 = -t721 * t900 + t723 * t902;
t667 = t722 * t902 + t724 * t900;
t666 = t721 * t902 + t723 * t900;
t664 = -t929 - t1018;
t661 = -t930 - t1019;
t656 = -t704 * t900 + t707 * t902;
t655 = -t703 * t900 + t706 * t902;
t653 = t704 * t902 + t707 * t900;
t652 = t703 * t902 + t706 * t900;
t650 = pkin(5) * (-t705 * t900 + t708 * t902);
t643 = pkin(5) * (-t691 * t900 + t692 * t902);
t641 = pkin(1) * t684 + t971;
t637 = t648 * t895 - t745 * t897;
t635 = -t681 * t900 + t683 * t902;
t634 = t681 * t902 + t683 * t900;
t632 = pkin(5) * (-t680 * t900 + t682 * t902);
t631 = -t913 - t1018;
t630 = -t679 * t895 + t713 * t897 - t995;
t629 = -t915 - t1019;
t625 = -t673 * t895 + t710 * t897 - t996;
t624 = -qJ(2) * t684 - (pkin(2) * t896 - qJ(3) * t898) * t715;
t623 = -t920 - t1020;
t622 = t753 * t1014 + t640 * t897 - t997;
t620 = t628 * t895 - t709 * t897;
t618 = qJ(2) * t685 - (-pkin(2) * t898 - qJ(3) * t896 - pkin(1)) * t715;
t616 = t701 + t939;
t614 = -t659 * t895 + t662 * t897 - t995;
t612 = t690 + t940;
t610 = -t649 * t895 + t657 * t897 - t996;
t609 = t638 * t898 + t647 * t896;
t608 = t638 * t896 - t647 * t898;
t607 = -t916 - t1020;
t606 = -pkin(2) * t637 - t933;
t605 = t630 * t898 - t664 * t896 - t1000;
t604 = t617 * t897 - t718 * t895 - t997;
t603 = t701 + t941;
t602 = t677 + t918;
t601 = t625 * t898 - t661 * t896 - t1001;
t600 = t690 + t942;
t599 = t630 * t896 + t664 * t898 + t951;
t598 = t625 * t896 + t661 * t898 + t952;
t597 = -qJ(3) * t637 + (-pkin(6) * t897 + t1014) * t647;
t594 = t621 * t898 + t627 * t896;
t593 = t621 * t896 - t627 * t898;
t592 = t677 + t943;
t591 = t614 * t898 - t631 * t896 - t1000;
t590 = t622 * t898 - t623 * t896 - t1002;
t589 = t610 * t898 - t629 * t896 - t1001;
t588 = t614 * t896 + t631 * t898 + t951;
t587 = t610 * t896 + t629 * t898 + t952;
t586 = t622 * t896 + t623 * t898 + t953;
t585 = -pkin(2) * t620 - t908;
t584 = t604 * t898 - t607 * t896 - t1002;
t583 = t604 * t896 + t607 * t898 + t953;
t582 = pkin(1) * t608 + t912;
t581 = -qJ(3) * t620 + t596 * t897 - t613 * t895;
t580 = -qJ(2) * t608 + t597 * t898 - t606 * t896;
t579 = -pkin(1) * t637 + qJ(2) * t609 + t597 * t896 + t606 * t898;
t578 = pkin(1) * t593 + t944;
t577 = -qJ(2) * t593 + t581 * t898 - t585 * t896;
t576 = -pkin(1) * t620 + qJ(2) * t594 + t581 * t896 + t585 * t898;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t861, 0, -t860, 0, t931, -t834, -t924, -pkin(5) * t924, 0, 0, t810, 0, -t1023, 0, t1033, -t1032, t1035, pkin(5) * t1035 + qJ(2) * t989 - t900 * t742, -t925, -t807 * t900 + t809 * t902, t758, t925, t1027, 0, -pkin(5) * t1028 - t900 * t694 + t902 * t696, -pkin(5) * t757 - t695 * t900 + t697 * t902, t902 * t687 - t900 * t686 - pkin(5) * (t806 * t902 + t808 * t900), t902 * t624 - t900 * t618 - pkin(5) * (t684 * t902 + t685 * t900), t669, t635, t655, t668, t656, t720, -t599 * t900 + t605 * t902 - t1007, -t598 * t900 + t601 * t902 - t1008, -t586 * t900 + t590 * t902 - t1009, t902 * t580 - t900 * t579 - pkin(5) * (t608 * t902 + t609 * t900), t669, t635, t655, t668, t656, t720, -t588 * t900 + t591 * t902 - t1007, -t587 * t900 + t589 * t902 - t1008, -t583 * t900 + t584 * t902 - t1009, t902 * t577 - t900 * t576 - pkin(5) * (t593 * t902 + t594 * t900); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t860, 0, t861, 0, t834, t931, t947, pkin(5) * t947, 0, 0, t1023, 0, t810, 0, t1032, t1033, t1034, pkin(5) * t1034 + qJ(2) * t990 + t902 * t742, t926, t807 * t902 + t809 * t900, t757, -t926, -t1028, 0, -pkin(5) * t1027 + t902 * t694 + t900 * t696, pkin(5) * t758 + t695 * t902 + t697 * t900, t900 * t687 + t902 * t686 + pkin(5) * (-t806 * t900 + t808 * t902), t900 * t624 + t902 * t618 + pkin(5) * (-t684 * t900 + t685 * t902), t667, t634, t652, t666, t653, t719, t599 * t902 + t605 * t900 + t650, t598 * t902 + t601 * t900 + t643, t586 * t902 + t590 * t900 + t632, t900 * t580 + t902 * t579 + pkin(5) * (-t608 * t900 + t609 * t902), t667, t634, t652, t666, t653, t719, t588 * t902 + t591 * t900 + t650, t587 * t902 + t589 * t900 + t643, t583 * t902 + t584 * t900 + t632, t900 * t577 + t902 * t576 + pkin(5) * (-t593 * t900 + t594 * t902); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t866, t867, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t776, t777, 0, -t744, t882, t870, 0, t884, 0, 0, t731, t730, t678, t641, t762, t727, t736, t761, t737, t854, t616, t612, t602, t582, t762, t727, t736, t761, t737, t854, t603, t600, t592, t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t903, 0, 0, -g(3), -t866, 0, 0, 0, t856, 0, -t855, 0, t1022, -t824, t751, qJ(2) * t751, t821, t809, t815, -t821, t816, 0, t696, t697, t687, t624, t724, t683, t706, t723, t707, t773, t605, t601, t590, t580, t724, t683, t706, t723, t707, t773, t591, t589, t584, t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t903, 0, qJDD(1), 0, g(3), 0, -t867, 0, 0, 0, t855, 0, t856, 0, t824, t1022, t949, t742, t820, t807, t812, -t820, -t814, 0, t694, t695, t686, t618, t722, t681, t703, t721, t704, t772, t599, t598, t586, t579, t722, t681, t703, t721, t704, t772, t588, t587, t583, t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t866, t867, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t776, t777, 0, -t744, t882, t870, 0, t884, 0, 0, t731, t730, t678, t641, t762, t727, t736, t761, t737, t854, t616, t612, t602, t582, t762, t727, t736, t761, t737, t854, t603, t600, t592, t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t903, 0, 0, -t976, t803, 0, t954, t853, t845, -t954, t846, 0, t778, t779, t715, qJ(3) * t715, t769, t729, t739, t768, t740, -t981, t630, t625, t622, t597, t769, t729, t739, t768, t740, -t981, t614, t610, t604, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t903, 0, qJDD(1), 0, t976, 0, t804, 0, t873, -t859, -t883, -t873, -t885, 0, t763, t764, 0, pkin(2) * t715, -t794, -t754, -t783, -t793, -t784, t805, t664, t661, t623, t606, -t794, -t754, -t783, -t793, -t784, t805, t631, t629, t607, t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t803, -t804, 0, 0, t882, t870, 0, t884, 0, 0, t960, t921, t938, t971, t762, t727, t736, t761, t737, t854, t939, t940, t918, t912, t762, t727, t736, t761, t737, t854, t941, t942, t943, t944; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t883, t885, t873, 0, t887, 0, 0, t789, t763, 0, t791, t756, t786, t790, t787, 0, t713, t710, t640, -pkin(6) * t647, t791, t756, t786, t790, t787, 0, t662, t657, t617, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t883, -t982, t885, -t873, 0, -t789, 0, t764, 0, -t862, -t839, -t801, t862, t799, t876, t679, t673, -t1017, -pkin(3) * t647, -t862, -t839, -t801, t862, t799, t876, t659, t649, t718, t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t873, t859, t883, t873, t885, 0, -t763, -t764, 0, 0, t794, t754, t783, t793, t784, -t805, t929, t930, t920, t933, t794, t754, t783, t793, t784, -t805, t913, t915, t916, t908; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, -t798, t830, -t936, t835, t936, 0, t745, t698, 0, t832, -t798, t830, -t936, t835, t936, -qJ(5) * t830, t688, t665, qJ(5) * t670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t937, t910, t837, t831, -t829, t937, -t745, 0, t699, 0, -t937, t910, t837, t831, -t829, t937, t674, t767, t663, t642; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, t839, t801, -t862, -t799, -t876, -t698, -t699, 0, 0, t862, t839, t801, -t862, -t799, -t876, t1031, t914 + 0.2e1 * t935, -t1011, -t1012; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, -t798, t830, -t936, t835, t936, 0, t709, t670, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t937, t910, t837, t831, -t829, t937, -t709, 0, t671, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, t839, t801, -t862, -t799, -t876, -t670, -t671, 0, 0;];
m_new_reg = t1;
