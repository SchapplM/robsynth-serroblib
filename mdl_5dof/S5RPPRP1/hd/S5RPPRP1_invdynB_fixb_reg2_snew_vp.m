% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:13
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:12:48
% EndTime: 2022-01-23 09:12:54
% DurationCPUTime: 5.73s
% Computational Cost: add. (15160->436), mult. (33421->617), div. (0->0), fcn. (19855->8), ass. (0->330)
t564 = 2 * qJD(3);
t477 = sin(qJ(1));
t479 = cos(qJ(1));
t446 = t479 * g(1) + t477 * g(2);
t480 = qJD(1) ^ 2;
t430 = -t480 * pkin(1) - t446;
t473 = sin(pkin(7));
t475 = cos(pkin(7));
t445 = t477 * g(1) - t479 * g(2);
t489 = qJDD(1) * pkin(1) + t445;
t381 = t475 * t430 + t473 * t489;
t371 = -t480 * pkin(2) + qJDD(1) * qJ(3) + t381;
t573 = (qJD(1) * t564) + t371;
t380 = t473 * t430 - t475 * t489;
t503 = t473 * t380 + t475 * t381;
t332 = t475 * t380 - t473 * t381;
t530 = t479 * t332;
t575 = -t477 * t503 + t530;
t537 = t477 * t332;
t277 = t479 * t503 + t537;
t522 = t473 * qJDD(1);
t435 = t475 * t480 + t522;
t520 = t475 * qJDD(1);
t543 = t473 * t480;
t436 = t520 - t543;
t387 = -t477 * t435 + t479 * t436;
t470 = g(3) - qJDD(2);
t405 = qJ(2) * t435 - t475 * t470;
t492 = -qJ(2) * t436 - t473 * t470;
t574 = -pkin(5) * t387 + t477 * t405 + t479 * t492;
t566 = t479 * t435 + t477 * t436;
t571 = pkin(5) * t566 + t479 * t405 - t477 * t492;
t472 = sin(pkin(8));
t465 = t472 ^ 2;
t474 = cos(pkin(8));
t466 = t474 ^ 2;
t427 = (t465 + t466) * t474 * t480;
t508 = t474 * t520;
t393 = -t473 * t427 + t508;
t521 = t474 * qJDD(1);
t395 = t475 * t427 + t473 * t521;
t341 = t479 * t393 - t477 * t395;
t570 = t477 * t393 + t479 * t395;
t526 = t474 * qJD(1);
t452 = -qJD(4) + t526;
t449 = t452 ^ 2;
t478 = cos(qJ(4));
t469 = t478 ^ 2;
t546 = t465 * t480;
t518 = t469 * t546;
t399 = -t518 - t449;
t476 = sin(qJ(4));
t517 = t476 * t478 * t480;
t442 = t465 * t517;
t451 = -qJDD(4) + t521;
t410 = -t442 + t451;
t539 = t476 * t410;
t358 = t478 * t399 + t539;
t563 = pkin(3) * t358;
t468 = t476 ^ 2;
t450 = t468 * t546;
t416 = -t450 - t449;
t411 = -t442 - t451;
t531 = t478 * t411;
t364 = t476 * t416 + t531;
t562 = pkin(3) * t364;
t561 = pkin(3) * t472;
t560 = pkin(3) * t474;
t524 = qJDD(1) * t476;
t527 = qJD(1) * t478;
t376 = (t524 + (qJD(4) + t452) * t527) * t472;
t528 = qJD(1) * t476;
t511 = t472 * t528;
t447 = qJD(4) * t511;
t512 = t452 * t528;
t523 = qJDD(1) * t478;
t379 = t447 + (t512 - t523) * t472;
t336 = -t478 * t376 - t476 * t379;
t418 = t450 + t518;
t312 = t474 * t336 - t472 * t418;
t334 = -t476 * t376 + t478 * t379;
t267 = t473 * t312 - t475 * t334;
t269 = t475 * t312 + t473 * t334;
t226 = t479 * t267 + t477 * t269;
t559 = pkin(5) * t226;
t532 = t478 * t410;
t359 = -t476 * t399 + t532;
t483 = -t447 + (t512 + t523) * t472;
t316 = t474 * t359 + t472 * t483;
t280 = t473 * t316 - t475 * t358;
t281 = t475 * t316 + t473 * t358;
t237 = t479 * t280 + t477 * t281;
t558 = pkin(5) * t237;
t538 = t476 * t411;
t367 = t478 * t416 - t538;
t375 = (t524 + (qJD(4) - t452) * t527) * t472;
t323 = t474 * t367 + t472 * t375;
t292 = t473 * t323 - t475 * t364;
t295 = t475 * t323 + t473 * t364;
t245 = t479 * t292 + t477 * t295;
t557 = pkin(5) * t245;
t556 = pkin(6) * t334;
t555 = pkin(6) * t358;
t554 = pkin(6) * t364;
t553 = qJ(2) * t267;
t552 = qJ(2) * t280;
t551 = qJ(2) * t292;
t310 = t472 * t336 + t474 * t418;
t550 = qJ(3) * t310;
t315 = t472 * t359 - t474 * t483;
t549 = qJ(3) * t315;
t320 = t472 * t367 - t474 * t375;
t548 = qJ(3) * t320;
t471 = qJDD(1) * pkin(2);
t547 = t451 * t472;
t545 = t472 * t474;
t368 = -t480 * qJ(3) + qJDD(3) + t380 - t471;
t544 = t473 * t368;
t542 = t475 * t368;
t348 = -t472 * t470 + t573 * t474;
t496 = -pkin(6) * t472 - t560;
t428 = t496 * qJD(1);
t328 = t428 * t526 + t348;
t354 = qJDD(1) * t496 + t368;
t286 = t476 * t328 - t478 * t354;
t413 = t472 * t523 - t447;
t499 = t452 * t511;
t493 = pkin(4) * t442 + t286 + (t413 - t499) * qJ(5);
t484 = -t451 * pkin(4) - t493;
t529 = qJD(1) * t472;
t509 = qJD(5) * t529;
t498 = t478 * t509;
t260 = t484 - 0.2e1 * t498;
t541 = t476 * t260;
t457 = t474 * t470;
t327 = t457 + (t371 + (t564 + t428) * qJD(1)) * t472;
t540 = t476 * t327;
t534 = t478 * t260;
t533 = t478 * t327;
t287 = t478 * t328 + t476 * t354;
t516 = pkin(1) * t267 - pkin(2) * t334 + qJ(3) * t312;
t515 = pkin(1) * t280 - pkin(2) * t358 + qJ(3) * t316;
t514 = pkin(1) * t292 - pkin(2) * t364 + qJ(3) * t323;
t513 = t452 * t529;
t510 = t472 * t527;
t507 = -pkin(1) * t310 + qJ(2) * t269;
t506 = -pkin(1) * t315 + qJ(2) * t281;
t505 = -pkin(1) * t320 + qJ(2) * t295;
t504 = -t368 + t471;
t347 = t573 * t472 + t457;
t301 = t472 * t347 + t474 * t348;
t409 = -t452 * pkin(4) - qJ(5) * t510;
t502 = -t409 * t478 - t428;
t398 = -t477 * t445 - t479 * t446;
t464 = t472 * t465;
t500 = t464 * t517;
t412 = (-qJD(4) * t527 - t524) * t472;
t497 = -t412 * pkin(4) - qJ(5) * t450 + qJDD(5) + t457;
t441 = t479 * qJDD(1) - t477 * t480;
t495 = -pkin(5) * t441 - t477 * g(3);
t494 = t474 * t442;
t239 = -t478 * t286 + t476 * t287;
t240 = t476 * t286 + t478 * t287;
t300 = t474 * t347 - t472 * t348;
t400 = t435 * t545;
t401 = t472 * t508 - t543 * t545;
t491 = t479 * t400 + t477 * t401;
t490 = t477 * t400 - t479 * t401;
t397 = t479 * t445 - t477 * t446;
t488 = t412 * qJ(5) + t452 * t409 - 0.2e1 * t476 * t509 + t287;
t487 = -pkin(2) * t310 - pkin(3) * t418 - pkin(6) * t336;
t486 = -pkin(2) * t315 + pkin(3) * t483 - pkin(6) * t359;
t485 = -pkin(2) * t320 + pkin(3) * t375 - pkin(6) * t367;
t296 = (t371 + (t564 - t502) * qJD(1)) * t472 + t497;
t461 = t466 * t480;
t459 = t466 * qJDD(1);
t458 = t465 * qJDD(1);
t444 = 0.2e1 * t498;
t440 = t477 * qJDD(1) + t479 * t480;
t439 = t461 - t546;
t438 = t461 + t546;
t434 = t474 * t451;
t432 = t459 - t458;
t431 = t459 + t458;
t426 = (t466 * t472 + t464) * t480;
t419 = t450 - t518;
t417 = t449 - t518;
t415 = t450 - t449;
t414 = -pkin(5) * t440 + t479 * g(3);
t394 = t475 * t426 + t472 * t522;
t391 = t473 * t426 - t472 * t520;
t386 = t475 * t432 - t473 * t439;
t385 = t475 * t431 - t473 * t438;
t384 = t473 * t432 + t475 * t439;
t383 = t473 * t431 + t475 * t438;
t382 = (-t468 - t469) * t513;
t373 = -t476 * t413 + t469 * t513;
t372 = -t478 * t412 + t468 * t513;
t370 = (t413 + t499) * t478;
t369 = (-t452 * t510 - t412) * t476;
t366 = t478 * t415 + t539;
t365 = -t476 * t417 + t531;
t363 = -t476 * t415 + t532;
t362 = -t478 * t417 - t538;
t357 = -t473 * t382 - t475 * t547;
t356 = t475 * t382 - t473 * t547;
t353 = t474 * t370 + t500;
t352 = t474 * t369 - t500;
t351 = -pkin(4) * t483 + qJ(5) * t410;
t346 = t472 * t370 - t494;
t345 = t472 * t369 + t494;
t342 = -t477 * t391 + t479 * t394;
t340 = t479 * t391 + t477 * t394;
t339 = -t477 * t383 + t479 * t385;
t338 = t479 * t383 + t477 * t385;
t337 = -t478 * t375 - t476 * t483;
t335 = t476 * t375 - t478 * t483;
t324 = pkin(1) * t470 + qJ(2) * t503;
t322 = t474 * t366 - t472 * t376;
t321 = t474 * t365 - t472 * t379;
t319 = t472 * t366 + t474 * t376;
t318 = t472 * t365 + t474 * t379;
t313 = t474 * t337 - t472 * t419;
t311 = t472 * t337 + t474 * t419;
t308 = t475 * t353 - t473 * t373;
t307 = t475 * t352 - t473 * t372;
t306 = t473 * t353 + t475 * t373;
t305 = t473 * t352 + t475 * t372;
t304 = -t477 * t356 + t479 * t357;
t303 = t479 * t356 + t477 * t357;
t302 = -pkin(3) * t334 - pkin(4) * t379;
t298 = t540 - t554;
t297 = t533 - t555;
t294 = t475 * t322 - t473 * t363;
t293 = t475 * t321 - t473 * t362;
t291 = t473 * t322 + t475 * t363;
t290 = t473 * t321 + t475 * t362;
t285 = -qJ(2) * t391 - t473 * t348 + t474 * t542;
t284 = -qJ(2) * t393 - t473 * t347 + t472 * t542;
t283 = qJ(2) * t394 + t475 * t348 + t474 * t544;
t282 = -qJ(2) * t395 + t475 * t347 + t472 * t544;
t275 = -qJ(5) * t399 + t296;
t274 = -qJ(2) * t383 + t475 * t300;
t273 = qJ(2) * t385 + t473 * t300;
t272 = t475 * t301 + t544;
t271 = t473 * t301 - t542;
t270 = t475 * t313 - t473 * t335;
t268 = t473 * t313 + t475 * t335;
t266 = t286 - t562;
t263 = -pkin(4) * t375 + qJ(5) * t416 - t497 + (qJD(1) * t502 - t573) * t472;
t262 = t287 - t563;
t261 = -pkin(4) * t450 + t488;
t259 = -t477 * t306 + t479 * t308;
t258 = -t477 * t305 + t479 * t307;
t257 = t479 * t306 + t477 * t308;
t256 = t479 * t305 + t477 * t307;
t255 = -qJ(5) * t379 + t444 - t484;
t254 = t485 + t533;
t253 = -qJ(5) * t376 + (t418 - t450) * pkin(4) + t488;
t252 = -qJ(5) * t531 - t476 * t263 - t554;
t251 = t486 - t540;
t250 = -t562 + t444 + (-t411 + t451) * pkin(4) + t493;
t249 = t478 * t275 - t476 * t351 - t555;
t248 = -t477 * t292 + t479 * t295;
t247 = -t477 * t291 + t479 * t294;
t246 = -t477 * t290 + t479 * t293;
t244 = t479 * t291 + t477 * t294;
t243 = t479 * t290 + t477 * t293;
t242 = pkin(5) * t248;
t241 = -t563 + (-t399 - t450) * pkin(4) + t488;
t238 = -t477 * t280 + t479 * t281;
t236 = pkin(5) * t238;
t235 = -pkin(4) * t296 + qJ(5) * t261;
t234 = -t477 * t271 + t479 * t272;
t233 = t479 * t271 + t477 * t272;
t232 = -t239 - t556;
t231 = t474 * t240 + t472 * t327;
t230 = t472 * t240 - t474 * t327;
t229 = -t477 * t268 + t479 * t270;
t228 = -t477 * t267 + t479 * t269;
t227 = t479 * t268 + t477 * t270;
t225 = pkin(5) * t228;
t224 = qJ(5) * t538 - t478 * t263 + t485;
t223 = -t472 * t266 + t474 * t298 - t548;
t222 = -t476 * t275 - t478 * t351 + t486;
t221 = t478 * t261 - t541;
t220 = t476 * t261 + t534;
t219 = -t472 * t262 + t474 * t297 - t549;
t218 = -qJ(2) * t271 - (pkin(2) * t473 - qJ(3) * t475) * t300;
t217 = -t240 + t487;
t216 = t474 * t232 + t334 * t561 - t550;
t215 = t474 * t221 + t472 * t296;
t214 = t472 * t221 - t474 * t296;
t213 = qJ(2) * t272 - (-pkin(2) * t475 - qJ(3) * t473 - pkin(1)) * t300;
t212 = -t476 * t253 + t478 * t255 - t556;
t211 = -t472 * t250 + t474 * t252 - t548;
t210 = -pkin(3) * t220 - pkin(4) * t260;
t209 = -t472 * t241 + t474 * t249 - t549;
t208 = t475 * t231 + t473 * t239;
t207 = t473 * t231 - t475 * t239;
t206 = -t478 * t253 - t476 * t255 + t487;
t205 = -pkin(2) * t230 + pkin(3) * t327 - pkin(6) * t240;
t204 = t475 * t223 - t473 * t254 - t551;
t203 = t474 * t212 - t472 * t302 - t550;
t202 = t475 * t219 - t473 * t251 - t552;
t201 = t473 * t223 + t475 * t254 + t505;
t200 = t473 * t219 + t475 * t251 + t506;
t199 = -qJ(3) * t230 + (-pkin(6) * t474 + t561) * t239;
t198 = -pkin(6) * t220 - qJ(5) * t534 - t476 * t235;
t197 = t475 * t215 + t473 * t220;
t196 = t473 * t215 - t475 * t220;
t195 = t475 * t211 - t473 * t224 - t551;
t194 = t475 * t216 - t473 * t217 - t553;
t193 = t475 * t209 - t473 * t222 - t552;
t192 = t473 * t211 + t475 * t224 + t505;
t191 = t473 * t209 + t475 * t222 + t506;
t190 = t473 * t216 + t475 * t217 + t507;
t189 = -t477 * t207 + t479 * t208;
t188 = t479 * t207 + t477 * t208;
t187 = -pkin(2) * t214 + pkin(3) * t296 - pkin(6) * t221 + qJ(5) * t541 - t478 * t235;
t186 = t475 * t203 - t473 * t206 - t553;
t185 = t473 * t203 + t475 * t206 + t507;
t184 = -t477 * t196 + t479 * t197;
t183 = t479 * t196 + t477 * t197;
t182 = -qJ(3) * t214 + t474 * t198 - t472 * t210;
t181 = -qJ(2) * t207 + t475 * t199 - t473 * t205;
t180 = -pkin(1) * t230 + qJ(2) * t208 + t473 * t199 + t475 * t205;
t179 = -qJ(2) * t196 + t475 * t182 - t473 * t187;
t178 = -pkin(1) * t214 + qJ(2) * t197 + t473 * t182 + t475 * t187;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t440, -t441, 0, t398, 0, 0, 0, 0, 0, 0, -t566, -t387, 0, t277, 0, 0, 0, 0, 0, 0, -t570, t342, t339, t234, 0, 0, 0, 0, 0, 0, t248, t238, t228, t189, 0, 0, 0, 0, 0, 0, t248, t238, t228, t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t441, -t440, 0, t397, 0, 0, 0, 0, 0, 0, t387, -t566, 0, -t575, 0, 0, 0, 0, 0, 0, t341, t340, t338, t233, 0, 0, 0, 0, 0, 0, t245, t237, t226, t188, 0, 0, 0, 0, 0, 0, t245, t237, t226, t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t470, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t300, 0, 0, 0, 0, 0, 0, t320, t315, t310, t230, 0, 0, 0, 0, 0, 0, t320, t315, t310, t214; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t441, 0, -t440, 0, t495, -t414, -t397, -pkin(5) * t397, 0, 0, t387, 0, -t566, 0, t574, t571, t575, pkin(5) * t575 + qJ(2) * t530 - t477 * t324, -t490, -t477 * t384 + t479 * t386, t342, t490, t570, 0, -pkin(5) * t341 - t477 * t282 + t479 * t284, -pkin(5) * t340 - t477 * t283 + t479 * t285, -pkin(5) * t338 - t477 * t273 + t479 * t274, -pkin(5) * t233 - t477 * t213 + t479 * t218, t259, t229, t246, t258, t247, t304, -t477 * t201 + t479 * t204 - t557, -t477 * t200 + t479 * t202 - t558, -t477 * t190 + t479 * t194 - t559, -pkin(5) * t188 - t477 * t180 + t479 * t181, t259, t229, t246, t258, t247, t304, -t477 * t192 + t479 * t195 - t557, -t477 * t191 + t479 * t193 - t558, -t477 * t185 + t479 * t186 - t559, -pkin(5) * t183 - t477 * t178 + t479 * t179; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t440, 0, t441, 0, t414, t495, t398, pkin(5) * t398, 0, 0, t566, 0, t387, 0, -t571, t574, t277, pkin(5) * t277 + qJ(2) * t537 + t479 * t324, t491, t479 * t384 + t477 * t386, t340, -t491, -t341, 0, -pkin(5) * t570 + t479 * t282 + t477 * t284, pkin(5) * t342 + t479 * t283 + t477 * t285, pkin(5) * t339 + t479 * t273 + t477 * t274, pkin(5) * t234 + t479 * t213 + t477 * t218, t257, t227, t243, t256, t244, t303, t479 * t201 + t477 * t204 + t242, t479 * t200 + t477 * t202 + t236, t479 * t190 + t477 * t194 + t225, pkin(5) * t189 + t479 * t180 + t477 * t181, t257, t227, t243, t256, t244, t303, t479 * t192 + t477 * t195 + t242, t479 * t191 + t477 * t193 + t236, t479 * t185 + t477 * t186 + t225, pkin(5) * t184 + t479 * t178 + t477 * t179; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t445, t446, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t436 - t380, -pkin(1) * t435 - t381, 0, -pkin(1) * t332, t458, 0.2e1 * t472 * t521, 0, t459, 0, 0, pkin(1) * t393 - qJ(3) * t427 + t474 * t504, pkin(1) * t391 + qJ(3) * t426 - t472 * t504, pkin(1) * t383 + pkin(2) * t438 + qJ(3) * t431 + t301, pkin(1) * t271 - pkin(2) * t368 + qJ(3) * t301, t346, t311, t318, t345, t319, t434, t474 * t266 + t472 * t298 + t514, t474 * t262 + t472 * t297 + t515, t472 * t232 - t334 * t560 + t516, pkin(1) * t207 + qJ(3) * t231 + (-pkin(2) + t496) * t239, t346, t311, t318, t345, t319, t434, t474 * t250 + t472 * t252 + t514, t474 * t241 + t472 * t249 + t515, t472 * t212 + t474 * t302 + t516, pkin(1) * t196 - pkin(2) * t220 + qJ(3) * t215 + t472 * t198 + t474 * t210;];
tauB_reg = t1;
