% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:02
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRR5_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR5_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR5_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR5_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:02:07
% EndTime: 2022-01-20 12:02:12
% DurationCPUTime: 1.59s
% Computational Cost: add. (1896->168), mult. (4360->259), div. (0->0), fcn. (3385->8), ass. (0->118)
t100 = sin(qJ(4));
t97 = t100 ^ 2;
t103 = cos(qJ(4));
t98 = t103 ^ 2;
t150 = t97 + t98;
t104 = cos(qJ(3));
t163 = cos(qJ(2));
t138 = t163 * pkin(1);
t116 = qJD(2) * t138;
t142 = qJD(3) * t104;
t101 = sin(qJ(3));
t102 = sin(qJ(2));
t161 = pkin(1) * t102;
t87 = t101 * t161;
t92 = t138 + pkin(2);
t40 = -t92 * t142 - t104 * t116 + (qJD(2) + qJD(3)) * t87;
t170 = t150 * t40;
t144 = t102 * t104;
t169 = ((t163 * t101 + t144) * qJD(2) + t102 * t142) * pkin(1);
t168 = qJD(4) + qJD(5);
t166 = pkin(9) + pkin(8);
t64 = pkin(1) * t144 + t101 * t92;
t61 = pkin(8) + t64;
t165 = -pkin(9) - t61;
t90 = t101 * pkin(2) + pkin(8);
t164 = -pkin(9) - t90;
t162 = cos(qJ(5));
t160 = t103 * pkin(4);
t159 = t104 * pkin(2);
t143 = qJD(3) * t101;
t41 = t92 * t143 + t169;
t141 = t100 * qJD(4);
t94 = pkin(4) * t141;
t32 = t94 + t41;
t131 = t162 * t100;
t99 = sin(qJ(5));
t71 = t99 * t103 + t131;
t46 = t168 * t71;
t63 = t104 * t92 - t87;
t60 = -pkin(3) - t63;
t56 = t60 - t160;
t130 = t162 * t103;
t146 = t99 * t100;
t70 = -t130 + t146;
t158 = t32 * t70 + t56 * t46;
t123 = qJD(5) * t162;
t45 = -qJD(4) * t130 - t103 * t123 + t168 * t146;
t157 = t32 * t71 - t56 * t45;
t95 = t103 * qJD(4);
t156 = t41 * t100 + t60 * t95;
t134 = pkin(2) * t143;
t72 = t94 + t134;
t93 = -pkin(3) - t160;
t76 = t93 - t159;
t155 = t76 * t46 + t72 * t70;
t154 = -t76 * t45 + t72 * t71;
t153 = t93 * t46 + t70 * t94;
t152 = -t93 * t45 + t71 * t94;
t133 = pkin(2) * t142;
t62 = t150 * t133;
t91 = -pkin(3) - t159;
t151 = t100 * t134 + t91 * t95;
t149 = pkin(2) * qJD(3);
t148 = t100 * t40;
t147 = t103 * t40;
t145 = qJD(5) * t99;
t140 = pkin(4) * t145;
t139 = t99 * t166;
t137 = pkin(3) * t141;
t136 = pkin(3) * t95;
t135 = qJD(2) * t161;
t128 = t100 * t95;
t112 = t165 * t131;
t96 = t103 * pkin(9);
t49 = t103 * t61 + t96;
t22 = -t99 * t49 + t112;
t23 = t165 * t146 + t162 * t49;
t125 = qJD(4) * t165;
t107 = -t100 * t125 + t147;
t108 = t103 * t125 + t148;
t3 = -qJD(5) * t112 + t162 * t107 - t99 * t108 + t49 * t145;
t4 = -t23 * qJD(5) + t99 * t107 + t162 * t108;
t127 = t22 * t45 - t23 * t46 + t3 * t70 - t4 * t71;
t111 = t164 * t131;
t67 = t103 * t90 + t96;
t42 = -t99 * t67 + t111;
t43 = t164 * t146 + t162 * t67;
t117 = t103 * t133;
t124 = qJD(4) * t164;
t105 = t100 * t124 + t117;
t118 = t100 * t133;
t106 = t103 * t124 - t118;
t8 = -qJD(5) * t111 - t162 * t105 - t99 * t106 + t67 * t145;
t9 = -t43 * qJD(5) - t99 * t105 + t162 * t106;
t126 = t42 * t45 - t43 * t46 + t8 * t70 - t9 * t71;
t122 = t150 * t104;
t54 = t60 * t141;
t121 = -t41 * t103 + t54;
t114 = t166 * t162;
t113 = t100 * t114;
t77 = t103 * pkin(8) + t96;
t20 = t168 * t113 + t139 * t95 + t77 * t145;
t119 = t100 * t139;
t51 = t162 * t77 - t119;
t21 = -t51 * qJD(5) + (-t103 * t114 + t119) * qJD(4);
t50 = -t99 * t77 - t113;
t120 = t20 * t70 - t21 * t71 + t50 * t45 - t51 * t46;
t115 = pkin(4) * t123;
t73 = t91 * t141;
t110 = -t103 * t134 + t73;
t84 = -0.2e1 * t128;
t83 = 0.2e1 * t128;
t69 = 0.2e1 * (-t97 + t98) * qJD(4);
t31 = -0.2e1 * t71 * t45;
t30 = 0.2e1 * t70 * t46;
t10 = 0.2e1 * t45 * t70 - 0.2e1 * t71 * t46;
t7 = (t162 * t45 - t46 * t99 + (-t162 * t70 + t71 * t99) * qJD(5)) * pkin(4);
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t135, -0.2e1 * t116, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t41, 0.2e1 * t40, 0, -0.2e1 * t64 * t40 - 0.2e1 * t63 * t41, t83, t69, 0, t84, 0, 0, 0.2e1 * t121, 0.2e1 * t156, -0.2e1 * t170, -0.2e1 * t170 * t61 + 0.2e1 * t60 * t41, t31, t10, 0, t30, 0, 0, 0.2e1 * t158, 0.2e1 * t157, 0.2e1 * t127, 0.2e1 * t22 * t4 - 0.2e1 * t23 * t3 + 0.2e1 * t56 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t116, 0, 0, 0, 0, 0, 0, 0, 0, (-pkin(2) - t92) * t143 - t169, t40 - t133, 0, (-t101 * t40 - t104 * t41 + (-t101 * t63 + t104 * t64) * qJD(3)) * pkin(2), t83, t69, 0, t84, 0, 0, t54 + t73 + (-t41 - t134) * t103, t151 + t156, t62 - t170, t41 * t91 - t90 * t170 + (t101 * t60 + t61 * t122) * t149, t31, t10, 0, t30, 0, 0, t155 + t158, t154 + t157, t126 + t127, t22 * t9 - t23 * t8 - t3 * t43 + t32 * t76 + t4 * t42 + t56 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t134, -0.2e1 * t133, 0, 0, t83, t69, 0, t84, 0, 0, 0.2e1 * t110, 0.2e1 * t151, 0.2e1 * t62, 0.2e1 * (t101 * t91 + t90 * t122) * t149, t31, t10, 0, t30, 0, 0, 0.2e1 * t155, 0.2e1 * t154, 0.2e1 * t126, 0.2e1 * t42 * t9 - 0.2e1 * t43 * t8 + 0.2e1 * t76 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t40, 0, 0, t83, t69, 0, t84, 0, 0, t121 - t137, -t136 + t156, -t170, -t41 * pkin(3) - pkin(8) * t170, t31, t10, 0, t30, 0, 0, t153 + t158, t152 + t157, t120 + t127, -t23 * t20 + t22 * t21 - t3 * t51 + t32 * t93 + t4 * t50 + t56 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t134, -t133, 0, 0, t83, t69, 0, t84, 0, 0, t110 - t137, -t136 + t151, t62, (-pkin(3) * t101 + pkin(8) * t122) * t149, t31, t10, 0, t30, 0, 0, t153 + t155, t152 + t154, t120 + t126, -t43 * t20 + t42 * t21 + t9 * t50 - t8 * t51 + t72 * t93 + t76 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, t69, 0, t84, 0, 0, -0.2e1 * t137, -0.2e1 * t136, 0, 0, t31, t10, 0, t30, 0, 0, 0.2e1 * t153, 0.2e1 * t152, 0.2e1 * t120, -0.2e1 * t51 * t20 + 0.2e1 * t50 * t21 + 0.2e1 * t93 * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t141, 0, -t61 * t95 + t148, t141 * t61 + t147, 0, 0, 0, 0, -t45, 0, -t46, 0, t4, t3, t7, (t162 * t4 - t3 * t99 + (t162 * t23 - t22 * t99) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t141, 0, -t90 * t95 - t118, t90 * t141 - t117, 0, 0, 0, 0, -t45, 0, -t46, 0, t9, t8, t7, (t162 * t9 - t8 * t99 + (t162 * t43 - t42 * t99) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, 0, -t141, 0, -pkin(8) * t95, pkin(8) * t141, 0, 0, 0, 0, -t45, 0, -t46, 0, t21, t20, t7, (t162 * t21 - t20 * t99 + (t162 * t51 - t50 * t99) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t140, -0.2e1 * t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, 0, -t46, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, 0, -t46, 0, t9, t8, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, 0, -t46, 0, t21, t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t140, -t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t1;
