% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:02
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:02:12
% EndTime: 2022-01-20 12:02:27
% DurationCPUTime: 11.46s
% Computational Cost: add. (57439->514), mult. (61110->769), div. (0->0), fcn. (38139->10), ass. (0->350)
t556 = qJD(1) + qJD(2);
t549 = qJD(3) + t556;
t547 = t549 ^ 2;
t566 = cos(qJ(3));
t589 = qJDD(1) + qJDD(2);
t548 = qJDD(3) + t589;
t561 = sin(qJ(3));
t598 = t561 * t548;
t513 = t566 * t547 + t598;
t594 = t566 * t548;
t516 = t561 * t547 - t594;
t562 = sin(qJ(2));
t567 = cos(qJ(2));
t455 = t567 * t513 - t562 * t516;
t493 = pkin(7) * t513 - t566 * g(3);
t633 = pkin(7) * t516 - t561 * g(3);
t396 = pkin(6) * t455 + t567 * t493 - t562 * t633;
t460 = t562 * t513 + t567 * t516;
t563 = sin(qJ(1));
t568 = cos(qJ(1));
t410 = t455 * t563 + t568 * t460;
t641 = pkin(6) * t460 + t562 * t493 + t567 * t633;
t652 = pkin(5) * t410 + t396 * t563 + t568 * t641;
t632 = t455 * t568 - t563 * t460;
t651 = pkin(5) * t632 + t396 * t568 - t563 * t641;
t541 = t568 * g(1) + t563 * g(2);
t623 = qJD(1) ^ 2;
t574 = -t623 * pkin(1) - t541;
t540 = t563 * g(1) - t568 * g(2);
t575 = qJDD(1) * pkin(1) + t540;
t474 = t562 * t575 + t567 * t574;
t553 = t556 ^ 2;
t465 = -t553 * pkin(2) + t474;
t572 = -t562 * t574 + t567 * t575;
t571 = t589 * pkin(2) + t572;
t419 = t561 * t465 - t566 * t571;
t420 = t566 * t465 + t561 * t571;
t583 = t419 * t561 + t566 * t420;
t353 = t419 * t566 - t420 * t561;
t615 = t353 * t567;
t301 = -t562 * t583 + t615;
t616 = t353 * t562;
t637 = t567 * t583 + t616;
t266 = t301 * t563 + t568 * t637;
t648 = t301 * t568 - t563 * t637;
t523 = t567 * t553 + t562 * t589;
t525 = -t562 * t553 + t567 * t589;
t468 = t563 * t523 - t568 * t525;
t503 = pkin(6) * t523 - t567 * g(3);
t636 = -pkin(6) * t525 - t562 * g(3);
t647 = pkin(5) * t468 + t503 * t563 + t568 * t636;
t576 = t568 * t523 + t563 * t525;
t646 = pkin(5) * t576 + t503 * t568 - t563 * t636;
t582 = t567 * t474 - t562 * t572;
t424 = -t562 * t474 - t567 * t572;
t609 = t424 * t568;
t638 = -t563 * t582 + t609;
t610 = t424 * t563;
t360 = t568 * t582 + t610;
t559 = sin(qJ(5));
t564 = cos(qJ(5));
t565 = cos(qJ(4));
t560 = sin(qJ(4));
t607 = t549 * t560;
t496 = -t564 * t565 * t549 + t559 * t607;
t498 = (t559 * t565 + t560 * t564) * t549;
t453 = t498 * t496;
t588 = qJDD(4) + qJDD(5);
t625 = -t453 + t588;
t635 = t559 * t625;
t634 = t564 * t625;
t555 = qJD(4) + qJD(5);
t487 = t555 * t496;
t591 = qJD(4) * t549;
t584 = t565 * t591;
t599 = t560 * t548;
t508 = t584 + t599;
t543 = t565 * t548;
t585 = t560 * t591;
t509 = t543 - t585;
t573 = t496 * qJD(5) - t564 * t508 - t559 * t509;
t624 = -t487 - t573;
t581 = t559 * t508 - t564 * t509;
t399 = (qJD(5) - t555) * t498 + t581;
t494 = t496 ^ 2;
t495 = t498 ^ 2;
t552 = t555 ^ 2;
t405 = -t547 * pkin(3) + t548 * pkin(8) + t420;
t602 = t560 * t405;
t608 = t547 * t560;
t358 = qJDD(4) * pkin(4) - t508 * pkin(9) - t602 + (pkin(4) * t608 + pkin(9) * t591 - g(3)) * t565;
t388 = -t560 * g(3) + t565 * t405;
t529 = qJD(4) * pkin(4) - pkin(9) * t607;
t558 = t565 ^ 2;
t544 = t558 * t547;
t361 = -pkin(4) * t544 + pkin(9) * t509 - qJD(4) * t529 + t388;
t311 = -t564 * t358 + t361 * t559;
t312 = t559 * t358 + t564 * t361;
t275 = -t311 * t564 + t312 * t559;
t618 = t275 * t560;
t617 = t275 * t565;
t404 = -t548 * pkin(3) - t547 * pkin(8) + t419;
t364 = -t509 * pkin(4) - pkin(9) * t544 + t529 * t607 + t404;
t614 = t364 * t559;
t613 = t364 * t564;
t612 = t404 * t560;
t611 = t404 * t565;
t606 = t555 * t559;
t605 = t555 * t564;
t557 = t560 ^ 2;
t604 = t557 * t547;
t445 = t453 + t588;
t603 = t559 * t445;
t536 = t565 * t608;
t527 = qJDD(4) + t536;
t601 = t560 * t527;
t528 = qJDD(4) - t536;
t600 = t560 * t528;
t596 = t564 * t445;
t595 = t565 * t528;
t592 = t557 + t558;
t587 = t561 * t453;
t586 = t566 * t453;
t276 = t311 * t559 + t564 * t312;
t387 = t565 * g(3) + t602;
t339 = t387 * t560 + t565 * t388;
t489 = -t563 * t540 - t568 * t541;
t579 = t561 * t536;
t578 = t566 * t536;
t538 = t568 * qJDD(1) - t563 * t623;
t577 = -pkin(5) * t538 - g(3) * t563;
t338 = t387 * t565 - t388 * t560;
t488 = t568 * t540 - t563 * t541;
t570 = qJD(4) ^ 2;
t569 = pkin(1) * g(3);
t537 = t563 * qJDD(1) + t568 * t623;
t534 = -t544 - t570;
t533 = t544 - t570;
t532 = -t570 - t604;
t531 = t570 - t604;
t520 = t565 * t527;
t519 = -pkin(5) * t537 + t568 * g(3);
t518 = t544 - t604;
t517 = t544 + t604;
t511 = t592 * t548;
t510 = t543 - 0.2e1 * t585;
t507 = 0.2e1 * t584 + t599;
t506 = t592 * t591;
t485 = -t495 + t552;
t484 = t494 - t552;
t483 = t561 * qJDD(4) + t566 * t506;
t482 = -t566 * qJDD(4) + t561 * t506;
t481 = -t495 - t552;
t480 = -t560 * t532 - t595;
t479 = -t560 * t531 + t520;
t478 = t565 * t534 - t601;
t477 = t565 * t533 - t600;
t476 = t565 * t532 - t600;
t475 = t560 * t534 + t520;
t472 = t565 * t508 - t557 * t591;
t471 = -t560 * t509 - t558 * t591;
t458 = t566 * t511 - t561 * t517;
t454 = t561 * t511 + t566 * t517;
t452 = -t560 * t507 + t565 * t510;
t451 = -t495 + t494;
t450 = t566 * t479 + t560 * t598;
t449 = t566 * t477 + t561 * t543;
t448 = t561 * t479 - t560 * t594;
t447 = t561 * t477 - t565 * t594;
t443 = t566 * t472 - t579;
t442 = t566 * t471 + t579;
t441 = t561 * t472 + t578;
t440 = t561 * t471 - t578;
t439 = -t552 - t494;
t438 = t566 * t480 + t561 * t507;
t437 = t566 * t478 - t561 * t510;
t436 = t561 * t480 - t566 * t507;
t435 = t561 * t478 + t566 * t510;
t434 = (-t496 * t564 + t498 * t559) * t555;
t433 = (-t496 * t559 - t498 * t564) * t555;
t432 = -t562 * t482 + t567 * t483;
t431 = t567 * t482 + t562 * t483;
t430 = -t494 - t495;
t429 = t566 * t452 - t561 * t518;
t428 = t561 * t452 + t566 * t518;
t426 = -t498 * qJD(5) - t581;
t421 = pkin(6) * t582 + t569;
t417 = t564 * t484 - t603;
t416 = -t559 * t485 + t634;
t415 = t559 * t484 + t596;
t414 = t564 * t485 + t635;
t413 = -t559 * t481 - t596;
t412 = t564 * t481 - t603;
t409 = -t562 * t454 + t567 * t458;
t406 = t567 * t454 + t562 * t458;
t403 = -t487 + t573;
t398 = (qJD(5) + t555) * t498 + t581;
t392 = -t562 * t448 + t567 * t450;
t391 = -t562 * t447 + t567 * t449;
t390 = t567 * t448 + t562 * t450;
t389 = t567 * t447 + t562 * t449;
t386 = -t498 * t606 - t564 * t573;
t385 = t498 * t605 - t559 * t573;
t384 = -t559 * t426 + t496 * t605;
t383 = t564 * t426 + t496 * t606;
t381 = t564 * t439 - t635;
t380 = t559 * t439 + t634;
t379 = -t562 * t441 + t567 * t443;
t378 = -t562 * t440 + t567 * t442;
t377 = t567 * t441 + t562 * t443;
t376 = t567 * t440 + t562 * t442;
t375 = -t562 * t436 + t567 * t438;
t374 = -t562 * t435 + t567 * t437;
t373 = t567 * t436 + t562 * t438;
t372 = t567 * t435 + t562 * t437;
t371 = -t560 * t433 + t565 * t434;
t370 = -pkin(8) * t476 + t611;
t369 = -pkin(8) * t475 + t612;
t368 = -pkin(3) * t476 + t388;
t367 = -pkin(3) * t475 + t387;
t366 = t371 * t566 + t561 * t588;
t365 = t371 * t561 - t566 * t588;
t363 = -t428 * t562 + t429 * t567;
t362 = t428 * t567 + t429 * t562;
t350 = pkin(2) * g(3) + pkin(7) * t583;
t349 = -t415 * t560 + t417 * t565;
t348 = -t414 * t560 + t416 * t565;
t347 = -t412 * t560 + t413 * t565;
t346 = t412 * t565 + t413 * t560;
t345 = -t406 * t563 + t409 * t568;
t344 = t406 * t568 + t409 * t563;
t343 = -t399 * t564 - t403 * t559;
t342 = -t398 * t564 - t559 * t624;
t341 = -t399 * t559 + t403 * t564;
t340 = -t398 * t559 + t564 * t624;
t336 = -t385 * t560 + t386 * t565;
t335 = -t383 * t560 + t384 * t565;
t334 = -t380 * t560 + t381 * t565;
t333 = t380 * t565 + t381 * t560;
t332 = -pkin(9) * t412 + t613;
t331 = -t373 * t563 + t375 * t568;
t330 = -t372 * t563 + t374 * t568;
t329 = t373 * t568 + t375 * t563;
t328 = t372 * t568 + t374 * t563;
t327 = -pkin(9) * t380 + t614;
t326 = -pkin(7) * t454 + t338 * t566;
t325 = pkin(7) * t458 + t338 * t561;
t324 = t336 * t566 + t587;
t323 = t335 * t566 - t587;
t322 = t336 * t561 - t586;
t321 = t335 * t561 + t586;
t320 = t349 * t566 - t399 * t561;
t319 = t348 * t566 - t403 * t561;
t318 = t349 * t561 + t399 * t566;
t317 = t348 * t561 + t403 * t566;
t316 = -t365 * t562 + t366 * t567;
t315 = t365 * t567 + t366 * t562;
t314 = t347 * t566 + t561 * t624;
t313 = t347 * t561 - t566 * t624;
t309 = t339 * t566 + t404 * t561;
t308 = t339 * t561 - t404 * t566;
t307 = t334 * t566 + t398 * t561;
t306 = t334 * t561 - t398 * t566;
t305 = -pkin(7) * t436 - t368 * t561 + t370 * t566;
t304 = -pkin(7) * t435 - t367 * t561 + t369 * t566;
t303 = -pkin(4) * t624 + pkin(9) * t413 + t614;
t298 = -pkin(4) * t398 + pkin(9) * t381 - t613;
t297 = -pkin(2) * t476 + pkin(7) * t438 + t368 * t566 + t370 * t561;
t296 = -pkin(2) * t475 + pkin(7) * t437 + t367 * t566 + t369 * t561;
t295 = -t341 * t560 + t343 * t565;
t294 = -t340 * t560 + t342 * t565;
t293 = t341 * t565 + t343 * t560;
t292 = t294 * t566 - t451 * t561;
t291 = t294 * t561 + t451 * t566;
t290 = t295 * t566 + t430 * t561;
t289 = t295 * t561 - t430 * t566;
t288 = -t322 * t562 + t324 * t567;
t287 = -t321 * t562 + t323 * t567;
t286 = t322 * t567 + t324 * t562;
t285 = t321 * t567 + t323 * t562;
t284 = -t318 * t562 + t320 * t567;
t283 = -t317 * t562 + t319 * t567;
t282 = t318 * t567 + t320 * t562;
t281 = t317 * t567 + t319 * t562;
t280 = -pkin(3) * t346 - pkin(4) * t412 + t312;
t279 = -t313 * t562 + t314 * t567;
t278 = t313 * t567 + t314 * t562;
t277 = -pkin(3) * t293 - pkin(4) * t341;
t274 = -pkin(6) * t406 - t325 * t562 + t326 * t567;
t273 = pkin(6) * t409 + t325 * t567 + t326 * t562;
t272 = -pkin(3) * t333 - pkin(4) * t380 + t311;
t271 = -t308 * t562 + t309 * t567;
t270 = t308 * t567 + t309 * t562;
t269 = -t306 * t562 + t307 * t567;
t268 = t306 * t567 + t307 * t562;
t267 = pkin(6) * t301 + pkin(7) * t615 - t350 * t562;
t264 = pkin(6) * t637 + pkin(7) * t616 + t350 * t567 + t569;
t263 = -pkin(7) * t308 - (pkin(3) * t561 - pkin(8) * t566) * t338;
t262 = -pkin(4) * t364 + pkin(9) * t276;
t261 = -pkin(8) * t346 - t303 * t560 + t332 * t565;
t260 = -pkin(9) * t341 - t275;
t259 = -pkin(6) * t373 - t297 * t562 + t305 * t567;
t258 = -pkin(6) * t372 - t296 * t562 + t304 * t567;
t257 = -pkin(8) * t333 - t298 * t560 + t327 * t565;
t256 = -pkin(1) * t476 + pkin(6) * t375 + t297 * t567 + t305 * t562;
t255 = -pkin(1) * t475 + pkin(6) * t374 + t296 * t567 + t304 * t562;
t254 = -pkin(4) * t430 + pkin(9) * t343 + t276;
t253 = -t291 * t562 + t292 * t567;
t252 = t291 * t567 + t292 * t562;
t251 = pkin(7) * t309 - (-pkin(3) * t566 - pkin(8) * t561 - pkin(2)) * t338;
t250 = -t289 * t562 + t290 * t567;
t249 = t289 * t567 + t290 * t562;
t248 = -t278 * t563 + t279 * t568;
t247 = t278 * t568 + t279 * t563;
t246 = t276 * t565 - t618;
t245 = t276 * t560 + t617;
t244 = -t270 * t563 + t271 * t568;
t243 = t270 * t568 + t271 * t563;
t242 = -t268 * t563 + t269 * t568;
t241 = t268 * t568 + t269 * t563;
t240 = t246 * t566 + t364 * t561;
t239 = t246 * t561 - t364 * t566;
t238 = -pkin(7) * t313 + t261 * t566 - t280 * t561;
t237 = -pkin(7) * t306 + t257 * t566 - t272 * t561;
t236 = -pkin(2) * t346 + pkin(7) * t314 + t261 * t561 + t280 * t566;
t235 = -pkin(3) * t245 - pkin(4) * t275;
t234 = -t249 * t563 + t250 * t568;
t233 = t249 * t568 + t250 * t563;
t232 = -pkin(2) * t333 + pkin(7) * t307 + t257 * t561 + t272 * t566;
t231 = -pkin(8) * t293 - t254 * t560 + t260 * t565;
t230 = -pkin(6) * t270 - t251 * t562 + t263 * t567;
t229 = pkin(1) * t338 + pkin(6) * t271 + t251 * t567 + t263 * t562;
t228 = -pkin(8) * t245 - pkin(9) * t617 - t262 * t560;
t227 = -t239 * t562 + t240 * t567;
t226 = t239 * t567 + t240 * t562;
t225 = -pkin(7) * t289 + t231 * t566 - t277 * t561;
t224 = -pkin(2) * t293 + pkin(7) * t290 + t231 * t561 + t277 * t566;
t223 = -pkin(6) * t278 - t236 * t562 + t238 * t567;
t222 = -pkin(1) * t346 + pkin(6) * t279 + t236 * t567 + t238 * t562;
t221 = -pkin(6) * t268 - t232 * t562 + t237 * t567;
t220 = -pkin(1) * t333 + pkin(6) * t269 + t232 * t567 + t237 * t562;
t219 = -t226 * t563 + t227 * t568;
t218 = t226 * t568 + t227 * t563;
t217 = -pkin(7) * t239 + t228 * t566 - t235 * t561;
t216 = -pkin(2) * t245 + pkin(7) * t240 + t228 * t561 + t235 * t566;
t215 = -pkin(6) * t249 - t224 * t562 + t225 * t567;
t214 = -pkin(1) * t293 + pkin(6) * t250 + t224 * t567 + t225 * t562;
t213 = -pkin(6) * t226 - t216 * t562 + t217 * t567;
t212 = -pkin(1) * t245 + pkin(6) * t227 + t216 * t567 + t217 * t562;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t537, -t538, 0, t489, 0, 0, 0, 0, 0, 0, -t576, t468, 0, t360, 0, 0, 0, 0, 0, 0, -t632, t410, 0, t266, 0, 0, 0, 0, 0, 0, t330, t331, t345, t244, 0, 0, 0, 0, 0, 0, t242, t248, t234, t219; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t538, -t537, 0, t488, 0, 0, 0, 0, 0, 0, -t468, -t576, 0, -t638, 0, 0, 0, 0, 0, 0, -t410, -t632, 0, -t648, 0, 0, 0, 0, 0, 0, t328, t329, t344, t243, 0, 0, 0, 0, 0, 0, t241, t247, t233, t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t475, t476, 0, -t338, 0, 0, 0, 0, 0, 0, t333, t346, t293, t245; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t538, 0, -t537, 0, t577, -t519, -t488, -pkin(5) * t488, 0, 0, -t468, 0, -t576, 0, t647, t646, t638, pkin(5) * t638 + pkin(6) * t609 - t421 * t563, 0, 0, -t410, 0, -t632, 0, t652, t651, t648, pkin(5) * t648 - t264 * t563 + t267 * t568, -t377 * t563 + t379 * t568, -t362 * t563 + t363 * t568, -t390 * t563 + t392 * t568, -t376 * t563 + t378 * t568, -t389 * t563 + t391 * t568, -t431 * t563 + t432 * t568, -pkin(5) * t328 - t255 * t563 + t258 * t568, -pkin(5) * t329 - t256 * t563 + t259 * t568, -pkin(5) * t344 - t273 * t563 + t274 * t568, -pkin(5) * t243 - t229 * t563 + t230 * t568, -t286 * t563 + t288 * t568, -t252 * t563 + t253 * t568, -t281 * t563 + t283 * t568, -t285 * t563 + t287 * t568, -t282 * t563 + t284 * t568, -t315 * t563 + t316 * t568, -pkin(5) * t241 - t220 * t563 + t221 * t568, -pkin(5) * t247 - t222 * t563 + t223 * t568, -pkin(5) * t233 - t214 * t563 + t215 * t568, -pkin(5) * t218 - t212 * t563 + t213 * t568; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t537, 0, t538, 0, t519, t577, t489, pkin(5) * t489, 0, 0, t576, 0, -t468, 0, -t646, t647, t360, pkin(5) * t360 + pkin(6) * t610 + t421 * t568, 0, 0, t632, 0, -t410, 0, -t651, t652, t266, pkin(5) * t266 + t264 * t568 + t267 * t563, t377 * t568 + t379 * t563, t362 * t568 + t363 * t563, t390 * t568 + t392 * t563, t376 * t568 + t378 * t563, t389 * t568 + t391 * t563, t431 * t568 + t432 * t563, pkin(5) * t330 + t255 * t568 + t258 * t563, pkin(5) * t331 + t256 * t568 + t259 * t563, pkin(5) * t345 + t273 * t568 + t274 * t563, pkin(5) * t244 + t229 * t568 + t230 * t563, t286 * t568 + t288 * t563, t252 * t568 + t253 * t563, t281 * t568 + t283 * t563, t285 * t568 + t287 * t563, t282 * t568 + t284 * t563, t315 * t568 + t316 * t563, pkin(5) * t242 + t220 * t568 + t221 * t563, pkin(5) * t248 + t222 * t568 + t223 * t563, pkin(5) * t234 + t214 * t568 + t215 * t563, pkin(5) * t219 + t212 * t568 + t213 * t563; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t540, t541, 0, 0, 0, 0, 0, 0, 0, t589, pkin(1) * t525 + t572, -pkin(1) * t523 - t474, 0, -pkin(1) * t424, 0, 0, 0, 0, 0, t548, -pkin(1) * t460 - pkin(2) * t516 - t419, -pkin(1) * t455 - pkin(2) * t513 - t420, 0, -pkin(1) * t301 - pkin(2) * t353, (t508 + t584) * t560, t507 * t565 + t510 * t560, t531 * t565 + t601, (t509 - t585) * t565, t533 * t560 + t595, 0, pkin(1) * t372 + pkin(2) * t435 + pkin(3) * t510 + pkin(8) * t478 - t611, pkin(1) * t373 + pkin(2) * t436 - pkin(3) * t507 + pkin(8) * t480 + t612, pkin(1) * t406 + pkin(2) * t454 + pkin(3) * t517 + pkin(8) * t511 + t339, pkin(1) * t270 + pkin(2) * t308 - pkin(3) * t404 + pkin(8) * t339, t385 * t565 + t386 * t560, t340 * t565 + t342 * t560, t414 * t565 + t416 * t560, t383 * t565 + t384 * t560, t415 * t565 + t417 * t560, t433 * t565 + t434 * t560, pkin(1) * t268 + pkin(2) * t306 - pkin(3) * t398 + pkin(8) * t334 + t298 * t565 + t327 * t560, pkin(1) * t278 + pkin(2) * t313 - pkin(3) * t624 + pkin(8) * t347 + t303 * t565 + t332 * t560, pkin(1) * t249 + pkin(2) * t289 - pkin(3) * t430 + pkin(8) * t295 + t254 * t565 + t260 * t560, pkin(1) * t226 + pkin(2) * t239 - pkin(3) * t364 + pkin(8) * t246 - pkin(9) * t618 + t262 * t565;];
tauB_reg = t1;
