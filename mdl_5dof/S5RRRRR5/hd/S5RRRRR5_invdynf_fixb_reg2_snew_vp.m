% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:02
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:02:42
% EndTime: 2022-01-20 12:02:44
% DurationCPUTime: 2.58s
% Computational Cost: add. (14328->190), mult. (15217->267), div. (0->0), fcn. (9583->10), ass. (0->155)
t1283 = qJD(1) + qJD(2);
t1279 = qJD(3) + t1283;
t1277 = t1279 ^ 2;
t1281 = qJDD(1) + qJDD(2);
t1278 = qJDD(3) + t1281;
t1288 = sin(qJ(3));
t1293 = cos(qJ(3));
t1252 = t1288 * t1277 - t1293 * t1278;
t1289 = sin(qJ(2));
t1294 = cos(qJ(2));
t1303 = -t1293 * t1277 - t1288 * t1278;
t1227 = t1294 * t1252 - t1289 * t1303;
t1290 = sin(qJ(1));
t1295 = cos(qJ(1));
t1328 = t1289 * t1252 + t1294 * t1303;
t1332 = t1290 * t1227 + t1295 * t1328;
t1331 = t1295 * t1227 - t1290 * t1328;
t1280 = t1283 ^ 2;
t1259 = t1289 * t1280 - t1294 * t1281;
t1302 = -t1294 * t1280 - t1289 * t1281;
t1327 = t1290 * t1259 + t1295 * t1302;
t1326 = t1295 * t1259 - t1290 * t1302;
t1282 = qJD(4) + qJD(5);
t1321 = qJD(5) + t1282;
t1286 = sin(qJ(5));
t1291 = cos(qJ(5));
t1292 = cos(qJ(4));
t1314 = t1279 * t1292;
t1287 = sin(qJ(4));
t1315 = t1279 * t1287;
t1241 = t1286 * t1315 - t1291 * t1314;
t1320 = t1241 ^ 2;
t1243 = (t1286 * t1292 + t1287 * t1291) * t1279;
t1319 = t1243 ^ 2;
t1318 = t1282 ^ 2;
t1317 = t1243 * t1241;
t1316 = t1277 * t1287;
t1285 = t1292 ^ 2;
t1313 = t1285 * t1277;
t1271 = t1290 * g(1) - t1295 * g(2);
t1300 = qJDD(1) * pkin(1) + t1271;
t1272 = -t1295 * g(1) - t1290 * g(2);
t1297 = qJD(1) ^ 2;
t1301 = -t1297 * pkin(1) + t1272;
t1234 = t1289 * t1300 + t1294 * t1301;
t1232 = -t1280 * pkin(2) + t1234;
t1233 = -t1289 * t1301 + t1294 * t1300;
t1298 = t1281 * pkin(2) + t1233;
t1212 = t1293 * t1232 + t1288 * t1298;
t1206 = -t1277 * pkin(3) + t1278 * pkin(8) + t1212;
t1312 = t1287 * t1206;
t1311 = t1287 * t1278;
t1310 = qJD(5) - t1282;
t1284 = t1287 ^ 2;
t1309 = t1284 + t1285;
t1308 = -qJDD(4) - qJDD(5);
t1307 = qJD(4) * t1315;
t1306 = qJD(4) * t1314;
t1199 = -t1287 * g(3) + t1292 * t1206;
t1211 = -t1288 * t1232 + t1293 * t1298;
t1247 = t1306 + t1311;
t1274 = t1292 * t1278;
t1304 = -t1274 + t1307;
t1305 = -t1286 * t1247 - t1291 * t1304;
t1205 = -t1278 * pkin(3) - t1277 * pkin(8) - t1211;
t1299 = -t1291 * t1247 + t1286 * t1304;
t1296 = qJD(4) ^ 2;
t1269 = -t1290 * qJDD(1) - t1295 * t1297;
t1268 = t1295 * qJDD(1) - t1290 * t1297;
t1267 = t1292 * t1316;
t1265 = -t1296 - t1313;
t1264 = -t1284 * t1277 - t1296;
t1263 = qJD(4) * pkin(4) - pkin(9) * t1315;
t1262 = -qJDD(4) + t1267;
t1261 = qJDD(4) + t1267;
t1254 = t1309 * t1277;
t1249 = t1309 * t1278;
t1248 = t1274 - 0.2e1 * t1307;
t1246 = 0.2e1 * t1306 + t1311;
t1239 = -t1318 - t1319;
t1238 = t1292 * t1262 - t1287 * t1264;
t1237 = -t1287 * t1261 + t1292 * t1265;
t1236 = t1287 * t1262 + t1292 * t1264;
t1235 = t1292 * t1261 + t1287 * t1265;
t1226 = t1293 * t1249 - t1288 * t1254;
t1223 = t1288 * t1249 + t1293 * t1254;
t1222 = t1308 - t1317;
t1221 = -t1308 - t1317;
t1220 = -t1318 - t1320;
t1219 = t1293 * t1238 + t1288 * t1246;
t1218 = t1293 * t1237 - t1288 * t1248;
t1217 = t1288 * t1238 - t1293 * t1246;
t1216 = t1288 * t1237 + t1293 * t1248;
t1215 = -t1319 - t1320;
t1214 = -t1289 * t1233 + t1294 * t1234;
t1213 = t1294 * t1233 + t1289 * t1234;
t1210 = t1291 * t1222 - t1286 * t1239;
t1209 = t1286 * t1222 + t1291 * t1239;
t1208 = -t1289 * t1223 + t1294 * t1226;
t1207 = t1294 * t1223 + t1289 * t1226;
t1204 = t1310 * t1241 + t1299;
t1203 = -t1321 * t1241 - t1299;
t1202 = -t1310 * t1243 + t1305;
t1201 = t1321 * t1243 - t1305;
t1198 = -t1292 * g(3) - t1312;
t1197 = t1291 * t1220 - t1286 * t1221;
t1196 = t1286 * t1220 + t1291 * t1221;
t1195 = -t1289 * t1217 + t1294 * t1219;
t1194 = -t1289 * t1216 + t1294 * t1218;
t1193 = t1294 * t1217 + t1289 * t1219;
t1192 = t1294 * t1216 + t1289 * t1218;
t1191 = t1304 * pkin(4) - pkin(9) * t1313 + t1263 * t1315 + t1205;
t1190 = -pkin(4) * t1313 - t1304 * pkin(9) - qJD(4) * t1263 + t1199;
t1189 = qJDD(4) * pkin(4) - t1247 * pkin(9) - t1312 + (qJD(4) * t1279 * pkin(9) + pkin(4) * t1316 - g(3)) * t1292;
t1188 = -t1288 * t1211 + t1293 * t1212;
t1187 = t1293 * t1211 + t1288 * t1212;
t1186 = -t1287 * t1209 + t1292 * t1210;
t1185 = t1292 * t1209 + t1287 * t1210;
t1184 = t1291 * t1202 - t1286 * t1204;
t1183 = t1286 * t1202 + t1291 * t1204;
t1182 = -t1287 * t1198 + t1292 * t1199;
t1181 = t1292 * t1198 + t1287 * t1199;
t1180 = -t1287 * t1196 + t1292 * t1197;
t1179 = t1292 * t1196 + t1287 * t1197;
t1178 = t1293 * t1186 + t1288 * t1203;
t1177 = t1288 * t1186 - t1293 * t1203;
t1176 = t1286 * t1189 + t1291 * t1190;
t1175 = t1291 * t1189 - t1286 * t1190;
t1174 = t1293 * t1182 + t1288 * t1205;
t1173 = t1288 * t1182 - t1293 * t1205;
t1172 = t1293 * t1180 + t1288 * t1201;
t1171 = t1288 * t1180 - t1293 * t1201;
t1170 = -t1289 * t1187 + t1294 * t1188;
t1169 = t1294 * t1187 + t1289 * t1188;
t1168 = -t1287 * t1183 + t1292 * t1184;
t1167 = t1292 * t1183 + t1287 * t1184;
t1166 = t1293 * t1168 + t1288 * t1215;
t1165 = t1288 * t1168 - t1293 * t1215;
t1164 = -t1289 * t1177 + t1294 * t1178;
t1163 = t1294 * t1177 + t1289 * t1178;
t1162 = -t1286 * t1175 + t1291 * t1176;
t1161 = t1291 * t1175 + t1286 * t1176;
t1160 = -t1289 * t1173 + t1294 * t1174;
t1159 = t1294 * t1173 + t1289 * t1174;
t1158 = -t1289 * t1171 + t1294 * t1172;
t1157 = t1294 * t1171 + t1289 * t1172;
t1156 = -t1289 * t1165 + t1294 * t1166;
t1155 = t1294 * t1165 + t1289 * t1166;
t1154 = -t1287 * t1161 + t1292 * t1162;
t1153 = t1292 * t1161 + t1287 * t1162;
t1152 = t1293 * t1154 + t1288 * t1191;
t1151 = t1288 * t1154 - t1293 * t1191;
t1150 = -t1289 * t1151 + t1294 * t1152;
t1149 = t1294 * t1151 + t1289 * t1152;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1269, -t1268, 0, -t1290 * t1271 + t1295 * t1272, 0, 0, 0, 0, 0, 0, t1327, t1326, 0, -t1290 * t1213 + t1295 * t1214, 0, 0, 0, 0, 0, 0, t1332, t1331, 0, -t1290 * t1169 + t1295 * t1170, 0, 0, 0, 0, 0, 0, -t1290 * t1192 + t1295 * t1194, -t1290 * t1193 + t1295 * t1195, -t1290 * t1207 + t1295 * t1208, -t1290 * t1159 + t1295 * t1160, 0, 0, 0, 0, 0, 0, -t1290 * t1157 + t1295 * t1158, -t1290 * t1163 + t1295 * t1164, -t1290 * t1155 + t1295 * t1156, -t1290 * t1149 + t1295 * t1150; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1268, t1269, 0, t1295 * t1271 + t1290 * t1272, 0, 0, 0, 0, 0, 0, -t1326, t1327, 0, t1295 * t1213 + t1290 * t1214, 0, 0, 0, 0, 0, 0, -t1331, t1332, 0, t1295 * t1169 + t1290 * t1170, 0, 0, 0, 0, 0, 0, t1295 * t1192 + t1290 * t1194, t1295 * t1193 + t1290 * t1195, t1295 * t1207 + t1290 * t1208, t1295 * t1159 + t1290 * t1160, 0, 0, 0, 0, 0, 0, t1295 * t1157 + t1290 * t1158, t1295 * t1163 + t1290 * t1164, t1295 * t1155 + t1290 * t1156, t1295 * t1149 + t1290 * t1150; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1235, t1236, 0, t1181, 0, 0, 0, 0, 0, 0, t1179, t1185, t1167, t1153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1297, -qJDD(1), 0, t1272, 0, 0, 0, 0, 0, 0, t1302, t1259, 0, t1214, 0, 0, 0, 0, 0, 0, t1328, t1227, 0, t1170, 0, 0, 0, 0, 0, 0, t1194, t1195, t1208, t1160, 0, 0, 0, 0, 0, 0, t1158, t1164, t1156, t1150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1297, 0, t1271, 0, 0, 0, 0, 0, 0, -t1259, t1302, 0, t1213, 0, 0, 0, 0, 0, 0, -t1227, t1328, 0, t1169, 0, 0, 0, 0, 0, 0, t1192, t1193, t1207, t1159, 0, 0, 0, 0, 0, 0, t1157, t1163, t1155, t1149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1235, t1236, 0, t1181, 0, 0, 0, 0, 0, 0, t1179, t1185, t1167, t1153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1280, -t1281, 0, t1234, 0, 0, 0, 0, 0, 0, t1303, t1252, 0, t1188, 0, 0, 0, 0, 0, 0, t1218, t1219, t1226, t1174, 0, 0, 0, 0, 0, 0, t1172, t1178, t1166, t1152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1281, -t1280, 0, t1233, 0, 0, 0, 0, 0, 0, -t1252, t1303, 0, t1187, 0, 0, 0, 0, 0, 0, t1216, t1217, t1223, t1173, 0, 0, 0, 0, 0, 0, t1171, t1177, t1165, t1151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1235, t1236, 0, t1181, 0, 0, 0, 0, 0, 0, t1179, t1185, t1167, t1153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1277, -t1278, 0, t1212, 0, 0, 0, 0, 0, 0, t1237, t1238, t1249, t1182, 0, 0, 0, 0, 0, 0, t1180, t1186, t1168, t1154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1278, -t1277, 0, t1211, 0, 0, 0, 0, 0, 0, t1248, -t1246, t1254, -t1205, 0, 0, 0, 0, 0, 0, -t1201, -t1203, -t1215, -t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1235, t1236, 0, t1181, 0, 0, 0, 0, 0, 0, t1179, t1185, t1167, t1153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1265, t1262, t1274, t1199, 0, 0, 0, 0, 0, 0, t1197, t1210, t1184, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1261, t1264, -t1311, t1198, 0, 0, 0, 0, 0, 0, t1196, t1209, t1183, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1248, t1246, -t1254, t1205, 0, 0, 0, 0, 0, 0, t1201, t1203, t1215, t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1220, t1222, t1202, t1176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1221, t1239, t1204, t1175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1201, t1203, t1215, t1191;];
f_new_reg = t1;
