% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:02
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:02:27
% EndTime: 2022-01-20 12:02:42
% DurationCPUTime: 15.48s
% Computational Cost: add. (94617->551), mult. (100093->774), div. (0->0), fcn. (62071->10), ass. (0->384)
t1032 = sin(qJ(1));
t1037 = cos(qJ(1));
t1031 = sin(qJ(2));
t1036 = cos(qJ(2));
t1030 = sin(qJ(3));
t1026 = qJD(1) + qJD(2);
t1019 = qJD(3) + t1026;
t1017 = t1019 ^ 2;
t1024 = qJDD(1) + qJDD(2);
t1018 = qJDD(3) + t1024;
t1035 = cos(qJ(3));
t1080 = t1035 * t1018;
t988 = t1030 * t1017 - t1080;
t1125 = pkin(7) * t988 - t1030 * g(3);
t1082 = t1030 * t1018;
t985 = t1035 * t1017 + t1082;
t927 = t1031 * t985 + t1036 * t988;
t960 = pkin(7) * t985 - t1035 * g(3);
t1138 = pkin(6) * t927 + t1031 * t960 + t1036 * t1125;
t923 = t1031 * t988 - t1036 * t985;
t849 = pkin(6) * t923 + t1031 * t1125 - t1036 * t960;
t868 = t1032 * t923 - t1037 * t927;
t1148 = -pkin(5) * t868 - t1032 * t849 + t1037 * t1138;
t1139 = t1032 * t927 + t1037 * t923;
t1147 = pkin(5) * t1139 + t1032 * t1138 + t1037 * t849;
t1012 = t1037 * g(1) + t1032 * g(2);
t1040 = qJD(1) ^ 2;
t1046 = t1040 * pkin(1) + t1012;
t1011 = t1032 * g(1) - t1037 * g(2);
t1049 = qJDD(1) * pkin(1) + t1011;
t1043 = t1031 * t1046 + t1036 * t1049;
t1042 = t1024 * pkin(2) + t1043;
t1022 = t1026 ^ 2;
t941 = t1031 * t1049 - t1036 * t1046;
t930 = -t1022 * pkin(2) + t941;
t878 = t1030 * t930 - t1035 * t1042;
t879 = t1030 * t1042 + t1035 * t930;
t1070 = t1030 * t878 + t1035 * t879;
t807 = t1030 * t879 - t1035 * t878;
t1098 = t1031 * t807;
t1129 = t1036 * t1070 - t1098;
t1092 = t1036 * t807;
t746 = -t1031 * t1070 - t1092;
t1145 = t1032 * t746 + t1037 * t1129;
t1144 = -t1032 * t1129 + t1037 * t746;
t993 = t1036 * t1022 + t1031 * t1024;
t996 = t1031 * t1022 - t1036 * t1024;
t1122 = t1032 * t993 + t1037 * t996;
t1126 = pkin(6) * t996 - t1031 * g(3);
t970 = pkin(6) * t993 - t1036 * g(3);
t1137 = pkin(5) * t1122 + t1032 * t970 + t1037 * t1126;
t1123 = t1032 * t996 - t1037 * t993;
t1136 = pkin(5) * t1123 + t1032 * t1126 - t1037 * t970;
t1069 = -t1031 * t1043 + t1036 * t941;
t884 = t1031 * t941 + t1036 * t1043;
t1091 = t1037 * t884;
t1131 = t1032 * t1069 + t1091;
t1097 = t1032 * t884;
t1130 = t1037 * t1069 - t1097;
t1028 = sin(qJ(5));
t1023 = qJDD(4) + qJDD(5);
t1033 = cos(qJ(5));
t1034 = cos(qJ(4));
t1087 = t1019 * t1034;
t1029 = sin(qJ(4));
t1088 = t1019 * t1029;
t963 = t1028 * t1088 - t1033 * t1087;
t965 = (t1028 * t1034 + t1029 * t1033) * t1019;
t919 = t965 * t963;
t1120 = -t919 + t1023;
t1128 = t1028 * t1120;
t1127 = t1033 * t1120;
t866 = -t1017 * pkin(3) + t1018 * pkin(8) + t879;
t1101 = t1029 * t866;
t843 = t1034 * g(3) + t1101;
t844 = -t1029 * g(3) + t1034 * t866;
t792 = t1029 * t843 + t1034 * t844;
t1072 = qJD(4) * t1088;
t1081 = t1034 * t1018;
t1047 = t1072 - t1081;
t1010 = qJD(4) * t1087;
t1083 = t1029 * t1018;
t980 = t1010 + t1083;
t888 = -t963 * qJD(5) - t1028 * t1047 + t1033 * t980;
t1025 = qJD(4) + qJD(5);
t956 = t1025 * t963;
t1121 = -t956 + t888;
t1071 = t1028 * t980 + t1033 * t1047;
t859 = (qJD(5) - t1025) * t965 + t1071;
t961 = t963 ^ 2;
t962 = t965 ^ 2;
t1021 = t1025 ^ 2;
t1113 = t1034 ^ 2;
t1089 = t1017 * t1029;
t1090 = qJD(4) * t1019;
t811 = qJDD(4) * pkin(4) - t980 * pkin(9) - t1101 + (pkin(4) * t1089 + pkin(9) * t1090 - g(3)) * t1034;
t1014 = t1113 * t1017;
t999 = qJD(4) * pkin(4) - pkin(9) * t1088;
t812 = -pkin(4) * t1014 - pkin(9) * t1047 - qJD(4) * t999 + t844;
t761 = t1028 * t812 - t1033 * t811;
t762 = t1028 * t811 + t1033 * t812;
t714 = t1028 * t762 - t1033 * t761;
t1112 = pkin(4) * t714;
t863 = t956 + t888;
t794 = -t1028 * t859 - t1033 * t863;
t1111 = pkin(4) * t794;
t865 = -t1018 * pkin(3) - t1017 * pkin(8) + t878;
t1106 = -pkin(3) * t865 + pkin(8) * t792;
t1105 = t1025 * t965;
t816 = pkin(4) * t1047 - pkin(9) * t1014 + t999 * t1088 + t865;
t1104 = t1028 * t816;
t908 = t919 + t1023;
t1103 = t1028 * t908;
t1102 = t1029 * t714;
t855 = t1029 * t865;
t1006 = t1034 * t1089;
t997 = qJDD(4) + t1006;
t1100 = t1029 * t997;
t998 = qJDD(4) - t1006;
t1099 = t1029 * t998;
t1096 = t1033 * t816;
t1095 = t1033 * t908;
t1094 = t1034 * t714;
t856 = t1034 * t865;
t981 = -0.2e1 * t1072 + t1081;
t934 = t1034 * t981;
t1093 = t1034 * t998;
t1086 = t1025 * t1028;
t1085 = t1025 * t1033;
t1027 = t1029 ^ 2;
t1084 = t1027 * t1017;
t1078 = t1027 + t1113;
t1039 = qJD(4) ^ 2;
t1002 = -t1039 - t1084;
t949 = -t1029 * t1002 - t1093;
t979 = 0.2e1 * t1010 + t1083;
t1077 = -pkin(3) * t979 + pkin(8) * t949 + t855;
t1004 = -t1014 - t1039;
t946 = t1034 * t1004 - t1100;
t1076 = pkin(3) * t981 + pkin(8) * t946 - t856;
t758 = t1030 * t792 - t1035 * t865;
t1075 = pkin(2) * t758 + t1106;
t1074 = t1030 * t919;
t1073 = t1035 * t919;
t715 = t1028 * t761 + t1033 * t762;
t796 = t1028 * t863 - t1033 * t859;
t891 = -t961 - t962;
t693 = -pkin(4) * t891 + pkin(9) * t796 + t715;
t700 = -pkin(9) * t794 - t714;
t738 = -t1029 * t794 + t1034 * t796;
t1067 = -pkin(3) * t891 + pkin(8) * t738 + t1029 * t700 + t1034 * t693;
t902 = -t1021 - t961;
t836 = t1033 * t902 - t1128;
t858 = (qJD(5) + t1025) * t965 + t1071;
t743 = -pkin(4) * t858 + pkin(9) * t836 - t1096;
t835 = t1028 * t902 + t1127;
t779 = -pkin(9) * t835 + t1104;
t784 = -t1029 * t835 + t1034 * t836;
t1066 = -pkin(3) * t858 + pkin(8) * t784 + t1029 * t779 + t1034 * t743;
t950 = -t962 - t1021;
t872 = -t1028 * t950 - t1095;
t749 = -pkin(4) * t1121 + pkin(9) * t872 + t1104;
t871 = t1033 * t950 - t1103;
t781 = -pkin(9) * t871 + t1096;
t799 = -t1029 * t871 + t1034 * t872;
t1065 = -pkin(3) * t1121 + pkin(8) * t799 + t1029 * t781 + t1034 * t749;
t983 = t1078 * t1018;
t989 = t1014 + t1084;
t1064 = pkin(3) * t989 + pkin(8) * t983 + t792;
t899 = t1030 * t949 - t1035 * t979;
t1063 = pkin(2) * t899 + t1077;
t898 = t1030 * t946 + t1035 * t981;
t1062 = pkin(2) * t898 + t1076;
t1061 = -t1032 * t1011 - t1037 * t1012;
t1060 = t1030 * t1006;
t1059 = t1035 * t1006;
t1058 = -pkin(2) * t988 - t878;
t1008 = t1037 * qJDD(1) - t1032 * t1040;
t1057 = -pkin(5) * t1008 - t1032 * g(3);
t730 = t1030 * t738 - t1035 * t891;
t1056 = pkin(2) * t730 + t1067;
t755 = t1030 * t784 - t1035 * t858;
t1055 = pkin(2) * t755 + t1066;
t764 = t1030 * t799 - t1035 * t1121;
t1054 = pkin(2) * t764 + t1065;
t921 = t1030 * t983 + t1035 * t989;
t1053 = pkin(2) * t921 + t1064;
t790 = t1029 * t844 - t1034 * t843;
t1051 = t1037 * t1011 - t1032 * t1012;
t1050 = pkin(4) * t835 - t761;
t686 = t1034 * t715 - t1102;
t703 = -pkin(4) * t816 + pkin(9) * t715;
t1048 = -pkin(3) * t816 + pkin(8) * t686 - pkin(9) * t1102 + t1034 * t703;
t681 = t1030 * t686 - t1035 * t816;
t1045 = pkin(2) * t681 + t1048;
t1044 = pkin(4) * t871 - t762;
t1041 = -pkin(2) * t985 - t879;
t1038 = pkin(1) * g(3);
t1007 = t1032 * qJDD(1) + t1037 * t1040;
t1003 = t1014 - t1039;
t1001 = t1039 - t1084;
t992 = t1034 * t997;
t991 = -pkin(5) * t1007 + t1037 * g(3);
t990 = -t1014 + t1084;
t975 = t1078 * t1090;
t954 = -t962 + t1021;
t953 = t961 - t1021;
t952 = t1030 * qJDD(4) + t1035 * t975;
t951 = -t1035 * qJDD(4) + t1030 * t975;
t948 = t1029 * t1003 + t1093;
t947 = -t1029 * t1001 + t992;
t945 = t1034 * t1003 - t1099;
t944 = t1034 * t1001 + t1100;
t943 = t1034 * t1002 - t1099;
t942 = t1029 * t1004 + t992;
t939 = -t1027 * t1090 + t1034 * t980;
t938 = t1029 * t1047 - t1113 * t1090;
t933 = (t980 + t1010) * t1029;
t925 = -t1030 * t989 + t1035 * t983;
t918 = -t1029 * t979 + t934;
t917 = t1029 * t981 + t1034 * t979;
t916 = t962 - t961;
t915 = t1029 * t1082 + t1035 * t947;
t914 = t1030 * t1081 + t1035 * t945;
t913 = -t1029 * t1080 + t1030 * t947;
t912 = t1030 * t945 - t1034 * t1080;
t911 = -pkin(1) * t996 + t1043;
t910 = -pkin(1) * t993 - t941;
t906 = t1035 * t939 - t1060;
t905 = t1035 * t938 + t1060;
t904 = t1030 * t939 + t1059;
t903 = t1030 * t938 - t1059;
t901 = t1030 * t979 + t1035 * t949;
t900 = -t1030 * t981 + t1035 * t946;
t897 = (t1028 * t965 - t1033 * t963) * t1025;
t896 = (-t1028 * t963 - t1033 * t965) * t1025;
t893 = -t1031 * t951 + t1036 * t952;
t892 = t1031 * t952 + t1036 * t951;
t890 = t1030 * t990 + t1035 * t918;
t889 = t1030 * t918 - t1035 * t990;
t887 = -t965 * qJD(5) - t1071;
t881 = pkin(1) * t884;
t880 = pkin(6) * t1069 + t1038;
t876 = t1033 * t953 - t1103;
t875 = -t1028 * t954 + t1127;
t874 = t1028 * t953 + t1095;
t873 = t1033 * t954 + t1128;
t869 = -t1031 * t921 + t1036 * t925;
t867 = t1031 * t925 + t1036 * t921;
t848 = -t1031 * t913 + t1036 * t915;
t847 = -t1031 * t912 + t1036 * t914;
t846 = t1031 * t915 + t1036 * t913;
t845 = t1031 * t914 + t1036 * t912;
t842 = t1033 * t888 - t965 * t1086;
t841 = t1028 * t888 + t965 * t1085;
t840 = -t1028 * t887 + t963 * t1085;
t839 = t1033 * t887 + t963 * t1086;
t834 = -t1031 * t904 + t1036 * t906;
t833 = -t1031 * t903 + t1036 * t905;
t832 = t1031 * t906 + t1036 * t904;
t831 = t1031 * t905 + t1036 * t903;
t830 = -t1031 * t899 + t1036 * t901;
t829 = -t1031 * t898 + t1036 * t900;
t828 = t1031 * t901 + t1036 * t899;
t827 = t1031 * t900 + t1036 * t898;
t826 = -t1029 * t896 + t1034 * t897;
t825 = t1029 * t897 + t1034 * t896;
t824 = -pkin(8) * t943 + t856;
t823 = -pkin(8) * t942 + t855;
t822 = -pkin(3) * t943 + t844;
t821 = -pkin(3) * t942 + t843;
t820 = t1030 * t1023 + t1035 * t826;
t819 = -t1035 * t1023 + t1030 * t826;
t818 = -pkin(1) * t927 + t1058;
t817 = pkin(1) * t923 + t1041;
t814 = -t1031 * t889 + t1036 * t890;
t813 = t1031 * t890 + t1036 * t889;
t805 = pkin(2) * t807;
t804 = pkin(2) * g(3) + pkin(7) * t1070;
t803 = -t1029 * t874 + t1034 * t876;
t802 = -t1029 * t873 + t1034 * t875;
t801 = t1029 * t876 + t1034 * t874;
t800 = t1029 * t875 + t1034 * t873;
t798 = t1029 * t872 + t1034 * t871;
t795 = -t1028 * t1121 - t1033 * t858;
t793 = -t1028 * t858 + t1033 * t1121;
t789 = -t1029 * t841 + t1034 * t842;
t788 = t1029 * t842 + t1034 * t841;
t787 = -t1029 * t839 + t1034 * t840;
t786 = t1029 * t840 + t1034 * t839;
t783 = t1029 * t836 + t1034 * t835;
t777 = -pkin(7) * t921 - t1035 * t790;
t776 = pkin(7) * t925 - t1030 * t790;
t775 = t1035 * t789 + t1074;
t774 = t1035 * t787 - t1074;
t773 = t1030 * t789 - t1073;
t772 = t1030 * t787 + t1073;
t771 = -t1030 * t859 + t1035 * t803;
t770 = t1030 * t863 + t1035 * t802;
t769 = t1030 * t803 + t1035 * t859;
t768 = t1030 * t802 - t1035 * t863;
t767 = -t1031 * t819 + t1036 * t820;
t766 = t1031 * t820 + t1036 * t819;
t765 = t1030 * t1121 + t1035 * t799;
t759 = t1030 * t865 + t1035 * t792;
t756 = t1030 * t858 + t1035 * t784;
t753 = -pkin(7) * t899 - t1030 * t822 + t1035 * t824;
t752 = -pkin(7) * t898 - t1030 * t821 + t1035 * t823;
t751 = pkin(1) * t828 + t1063;
t750 = pkin(1) * t827 + t1062;
t741 = -pkin(2) * t943 + pkin(7) * t901 + t1030 * t824 + t1035 * t822;
t740 = -pkin(2) * t942 + pkin(7) * t900 + t1030 * t823 + t1035 * t821;
t739 = pkin(1) * t867 + t1053;
t737 = -t1029 * t793 + t1034 * t795;
t736 = t1029 * t795 + t1034 * t793;
t735 = t1029 * t796 + t1034 * t794;
t733 = t1030 * t916 + t1035 * t737;
t732 = t1030 * t737 - t1035 * t916;
t731 = t1030 * t891 + t1035 * t738;
t728 = -pkin(1) * t746 + t805;
t727 = -t1031 * t773 + t1036 * t775;
t726 = -t1031 * t772 + t1036 * t774;
t725 = t1031 * t775 + t1036 * t773;
t724 = t1031 * t774 + t1036 * t772;
t723 = -t1031 * t769 + t1036 * t771;
t722 = -t1031 * t768 + t1036 * t770;
t721 = t1031 * t771 + t1036 * t769;
t720 = t1031 * t770 + t1036 * t768;
t719 = -pkin(3) * t798 - t1044;
t718 = -t1031 * t764 + t1036 * t765;
t717 = t1031 * t765 + t1036 * t764;
t716 = -pkin(3) * t735 - t1111;
t713 = -pkin(6) * t867 - t1031 * t776 + t1036 * t777;
t712 = pkin(6) * t869 + t1031 * t777 + t1036 * t776;
t711 = -pkin(3) * t783 - t1050;
t710 = -t1031 * t758 + t1036 * t759;
t709 = t1031 * t759 + t1036 * t758;
t708 = -t1031 * t755 + t1036 * t756;
t707 = t1031 * t756 + t1036 * t755;
t706 = pkin(6) * t746 - pkin(7) * t1092 - t1031 * t804;
t705 = pkin(6) * t1129 - pkin(7) * t1098 + t1036 * t804 + t1038;
t704 = -pkin(7) * t758 + (pkin(3) * t1030 - pkin(8) * t1035) * t790;
t701 = -pkin(8) * t798 - t1029 * t749 + t1034 * t781;
t698 = -pkin(6) * t828 - t1031 * t741 + t1036 * t753;
t697 = -pkin(6) * t827 - t1031 * t740 + t1036 * t752;
t696 = -pkin(8) * t783 - t1029 * t743 + t1034 * t779;
t695 = -pkin(1) * t943 + pkin(6) * t830 + t1031 * t753 + t1036 * t741;
t694 = -pkin(1) * t942 + pkin(6) * t829 + t1031 * t752 + t1036 * t740;
t691 = -t1031 * t732 + t1036 * t733;
t690 = t1031 * t733 + t1036 * t732;
t689 = pkin(7) * t759 + (-pkin(3) * t1035 - pkin(8) * t1030 - pkin(2)) * t790;
t688 = -t1031 * t730 + t1036 * t731;
t687 = t1031 * t731 + t1036 * t730;
t685 = t1029 * t715 + t1094;
t683 = pkin(1) * t709 + t1075;
t682 = t1030 * t816 + t1035 * t686;
t679 = -pkin(7) * t764 - t1030 * t719 + t1035 * t701;
t678 = pkin(1) * t717 + t1054;
t677 = -pkin(7) * t755 - t1030 * t711 + t1035 * t696;
t676 = -pkin(2) * t798 + pkin(7) * t765 + t1030 * t701 + t1035 * t719;
t675 = -pkin(3) * t685 - t1112;
t674 = pkin(1) * t707 + t1055;
t673 = -pkin(2) * t783 + pkin(7) * t756 + t1030 * t696 + t1035 * t711;
t672 = -pkin(8) * t735 - t1029 * t693 + t1034 * t700;
t671 = -pkin(6) * t709 - t1031 * t689 + t1036 * t704;
t670 = -pkin(1) * t790 + pkin(6) * t710 + t1031 * t704 + t1036 * t689;
t669 = -pkin(8) * t685 - pkin(9) * t1094 - t1029 * t703;
t668 = -t1031 * t681 + t1036 * t682;
t667 = t1031 * t682 + t1036 * t681;
t666 = -pkin(7) * t730 - t1030 * t716 + t1035 * t672;
t665 = -pkin(2) * t735 + pkin(7) * t731 + t1030 * t672 + t1035 * t716;
t664 = pkin(1) * t687 + t1056;
t663 = -pkin(6) * t717 - t1031 * t676 + t1036 * t679;
t662 = -pkin(1) * t798 + pkin(6) * t718 + t1031 * t679 + t1036 * t676;
t661 = -pkin(6) * t707 - t1031 * t673 + t1036 * t677;
t660 = -pkin(1) * t783 + pkin(6) * t708 + t1031 * t677 + t1036 * t673;
t659 = -pkin(7) * t681 - t1030 * t675 + t1035 * t669;
t658 = pkin(1) * t667 + t1045;
t657 = -pkin(2) * t685 + pkin(7) * t682 + t1030 * t669 + t1035 * t675;
t656 = -pkin(6) * t687 - t1031 * t665 + t1036 * t666;
t655 = -pkin(1) * t735 + pkin(6) * t688 + t1031 * t666 + t1036 * t665;
t654 = -pkin(6) * t667 - t1031 * t657 + t1036 * t659;
t653 = -pkin(1) * t685 + pkin(6) * t668 + t1031 * t659 + t1036 * t657;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1008, 0, -t1007, 0, t1057, -t991, -t1051, -pkin(5) * t1051, 0, 0, -t1122, 0, t1123, 0, t1137, -t1136, -t1131, -pkin(5) * t1131 - pkin(6) * t1091 - t1032 * t880, 0, 0, t868, 0, t1139, 0, t1148, -t1147, t1144, pkin(5) * t1144 - t1032 * t705 + t1037 * t706, -t1032 * t832 + t1037 * t834, -t1032 * t813 + t1037 * t814, -t1032 * t846 + t1037 * t848, -t1032 * t831 + t1037 * t833, -t1032 * t845 + t1037 * t847, -t1032 * t892 + t1037 * t893, t1037 * t697 - t1032 * t694 - pkin(5) * (t1032 * t829 + t1037 * t827), t1037 * t698 - t1032 * t695 - pkin(5) * (t1032 * t830 + t1037 * t828), t1037 * t713 - t1032 * t712 - pkin(5) * (t1032 * t869 + t1037 * t867), t1037 * t671 - t1032 * t670 - pkin(5) * (t1032 * t710 + t1037 * t709), -t1032 * t725 + t1037 * t727, -t1032 * t690 + t1037 * t691, -t1032 * t720 + t1037 * t722, -t1032 * t724 + t1037 * t726, -t1032 * t721 + t1037 * t723, -t1032 * t766 + t1037 * t767, t1037 * t661 - t1032 * t660 - pkin(5) * (t1032 * t708 + t1037 * t707), t1037 * t663 - t1032 * t662 - pkin(5) * (t1032 * t718 + t1037 * t717), t1037 * t656 - t1032 * t655 - pkin(5) * (t1032 * t688 + t1037 * t687), t1037 * t654 - t1032 * t653 - pkin(5) * (t1032 * t668 + t1037 * t667); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1007, 0, t1008, 0, t991, t1057, t1061, pkin(5) * t1061, 0, 0, -t1123, 0, -t1122, 0, t1136, t1137, t1130, pkin(5) * t1130 - pkin(6) * t1097 + t1037 * t880, 0, 0, -t1139, 0, t868, 0, t1147, t1148, t1145, pkin(5) * t1145 + t1032 * t706 + t1037 * t705, t1032 * t834 + t1037 * t832, t1032 * t814 + t1037 * t813, t1032 * t848 + t1037 * t846, t1032 * t833 + t1037 * t831, t1032 * t847 + t1037 * t845, t1032 * t893 + t1037 * t892, t1032 * t697 + t1037 * t694 + pkin(5) * (-t1032 * t827 + t1037 * t829), t1032 * t698 + t1037 * t695 + pkin(5) * (-t1032 * t828 + t1037 * t830), t1032 * t713 + t1037 * t712 + pkin(5) * (-t1032 * t867 + t1037 * t869), t1032 * t671 + t1037 * t670 + pkin(5) * (-t1032 * t709 + t1037 * t710), t1032 * t727 + t1037 * t725, t1032 * t691 + t1037 * t690, t1032 * t722 + t1037 * t720, t1032 * t726 + t1037 * t724, t1032 * t723 + t1037 * t721, t1032 * t767 + t1037 * t766, t1032 * t661 + t1037 * t660 + pkin(5) * (-t1032 * t707 + t1037 * t708), t1032 * t663 + t1037 * t662 + pkin(5) * (-t1032 * t717 + t1037 * t718), t1032 * t656 + t1037 * t655 + pkin(5) * (-t1032 * t687 + t1037 * t688), t1032 * t654 + t1037 * t653 + pkin(5) * (-t1032 * t667 + t1037 * t668); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1011, t1012, 0, 0, 0, 0, 0, 0, 0, t1024, t911, t910, 0, t881, 0, 0, 0, 0, 0, t1018, t818, t817, 0, t728, t933, t917, t944, t934, t948, 0, t750, t751, t739, t683, t788, t736, t800, t786, t801, t825, t674, t678, t664, t658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1040, 0, 0, -g(3), -t1011, 0, 0, 0, -t996, 0, -t993, 0, t1126, t970, -t884, -pkin(6) * t884, 0, 0, -t927, 0, t923, 0, t1138, -t849, t746, t706, t834, t814, t848, t833, t847, t893, t697, t698, t713, t671, t727, t691, t722, t726, t723, t767, t661, t663, t656, t654; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, 0, qJDD(1), 0, g(3), 0, -t1012, 0, 0, 0, t993, 0, -t996, 0, -t970, t1126, t1069, t880, 0, 0, -t923, 0, -t927, 0, t849, t1138, t1129, t705, t832, t813, t846, t831, t845, t892, t694, t695, t712, t670, t725, t690, t720, t724, t721, t766, t660, t662, t655, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1011, t1012, 0, 0, 0, 0, 0, 0, 0, t1024, t911, t910, 0, t881, 0, 0, 0, 0, 0, t1018, t818, t817, 0, t728, t933, t917, t944, t934, t948, 0, t750, t751, t739, t683, t788, t736, t800, t786, t801, t825, t674, t678, t664, t658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, 0, -t1022, 0, 0, -g(3), -t1043, 0, 0, 0, -t988, 0, -t985, 0, t1125, t960, -t807, -pkin(7) * t807, t906, t890, t915, t905, t914, t952, t752, t753, t777, t704, t775, t733, t770, t774, t771, t820, t677, t679, t666, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, 0, t1024, 0, g(3), 0, t941, 0, 0, 0, t985, 0, -t988, 0, -t960, t1125, t1070, t804, t904, t889, t913, t903, t912, t951, t740, t741, t776, t689, t773, t732, t768, t772, t769, t819, t673, t676, t665, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, t1043, -t941, 0, 0, 0, 0, 0, 0, 0, t1018, t1058, t1041, 0, t805, t933, t917, t944, t934, t948, 0, t1062, t1063, t1053, t1075, t788, t736, t800, t786, t801, t825, t1055, t1054, t1056, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, -t1017, 0, 0, -g(3), t878, 0, t939, t918, t947, t938, t945, t975, t823, t824, -t790, -pkin(8) * t790, t789, t737, t802, t787, t803, t826, t696, t701, t672, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1017, 0, t1018, 0, g(3), 0, t879, 0, t1006, -t990, -t1083, -t1006, -t1081, -qJDD(4), t821, t822, 0, -pkin(3) * t790, -t919, -t916, -t863, t919, t859, -t1023, t711, t719, t716, t675; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, -t878, -t879, 0, 0, t933, t917, t944, t934, t948, 0, t1076, t1077, t1064, t1106, t788, t736, t800, t786, t801, t825, t1066, t1065, t1067, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t980, t981, t997, -t1010, t1003, t1010, 0, t865, t843, 0, t842, t795, t875, t840, t876, t897, t779, t781, t700, -pkin(9) * t714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1072, t979, t1001, -t1047, t998, -t1072, -t865, 0, t844, 0, t841, t793, t873, t839, t874, t896, t743, t749, t693, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1006, t990, t1083, t1006, t1081, qJDD(4), -t843, -t844, 0, 0, t919, t916, t863, -t919, -t859, t1023, t1050, t1044, t1111, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t888, -t858, t1120, t956, t953, -t956, 0, t816, t761, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1105, t1121, t954, t887, t908, -t1105, -t816, 0, t762, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t919, t916, t863, -t919, -t859, t1023, -t761, -t762, 0, 0;];
m_new_reg = t1;
