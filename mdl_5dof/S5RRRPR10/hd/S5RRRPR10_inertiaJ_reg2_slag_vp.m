% Calculate inertial parameters regressor of joint inertia matrix for
% S5RRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RRRPR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR10_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRPR10_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:29:51
% EndTime: 2019-12-31 21:29:56
% DurationCPUTime: 1.32s
% Computational Cost: add. (1819->155), mult. (4218->333), div. (0->0), fcn. (4786->10), ass. (0->103)
t60 = sin(pkin(10));
t62 = cos(pkin(10));
t65 = sin(qJ(3));
t68 = cos(qJ(3));
t44 = t60 * t68 + t62 * t65;
t119 = -0.2e1 * t44;
t61 = sin(pkin(5));
t66 = sin(qJ(2));
t100 = t61 * t66;
t63 = cos(pkin(5));
t36 = t65 * t100 - t63 * t68;
t38 = t68 * t100 + t63 * t65;
t22 = t62 * t36 + t60 * t38;
t118 = t22 ^ 2;
t90 = -qJ(4) - pkin(8);
t46 = t90 * t68;
t78 = t90 * t65;
t27 = -t60 * t46 - t62 * t78;
t117 = t27 ^ 2;
t42 = t60 * t65 - t62 * t68;
t116 = t42 ^ 2;
t115 = -0.2e1 * t22;
t54 = -t68 * pkin(3) - pkin(2);
t114 = 0.2e1 * t54;
t113 = 0.2e1 * t61;
t112 = 0.2e1 * t68;
t111 = pkin(1) * t66;
t69 = cos(qJ(2));
t110 = pkin(1) * t69;
t109 = t60 * pkin(3);
t108 = t62 * pkin(3);
t99 = t61 * t69;
t83 = pkin(7) * t99;
t32 = t83 + (pkin(8) + t111) * t63;
t33 = (-pkin(2) * t69 - pkin(8) * t66 - pkin(1)) * t61;
t19 = -t65 * t32 + t68 * t33;
t84 = pkin(3) * t99;
t10 = -t38 * qJ(4) + t19 - t84;
t20 = t68 * t32 + t65 * t33;
t14 = -t36 * qJ(4) + t20;
t6 = t60 * t10 + t62 * t14;
t24 = -t60 * t36 + t62 * t38;
t64 = sin(qJ(5));
t67 = cos(qJ(5));
t16 = t64 * t24 + t67 * t99;
t107 = t16 * t67;
t18 = t67 * t24 - t64 * t99;
t106 = t18 * t64;
t105 = t18 * t67;
t104 = t22 * t42;
t103 = t36 * t68;
t102 = t38 * t65;
t55 = t61 ^ 2;
t101 = t55 * t69;
t98 = t63 * t66;
t97 = t64 * t22;
t96 = t64 * t42;
t95 = t64 * t44;
t52 = pkin(9) + t109;
t94 = t64 * t52;
t93 = t64 * t67;
t92 = t67 * t44;
t91 = t67 * t52;
t56 = t64 ^ 2;
t58 = t67 ^ 2;
t89 = t56 + t58;
t57 = t65 ^ 2;
t59 = t68 ^ 2;
t88 = t57 + t59;
t87 = t42 * t119;
t86 = -0.2e1 * t99;
t85 = 0.2e1 * t99;
t82 = t65 * t99;
t81 = t68 * t99;
t80 = t64 * t92;
t79 = -t62 * t10 + t60 * t14;
t4 = -pkin(9) * t99 + t6;
t48 = pkin(7) * t100;
t31 = t48 + (-pkin(2) - t110) * t63;
t25 = t36 * pkin(3) + t31;
t7 = t22 * pkin(4) - t24 * pkin(9) + t25;
t1 = -t64 * t4 + t67 * t7;
t2 = t67 * t4 + t64 * t7;
t77 = t1 * t67 + t2 * t64;
t76 = -t1 * t64 + t2 * t67;
t26 = t42 * pkin(4) - t44 * pkin(9) + t54;
t29 = -t62 * t46 + t60 * t78;
t11 = t67 * t26 - t64 * t29;
t12 = t64 * t26 + t67 * t29;
t75 = t11 * t67 + t12 * t64;
t74 = -t11 * t64 + t12 * t67;
t73 = -t19 * t65 + t20 * t68;
t53 = -pkin(4) - t108;
t72 = -t42 * t52 + t44 * t53;
t50 = t55 * t69 ^ 2;
t41 = t44 ^ 2;
t40 = pkin(1) * t98 + t83;
t39 = t63 * t110 - t48;
t35 = t67 * t42;
t21 = t67 * t22;
t15 = t64 * t16;
t3 = pkin(4) * t99 + t79;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t55 * t66 ^ 2, 0.2e1 * t66 * t101, t98 * t113, t50, t63 * t85, t63 ^ 2, 0.2e1 * pkin(1) * t101 + 0.2e1 * t39 * t63, -0.2e1 * t55 * t111 - 0.2e1 * t40 * t63, (-t39 * t66 + t40 * t69) * t113, t55 * pkin(1) ^ 2 + t39 ^ 2 + t40 ^ 2, t38 ^ 2, -0.2e1 * t38 * t36, t38 * t86, t36 ^ 2, t36 * t85, t50, -0.2e1 * t19 * t99 + 0.2e1 * t31 * t36, 0.2e1 * t20 * t99 + 0.2e1 * t31 * t38, -0.2e1 * t19 * t38 - 0.2e1 * t20 * t36, t19 ^ 2 + t20 ^ 2 + t31 ^ 2, t24 ^ 2, t24 * t115, t24 * t86, t118, t22 * t85, t50, 0.2e1 * t25 * t22 + 0.2e1 * t79 * t99, 0.2e1 * t25 * t24 + 0.2e1 * t6 * t99, -0.2e1 * t6 * t22 + 0.2e1 * t24 * t79, t25 ^ 2 + t6 ^ 2 + t79 ^ 2, t18 ^ 2, -0.2e1 * t18 * t16, 0.2e1 * t18 * t22, t16 ^ 2, t16 * t115, t118, 0.2e1 * t1 * t22 + 0.2e1 * t3 * t16, 0.2e1 * t3 * t18 - 0.2e1 * t2 * t22, -0.2e1 * t1 * t18 - 0.2e1 * t2 * t16, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, t99, t63, t39, -t40, 0, 0, t102, -t65 * t36 + t38 * t68, -t82, -t103, -t81, 0, -pkin(2) * t36 + pkin(8) * t82 - t31 * t68, -pkin(2) * t38 + pkin(8) * t81 + t31 * t65, (t102 - t103) * pkin(8) + t73, -t31 * pkin(2) + pkin(8) * t73, t24 * t44, -t44 * t22 - t24 * t42, -t44 * t99, t104, t42 * t99, 0, t54 * t22 + t25 * t42 + t27 * t99, t54 * t24 + t25 * t44 + t29 * t99, -t29 * t22 + t27 * t24 - t6 * t42 + t44 * t79, t25 * t54 + t27 * t79 + t6 * t29, t18 * t92, (-t106 - t107) * t44, t18 * t42 + t22 * t92, t16 * t95, -t16 * t42 - t22 * t95, t104, t1 * t42 + t11 * t22 + t27 * t16 + t3 * t95, -t12 * t22 + t27 * t18 - t2 * t42 + t3 * t92, -t11 * t18 - t12 * t16 - t44 * t77, t1 * t11 + t2 * t12 + t3 * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t57, t65 * t112, 0, t59, 0, 0, pkin(2) * t112, -0.2e1 * pkin(2) * t65, 0.2e1 * t88 * pkin(8), t88 * pkin(8) ^ 2 + pkin(2) ^ 2, t41, t87, 0, t116, 0, 0, t42 * t114, t44 * t114, 0.2e1 * t27 * t44 - 0.2e1 * t29 * t42, t29 ^ 2 + t54 ^ 2 + t117, t58 * t41, -0.2e1 * t41 * t93, 0.2e1 * t42 * t92, t56 * t41, t64 * t87, t116, 0.2e1 * t11 * t42 + 0.2e1 * t27 * t95, -0.2e1 * t12 * t42 + 0.2e1 * t27 * t92, t75 * t119, t11 ^ 2 + t12 ^ 2 + t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, -t36, -t99, t19, -t20, 0, 0, 0, 0, t24, 0, -t22, -t99, -t62 * t84 - t79, t60 * t84 - t6, (-t22 * t60 - t24 * t62) * pkin(3), (t6 * t60 - t62 * t79) * pkin(3), t106, -t15 + t105, t97, -t107, t21, 0, t53 * t16 - t22 * t94 - t3 * t67, t53 * t18 - t22 * t91 + t3 * t64, (t106 - t107) * t52 + t76, t3 * t53 + t52 * t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, 0, t68, 0, -t65 * pkin(8), -t68 * pkin(8), 0, 0, 0, 0, t44, 0, -t42, 0, -t27, -t29, (-t42 * t60 - t44 * t62) * pkin(3), (-t27 * t62 + t29 * t60) * pkin(3), t80, (-t56 + t58) * t44, t96, -t80, t35, 0, -t27 * t67 + t64 * t72, t27 * t64 + t67 * t72, t74, t27 * t53 + t52 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t109, 0, (t60 ^ 2 + t62 ^ 2) * pkin(3) ^ 2, t56, 0.2e1 * t93, 0, t58, 0, 0, -0.2e1 * t53 * t67, 0.2e1 * t53 * t64, 0.2e1 * t89 * t52, t52 ^ 2 * t89 + t53 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, t24, 0, t25, 0, 0, 0, 0, 0, 0, t21, -t97, -t15 - t105, t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, t44, 0, t54, 0, 0, 0, 0, 0, 0, t35, -t96, -t89 * t44, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, 0, -t16, t22, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t92, 0, -t95, t42, t11, -t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, t67, 0, -t94, -t91, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t64, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t5;
