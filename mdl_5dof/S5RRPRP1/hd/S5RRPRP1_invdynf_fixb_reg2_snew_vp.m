% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 10:20
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 10:20:19
% EndTime: 2022-01-20 10:20:21
% DurationCPUTime: 1.95s
% Computational Cost: add. (4741->139), mult. (6817->181), div. (0->0), fcn. (3888->8), ass. (0->106)
t1044 = sin(qJ(1));
t1047 = cos(qJ(1));
t1036 = qJD(1) + qJD(2);
t1034 = t1036 ^ 2;
t1035 = qJDD(1) + qJDD(2);
t1040 = sin(pkin(8));
t1041 = cos(pkin(8));
t1008 = t1040 * t1034 - t1041 * t1035;
t1043 = sin(qJ(2));
t1046 = cos(qJ(2));
t1055 = -t1041 * t1034 - t1040 * t1035;
t1070 = t1043 * t1008 + t1046 * t1055;
t991 = t1046 * t1008 - t1043 * t1055;
t1074 = t1044 * t991 + t1047 * t1070;
t1073 = -t1044 * t1070 + t1047 * t991;
t1014 = t1043 * t1034 - t1046 * t1035;
t1054 = -t1046 * t1034 - t1043 * t1035;
t1069 = t1044 * t1014 + t1047 * t1054;
t1068 = t1047 * t1014 - t1044 * t1054;
t1025 = t1044 * g(1) - t1047 * g(2);
t1051 = qJDD(1) * pkin(1) + t1025;
t1026 = -t1047 * g(1) - t1044 * g(2);
t1049 = qJD(1) ^ 2;
t1052 = -t1049 * pkin(1) + t1026;
t996 = -t1043 * t1052 + t1046 * t1051;
t1050 = t1035 * pkin(2) + t996;
t997 = t1043 * t1051 + t1046 * t1052;
t995 = -t1034 * pkin(2) + t997;
t979 = t1040 * t1050 + t1041 * t995;
t1039 = -g(3) + qJDD(3);
t1042 = sin(qJ(4));
t1045 = cos(qJ(4));
t975 = -t1034 * pkin(3) + t1035 * pkin(7) + t979;
t972 = t1042 * t1039 + t1045 * t975;
t1063 = t1034 * t1045;
t1062 = t1036 * t1042;
t1038 = t1045 ^ 2;
t1061 = t1038 * t1034;
t1060 = t1042 * t1035;
t1059 = t1045 * t1035;
t1037 = t1042 ^ 2;
t1058 = t1037 + t1038;
t1057 = 0.2e1 * t1036 * t1045;
t1056 = qJD(4) * t1062;
t978 = -t1040 * t995 + t1041 * t1050;
t974 = -t1035 * pkin(3) - t1034 * pkin(7) - t978;
t1053 = -t1056 + t1059;
t1048 = qJD(4) ^ 2;
t1031 = t1045 * t1039;
t1024 = t1042 * t1063;
t1023 = -t1048 - t1061;
t1022 = -t1037 * t1034 - t1048;
t1021 = -t1044 * qJDD(1) - t1047 * t1049;
t1020 = t1047 * qJDD(1) - t1044 * t1049;
t1019 = -qJDD(4) + t1024;
t1018 = qJDD(4) + t1024;
t1017 = qJD(4) * pkin(4) - qJ(5) * t1062;
t1016 = t1058 * t1034;
t1011 = t1058 * t1035;
t1004 = -0.2e1 * t1056 + t1059;
t1003 = qJD(4) * t1057 + t1060;
t1001 = t1045 * t1019 - t1042 * t1022;
t1000 = -t1042 * t1018 + t1045 * t1023;
t999 = t1042 * t1019 + t1045 * t1022;
t998 = t1045 * t1018 + t1042 * t1023;
t994 = t1041 * t1011 - t1040 * t1016;
t993 = t1040 * t1011 + t1041 * t1016;
t985 = t1041 * t1001 + t1040 * t1003;
t984 = t1041 * t1000 - t1040 * t1004;
t983 = t1040 * t1001 - t1041 * t1003;
t982 = t1040 * t1000 + t1041 * t1004;
t981 = -t1043 * t996 + t1046 * t997;
t980 = t1043 * t997 + t1046 * t996;
t977 = -t1043 * t993 + t1046 * t994;
t976 = t1043 * t994 + t1046 * t993;
t971 = -t1042 * t975 + t1031;
t970 = -t1043 * t983 + t1046 * t985;
t969 = -t1043 * t982 + t1046 * t984;
t968 = t1043 * t985 + t1046 * t983;
t967 = t1043 * t984 + t1046 * t982;
t966 = -t1053 * pkin(4) - qJ(5) * t1061 + t1017 * t1062 + qJDD(5) + t974;
t965 = -pkin(4) * t1061 + t1053 * qJ(5) - qJD(4) * t1017 + qJD(5) * t1057 + t972;
t964 = qJDD(4) * pkin(4) + t1031 + (pkin(4) * t1063 - t1035 * qJ(5) - 0.2e1 * qJD(5) * t1036 - t975) * t1042;
t963 = -t1044 * t976 + t1047 * t977;
t962 = -t1040 * t978 + t1041 * t979;
t961 = t1044 * t977 + t1047 * t976;
t960 = t1040 * t979 + t1041 * t978;
t959 = -t1042 * t971 + t1045 * t972;
t958 = t1042 * t972 + t1045 * t971;
t957 = -t1044 * t968 + t1047 * t970;
t956 = -t1044 * t967 + t1047 * t969;
t955 = t1044 * t970 + t1047 * t968;
t954 = t1044 * t969 + t1047 * t967;
t953 = -t1042 * t964 + t1045 * t965;
t952 = t1042 * t965 + t1045 * t964;
t951 = t1040 * t974 + t1041 * t959;
t950 = t1040 * t959 - t1041 * t974;
t949 = -t1043 * t960 + t1046 * t962;
t948 = t1043 * t962 + t1046 * t960;
t947 = t1040 * t966 + t1041 * t953;
t946 = t1040 * t953 - t1041 * t966;
t945 = -t1043 * t950 + t1046 * t951;
t944 = t1043 * t951 + t1046 * t950;
t943 = -t1043 * t946 + t1046 * t947;
t942 = t1043 * t947 + t1046 * t946;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1021, -t1020, 0, -t1044 * t1025 + t1047 * t1026, 0, 0, 0, 0, 0, 0, t1069, t1068, 0, -t1044 * t980 + t1047 * t981, 0, 0, 0, 0, 0, 0, t1074, t1073, 0, -t1044 * t948 + t1047 * t949, 0, 0, 0, 0, 0, 0, t956, t957, t963, -t1044 * t944 + t1047 * t945, 0, 0, 0, 0, 0, 0, t956, t957, t963, -t1044 * t942 + t1047 * t943; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1020, t1021, 0, t1047 * t1025 + t1044 * t1026, 0, 0, 0, 0, 0, 0, -t1068, t1069, 0, t1044 * t981 + t1047 * t980, 0, 0, 0, 0, 0, 0, -t1073, t1074, 0, t1044 * t949 + t1047 * t948, 0, 0, 0, 0, 0, 0, t954, t955, t961, t1044 * t945 + t1047 * t944, 0, 0, 0, 0, 0, 0, t954, t955, t961, t1044 * t943 + t1047 * t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, 0, 0, 0, 0, 0, 0, t998, t999, 0, t958, 0, 0, 0, 0, 0, 0, t998, t999, 0, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1049, -qJDD(1), 0, t1026, 0, 0, 0, 0, 0, 0, t1054, t1014, 0, t981, 0, 0, 0, 0, 0, 0, t1070, t991, 0, t949, 0, 0, 0, 0, 0, 0, t969, t970, t977, t945, 0, 0, 0, 0, 0, 0, t969, t970, t977, t943; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1049, 0, t1025, 0, 0, 0, 0, 0, 0, -t1014, t1054, 0, t980, 0, 0, 0, 0, 0, 0, -t991, t1070, 0, t948, 0, 0, 0, 0, 0, 0, t967, t968, t976, t944, 0, 0, 0, 0, 0, 0, t967, t968, t976, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, 0, 0, 0, 0, 0, 0, t998, t999, 0, t958, 0, 0, 0, 0, 0, 0, t998, t999, 0, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1034, -t1035, 0, t997, 0, 0, 0, 0, 0, 0, t1055, t1008, 0, t962, 0, 0, 0, 0, 0, 0, t984, t985, t994, t951, 0, 0, 0, 0, 0, 0, t984, t985, t994, t947; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1035, -t1034, 0, t996, 0, 0, 0, 0, 0, 0, -t1008, t1055, 0, t960, 0, 0, 0, 0, 0, 0, t982, t983, t993, t950, 0, 0, 0, 0, 0, 0, t982, t983, t993, t946; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, 0, 0, 0, 0, 0, 0, t998, t999, 0, t958, 0, 0, 0, 0, 0, 0, t998, t999, 0, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1034, -t1035, 0, t979, 0, 0, 0, 0, 0, 0, t1000, t1001, t1011, t959, 0, 0, 0, 0, 0, 0, t1000, t1001, t1011, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1035, -t1034, 0, t978, 0, 0, 0, 0, 0, 0, t1004, -t1003, t1016, -t974, 0, 0, 0, 0, 0, 0, t1004, -t1003, t1016, -t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, 0, 0, 0, 0, 0, 0, t998, t999, 0, t958, 0, 0, 0, 0, 0, 0, t998, t999, 0, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, t1019, t1059, t972, 0, 0, 0, 0, 0, 0, t1023, t1019, t1059, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, t1022, -t1060, t971, 0, 0, 0, 0, 0, 0, t1018, t1022, -t1060, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1004, t1003, -t1016, t974, 0, 0, 0, 0, 0, 0, -t1004, t1003, -t1016, t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, t1019, t1059, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, t1022, -t1060, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1004, t1003, -t1016, t966;];
f_new_reg = t1;
