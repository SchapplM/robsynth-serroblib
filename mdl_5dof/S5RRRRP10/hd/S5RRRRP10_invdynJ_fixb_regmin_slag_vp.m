% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S5RRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
% 
% Output:
% tau_reg [5x28]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-16 00:37
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRRP10_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP10_invdynJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP10_invdynJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP10_invdynJ_fixb_regmin_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP10_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP10_invdynJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-16 00:35:53
% EndTime: 2021-01-16 00:36:24
% DurationCPUTime: 9.49s
% Computational Cost: add. (7359->591), mult. (18292->817), div. (0->0), fcn. (14292->10), ass. (0->277)
t230 = cos(qJ(2));
t221 = sin(pkin(5));
t332 = qJD(1) * t221;
t205 = t230 * t332;
t271 = t205 - qJD(3);
t226 = sin(qJ(2));
t222 = cos(pkin(5));
t331 = qJD(1) * t222;
t313 = pkin(1) * t331;
t155 = pkin(7) * t205 + t226 * t313;
t225 = sin(qJ(3));
t229 = cos(qJ(3));
t409 = -t155 - t271 * (pkin(3) * t225 - pkin(9) * t229);
t224 = sin(qJ(4));
t228 = cos(qJ(4));
t281 = t229 * t205;
t305 = t226 * t332;
t124 = t224 * t281 - t228 * t305;
t325 = qJD(3) * t229;
t408 = -t224 * t325 + t124;
t349 = t225 * t226;
t355 = t221 * t229;
t162 = t222 * t349 + t355;
t163 = t221 * t349 - t222 * t229;
t227 = sin(qJ(1));
t231 = cos(qJ(1));
t340 = t231 * t230;
t273 = g(3) * t163 + g(1) * (-t162 * t227 + t225 * t340);
t285 = qJD(2) + t331;
t266 = qJD(3) * t285;
t320 = qJDD(1) * t222;
t280 = qJDD(2) + t320;
t329 = qJD(2) * t230;
t303 = t225 * t329;
t319 = qJDD(1) * t226;
t56 = (qJD(1) * (t226 * t325 + t303) + t225 * t319) * t221 + t225 * t266 - t229 * t280;
t321 = qJD(1) * qJD(2);
t298 = t226 * t321;
t279 = t221 * t298;
t317 = qJDD(1) * t230;
t204 = t221 * t317;
t316 = qJDD(3) - t204;
t246 = t279 + t316;
t407 = pkin(8) * t246;
t344 = t227 * t230;
t405 = g(2) * (t162 * t231 + t225 * t344);
t404 = g(3) * t221;
t120 = pkin(8) * t285 + t155;
t268 = -pkin(2) * t230 - pkin(8) * t226 - pkin(1);
t150 = t268 * t221;
t126 = qJD(1) * t150;
t327 = qJD(3) * t225;
t284 = qJD(2) * t313;
t311 = pkin(1) * t320;
t306 = pkin(7) * t204 + t226 * t311 + t230 * t284;
t241 = -pkin(7) * t279 + t306;
t78 = pkin(8) * t280 + t241;
t275 = pkin(2) * t226 - pkin(8) * t230;
t253 = t275 * qJD(2);
t81 = (qJD(1) * t253 + qJDD(1) * t268) * t221;
t287 = t120 * t325 + t126 * t327 + t225 * t78 - t229 * t81;
t13 = -pkin(3) * t246 + t287;
t263 = t225 * t280;
t302 = t229 * t329;
t318 = qJDD(1) * t229;
t234 = (t226 * t318 + (-t226 * t327 + t302) * qJD(1)) * t221 + t229 * t266 + t263;
t136 = t225 * t285 + t229 * t305;
t93 = t228 * t136 - t224 * t271;
t27 = qJD(4) * t93 + t234 * t224 - t228 * t246;
t7 = t27 * pkin(4) + qJDD(5) + t13;
t403 = t273 - t7;
t290 = t228 * t271;
t324 = qJD(4) * t224;
t26 = qJD(4) * t290 + t136 * t324 - t224 * t246 - t228 * t234;
t134 = t225 * t305 - t229 * t285;
t127 = qJD(4) + t134;
t91 = t136 * t224 + t290;
t370 = t127 * t91;
t402 = -t26 - t370;
t363 = t93 * t127;
t401 = t27 + t363;
t312 = pkin(8) * t327;
t400 = t224 * t312 + t409 * t228;
t399 = t271 * t136;
t356 = t221 * t226;
t206 = pkin(7) * t356;
t385 = pkin(1) * t230;
t398 = t222 * t385 - t206;
t345 = t226 * t231;
t170 = t222 * t344 + t345;
t347 = t226 * t227;
t169 = -t222 * t340 + t347;
t354 = t221 * t230;
t265 = g(2) * t169 - g(3) * t354;
t243 = g(1) * t170 + t265;
t397 = t281 - t325;
t187 = -pkin(3) * t229 - pkin(9) * t225 - pkin(2);
t323 = qJD(4) * t228;
t152 = -pkin(7) * t305 + t230 * t313;
t153 = t275 * t332;
t338 = t229 * t152 + t225 * t153;
t64 = pkin(9) * t305 + t338;
t396 = -t187 * t323 - t409 * t224 + t228 * t64;
t168 = -t222 * t345 - t344;
t113 = -t168 * t225 + t231 * t355;
t167 = t222 * t347 - t340;
t395 = g(2) * (t167 * t225 + t227 * t355) + g(1) * t113;
t350 = t225 * t221;
t114 = -t167 * t229 + t227 * t350;
t346 = t226 * t229;
t164 = t221 * t346 + t222 * t225;
t393 = g(2) * (t168 * t229 + t231 * t350) - g(3) * t164 - g(1) * t114;
t392 = t93 ^ 2;
t232 = qJD(1) ^ 2;
t391 = qJD(2) ^ 2;
t119 = -t285 * pkin(2) - t152;
t44 = t134 * pkin(3) - t136 * pkin(9) + t119;
t55 = t229 * t120 + t225 * t126;
t47 = -pkin(9) * t271 + t55;
t20 = -t224 * t47 + t228 * t44;
t9 = -qJ(5) * t93 + t20;
t8 = pkin(4) * t127 + t9;
t390 = -t9 + t8;
t389 = t228 * t405;
t51 = qJDD(4) + t56;
t388 = t51 * pkin(4);
t387 = t91 * pkin(4);
t218 = t221 ^ 2;
t386 = pkin(1) * t218;
t378 = t224 * t7;
t223 = qJ(5) + pkin(9);
t341 = t229 * t230;
t256 = t224 * t226 + t228 * t341;
t138 = t256 * t221;
t125 = qJD(1) * t138;
t343 = t228 * t229;
t210 = pkin(8) * t343;
t282 = t225 * t205;
t322 = t228 * qJD(5);
t377 = -pkin(4) * t282 + qJ(5) * t125 + t224 * t64 - t225 * t322 + (pkin(4) * t225 - qJ(5) * t343) * qJD(3) + (-t210 + (qJ(5) * t225 - t187) * t224) * qJD(4) + t400;
t348 = t225 * t228;
t376 = qJ(5) * t124 + (-pkin(8) * qJD(3) - qJ(5) * qJD(4)) * t348 + (-qJD(5) * t225 + (-pkin(8) * qJD(4) - qJ(5) * qJD(3)) * t229) * t224 - t396;
t54 = -t225 * t120 + t229 * t126;
t80 = pkin(3) * t136 + pkin(9) * t134;
t375 = t224 * t80 + t228 * t54;
t148 = t206 + (-pkin(2) - t385) * t222;
t60 = t163 * pkin(3) - t164 * pkin(9) + t148;
t353 = t222 * t226;
t335 = pkin(1) * t353 + pkin(7) * t354;
t149 = pkin(8) * t222 + t335;
t339 = t229 * t149 + t225 * t150;
t62 = -pkin(9) * t354 + t339;
t374 = t224 * t60 + t228 * t62;
t372 = qJ(5) * t27;
t21 = t224 * t44 + t228 * t47;
t10 = -qJ(5) * t91 + t21;
t371 = t10 * t127;
t369 = t13 * t224;
t368 = t224 * t51;
t367 = t224 * t93;
t366 = t228 * t51;
t365 = t26 * qJ(5);
t364 = t26 * t224;
t140 = t225 * t152;
t63 = -pkin(3) * t305 - t153 * t229 + t140;
t362 = pkin(8) * t325 - t63 + (t225 * t323 - t408) * pkin(4);
t292 = qJD(4) * t223;
t359 = t134 * t224;
t361 = -qJ(5) * t359 - t224 * t292 + t322 - t375;
t358 = t134 * t228;
t75 = t228 * t80;
t360 = -pkin(4) * t136 - qJ(5) * t358 - t228 * t292 - t75 + (-qJD(5) + t54) * t224;
t357 = t218 * t232;
t352 = t224 * t225;
t351 = t224 * t230;
t342 = t228 * t230;
t334 = t224 * t187 + t210;
t219 = t226 ^ 2;
t333 = -t230 ^ 2 + t219;
t330 = qJD(2) * t226;
t328 = qJD(3) * t224;
t326 = qJD(3) * t228;
t310 = t230 * t357;
t309 = t221 * t351;
t308 = t221 * t342;
t307 = t224 * t346;
t216 = pkin(4) * t224 + pkin(8);
t304 = t221 * t330;
t300 = t127 * t324;
t299 = t221 * t222 * t232;
t297 = t230 * t321;
t296 = t221 * t319;
t294 = qJD(5) + t387;
t293 = -t224 * t62 + t228 * t60;
t251 = t120 * t327 - t126 * t325 - t225 * t81 - t229 * t78;
t12 = pkin(9) * t246 - t251;
t278 = t221 * t297;
t283 = t226 * t284 - t230 * t311 + (t278 + t296) * pkin(7);
t79 = -t280 * pkin(2) + t283;
t17 = t56 * pkin(3) - pkin(9) * t234 + t79;
t3 = t228 * t12 + t224 * t17 + t44 * t323 - t47 * t324;
t291 = -t225 * t149 + t150 * t229;
t217 = pkin(4) * t228 + pkin(3);
t166 = -t217 * t225 + t223 * t229;
t289 = t230 * t271;
t288 = t127 * t228;
t286 = qJD(3) * t271;
t165 = t222 * t346 - t350;
t110 = t165 * t224 + t222 * t342;
t172 = t224 * t341 - t226 * t228;
t65 = t110 * t231 + t172 * t227;
t277 = -g(1) * t65 - g(2) * (t110 * t227 - t231 * t172);
t112 = -t165 * t231 - t227 * t341;
t244 = t231 * t256;
t259 = -t165 * t228 + t222 * t351;
t67 = -t227 * t259 - t244;
t276 = -g(1) * (t112 * t228 - t169 * t224) + g(2) * t67;
t61 = pkin(3) * t354 - t291;
t272 = t228 * t325 - t125;
t269 = t217 * t229 + t223 * t225;
t161 = pkin(2) + t269;
t270 = t161 * t230 + t216 * t226;
t103 = -t161 * t226 + t216 * t230;
t267 = (-t405 - t273) * t224;
t154 = t221 * t253;
t156 = t398 * qJD(2);
t264 = -t149 * t325 - t150 * t327 + t154 * t229 - t225 * t156;
t262 = -t127 * t323 - t368;
t108 = t164 * t224 + t308;
t255 = t307 + t342;
t247 = -t149 * t327 + t150 * t325 + t225 * t154 + t229 * t156;
t30 = pkin(9) * t304 + t247;
t106 = qJD(3) * t164 + t221 * t303;
t107 = -qJD(3) * t163 + t221 * t302;
t157 = t335 * qJD(2);
t36 = t106 * pkin(3) - t107 * pkin(9) + t157;
t254 = t224 * t36 + t228 * t30 + t60 * t323 - t62 * t324;
t46 = t271 * pkin(3) - t54;
t252 = -pkin(9) * t51 + t127 * t46;
t139 = t172 * t222;
t250 = -g(1) * (t139 * t227 + t231 * t255) - g(2) * (-t139 * t231 + t227 * t255) + t172 * t404;
t146 = t170 * t229;
t249 = -g(1) * (-t146 * t228 - t167 * t224) - g(2) * (t227 * (-t226 * t343 + t351) + t222 * t244) - g(3) * t138;
t248 = t297 + t319;
t240 = -0.2e1 * t298 + 0.2e1 * t317;
t31 = -pkin(3) * t304 - t264;
t109 = t164 * t228 - t309;
t239 = -g(1) * t67 - g(2) * (-t227 * t256 + t231 * t259) + g(3) * t109 - t3;
t4 = -t21 * qJD(4) - t224 * t12 + t228 * t17;
t238 = -t374 * qJD(4) - t224 * t30 + t228 * t36;
t235 = -g(1) * (-(-t165 * t227 + t229 * t340) * t224 + t170 * t228) + g(2) * t65 + g(3) * t108 + t4;
t192 = t223 * t228;
t191 = t223 * t224;
t181 = t216 * t225;
t178 = t228 * t187;
t160 = t172 * pkin(4);
t117 = -qJ(5) * t352 + t334;
t102 = pkin(1) + t270;
t100 = -qJ(5) * t348 + t178 + (-pkin(8) * t224 - pkin(4)) * t229;
t99 = (t222 * t255 - t224 * t350) * pkin(4);
t95 = t270 * t222;
t90 = t91 ^ 2;
t88 = t166 * t353 - t221 * t269;
t58 = -t221 * (-pkin(7) + t166) + t103 * t222;
t42 = -qJD(4) * t108 + t107 * t228 + t224 * t304;
t41 = -qJD(4) * t309 + t107 * t224 + t164 * t323 - t228 * t304;
t33 = -pkin(4) * t359 + t55;
t32 = pkin(4) * t108 + t61;
t28 = t294 + t46;
t22 = -qJ(5) * t108 + t374;
t18 = pkin(4) * t163 - qJ(5) * t109 + t293;
t14 = pkin(4) * t41 + t31;
t6 = -qJ(5) * t41 - qJD(5) * t108 + t254;
t5 = t106 * pkin(4) - t42 * qJ(5) - t109 * qJD(5) + t238;
t2 = -qJD(5) * t91 + t3 - t372;
t1 = -t93 * qJD(5) + t365 + t388 + t4;
t11 = [qJDD(1), g(1) * t227 - g(2) * t231, g(1) * t231 + g(2) * t227, (qJDD(1) * t219 + 0.2e1 * t226 * t297) * t218, 0.2e1 * (t226 * t317 - t321 * t333) * t218, (t226 * qJDD(2) + 0.2e1 * t222 * t248 + t391 * t230) * t221, (qJDD(2) * t230 + t222 * t240 - t391 * t226) * t221, t280 * t222, -g(1) * t168 + g(2) * t167 - t157 * t285 - t283 * t222 + t240 * t386 + t398 * t280, -g(1) * t169 + g(2) * t170 - t156 * t285 - t222 * t241 - 0.2e1 * t248 * t386 - t280 * t335, t136 * t107 + t234 * t164, -t136 * t106 - t107 * t134 - t234 * t163 - t164 * t56, -t107 * t271 + t164 * t316 + ((-t263 + (-t266 - t278) * t229) * t230 + (-(-qJD(1) * t327 + t318) * t354 + (qJD(1) * t164 + t136) * qJD(2)) * t226) * t221, t106 * t271 - t163 * t316 + (t56 * t230 + (-qJD(1) * t163 - t134) * t330) * t221, (-t316 * t230 + (-t205 - t271) * t330) * t221, -g(1) * t112 - g(2) * t114 + t119 * t106 + t157 * t134 + t148 * t56 + t79 * t163 + t246 * t291 - t264 * t271 + t287 * t354 + t304 * t54, t119 * t107 + t157 * t136 + t148 * t234 + t79 * t164 - t246 * t339 + t247 * t271 - t251 * t354 - t304 * t55 - t395, -t109 * t26 + t42 * t93, t108 * t26 - t109 * t27 - t41 * t93 - t42 * t91, t106 * t93 + t109 * t51 + t127 * t42 - t163 * t26, -t106 * t91 - t108 * t51 - t127 * t41 - t163 * t27, t106 * t127 + t163 * t51, t20 * t106 + t13 * t108 + t127 * t238 + t4 * t163 + t61 * t27 + t293 * t51 + t31 * t91 + t46 * t41 + t276, -t21 * t106 + t13 * t109 - t127 * t254 - t3 * t163 - t61 * t26 + t31 * t93 - t374 * t51 + t46 * t42 + t277, t1 * t163 + t106 * t8 + t108 * t7 + t127 * t5 + t14 * t91 + t18 * t51 + t27 * t32 + t28 * t41 + t276, -t10 * t106 + t109 * t7 - t127 * t6 + t14 * t93 - t163 * t2 - t22 * t51 - t26 * t32 + t28 * t42 + t277, -t1 * t109 - t10 * t41 - t2 * t108 + t18 * t26 - t22 * t27 - t8 * t42 - t5 * t93 - t6 * t91 + t395, t2 * t22 + t10 * t6 + t1 * t18 + t8 * t5 + t7 * t32 + t28 * t14 - g(1) * (-t102 * t227 + t231 * t58) - g(2) * (t102 * t231 + t227 * t58); 0, 0, 0, -t226 * t310, t333 * t357, -t230 * t299 + t296, t226 * t299 + t204, t280, pkin(1) * t226 * t357 + t155 * t285 + t243 - t283, pkin(1) * t310 + t152 * t285 - g(1) * t167 - g(2) * t168 + (pkin(7) * t321 + g(3)) * t356 - t306, (-qJD(3) * t305 + t280) * t225 ^ 2 + ((t221 * t248 + t266) * t225 - t399) * t229, -t225 * t56 + t229 * t234 + (t282 - t327) * t136 + t397 * t134, -t229 * t286 + t225 * t316 + (t229 * t289 + (qJD(2) * t225 - t136) * t226) * t332, t225 * t286 + t229 * t316 + (-t225 * t289 + (qJD(2) * t229 + t134) * t226) * t332, t271 * t305, -pkin(2) * t56 - t140 * t271 - t54 * t305 - t155 * t134 + g(1) * t146 + (-t119 * t271 - t407) * t225 + (pkin(8) * t286 + t153 * t271 + t265 - t79) * t229, -t229 * t407 - pkin(2) * t234 - t155 * t136 + t305 * t55 + (-t312 - t338) * t271 - t397 * t119 + (t79 - t243) * t225, -t26 * t348 + (-t225 * t324 + t272) * t93, t93 * t124 + t125 * t91 + (-t228 * t91 - t367) * t325 + (t364 - t228 * t27 + (t224 * t91 - t228 * t93) * qJD(4)) * t225, t26 * t229 + t272 * t127 + (-t271 * t93 - t300 + t366) * t225, t27 * t229 + t408 * t127 + (t271 * t91 + t262) * t225, -t127 * t225 * t271 - t51 * t229, -t46 * t124 + t178 * t51 - t63 * t91 + ((-qJD(4) * t187 + t64) * t224 + t400) * t127 + (t46 * t328 - t4 + (qJD(3) * t91 + t262) * pkin(8)) * t229 + (pkin(8) * t27 - t20 * t271 + t323 * t46 + t369) * t225 + t249, -t334 * t51 - t63 * t93 - t46 * t125 + t396 * t127 + (t46 * t326 + t3 + (qJD(3) * t93 + t300) * pkin(8)) * t229 + (-t46 * t324 + t13 * t228 + t271 * t21 + (t127 * t326 - t26) * pkin(8)) * t225 + t250, t100 * t51 - t124 * t28 + t181 * t27 + t362 * t91 + (t28 * t328 - t1) * t229 + t377 * t127 + (-t271 * t8 + t28 * t323 + t378) * t225 + t249, -t117 * t51 - t125 * t28 - t181 * t26 + t362 * t93 + (t28 * t326 + t2) * t229 - t376 * t127 + (t10 * t271 + t228 * t7 - t28 * t324) * t225 + t250, t10 * t124 + t100 * t26 - t117 * t27 + t125 * t8 - t377 * t93 - t376 * t91 + (-t10 * t224 - t228 * t8) * t325 + (-t1 * t228 - t2 * t224 + (-t10 * t228 + t224 * t8) * qJD(4) + t243) * t225, t2 * t117 + t1 * t100 + t7 * t181 - g(1) * (t103 * t231 - t227 * t95) - g(2) * (t103 * t227 + t231 * t95) + t377 * t8 + t362 * t28 - t270 * t404 + t376 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136 * t134, -t134 ^ 2 + t136 ^ 2, -t134 * t271 + t234, -t399 - t56, t246, g(2) * t113 - t119 * t136 - t271 * t55 + t273 - t287, t119 * t134 - t271 * t54 + t251 - t393, t288 * t93 - t364, -t401 * t224 + t402 * t228, t127 * t288 - t93 * t136 + t368, -t127 ^ 2 * t224 + t91 * t136 + t366, -t127 * t136, -pkin(3) * t27 + t389 - t75 * t127 - t20 * t136 - t55 * t91 + (t54 * t127 + t252) * t224 + (-pkin(9) * qJD(4) * t127 - t13 + t273) * t228, pkin(3) * t26 + t369 + t21 * t136 - t55 * t93 + (pkin(9) * t324 + t375) * t127 + t252 * t228 + t267, t389 - t136 * t8 - t191 * t51 - t217 * t27 - t33 * t91 + t360 * t127 + t403 * t228 + (t134 * t28 + (t28 + t387) * qJD(4)) * t224, t28 * t358 + t10 * t136 - t192 * t51 + t217 * t26 + t378 - t33 * t93 - t361 * t127 + (pkin(4) * t367 + t228 * t28) * qJD(4) + t267, -t192 * t27 - t191 * t26 - t360 * t93 - t361 * t91 + (-t127 * t8 + t2) * t228 + (-t1 - t371) * t224 + t393, t2 * t192 - t1 * t191 - t7 * t217 - g(1) * (t166 * t340 - t227 * t88) - g(2) * (t166 * t344 + t231 * t88) - g(3) * (t166 * t356 + t222 * t269) + t360 * t8 + (pkin(4) * t324 - t33) * t28 + t361 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93 * t91, -t90 + t392, -t26 + t370, -t27 + t363, t51, t127 * t21 - t46 * t93 + t235, t127 * t20 + t46 * t91 + t239, 0.2e1 * t388 + t365 + t371 + (-t28 - t294) * t93 + t235, -pkin(4) * t392 + t372 + t127 * t9 + (qJD(5) + t28) * t91 + t239, pkin(4) * t26 - t390 * t91, -g(1) * (-t160 * t231 + t227 * t99) - g(2) * (-t160 * t227 - t231 * t99) + t390 * t10 + (t1 - t28 * t93 - g(3) * (-t221 * t307 - t222 * t352 - t308)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t401, t402, -t90 - t392, t10 * t91 + t8 * t93 - t403 - t405;];
tau_reg = t11;
