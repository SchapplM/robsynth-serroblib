% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:09
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:09:09
% EndTime: 2022-01-20 12:09:12
% DurationCPUTime: 3.26s
% Computational Cost: add. (25285->221), mult. (32763->316), div. (0->0), fcn. (22363->10), ass. (0->183)
t1484 = qJD(1) + qJD(2);
t1481 = t1484 ^ 2;
t1482 = qJDD(1) + qJDD(2);
t1489 = sin(qJ(2));
t1494 = cos(qJ(2));
t1461 = t1489 * t1481 - t1494 * t1482;
t1490 = sin(qJ(1));
t1495 = cos(qJ(1));
t1503 = -t1494 * t1481 - t1489 * t1482;
t1534 = t1490 * t1461 + t1495 * t1503;
t1533 = t1495 * t1461 - t1490 * t1503;
t1483 = qJD(3) + qJD(4);
t1480 = qJD(5) + t1483;
t1530 = qJD(5) + t1480;
t1487 = sin(qJ(4));
t1492 = cos(qJ(4));
t1493 = cos(qJ(3));
t1517 = t1484 * t1493;
t1488 = sin(qJ(3));
t1518 = t1484 * t1488;
t1447 = t1487 * t1518 - t1492 * t1517;
t1449 = (t1487 * t1493 + t1488 * t1492) * t1484;
t1486 = sin(qJ(5));
t1491 = cos(qJ(5));
t1425 = t1491 * t1447 + t1486 * t1449;
t1529 = t1425 ^ 2;
t1427 = -t1486 * t1447 + t1491 * t1449;
t1528 = t1427 ^ 2;
t1527 = t1447 ^ 2;
t1526 = t1449 ^ 2;
t1525 = t1480 ^ 2;
t1524 = t1483 ^ 2;
t1523 = t1493 ^ 2;
t1522 = t1427 * t1425;
t1521 = t1449 * t1447;
t1520 = t1481 * t1488;
t1519 = t1483 * t1447;
t1475 = -t1495 * g(1) - t1490 * g(2);
t1497 = qJD(1) ^ 2;
t1464 = -t1497 * pkin(1) + t1475;
t1474 = t1490 * g(1) - t1495 * g(2);
t1500 = qJDD(1) * pkin(1) + t1474;
t1437 = t1494 * t1464 + t1489 * t1500;
t1433 = -t1481 * pkin(2) + t1482 * pkin(7) + t1437;
t1516 = t1488 * t1433;
t1515 = t1488 * t1482;
t1514 = t1493 * t1482;
t1513 = t1523 * t1481;
t1512 = qJD(4) - t1483;
t1511 = qJD(5) - t1480;
t1507 = qJD(3) * t1517;
t1453 = t1507 + t1515;
t1402 = qJDD(3) * pkin(3) - t1453 * pkin(8) - t1516 + (qJD(3) * t1484 * pkin(8) + pkin(3) * t1520 - g(3)) * t1493;
t1424 = -t1488 * g(3) + t1493 * t1433;
t1467 = qJD(3) * pkin(3) - pkin(8) * t1518;
t1508 = qJD(3) * t1518;
t1502 = -t1508 + t1514;
t1403 = -pkin(3) * t1513 + pkin(8) * t1502 - qJD(3) * t1467 + t1424;
t1382 = t1487 * t1402 + t1492 * t1403;
t1510 = qJDD(3) + qJDD(4);
t1485 = t1488 ^ 2;
t1509 = t1485 + t1523;
t1506 = -qJDD(5) - t1510;
t1381 = t1492 * t1402 - t1487 * t1403;
t1498 = -t1492 * t1453 - t1487 * t1502;
t1415 = -t1447 * qJD(4) - t1498;
t1504 = t1487 * t1453 - t1492 * t1502;
t1501 = t1449 * qJD(4) + t1504;
t1505 = -t1486 * t1415 - t1491 * t1501;
t1436 = -t1489 * t1464 + t1494 * t1500;
t1430 = t1510 - t1521;
t1432 = -t1482 * pkin(2) - t1481 * pkin(7) - t1436;
t1499 = -t1491 * t1415 + t1486 * t1501;
t1404 = -t1502 * pkin(3) - pkin(8) * t1513 + t1467 * t1518 + t1432;
t1496 = qJD(3) ^ 2;
t1473 = t1493 * t1520;
t1471 = -t1496 - t1513;
t1470 = -t1485 * t1481 - t1496;
t1469 = -t1490 * qJDD(1) - t1495 * t1497;
t1468 = t1495 * qJDD(1) - t1490 * t1497;
t1466 = -qJDD(3) + t1473;
t1465 = qJDD(3) + t1473;
t1463 = t1509 * t1481;
t1458 = t1509 * t1482;
t1454 = -0.2e1 * t1508 + t1514;
t1452 = 0.2e1 * t1507 + t1515;
t1443 = t1483 * pkin(4) - t1449 * pkin(9);
t1442 = -t1524 - t1526;
t1441 = t1493 * t1466 - t1488 * t1470;
t1440 = -t1488 * t1465 + t1493 * t1471;
t1439 = t1488 * t1466 + t1493 * t1470;
t1438 = t1493 * t1465 + t1488 * t1471;
t1435 = t1494 * t1458 - t1489 * t1463;
t1434 = t1489 * t1458 + t1494 * t1463;
t1431 = -t1510 - t1521;
t1429 = -t1524 - t1527;
t1423 = -t1493 * g(3) - t1516;
t1421 = t1494 * t1441 + t1489 * t1452;
t1420 = t1494 * t1440 - t1489 * t1454;
t1419 = t1489 * t1441 - t1494 * t1452;
t1418 = t1489 * t1440 + t1494 * t1454;
t1417 = -t1525 - t1528;
t1416 = -t1526 - t1527;
t1412 = -t1489 * t1436 + t1494 * t1437;
t1411 = t1494 * t1436 + t1489 * t1437;
t1410 = t1492 * t1431 - t1487 * t1442;
t1409 = t1487 * t1431 + t1492 * t1442;
t1408 = t1512 * t1447 + t1498;
t1407 = t1415 - t1519;
t1406 = -t1512 * t1449 - t1504;
t1405 = (qJD(4) + t1483) * t1449 + t1504;
t1398 = t1492 * t1429 - t1487 * t1430;
t1397 = t1487 * t1429 + t1492 * t1430;
t1396 = t1506 - t1522;
t1395 = -t1506 - t1522;
t1394 = -t1525 - t1529;
t1393 = -t1488 * t1423 + t1493 * t1424;
t1392 = t1493 * t1423 + t1488 * t1424;
t1391 = -t1528 - t1529;
t1390 = t1494 * t1393 + t1489 * t1432;
t1389 = t1489 * t1393 - t1494 * t1432;
t1388 = t1491 * t1396 - t1486 * t1417;
t1387 = t1486 * t1396 + t1491 * t1417;
t1386 = -t1488 * t1409 + t1493 * t1410;
t1385 = t1493 * t1409 + t1488 * t1410;
t1384 = t1492 * t1406 - t1487 * t1408;
t1383 = t1487 * t1406 + t1492 * t1408;
t1380 = -t1488 * t1397 + t1493 * t1398;
t1379 = t1493 * t1397 + t1488 * t1398;
t1378 = t1491 * t1394 - t1486 * t1395;
t1377 = t1486 * t1394 + t1491 * t1395;
t1376 = pkin(4) * t1501 - t1527 * pkin(9) + t1449 * t1443 + t1404;
t1375 = t1511 * t1425 + t1499;
t1374 = -t1530 * t1425 - t1499;
t1373 = -t1511 * t1427 + t1505;
t1372 = t1530 * t1427 - t1505;
t1371 = t1494 * t1386 + t1489 * t1407;
t1370 = t1489 * t1386 - t1494 * t1407;
t1369 = t1494 * t1380 + t1489 * t1405;
t1368 = t1489 * t1380 - t1494 * t1405;
t1367 = -t1527 * pkin(4) - pkin(9) * t1501 - t1483 * t1443 + t1382;
t1366 = (-t1415 - t1519) * pkin(9) + t1430 * pkin(4) + t1381;
t1365 = -t1487 * t1387 + t1492 * t1388;
t1364 = t1492 * t1387 + t1487 * t1388;
t1363 = -t1488 * t1383 + t1493 * t1384;
t1362 = t1493 * t1383 + t1488 * t1384;
t1361 = -t1487 * t1381 + t1492 * t1382;
t1360 = t1492 * t1381 + t1487 * t1382;
t1359 = -t1487 * t1377 + t1492 * t1378;
t1358 = t1492 * t1377 + t1487 * t1378;
t1357 = t1494 * t1363 + t1489 * t1416;
t1356 = t1489 * t1363 - t1494 * t1416;
t1355 = t1491 * t1373 - t1486 * t1375;
t1354 = t1486 * t1373 + t1491 * t1375;
t1353 = t1486 * t1366 + t1491 * t1367;
t1352 = t1491 * t1366 - t1486 * t1367;
t1351 = -t1488 * t1364 + t1493 * t1365;
t1350 = t1493 * t1364 + t1488 * t1365;
t1349 = -t1488 * t1360 + t1493 * t1361;
t1348 = t1493 * t1360 + t1488 * t1361;
t1347 = -t1488 * t1358 + t1493 * t1359;
t1346 = t1493 * t1358 + t1488 * t1359;
t1345 = t1494 * t1349 + t1489 * t1404;
t1344 = t1489 * t1349 - t1494 * t1404;
t1343 = t1494 * t1351 + t1489 * t1374;
t1342 = t1489 * t1351 - t1494 * t1374;
t1341 = -t1487 * t1354 + t1492 * t1355;
t1340 = t1492 * t1354 + t1487 * t1355;
t1339 = t1494 * t1347 + t1489 * t1372;
t1338 = t1489 * t1347 - t1494 * t1372;
t1337 = -t1486 * t1352 + t1491 * t1353;
t1336 = t1491 * t1352 + t1486 * t1353;
t1335 = -t1488 * t1340 + t1493 * t1341;
t1334 = t1493 * t1340 + t1488 * t1341;
t1333 = t1494 * t1335 + t1489 * t1391;
t1332 = t1489 * t1335 - t1494 * t1391;
t1331 = -t1487 * t1336 + t1492 * t1337;
t1330 = t1492 * t1336 + t1487 * t1337;
t1329 = -t1488 * t1330 + t1493 * t1331;
t1328 = t1493 * t1330 + t1488 * t1331;
t1327 = t1494 * t1329 + t1489 * t1376;
t1326 = t1489 * t1329 - t1494 * t1376;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1469, -t1468, 0, -t1490 * t1474 + t1495 * t1475, 0, 0, 0, 0, 0, 0, t1534, t1533, 0, -t1490 * t1411 + t1495 * t1412, 0, 0, 0, 0, 0, 0, -t1490 * t1418 + t1495 * t1420, -t1490 * t1419 + t1495 * t1421, -t1490 * t1434 + t1495 * t1435, -t1490 * t1389 + t1495 * t1390, 0, 0, 0, 0, 0, 0, -t1490 * t1368 + t1495 * t1369, -t1490 * t1370 + t1495 * t1371, -t1490 * t1356 + t1495 * t1357, -t1490 * t1344 + t1495 * t1345, 0, 0, 0, 0, 0, 0, -t1490 * t1338 + t1495 * t1339, -t1490 * t1342 + t1495 * t1343, -t1490 * t1332 + t1495 * t1333, -t1490 * t1326 + t1495 * t1327; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1468, t1469, 0, t1495 * t1474 + t1490 * t1475, 0, 0, 0, 0, 0, 0, -t1533, t1534, 0, t1495 * t1411 + t1490 * t1412, 0, 0, 0, 0, 0, 0, t1495 * t1418 + t1490 * t1420, t1495 * t1419 + t1490 * t1421, t1495 * t1434 + t1490 * t1435, t1495 * t1389 + t1490 * t1390, 0, 0, 0, 0, 0, 0, t1495 * t1368 + t1490 * t1369, t1495 * t1370 + t1490 * t1371, t1495 * t1356 + t1490 * t1357, t1495 * t1344 + t1490 * t1345, 0, 0, 0, 0, 0, 0, t1495 * t1338 + t1490 * t1339, t1495 * t1342 + t1490 * t1343, t1495 * t1332 + t1490 * t1333, t1495 * t1326 + t1490 * t1327; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1438, t1439, 0, t1392, 0, 0, 0, 0, 0, 0, t1379, t1385, t1362, t1348, 0, 0, 0, 0, 0, 0, t1346, t1350, t1334, t1328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1497, -qJDD(1), 0, t1475, 0, 0, 0, 0, 0, 0, t1503, t1461, 0, t1412, 0, 0, 0, 0, 0, 0, t1420, t1421, t1435, t1390, 0, 0, 0, 0, 0, 0, t1369, t1371, t1357, t1345, 0, 0, 0, 0, 0, 0, t1339, t1343, t1333, t1327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1497, 0, t1474, 0, 0, 0, 0, 0, 0, -t1461, t1503, 0, t1411, 0, 0, 0, 0, 0, 0, t1418, t1419, t1434, t1389, 0, 0, 0, 0, 0, 0, t1368, t1370, t1356, t1344, 0, 0, 0, 0, 0, 0, t1338, t1342, t1332, t1326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1438, t1439, 0, t1392, 0, 0, 0, 0, 0, 0, t1379, t1385, t1362, t1348, 0, 0, 0, 0, 0, 0, t1346, t1350, t1334, t1328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1481, -t1482, 0, t1437, 0, 0, 0, 0, 0, 0, t1440, t1441, t1458, t1393, 0, 0, 0, 0, 0, 0, t1380, t1386, t1363, t1349, 0, 0, 0, 0, 0, 0, t1347, t1351, t1335, t1329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1482, -t1481, 0, t1436, 0, 0, 0, 0, 0, 0, t1454, -t1452, t1463, -t1432, 0, 0, 0, 0, 0, 0, -t1405, -t1407, -t1416, -t1404, 0, 0, 0, 0, 0, 0, -t1372, -t1374, -t1391, -t1376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1438, t1439, 0, t1392, 0, 0, 0, 0, 0, 0, t1379, t1385, t1362, t1348, 0, 0, 0, 0, 0, 0, t1346, t1350, t1334, t1328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1471, t1466, t1514, t1424, 0, 0, 0, 0, 0, 0, t1398, t1410, t1384, t1361, 0, 0, 0, 0, 0, 0, t1359, t1365, t1341, t1331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1465, t1470, -t1515, t1423, 0, 0, 0, 0, 0, 0, t1397, t1409, t1383, t1360, 0, 0, 0, 0, 0, 0, t1358, t1364, t1340, t1330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1454, t1452, -t1463, t1432, 0, 0, 0, 0, 0, 0, t1405, t1407, t1416, t1404, 0, 0, 0, 0, 0, 0, t1372, t1374, t1391, t1376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1429, t1431, t1406, t1382, 0, 0, 0, 0, 0, 0, t1378, t1388, t1355, t1337; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1430, t1442, t1408, t1381, 0, 0, 0, 0, 0, 0, t1377, t1387, t1354, t1336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1405, t1407, t1416, t1404, 0, 0, 0, 0, 0, 0, t1372, t1374, t1391, t1376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1394, t1396, t1373, t1353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1395, t1417, t1375, t1352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, t1374, t1391, t1376;];
f_new_reg = t1;
