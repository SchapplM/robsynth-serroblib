% Calculate inertial parameters regressor of coriolis matrix for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:09
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRRR6_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:08:29
% EndTime: 2022-01-20 12:08:52
% DurationCPUTime: 16.18s
% Computational Cost: add. (17699->493), mult. (33393->590), div. (0->0), fcn. (35628->8), ass. (0->377)
t599 = qJD(3) + qJD(4);
t479 = cos(qJ(3));
t477 = sin(qJ(2));
t685 = pkin(1) * t477;
t464 = pkin(7) + t685;
t680 = pkin(8) + t464;
t432 = t680 * t479;
t478 = cos(qJ(4));
t415 = t478 * t432;
t476 = sin(qJ(3));
t431 = t680 * t476;
t475 = sin(qJ(4));
t644 = t475 * t431;
t351 = t415 - t644;
t639 = t478 * t479;
t642 = t475 * t476;
t437 = -t639 + t642;
t682 = pkin(9) * t437;
t289 = t351 - t682;
t686 = cos(qJ(5));
t760 = t686 * t289;
t261 = -t760 / 0.2e1;
t474 = sin(qJ(5));
t640 = t478 * t476;
t641 = t475 * t479;
t439 = t640 + t641;
t430 = t439 * pkin(9);
t557 = t478 * t431 + t475 * t432;
t712 = -t430 - t557;
t739 = t474 * t712;
t568 = -t739 / 0.2e1;
t783 = t568 + t261;
t790 = 0.2e1 * t783;
t706 = -pkin(8) - pkin(7);
t454 = t706 * t479;
t441 = t478 * t454;
t453 = t706 * t476;
t643 = t475 * t453;
t370 = -t441 + t643;
t325 = t370 - t682;
t759 = t686 * t325;
t306 = -t759 / 0.2e1;
t556 = -t478 * t453 - t475 * t454;
t713 = -t430 - t556;
t738 = t474 * t713;
t567 = -t738 / 0.2e1;
t784 = t567 + t306;
t789 = 0.2e1 * t784;
t576 = t686 * t475;
t645 = t474 * t478;
t427 = (t576 + t645) * pkin(3);
t786 = t427 / 0.2e1;
t782 = qJD(4) + qJD(5);
t736 = t686 * t713;
t748 = -t736 / 0.2e1;
t761 = t474 * t325;
t749 = t748 + t761 / 0.2e1;
t781 = 0.2e1 * t749;
t737 = t686 * t712;
t747 = -t737 / 0.2e1;
t762 = t474 * t289;
t750 = t747 + t762 / 0.2e1;
t780 = 0.2e1 * t750;
t779 = t759 / 0.2e1;
t778 = t760 / 0.2e1;
t548 = t737 / 0.2e1;
t57 = t747 + t548;
t777 = qJD(5) * t57;
t575 = t686 * t478;
t646 = t474 * t475;
t428 = (t575 - t646) * pkin(3);
t689 = -t428 / 0.2e1;
t588 = pkin(3) * t478 + pkin(4);
t455 = t686 * t588;
t418 = pkin(3) * t646 - t455;
t692 = t418 / 0.2e1;
t776 = t689 - t692;
t544 = t474 * t588;
t419 = pkin(3) * t576 + t544;
t691 = -t419 / 0.2e1;
t775 = t786 + t691;
t774 = t736 - t761;
t773 = t737 - t762;
t196 = t759 + t738;
t169 = t760 + t739;
t772 = qJD(3) * t789;
t771 = qJD(3) * t790;
t770 = qJD(3) * t780;
t769 = qJD(3) * t781;
t547 = t736 / 0.2e1;
t101 = t748 + t547;
t768 = qJD(5) * t101;
t766 = -t57 * qJD(1) - t101 * qJD(2);
t754 = qJD(5) + t599;
t600 = qJD(1) + qJD(2);
t355 = t686 * t437 + t474 * t439;
t424 = t686 * t439;
t647 = t474 * t437;
t714 = t424 - t647;
t732 = t355 ^ 2 - t714 ^ 2;
t746 = t600 * t732;
t745 = t754 * t355;
t740 = t600 * t355 * t714;
t683 = pkin(4) * t439;
t684 = pkin(3) * t476;
t399 = t683 + t684;
t268 = t399 * t355;
t466 = -t479 * pkin(3) - pkin(2);
t394 = t437 * pkin(4) + t466;
t480 = cos(qJ(2));
t681 = t480 * pkin(1);
t383 = t394 - t681;
t241 = t383 * t714;
t265 = t394 * t714;
t638 = t241 / 0.2e1 + t265 / 0.2e1;
t735 = -t268 - t638;
t269 = t399 * t714;
t242 = t383 * t355;
t266 = t394 * t355;
t637 = -t242 / 0.2e1 - t266 / 0.2e1;
t734 = -t269 - t637;
t465 = -pkin(2) - t681;
t733 = pkin(2) / 0.2e1 - t465 / 0.2e1;
t731 = t599 * t556;
t730 = t599 * t557;
t663 = t419 * t714;
t664 = t418 * t355;
t482 = -t664 / 0.2e1 - t663 / 0.2e1 + t714 * t786 + t355 * t689;
t579 = t686 * t355;
t666 = t714 * t474;
t488 = (-t666 / 0.2e1 + t579 / 0.2e1) * pkin(4);
t45 = t488 - t482;
t729 = t600 * t45;
t728 = t714 * t599;
t564 = t394 / 0.2e1 + t383 / 0.2e1;
t726 = t714 * t564;
t321 = t437 ^ 2 - t439 ^ 2;
t721 = t600 * t321;
t546 = -t424 / 0.2e1;
t353 = t546 + t424 / 0.2e1;
t720 = t600 * t353;
t472 = t476 ^ 2;
t473 = t479 ^ 2;
t461 = t473 - t472;
t719 = t600 * t461;
t662 = t437 * t439;
t718 = t600 * t662;
t715 = t383 + t394;
t384 = t474 * pkin(4);
t709 = qJD(5) * t384;
t590 = -t681 / 0.2e1;
t708 = t590 - t733;
t395 = t439 * t681;
t578 = t686 * t395;
t396 = t437 * t681;
t648 = t474 * t396;
t626 = t648 / 0.2e1 - t578 / 0.2e1;
t577 = t686 * t396;
t649 = t474 * t395;
t627 = t649 / 0.2e1 + t577 / 0.2e1;
t566 = -t415 / 0.2e1;
t565 = t441 / 0.2e1;
t687 = t474 / 0.2e1;
t678 = t45 * qJD(4);
t677 = pkin(1) * qJD(1);
t676 = pkin(1) * qJD(2);
t675 = pkin(2) * qJD(2);
t674 = pkin(3) * qJD(4);
t673 = pkin(4) * qJD(4);
t672 = qJD(3) * pkin(3);
t671 = t45 * qJD(3);
t25 = t383 * t399;
t668 = t25 * qJD(1);
t26 = t383 * t683;
t667 = t26 * qJD(1);
t292 = -t578 + t648;
t293 = -t577 - t649;
t38 = t169 * t293 + t292 * t773 + t383 * t685;
t665 = t38 * qJD(1);
t451 = t466 - t681;
t661 = t451 * t437;
t660 = t451 * t439;
t659 = t466 * t437;
t658 = t466 * t439;
t628 = (t437 * t478 - t439 * t475) * t672;
t110 = -t292 * t714 - t293 * t355;
t625 = qJD(1) * t110;
t162 = t268 + t241;
t624 = qJD(1) * t162;
t163 = t269 - t242;
t623 = qJD(1) * t163;
t598 = t355 * t683;
t178 = -t241 - t598;
t622 = qJD(1) * t178;
t597 = t714 * t683;
t179 = t242 - t597;
t621 = qJD(1) * t179;
t219 = t395 * t439 + t396 * t437;
t620 = qJD(1) * t219;
t416 = t437 * t684;
t313 = t416 + t660;
t619 = qJD(1) * t313;
t417 = t439 * t684;
t314 = t417 - t661;
t618 = qJD(1) * t314;
t617 = qJD(1) * t383;
t616 = qJD(1) * t451;
t615 = qJD(1) * t465;
t614 = qJD(2) * t394;
t613 = qJD(2) * t466;
t612 = qJD(4) * t451;
t611 = qJD(4) * t466;
t609 = qJD(5) * t714;
t608 = qJD(5) * t383;
t607 = qJD(5) * t394;
t115 = t451 * t684;
t606 = t115 * qJD(1);
t136 = -t351 * t396 + t395 * t557 + t451 * t685;
t605 = t136 * qJD(1);
t558 = (t472 + t473) * t480;
t345 = (t464 * t558 + t465 * t477) * pkin(1);
t604 = t345 * qJD(1);
t429 = pkin(1) * t558;
t603 = t429 * qJD(1);
t602 = t476 * qJD(3);
t471 = t479 * qJD(3);
t596 = t686 / 0.2e1;
t46 = t488 + t482;
t595 = t46 * qJD(4) + (-t663 - t664) * qJD(3);
t594 = t477 * t676;
t593 = t477 * t677;
t589 = t46 * qJD(3) + (t579 - t666) * t673;
t574 = t355 * t617;
t573 = t714 * t617;
t572 = t437 * t616;
t571 = t439 * t616;
t570 = t476 * t615;
t569 = t479 * t615;
t563 = t466 / 0.2e1 + t451 / 0.2e1;
t562 = t686 * qJD(4);
t561 = t686 * qJD(5);
t560 = pkin(1) * t600;
t559 = pkin(3) * t599;
t362 = t599 * t439;
t553 = t355 * t593;
t552 = t714 * t593;
t551 = t437 * t593;
t550 = t439 * t593;
t549 = t476 * t593;
t545 = -t575 / 0.2e1;
t543 = t477 * t560;
t30 = t399 * t394;
t481 = t564 * t399;
t512 = t292 * t692 + t293 * t691;
t8 = t481 + t512;
t534 = t8 * qJD(1) + t30 * qJD(2);
t31 = t394 * t683;
t504 = t292 * t596 + t293 * t687;
t9 = (-t439 * t564 + t504) * pkin(4);
t533 = -t9 * qJD(1) + t31 * qJD(2);
t157 = t466 * t684;
t511 = -t396 * t475 / 0.2e1 - t395 * t478 / 0.2e1;
t39 = (-t476 * t563 + t511) * pkin(3);
t528 = -t39 * qJD(1) + t157 * qJD(2);
t170 = t268 + t265;
t65 = t626 + t735;
t527 = qJD(1) * t65 - qJD(2) * t170;
t171 = t269 - t266;
t66 = t627 + t734;
t526 = qJD(1) * t66 - qJD(2) * t171;
t184 = -t265 - t598;
t523 = t598 + t638;
t69 = t523 - t626;
t525 = -qJD(1) * t69 + qJD(2) * t184;
t185 = t266 - t597;
t522 = t597 + t637;
t71 = t522 - t627;
t524 = -qJD(1) * t71 + qJD(2) * t185;
t494 = (-t641 / 0.2e1 - t640 / 0.2e1) * t681;
t222 = -t439 * t563 + t494;
t201 = -t416 + t222;
t340 = t416 + t658;
t521 = qJD(1) * t201 - qJD(2) * t340;
t493 = (-t639 / 0.2e1 + t642 / 0.2e1) * t681;
t223 = t437 * t563 + t493;
t202 = -t417 + t223;
t341 = t417 - t659;
t520 = qJD(1) * t202 - qJD(2) * t341;
t339 = t566 + t415 / 0.2e1;
t366 = t565 - t441 / 0.2e1;
t519 = qJD(1) * t339 + qJD(2) * t366;
t518 = -t455 / 0.2e1 - t686 * pkin(4) / 0.2e1;
t517 = t590 + t733;
t385 = t517 * t476;
t514 = qJD(1) * t385 + t476 * t675;
t387 = t517 * t479;
t513 = qJD(1) * t387 + t479 * t675;
t111 = t626 - t726;
t510 = qJD(1) * t111 - t614 * t714;
t112 = t355 * t564 + t627;
t509 = qJD(1) * t112 + t355 * t614;
t508 = qJD(1) * t222 - t439 * t613;
t507 = qJD(1) * t223 + t437 * t613;
t485 = t776 * t169 + t773 * t775;
t490 = (-t169 * t596 + t687 * t773) * pkin(4);
t13 = t490 + t485;
t484 = t776 * t196 + t774 * t775;
t489 = (-t196 * t596 + t687 * t774) * pkin(4);
t15 = t489 + t484;
t226 = t418 * t427 + t419 * t428;
t501 = -t13 * qJD(1) - t15 * qJD(2) + t226 * qJD(3);
t492 = t739 / 0.2e1;
t55 = t568 + t492;
t491 = t738 / 0.2e1;
t99 = t567 + t491;
t500 = -qJD(1) * t55 - qJD(2) * t99 - qJD(3) * t384;
t53 = t261 + t778;
t97 = t306 + t779;
t499 = -qJD(1) * t53 - qJD(2) * t97 + qJD(3) * t427;
t100 = t779 + t491 + t784;
t56 = t778 + t492 + t783;
t498 = qJD(1) * t56 + qJD(2) * t100 + qJD(3) * t419;
t386 = pkin(3) * t545 - t518;
t497 = t386 * qJD(3) + t766;
t496 = -qJD(3) * t418 + t766;
t105 = t547 - t761 / 0.2e1 + t749;
t61 = t548 - t762 / 0.2e1 + t750;
t495 = -qJD(1) * t61 - qJD(2) * t105 + qJD(3) * t428;
t224 = -t659 / 0.2e1 - t661 / 0.2e1 + t493;
t225 = t658 / 0.2e1 + t660 / 0.2e1 + t494;
t462 = t476 * t471;
t460 = t476 * t594;
t452 = t461 * qJD(3);
t426 = t600 * t479 * t476;
t422 = t429 * qJD(2);
t421 = t428 * qJD(4);
t420 = t427 * qJD(4);
t409 = t439 * t594;
t408 = t437 * t594;
t405 = t419 * qJD(5);
t404 = t418 * qJD(5);
t389 = t708 * t479;
t388 = t708 * t476;
t364 = (t545 + t646) * pkin(3) + t518;
t363 = -t384 / 0.2e1 - t544 / 0.2e1 + (-t576 - t645 / 0.2e1) * pkin(3);
t361 = t599 * t437;
t344 = t353 * qJD(5);
t334 = t714 * t594;
t333 = t355 * t594;
t328 = 0.2e1 * t565 - t643;
t285 = 0.2e1 * t546 + t647;
t264 = 0.2e1 * t566 + t644;
t245 = t437 * t362;
t243 = t599 * t662;
t218 = t219 * qJD(2);
t215 = t599 * t353;
t204 = t417 + t224;
t203 = t416 + t225;
t197 = t599 * t321;
t145 = qJD(5) * t285 - t728;
t130 = t285 * t599 - t609;
t114 = t626 + t726;
t113 = t627 - t715 * t355 / 0.2e1;
t109 = t110 * qJD(2);
t80 = t745 * t714;
t79 = (t609 + t728) * t355;
t72 = t522 + t627;
t70 = t523 + t626;
t68 = t627 - t734;
t67 = t626 - t735;
t40 = pkin(3) * t511 + (t451 + t466) * t684 / 0.2e1;
t32 = t754 * t732;
t16 = t489 - t484;
t14 = t490 - t485;
t10 = pkin(4) * t504 + t715 * t683 / 0.2e1;
t7 = t481 - t512;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t594, -t480 * t676, 0, 0, t462, t452, 0, -t462, 0, 0, t465 * t602 - t479 * t594, t465 * t471 + t460, t422, t345 * qJD(2), -t245, t197, 0, t243, 0, 0, qJD(3) * t313 + t439 * t612 + t408, qJD(3) * t314 - t437 * t612 + t409, t218, qJD(2) * t136 + qJD(3) * t115, -t80, t32, 0, t79, 0, 0, qJD(3) * t162 - qJD(4) * t178 + t608 * t714 + t333, qJD(3) * t163 - qJD(4) * t179 - t355 * t608 + t334, t109, qJD(2) * t38 + qJD(3) * t25 + qJD(4) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t543, -t480 * t560, 0, 0, t462, t452, 0, -t462, 0, 0, qJD(3) * t388 - t479 * t543, qJD(3) * t389 + t460 + t549, t422 + t603, t604 + (-pkin(2) * t477 + pkin(7) * t558) * t676, -t245, t197, 0, t243, 0, 0, qJD(3) * t203 + qJD(4) * t225 + t408 + t551, qJD(3) * t204 + qJD(4) * t224 + t409 + t550, t218 + t620, t605 + (-t370 * t396 + t395 * t556 + t466 * t685) * qJD(2) + t40 * qJD(3), -t80, t32, 0, t79, 0, 0, qJD(3) * t67 + qJD(4) * t70 + qJD(5) * t114 + t333 + t553, qJD(3) * t68 + qJD(4) * t72 + qJD(5) * t113 + t334 + t552, t109 + t625, t665 + (t196 * t293 + t292 * t774 + t394 * t685) * qJD(2) + t7 * qJD(3) + t10 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t426, t719, t471, -t426, -t602, 0, qJD(2) * t388 - t464 * t471 + t570, qJD(2) * t389 + t464 * t602 + t569, 0, 0, -t718, t721, -t361, t718, -t362, 0, qJD(2) * t203 - qJD(3) * t351 + qJD(4) * t264 + t619, qJD(2) * t204 + t618 + t730, t628, t606 + t40 * qJD(2) + (-t351 * t478 - t475 * t557) * t672, -t740, t746, -t745, t740, t145, 0, qJD(2) * t67 - qJD(3) * t169 + t782 * t790 + t624, qJD(2) * t68 - qJD(3) * t773 + t782 * t780 + t623, t595, t668 + t7 * qJD(2) + (t169 * t418 + t419 * t773) * qJD(3) + t14 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t718, t721, -t361, t718, -t362, 0, qJD(2) * t225 + qJD(3) * t264 - qJD(4) * t351 + t571, qJD(2) * t224 - t572 + t730, 0, 0, -t740, t746, -t745, t740, t145, 0, qJD(2) * t70 - qJD(4) * t169 + qJD(5) * t790 - t622 + t771, qJD(2) * t72 - qJD(4) * t773 + qJD(5) * t780 - t621 + t770, t589, t667 + t10 * qJD(2) + t14 * qJD(3) + (-t169 * t686 + t474 * t773) * t673; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t740, t746, -t745, t740, t130, 0, qJD(2) * t114 + qJD(4) * t790 - qJD(5) * t169 + t573 + t771, qJD(2) * t113 + qJD(4) * t780 - qJD(5) * t773 - t574 + t770, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t593, t480 * t677, 0, 0, t462, t452, 0, -t462, 0, 0, -qJD(3) * t385 + t479 * t593, -qJD(3) * t387 - t549, -t603, -t604, -t245, t197, 0, t243, 0, 0, -qJD(3) * t201 - qJD(4) * t222 - t551, -qJD(3) * t202 - qJD(4) * t223 - t550, -t620, -qJD(3) * t39 - t605, -t80, t32, 0, t79, 0, 0, -qJD(3) * t65 + qJD(4) * t69 - qJD(5) * t111 - t553, -qJD(3) * t66 + qJD(4) * t71 - qJD(5) * t112 - t552, -t625, qJD(3) * t8 - qJD(4) * t9 - t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t462, t452, 0, -t462, 0, 0, -pkin(2) * t602, -pkin(2) * t471, 0, 0, -t245, t197, 0, t243, 0, 0, qJD(3) * t340 + t439 * t611, qJD(3) * t341 - t437 * t611, 0, qJD(3) * t157, -t80, t32, 0, t79, 0, 0, qJD(3) * t170 - qJD(4) * t184 + t607 * t714, qJD(3) * t171 - qJD(4) * t185 - t355 * t607, 0, qJD(3) * t30 + qJD(4) * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t426, t719, t471, -t426, -t602, 0, -pkin(7) * t471 - t514, pkin(7) * t602 - t513, 0, 0, -t718, t721, -t361, t718, -t362, 0, -qJD(3) * t370 + qJD(4) * t328 - t521, -t520 + t731, t628, (-t370 * t478 - t475 * t556) * t672 + t528, -t740, t746, -t745, t740, t145, 0, -qJD(3) * t196 + t782 * t789 - t527, -qJD(3) * t774 + t782 * t781 - t526, t595, (t196 * t418 + t419 * t774) * qJD(3) + t16 * qJD(4) + t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t718, t721, -t361, t718, -t362, 0, qJD(3) * t328 - qJD(4) * t370 - t508, -t507 + t731, 0, 0, -t740, t746, -t745, t740, t145, 0, -qJD(4) * t196 + qJD(5) * t789 - t525 + t772, -qJD(4) * t774 + qJD(5) * t781 - t524 + t769, t589, t16 * qJD(3) + (-t196 * t686 + t474 * t774) * t673 + t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t740, t746, -t745, t740, t130, 0, qJD(4) * t789 - qJD(5) * t196 - t510 + t772, qJD(4) * t781 - qJD(5) * t774 - t509 + t769, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t426, -t719, 0, t426, 0, 0, qJD(2) * t385 - t570, qJD(2) * t387 - t569, 0, 0, t718, -t721, 0, -t718, 0, 0, qJD(2) * t201 + qJD(4) * t339 - t619, qJD(2) * t202 - t618, 0, qJD(2) * t39 - t606, t740, -t746, 0, -t740, t344, 0, qJD(2) * t65 + qJD(4) * t53 - qJD(5) * t56 - t624, qJD(2) * t66 + qJD(4) * t61 - t623 + t777, -t678, -qJD(2) * t8 - qJD(4) * t13 - t668; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t426, -t719, 0, t426, 0, 0, t514, t513, 0, 0, t718, -t721, 0, -t718, 0, 0, qJD(4) * t366 + t521, t520, 0, -t528, t740, -t746, 0, -t740, t344, 0, qJD(4) * t97 - qJD(5) * t100 + t527, qJD(4) * t105 + t526 + t768, -t678, -qJD(4) * t15 - t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t475 * t674, -t478 * t674, 0, 0, 0, 0, 0, 0, 0, 0, -t420 - t405, -t421 + t404, 0, qJD(4) * t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t475 * t559 + t519, -t478 * t559, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5) * t363 - t420 - t499, qJD(5) * t364 - t421 - t495, -t729, (-t427 * t686 + t428 * t474) * t673 + t501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t720, 0, qJD(4) * t363 - t405 - t498, qJD(4) * t364 + t404 - t496, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, -t721, 0, -t718, 0, 0, qJD(2) * t222 - qJD(3) * t339 - t571, qJD(2) * t223 + t572, 0, 0, t740, -t746, 0, -t740, t344, 0, -qJD(2) * t69 - qJD(3) * t53 - qJD(5) * t55 + t622, -qJD(2) * t71 - qJD(3) * t61 + t621 + t777, t671, qJD(2) * t9 + qJD(3) * t13 - t667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, -t721, 0, -t718, 0, 0, -qJD(3) * t366 + t508, t507, 0, 0, t740, -t746, 0, -t740, t344, 0, -qJD(3) * t97 - qJD(5) * t99 + t525, -qJD(3) * t105 + t524 + t768, t671, qJD(3) * t15 - t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t475 * t672 - t519, t478 * t672, 0, 0, 0, 0, 0, 0, 0, 0, t499 - t709, -qJD(5) * t386 + t495, t729, -t501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t709, -pkin(4) * t561, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t720, 0, -t782 * t384 + t500, (-t562 - t561) * pkin(4) - t497, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t740, -t746, 0, -t740, -t215, 0, qJD(2) * t111 + qJD(3) * t56 + qJD(4) * t55 - t573, qJD(2) * t112 - t599 * t57 + t574, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t740, -t746, 0, -t740, -t215, 0, qJD(3) * t100 + qJD(4) * t99 + t510, -t599 * t101 + t509, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t720, 0, qJD(4) * t384 + t498, qJD(4) * t386 + t496, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t720, 0, t474 * t673 - t500, pkin(4) * t562 + t497, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t1;
