% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:09
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:08:34
% EndTime: 2022-01-20 12:08:52
% DurationCPUTime: 14.17s
% Computational Cost: add. (95562->607), mult. (123918->924), div. (0->0), fcn. (84400->10), ass. (0->418)
t699 = cos(qJ(2));
t687 = qJDD(1) + qJDD(2);
t694 = sin(qJ(2));
t737 = t694 * t687;
t689 = qJD(1) + qJD(2);
t758 = t689 ^ 2;
t654 = t699 * t758 + t737;
t725 = t699 * t687;
t657 = t694 * t758 - t725;
t695 = sin(qJ(1));
t700 = cos(qJ(1));
t608 = t695 * t654 + t700 * t657;
t635 = pkin(6) * t654 - t699 * g(3);
t766 = pkin(6) * t657 - t694 * g(3);
t775 = pkin(5) * t608 + t695 * t635 + t700 * t766;
t706 = t700 * t654 - t695 * t657;
t774 = pkin(5) * t706 + t700 * t635 - t695 * t766;
t674 = t700 * g(1) + t695 * g(2);
t702 = qJD(1) ^ 2;
t661 = -t702 * pkin(1) - t674;
t673 = t695 * g(1) - t700 * g(2);
t705 = qJDD(1) * pkin(1) + t673;
t611 = t694 * t661 - t699 * t705;
t612 = t699 * t661 + t694 * t705;
t712 = t694 * t611 + t699 * t612;
t558 = t699 * t611 - t694 * t612;
t724 = t700 * t558;
t771 = -t695 * t712 + t724;
t736 = t695 * t558;
t505 = t700 * t712 + t736;
t691 = sin(qJ(5));
t692 = sin(qJ(4));
t697 = cos(qJ(4));
t698 = cos(qJ(3));
t693 = sin(qJ(3));
t750 = t689 * t693;
t638 = -t697 * t698 * t689 + t692 * t750;
t640 = (t692 * t698 + t693 * t697) * t689;
t696 = cos(qJ(5));
t583 = t696 * t638 + t691 * t640;
t585 = -t691 * t638 + t696 * t640;
t528 = t585 * t583;
t686 = qJDD(3) + qJDD(4);
t710 = qJDD(5) + t686;
t763 = -t528 + t710;
t770 = t691 * t763;
t602 = t640 * t638;
t761 = -t602 + t686;
t769 = t692 * t761;
t768 = t696 * t763;
t767 = t697 * t761;
t688 = qJD(3) + qJD(4);
t682 = qJD(5) + t688;
t577 = t682 * t583;
t723 = qJD(3) * t689;
t714 = t698 * t723;
t738 = t693 * t687;
t647 = t714 + t738;
t715 = t693 * t723;
t726 = t698 * t687;
t704 = t715 - t726;
t711 = t692 * t647 + t697 * t704;
t562 = -t640 * qJD(4) - t711;
t563 = -t638 * qJD(4) + t697 * t647 - t692 * t704;
t703 = t583 * qJD(5) - t691 * t562 - t696 * t563;
t762 = -t577 - t703;
t630 = t688 * t638;
t542 = -t630 - t563;
t760 = -t630 + t563;
t713 = -t696 * t562 + t691 * t563;
t463 = (qJD(5) - t682) * t585 + t713;
t538 = (qJD(4) - t688) * t640 + t711;
t581 = t583 ^ 2;
t582 = t585 ^ 2;
t759 = t638 ^ 2;
t637 = t640 ^ 2;
t678 = t682 ^ 2;
t685 = t688 ^ 2;
t757 = t698 ^ 2;
t754 = t682 * t691;
t753 = t682 * t696;
t752 = t688 * t692;
t751 = t688 * t697;
t690 = t693 ^ 2;
t749 = t690 * t758;
t599 = -t687 * pkin(2) - t758 * pkin(7) + t611;
t664 = qJD(3) * pkin(3) - pkin(8) * t750;
t677 = t757 * t758;
t536 = t704 * pkin(3) - pkin(8) * t677 + t664 * t750 + t599;
t622 = t688 * pkin(4) - t640 * pkin(9);
t472 = -t562 * pkin(4) - t759 * pkin(9) + t640 * t622 + t536;
t748 = t691 * t472;
t521 = t528 + t710;
t747 = t691 * t521;
t600 = -t758 * pkin(2) + t687 * pkin(7) + t612;
t741 = t693 * t600;
t534 = qJDD(3) * pkin(3) - t647 * pkin(8) - t741 + (-g(3) + (pkin(3) * t750 + pkin(8) * qJD(3)) * t689) * t698;
t580 = -t693 * g(3) + t698 * t600;
t535 = -pkin(3) * t677 - pkin(8) * t704 - qJD(3) * t664 + t580;
t481 = -t697 * t534 + t692 * t535;
t439 = t761 * pkin(4) + t542 * pkin(9) - t481;
t482 = t692 * t534 + t697 * t535;
t441 = -t759 * pkin(4) + t562 * pkin(9) - t688 * t622 + t482;
t389 = -t696 * t439 + t691 * t441;
t390 = t691 * t439 + t696 * t441;
t353 = -t696 * t389 + t691 * t390;
t746 = t692 * t353;
t745 = t692 * t536;
t593 = t602 + t686;
t744 = t692 * t593;
t424 = -t697 * t481 + t692 * t482;
t743 = t693 * t424;
t742 = t693 * t599;
t672 = t698 * t758 * t693;
t662 = qJDD(3) + t672;
t740 = t693 * t662;
t663 = qJDD(3) - t672;
t739 = t693 * t663;
t735 = t696 * t472;
t734 = t696 * t521;
t733 = t697 * t353;
t732 = t697 * t536;
t731 = t697 * t593;
t730 = t698 * t424;
t729 = t698 * t599;
t648 = -0.2e1 * t715 + t726;
t728 = t698 * t648;
t727 = t698 * t663;
t720 = t690 + t757;
t719 = t694 * t528;
t718 = t694 * t602;
t717 = t699 * t528;
t716 = t699 * t602;
t354 = t691 * t389 + t696 * t390;
t425 = t692 * t481 + t697 * t482;
t579 = t698 * g(3) + t741;
t518 = t693 * t579 + t698 * t580;
t626 = -t695 * t673 - t700 * t674;
t709 = t694 * t672;
t708 = t699 * t672;
t666 = t700 * qJDD(1) - t695 * t702;
t707 = -pkin(5) * t666 - t695 * g(3);
t517 = t698 * t579 - t693 * t580;
t625 = t700 * t673 - t695 * t674;
t701 = qJD(3) ^ 2;
t670 = -t677 - t701;
t669 = t677 - t701;
t668 = -t701 - t749;
t667 = t701 - t749;
t665 = t695 * qJDD(1) + t700 * t702;
t659 = t677 - t749;
t658 = t677 + t749;
t653 = t698 * t662;
t652 = t720 * t687;
t646 = 0.2e1 * t714 + t738;
t645 = -pkin(5) * t665 + t700 * g(3);
t644 = t720 * t723;
t628 = -t637 + t685;
t627 = -t685 + t759;
t624 = t694 * qJDD(3) + t699 * t644;
t623 = -t699 * qJDD(3) + t694 * t644;
t621 = t698 * t647 - t690 * t723;
t620 = t693 * t704 - t757 * t723;
t619 = -t637 - t685;
t618 = -t693 * t668 - t727;
t617 = -t693 * t667 + t653;
t616 = t698 * t670 - t740;
t615 = t698 * t669 - t739;
t614 = t698 * t668 - t739;
t613 = t693 * t670 + t653;
t607 = t699 * t652 - t694 * t658;
t604 = t694 * t652 + t699 * t658;
t603 = -t693 * t646 + t728;
t601 = -t637 + t759;
t598 = t699 * t617 + t693 * t737;
t597 = t699 * t615 + t694 * t726;
t596 = t694 * t617 - t693 * t725;
t595 = t694 * t615 - t698 * t725;
t591 = t699 * t621 - t709;
t590 = t699 * t620 + t709;
t589 = t694 * t621 + t708;
t588 = t694 * t620 - t708;
t587 = -t685 - t759;
t576 = t699 * t618 + t694 * t646;
t575 = t699 * t616 - t694 * t648;
t574 = t694 * t618 - t699 * t646;
t573 = t694 * t616 + t699 * t648;
t572 = -t582 + t678;
t571 = t581 - t678;
t570 = (-t638 * t697 + t640 * t692) * t688;
t569 = (-t638 * t692 - t640 * t697) * t688;
t567 = -t582 - t678;
t566 = -t637 - t759;
t565 = t699 * t603 - t694 * t659;
t564 = t694 * t603 + t699 * t659;
t555 = pkin(1) * g(3) + pkin(6) * t712;
t554 = t697 * t627 - t744;
t553 = -t692 * t628 + t767;
t552 = t692 * t627 + t731;
t551 = t697 * t628 + t769;
t550 = -pkin(7) * t614 + t729;
t549 = -pkin(7) * t613 + t742;
t548 = -t692 * t619 - t731;
t547 = t697 * t619 - t744;
t546 = -pkin(2) * t614 + t580;
t545 = -pkin(2) * t613 + t579;
t544 = -t695 * t604 + t700 * t607;
t543 = t700 * t604 + t695 * t607;
t537 = (qJD(4) + t688) * t640 + t711;
t533 = t697 * t563 - t640 * t752;
t532 = t692 * t563 + t640 * t751;
t531 = -t692 * t562 + t638 * t751;
t530 = t697 * t562 + t638 * t752;
t525 = -t582 + t581;
t524 = t697 * t587 - t769;
t523 = t692 * t587 + t767;
t519 = -t678 - t581;
t515 = (-t583 * t696 + t585 * t691) * t682;
t514 = (-t583 * t691 - t585 * t696) * t682;
t513 = -t695 * t574 + t700 * t576;
t512 = -t695 * t573 + t700 * t575;
t511 = t700 * t574 + t695 * t576;
t510 = t700 * t573 + t695 * t575;
t509 = -t693 * t569 + t698 * t570;
t508 = t699 * t509 + t694 * t686;
t507 = t694 * t509 - t699 * t686;
t506 = -t581 - t582;
t503 = -pkin(6) * t604 + t699 * t517;
t502 = pkin(6) * t607 + t694 * t517;
t501 = t699 * t518 + t694 * t599;
t500 = t694 * t518 - t699 * t599;
t499 = -t693 * t552 + t698 * t554;
t498 = -t693 * t551 + t698 * t553;
t497 = t696 * t571 - t747;
t496 = -t691 * t572 + t768;
t495 = t691 * t571 + t734;
t494 = t696 * t572 + t770;
t493 = -t691 * t567 - t734;
t492 = t696 * t567 - t747;
t491 = -t693 * t547 + t698 * t548;
t490 = t698 * t547 + t693 * t548;
t489 = -pkin(8) * t547 + t732;
t488 = -t538 * t697 - t692 * t542;
t487 = -t697 * t537 - t692 * t760;
t486 = -t538 * t692 + t697 * t542;
t485 = -t692 * t537 + t697 * t760;
t483 = -t585 * qJD(5) - t713;
t480 = -pkin(8) * t523 + t745;
t478 = -t693 * t532 + t698 * t533;
t477 = -t693 * t530 + t698 * t531;
t476 = -t693 * t523 + t698 * t524;
t475 = t698 * t523 + t693 * t524;
t474 = t696 * t519 - t770;
t473 = t691 * t519 + t768;
t471 = -pkin(6) * t574 - t694 * t546 + t699 * t550;
t470 = -pkin(6) * t573 - t694 * t545 + t699 * t549;
t469 = -t692 * t514 + t697 * t515;
t468 = t697 * t514 + t692 * t515;
t467 = -t577 + t703;
t462 = (qJD(5) + t682) * t585 + t713;
t461 = t699 * t478 + t718;
t460 = t699 * t477 - t718;
t459 = -t585 * t754 - t696 * t703;
t458 = t694 * t478 - t716;
t457 = t694 * t477 + t716;
t456 = t585 * t753 - t691 * t703;
t455 = -t691 * t483 + t583 * t753;
t454 = t696 * t483 + t583 * t754;
t453 = -pkin(1) * t614 + pkin(6) * t576 + t699 * t546 + t694 * t550;
t452 = -pkin(1) * t613 + pkin(6) * t575 + t699 * t545 + t694 * t549;
t451 = t699 * t499 - t694 * t538;
t450 = t699 * t498 - t694 * t542;
t449 = t694 * t499 + t699 * t538;
t448 = t694 * t498 + t699 * t542;
t447 = -pkin(3) * t760 + pkin(8) * t548 + t745;
t446 = t699 * t491 + t694 * t760;
t445 = t694 * t491 - t699 * t760;
t444 = -pkin(3) * t537 + pkin(8) * t524 - t732;
t443 = t699 * t476 + t694 * t537;
t442 = t694 * t476 - t699 * t537;
t438 = -t695 * t500 + t700 * t501;
t437 = t700 * t500 + t695 * t501;
t434 = -t692 * t495 + t697 * t497;
t433 = -t692 * t494 + t697 * t496;
t432 = t697 * t495 + t692 * t497;
t431 = t697 * t494 + t692 * t496;
t430 = -t692 * t492 + t697 * t493;
t429 = t697 * t492 + t692 * t493;
t428 = -t693 * t486 + t698 * t488;
t427 = -t693 * t485 + t698 * t487;
t426 = t698 * t486 + t693 * t488;
t423 = -pkin(6) * t500 - (pkin(2) * t694 - pkin(7) * t699) * t517;
t422 = -pkin(9) * t492 + t735;
t421 = t699 * t427 - t694 * t601;
t420 = t694 * t427 + t699 * t601;
t419 = -t692 * t473 + t697 * t474;
t418 = t697 * t473 + t692 * t474;
t417 = -pkin(9) * t473 + t748;
t416 = t699 * t428 + t694 * t566;
t415 = t694 * t428 - t699 * t566;
t414 = -pkin(2) * t490 - pkin(3) * t547 + t482;
t413 = -t693 * t468 + t698 * t469;
t412 = -t463 * t696 - t691 * t467;
t411 = -t696 * t462 - t691 * t762;
t410 = -t463 * t691 + t696 * t467;
t409 = -t691 * t462 + t696 * t762;
t408 = -pkin(3) * t536 + pkin(8) * t425;
t407 = t699 * t413 + t694 * t710;
t406 = t694 * t413 - t699 * t710;
t405 = -t692 * t456 + t697 * t459;
t404 = -t692 * t454 + t697 * t455;
t403 = t697 * t456 + t692 * t459;
t402 = t697 * t454 + t692 * t455;
t401 = -pkin(2) * t475 - pkin(3) * t523 + t481;
t400 = pkin(6) * t501 - (-pkin(2) * t699 - pkin(7) * t694 - pkin(1)) * t517;
t399 = -t695 * t445 + t700 * t446;
t398 = t700 * t445 + t695 * t446;
t397 = -pkin(2) * t426 - pkin(3) * t486;
t396 = -pkin(8) * t486 - t424;
t395 = -t695 * t442 + t700 * t443;
t394 = t700 * t442 + t695 * t443;
t393 = -pkin(7) * t490 - t693 * t447 + t698 * t489;
t392 = -pkin(4) * t762 + pkin(9) * t493 + t748;
t391 = -pkin(3) * t566 + pkin(8) * t488 + t425;
t387 = -pkin(4) * t462 + pkin(9) * t474 - t735;
t386 = -t693 * t432 + t698 * t434;
t385 = -t693 * t431 + t698 * t433;
t384 = -pkin(7) * t475 - t693 * t444 + t698 * t480;
t383 = -t693 * t429 + t698 * t430;
t382 = t698 * t429 + t693 * t430;
t381 = t698 * t425 - t743;
t380 = t693 * t425 + t730;
t379 = -t693 * t418 + t698 * t419;
t378 = t698 * t418 + t693 * t419;
t377 = t699 * t381 + t694 * t536;
t376 = t694 * t381 - t699 * t536;
t375 = -t695 * t415 + t700 * t416;
t374 = t700 * t415 + t695 * t416;
t373 = t699 * t386 - t694 * t463;
t372 = t699 * t385 - t694 * t467;
t371 = t694 * t386 + t699 * t463;
t370 = t694 * t385 + t699 * t467;
t369 = t699 * t383 + t694 * t762;
t368 = t694 * t383 - t699 * t762;
t367 = -t692 * t410 + t697 * t412;
t366 = -t692 * t409 + t697 * t411;
t365 = t697 * t410 + t692 * t412;
t364 = t697 * t409 + t692 * t411;
t363 = -t693 * t403 + t698 * t405;
t362 = -t693 * t402 + t698 * t404;
t361 = t699 * t363 + t719;
t360 = t699 * t362 - t719;
t359 = t694 * t363 - t717;
t358 = t694 * t362 + t717;
t357 = t699 * t379 + t694 * t462;
t356 = t694 * t379 - t699 * t462;
t355 = -pkin(2) * t380 - pkin(3) * t424;
t352 = -pkin(6) * t445 + t699 * t393 - t694 * t414;
t351 = -pkin(8) * t429 - t692 * t392 + t697 * t422;
t350 = -pkin(6) * t442 + t699 * t384 - t694 * t401;
t349 = -pkin(1) * t490 + pkin(6) * t446 + t694 * t393 + t699 * t414;
t348 = -pkin(4) * t472 + pkin(9) * t354;
t347 = -pkin(8) * t418 - t692 * t387 + t697 * t417;
t346 = -pkin(7) * t426 - t693 * t391 + t698 * t396;
t345 = -pkin(3) * t762 + pkin(8) * t430 + t697 * t392 + t692 * t422;
t344 = -pkin(7) * t380 - pkin(8) * t730 - t693 * t408;
t343 = -pkin(1) * t475 + pkin(6) * t443 + t694 * t384 + t699 * t401;
t342 = -t695 * t376 + t700 * t377;
t341 = t700 * t376 + t695 * t377;
t340 = -pkin(9) * t410 - t353;
t339 = -pkin(3) * t462 + pkin(8) * t419 + t697 * t387 + t692 * t417;
t338 = -pkin(2) * t382 - pkin(3) * t429 - pkin(4) * t492 + t390;
t337 = -t695 * t368 + t700 * t369;
t336 = t700 * t368 + t695 * t369;
t335 = -pkin(4) * t506 + pkin(9) * t412 + t354;
t334 = -t693 * t365 + t698 * t367;
t333 = -t693 * t364 + t698 * t366;
t332 = t698 * t365 + t693 * t367;
t331 = t699 * t333 - t694 * t525;
t330 = t694 * t333 + t699 * t525;
t329 = t699 * t334 + t694 * t506;
t328 = t694 * t334 - t699 * t506;
t327 = -pkin(2) * t378 - pkin(3) * t418 - pkin(4) * t473 + t389;
t326 = -t695 * t356 + t700 * t357;
t325 = t700 * t356 + t695 * t357;
t324 = -pkin(6) * t415 + t699 * t346 - t694 * t397;
t323 = t697 * t354 - t746;
t322 = t692 * t354 + t733;
t321 = -pkin(1) * t426 + pkin(6) * t416 + t694 * t346 + t699 * t397;
t320 = -pkin(2) * t332 - pkin(3) * t365 - pkin(4) * t410;
t319 = -pkin(7) * t382 - t693 * t345 + t698 * t351;
t318 = -pkin(6) * t376 + t699 * t344 - t694 * t355;
t317 = -t695 * t328 + t700 * t329;
t316 = t700 * t328 + t695 * t329;
t315 = -pkin(7) * t378 - t693 * t339 + t698 * t347;
t314 = -pkin(1) * t380 + pkin(6) * t377 + t694 * t344 + t699 * t355;
t313 = -pkin(8) * t365 - t692 * t335 + t697 * t340;
t312 = -pkin(3) * t506 + pkin(8) * t367 + t697 * t335 + t692 * t340;
t311 = -t693 * t322 + t698 * t323;
t310 = t698 * t322 + t693 * t323;
t309 = -pkin(8) * t322 - pkin(9) * t733 - t692 * t348;
t308 = t699 * t311 + t694 * t472;
t307 = t694 * t311 - t699 * t472;
t306 = -pkin(3) * t472 + pkin(8) * t323 - pkin(9) * t746 + t697 * t348;
t305 = -pkin(6) * t368 + t699 * t319 - t694 * t338;
t304 = -pkin(1) * t382 + pkin(6) * t369 + t694 * t319 + t699 * t338;
t303 = -pkin(6) * t356 + t699 * t315 - t694 * t327;
t302 = -pkin(1) * t378 + pkin(6) * t357 + t694 * t315 + t699 * t327;
t301 = -pkin(2) * t310 - pkin(3) * t322 - pkin(4) * t353;
t300 = -t695 * t307 + t700 * t308;
t299 = t700 * t307 + t695 * t308;
t298 = -pkin(7) * t332 - t693 * t312 + t698 * t313;
t297 = -pkin(7) * t310 - t693 * t306 + t698 * t309;
t296 = -pkin(6) * t328 + t699 * t298 - t694 * t320;
t295 = -pkin(1) * t332 + pkin(6) * t329 + t694 * t298 + t699 * t320;
t294 = -pkin(6) * t307 + t699 * t297 - t694 * t301;
t293 = -pkin(1) * t310 + pkin(6) * t308 + t694 * t297 + t699 * t301;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t665, -t666, 0, t626, 0, 0, 0, 0, 0, 0, -t706, t608, 0, t505, 0, 0, 0, 0, 0, 0, t512, t513, t544, t438, 0, 0, 0, 0, 0, 0, t395, t399, t375, t342, 0, 0, 0, 0, 0, 0, t326, t337, t317, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t666, -t665, 0, t625, 0, 0, 0, 0, 0, 0, -t608, -t706, 0, -t771, 0, 0, 0, 0, 0, 0, t510, t511, t543, t437, 0, 0, 0, 0, 0, 0, t394, t398, t374, t341, 0, 0, 0, 0, 0, 0, t325, t336, t316, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t613, t614, 0, -t517, 0, 0, 0, 0, 0, 0, t475, t490, t426, t380, 0, 0, 0, 0, 0, 0, t378, t382, t332, t310; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t666, 0, -t665, 0, t707, -t645, -t625, -pkin(5) * t625, 0, 0, -t608, 0, -t706, 0, t775, t774, t771, pkin(5) * t771 + pkin(6) * t724 - t695 * t555, -t695 * t589 + t700 * t591, -t695 * t564 + t700 * t565, -t695 * t596 + t700 * t598, -t695 * t588 + t700 * t590, -t695 * t595 + t700 * t597, -t695 * t623 + t700 * t624, -pkin(5) * t510 - t695 * t452 + t700 * t470, -pkin(5) * t511 - t695 * t453 + t700 * t471, -pkin(5) * t543 - t695 * t502 + t700 * t503, -pkin(5) * t437 - t695 * t400 + t700 * t423, -t695 * t458 + t700 * t461, -t695 * t420 + t700 * t421, -t695 * t448 + t700 * t450, -t695 * t457 + t700 * t460, -t695 * t449 + t700 * t451, -t695 * t507 + t700 * t508, -pkin(5) * t394 - t695 * t343 + t700 * t350, -pkin(5) * t398 - t695 * t349 + t700 * t352, -pkin(5) * t374 - t695 * t321 + t700 * t324, -pkin(5) * t341 - t695 * t314 + t700 * t318, -t695 * t359 + t700 * t361, -t695 * t330 + t700 * t331, -t695 * t370 + t700 * t372, -t695 * t358 + t700 * t360, -t695 * t371 + t700 * t373, -t695 * t406 + t700 * t407, -pkin(5) * t325 - t695 * t302 + t700 * t303, -pkin(5) * t336 - t695 * t304 + t700 * t305, -pkin(5) * t316 - t695 * t295 + t700 * t296, -pkin(5) * t299 - t695 * t293 + t700 * t294; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t665, 0, t666, 0, t645, t707, t626, pkin(5) * t626, 0, 0, t706, 0, -t608, 0, -t774, t775, t505, pkin(5) * t505 + pkin(6) * t736 + t700 * t555, t700 * t589 + t695 * t591, t700 * t564 + t695 * t565, t700 * t596 + t695 * t598, t700 * t588 + t695 * t590, t700 * t595 + t695 * t597, t700 * t623 + t695 * t624, pkin(5) * t512 + t700 * t452 + t695 * t470, pkin(5) * t513 + t700 * t453 + t695 * t471, pkin(5) * t544 + t700 * t502 + t695 * t503, pkin(5) * t438 + t700 * t400 + t695 * t423, t700 * t458 + t695 * t461, t700 * t420 + t695 * t421, t700 * t448 + t695 * t450, t700 * t457 + t695 * t460, t700 * t449 + t695 * t451, t700 * t507 + t695 * t508, pkin(5) * t395 + t700 * t343 + t695 * t350, pkin(5) * t399 + t700 * t349 + t695 * t352, pkin(5) * t375 + t700 * t321 + t695 * t324, pkin(5) * t342 + t700 * t314 + t695 * t318, t700 * t359 + t695 * t361, t700 * t330 + t695 * t331, t700 * t370 + t695 * t372, t700 * t358 + t695 * t360, t700 * t371 + t695 * t373, t700 * t406 + t695 * t407, pkin(5) * t326 + t700 * t302 + t695 * t303, pkin(5) * t337 + t700 * t304 + t695 * t305, pkin(5) * t317 + t700 * t295 + t695 * t296, pkin(5) * t300 + t700 * t293 + t695 * t294; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t673, t674, 0, 0, 0, 0, 0, 0, 0, t687, -pkin(1) * t657 - t611, -pkin(1) * t654 - t612, 0, -pkin(1) * t558, (t647 + t714) * t693, t698 * t646 + t693 * t648, t698 * t667 + t740, t728, t693 * t669 + t727, 0, pkin(1) * t573 + pkin(2) * t648 + pkin(7) * t616 - t729, pkin(1) * t574 - pkin(2) * t646 + pkin(7) * t618 + t742, pkin(1) * t604 + pkin(2) * t658 + pkin(7) * t652 + t518, pkin(1) * t500 - pkin(2) * t599 + pkin(7) * t518, t698 * t532 + t693 * t533, t698 * t485 + t693 * t487, t698 * t551 + t693 * t553, t698 * t530 + t693 * t531, t698 * t552 + t693 * t554, t698 * t569 + t693 * t570, pkin(1) * t442 - pkin(2) * t537 + pkin(7) * t476 + t698 * t444 + t693 * t480, pkin(1) * t445 - pkin(2) * t760 + pkin(7) * t491 + t698 * t447 + t693 * t489, pkin(1) * t415 - pkin(2) * t566 + pkin(7) * t428 + t698 * t391 + t693 * t396, pkin(1) * t376 - pkin(2) * t536 + pkin(7) * t381 - pkin(8) * t743 + t698 * t408, t698 * t403 + t693 * t405, t698 * t364 + t693 * t366, t698 * t431 + t693 * t433, t698 * t402 + t693 * t404, t698 * t432 + t693 * t434, t698 * t468 + t693 * t469, pkin(1) * t356 - pkin(2) * t462 + pkin(7) * t379 + t698 * t339 + t693 * t347, pkin(1) * t368 - pkin(2) * t762 + pkin(7) * t383 + t698 * t345 + t693 * t351, pkin(1) * t328 - pkin(2) * t506 + pkin(7) * t334 + t698 * t312 + t693 * t313, pkin(1) * t307 - pkin(2) * t472 + pkin(7) * t311 + t698 * t306 + t693 * t309;];
tauB_reg = t1;
