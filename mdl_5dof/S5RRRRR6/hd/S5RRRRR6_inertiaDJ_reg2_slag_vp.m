% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 12:09
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRR6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 12:08:23
% EndTime: 2022-01-20 12:08:31
% DurationCPUTime: 2.08s
% Computational Cost: add. (3371->193), mult. (7392->311), div. (0->0), fcn. (6511->8), ass. (0->141)
t124 = cos(qJ(3));
t208 = cos(qJ(4));
t180 = t208 * t124;
t210 = -pkin(8) - pkin(7);
t122 = sin(qJ(3));
t206 = sin(qJ(4));
t160 = t210 * t206;
t95 = t122 * t160;
t212 = t210 * t180 - t95;
t216 = t212 * qJD(4);
t123 = sin(qJ(2));
t205 = t123 * pkin(1);
t181 = pkin(7) + t205;
t167 = pkin(8) + t181;
t151 = t167 * t124;
t152 = t167 * t122;
t215 = t206 * t151 + t208 * t152;
t159 = t208 * t210;
t179 = t206 * t124;
t73 = t122 * t159 + t210 * t179;
t175 = qJD(4) * t206;
t214 = t206 * qJD(3) + t175;
t172 = t208 * qJD(4);
t213 = t208 * qJD(3) + t172;
t65 = t208 * t151 - t206 * t152;
t211 = t214 * t122 - t213 * t124;
t94 = t208 * t122 + t179;
t209 = t94 * pkin(9);
t207 = cos(qJ(5));
t125 = cos(qJ(2));
t204 = t125 * pkin(1);
t121 = sin(qJ(5));
t156 = t206 * t122 - t180;
t146 = t121 * t156;
t161 = t213 * t122 + t214 * t124;
t174 = qJD(5) * t207;
t30 = -qJD(5) * t146 - t121 * t211 + t207 * t161 + t94 * t174;
t195 = pkin(1) * qJD(2);
t117 = t123 * t195;
t190 = t122 * qJD(3);
t116 = pkin(3) * t190;
t59 = t161 * pkin(4) + t116;
t55 = t117 + t59;
t145 = t207 * t156;
t69 = t121 * t94 + t145;
t115 = -t124 * pkin(3) - pkin(2);
t78 = t156 * pkin(4) + t115;
t77 = t78 - t204;
t203 = t77 * t30 + t55 * t69;
t191 = qJD(5) * t121;
t29 = qJD(5) * t145 + t121 * t161 + t94 * t191 + t207 * t211;
t70 = t207 * t94 - t146;
t202 = -t77 * t29 + t55 * t70;
t201 = t78 * t30 + t59 * t69;
t200 = -t78 * t29 + t59 * t70;
t101 = t115 - t204;
t97 = t117 + t116;
t199 = t101 * t161 + t97 * t156;
t198 = -t101 * t211 + t97 * t94;
t197 = t115 * t161 + t156 * t116;
t196 = -t115 * t211 + t94 * t116;
t114 = -pkin(2) - t204;
t118 = t124 * qJD(3);
t183 = t122 * t195;
t194 = t114 * t118 + t123 * t183;
t119 = t122 ^ 2;
t120 = t124 ^ 2;
t192 = t119 + t120;
t189 = t208 * pkin(3);
t188 = t206 * pkin(3);
t187 = pkin(2) * t190;
t186 = pkin(2) * t118;
t185 = t125 * t195;
t184 = pkin(4) * t191;
t182 = t124 * t195;
t178 = t122 * t118;
t130 = -t215 - t209;
t128 = t207 * t130;
t91 = t156 * pkin(9);
t51 = -t91 + t65;
t26 = -t121 * t51 + t128;
t129 = t121 * t130;
t27 = t207 * t51 + t129;
t137 = t211 * pkin(9);
t147 = qJD(3) * t167;
t165 = t125 * t182;
t140 = -t122 * t147 + t165;
t166 = t125 * t183;
t141 = -t124 * t147 - t166;
t32 = -t65 * qJD(4) - t206 * t140 + t208 * t141;
t126 = t137 + t32;
t153 = t161 * pkin(9);
t31 = t215 * qJD(4) - t208 * t140 - t206 * t141;
t132 = t153 + t31;
t4 = -qJD(5) * t128 - t121 * t126 + t207 * t132 + t51 * t191;
t5 = -qJD(5) * t129 + t121 * t132 + t207 * t126 - t51 * t174;
t177 = t26 * t29 - t27 * t30 + t4 * t69 - t5 * t70;
t149 = qJD(3) * t160;
t150 = qJD(3) * t159;
t127 = -t122 * t149 + t124 * t150 + t137 + t216;
t46 = -t73 * qJD(4) - t122 * t150 - t124 * t149;
t134 = -t153 - t46;
t136 = t73 - t209;
t135 = t121 * t136;
t58 = -t91 - t212;
t10 = -qJD(5) * t135 - t121 * t134 + t207 * t127 - t58 * t174;
t133 = t207 * t136;
t36 = -t121 * t58 + t133;
t37 = t207 * t58 + t135;
t9 = -qJD(5) * t133 - t121 * t127 - t207 * t134 + t58 * t191;
t176 = -t10 * t70 + t36 * t29 - t37 * t30 + t9 * t69;
t170 = t31 * t156 - t65 * t161 - t211 * t215 - t32 * t94;
t47 = t216 + (t124 * t159 - t95) * qJD(3);
t169 = t46 * t156 + t161 * t212 + t211 * t73 - t47 * t94;
t168 = t192 * t125;
t164 = pkin(3) * t172;
t163 = pkin(3) * t175;
t162 = pkin(4) * t174;
t158 = t207 * t206;
t157 = t181 * qJD(3);
t148 = t114 * t190 - t123 * t182;
t113 = t189 + pkin(4);
t62 = -t113 * t174 - t207 * t164 + (t206 * qJD(5) + t175) * t121 * pkin(3);
t131 = (-qJD(5) * t158 + (-t208 * t121 - t158) * qJD(4)) * pkin(3);
t105 = -0.2e1 * t178;
t104 = 0.2e1 * t178;
t93 = 0.2e1 * (-t119 + t120) * qJD(3);
t87 = pkin(3) * t158 + t121 * t113;
t86 = t207 * t113 - t121 * t188;
t85 = t168 * t195;
t63 = -t113 * t191 + t131;
t54 = -0.2e1 * t94 * t211;
t53 = 0.2e1 * t156 * t161;
t35 = 0.2e1 * t156 * t211 - 0.2e1 * t94 * t161;
t28 = -t156 * t164 - t161 * t188 + t94 * t163 + t189 * t211;
t17 = -0.2e1 * t70 * t29;
t16 = 0.2e1 * t69 * t30;
t11 = 0.2e1 * t29 * t69 - 0.2e1 * t70 * t30;
t8 = (t207 * t29 - t121 * t30 + (t121 * t70 - t207 * t69) * qJD(5)) * pkin(4);
t3 = t86 * t29 - t87 * t30 + t62 * t69 - t63 * t70;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t117, -0.2e1 * t185, 0, 0, t104, t93, 0, t105, 0, 0, 0.2e1 * t148, 0.2e1 * t194, 0.2e1 * t85, 0.2e1 * (t181 * t204 * t192 + t114 * t205) * qJD(2), t54, t35, 0, t53, 0, 0, 0.2e1 * t199, 0.2e1 * t198, 0.2e1 * t170, 0.2e1 * t101 * t97 - 0.2e1 * t215 * t32 - 0.2e1 * t65 * t31, t17, t11, 0, t16, 0, 0, 0.2e1 * t203, 0.2e1 * t202, 0.2e1 * t177, 0.2e1 * t26 * t5 - 0.2e1 * t27 * t4 + 0.2e1 * t77 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117, -t185, 0, 0, t104, t93, 0, t105, 0, 0, t148 - t187, -t186 + t194, t85, (-pkin(2) * t123 + pkin(7) * t168) * t195, t54, t35, 0, t53, 0, 0, t197 + t199, t196 + t198, t169 + t170, t101 * t116 + t97 * t115 + t212 * t31 - t215 * t47 + t32 * t73 - t65 * t46, t17, t11, 0, t16, 0, 0, t201 + t203, t200 + t202, t176 + t177, t26 * t10 - t27 * t9 + t5 * t36 - t4 * t37 + t55 * t78 + t77 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, t93, 0, t105, 0, 0, -0.2e1 * t187, -0.2e1 * t186, 0, 0, t54, t35, 0, t53, 0, 0, 0.2e1 * t197, 0.2e1 * t196, 0.2e1 * t169, 0.2e1 * t115 * t116 + 0.2e1 * t212 * t46 + 0.2e1 * t73 * t47, t17, t11, 0, t16, 0, 0, 0.2e1 * t201, 0.2e1 * t200, 0.2e1 * t176, 0.2e1 * t36 * t10 - 0.2e1 * t37 * t9 + 0.2e1 * t78 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, 0, -t190, 0, -t124 * t157 - t166, t122 * t157 - t165, 0, 0, 0, 0, -t211, 0, -t161, 0, t32, t31, t28, (-t206 * t31 + t208 * t32 + (t206 * t215 + t208 * t65) * qJD(4)) * pkin(3), 0, 0, -t29, 0, -t30, 0, t5, t4, t3, t26 * t63 - t27 * t62 - t4 * t87 + t5 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, 0, -t190, 0, -pkin(7) * t118, pkin(7) * t190, 0, 0, 0, 0, -t211, 0, -t161, 0, t47, t46, t28, (-t206 * t46 + t208 * t47 + (-t206 * t73 - t208 * t212) * qJD(4)) * pkin(3), 0, 0, -t29, 0, -t30, 0, t10, t9, t3, t10 * t86 + t36 * t63 - t37 * t62 - t9 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t163, -0.2e1 * t164, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t63, 0.2e1 * t62, 0, -0.2e1 * t87 * t62 + 0.2e1 * t86 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211, 0, -t161, 0, t32, t31, 0, 0, 0, 0, -t29, 0, -t30, 0, t5, t4, t8, (t207 * t5 - t121 * t4 + (-t121 * t26 + t207 * t27) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211, 0, -t161, 0, t47, t46, 0, 0, 0, 0, -t29, 0, -t30, 0, t10, t9, t8, (t207 * t10 - t121 * t9 + (-t121 * t36 + t207 * t37) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t164, 0, 0, 0, 0, 0, 0, 0, 0, (-pkin(4) - t113) * t191 + t131, -t162 + t62, 0, (t207 * t63 - t121 * t62 + (-t121 * t86 + t207 * t87) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t184, -0.2e1 * t162, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, -t30, 0, t5, t4, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, -t30, 0, t10, t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t62, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t184, -t162, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t1;
