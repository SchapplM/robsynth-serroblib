% Calculate inertial parameters regressor of joint inertia matrix for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:18
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RRPRR6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:17:25
% EndTime: 2022-01-20 11:17:28
% DurationCPUTime: 0.93s
% Computational Cost: add. (811->122), mult. (1606->184), div. (0->0), fcn. (1607->8), ass. (0->98)
t76 = sin(pkin(9));
t116 = -0.2e1 * t76;
t77 = cos(pkin(9));
t115 = -0.2e1 * t77;
t114 = 0.2e1 * t77;
t78 = sin(qJ(5));
t79 = sin(qJ(4));
t81 = cos(qJ(5));
t82 = cos(qJ(4));
t45 = t78 * t82 + t81 * t79;
t34 = t45 * t76;
t101 = t79 * t76;
t66 = t82 * t76;
t36 = -t78 * t101 + t81 * t66;
t83 = cos(qJ(2));
t107 = t83 * pkin(1);
t49 = -t77 * pkin(3) - t76 * pkin(7) - pkin(2);
t40 = t49 - t107;
t37 = t82 * t40;
t80 = sin(qJ(2));
t109 = t80 * pkin(1);
t67 = qJ(3) + t109;
t91 = pkin(8) * t66;
t14 = -t91 + t37 + (-t67 * t79 - pkin(4)) * t77;
t111 = pkin(8) * t76;
t100 = t82 * t77;
t90 = t67 * t100;
t15 = t90 + (t40 - t111) * t79;
t6 = t81 * t14 - t78 * t15;
t7 = t78 * t14 + t81 * t15;
t113 = -t7 * t34 - t6 * t36;
t41 = t82 * t49;
t93 = qJ(3) * t79;
t21 = -t91 + t41 + (-pkin(4) - t93) * t77;
t89 = qJ(3) * t100;
t26 = t89 + (t49 - t111) * t79;
t10 = t78 * t21 + t81 * t26;
t9 = t81 * t21 - t78 * t26;
t112 = -t10 * t34 - t9 * t36;
t110 = t78 * pkin(4);
t108 = t81 * pkin(4);
t68 = -pkin(2) - t107;
t106 = pkin(2) - t68;
t61 = pkin(4) * t101;
t38 = t76 * t67 + t61;
t105 = t38 * t36 + t7 * t77;
t43 = t76 * qJ(3) + t61;
t104 = t10 * t77 + t43 * t36;
t44 = -t78 * t79 + t81 * t82;
t103 = t44 * t77;
t72 = t76 ^ 2;
t53 = t72 * t67;
t102 = t72 * t82;
t64 = t79 * t77;
t24 = -t67 * t64 + t37;
t30 = -t77 * t93 + t41;
t99 = -t24 - t30;
t25 = t79 * t40 + t90;
t98 = t67 * t102 + t25 * t77;
t73 = t77 ^ 2;
t97 = t73 * t67 + t53;
t31 = t79 * t49 + t89;
t70 = t72 * qJ(3);
t96 = t31 * t77 + t82 * t70;
t71 = t73 * qJ(3);
t95 = t71 + t70;
t74 = t79 ^ 2;
t75 = t82 ^ 2;
t94 = t74 + t75;
t59 = t76 * t114;
t92 = t77 * t108;
t88 = t24 * t82 + t25 * t79;
t87 = t30 * t82 + t31 * t79;
t84 = qJ(3) ^ 2;
t69 = t72 * t84;
t65 = t75 * t72;
t63 = t74 * t72;
t62 = t67 ^ 2;
t60 = t77 * t110;
t57 = t79 * t70;
t55 = -0.2e1 * t79 * t102;
t52 = t72 * t62;
t51 = t100 * t116;
t50 = t79 * t59;
t48 = t67 * t70;
t46 = t79 * t53;
t42 = t94 * t76;
t39 = t45 * t77;
t33 = t36 ^ 2;
t32 = t34 ^ 2;
t29 = t36 * t115;
t28 = t34 * t115;
t22 = t43 * t34;
t18 = t38 * t34;
t16 = -0.2e1 * t36 * t34;
t13 = (-t34 * t78 - t36 * t81) * pkin(4);
t11 = -t45 * t34 - t44 * t36;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t107, -0.2e1 * t109, 0, (t80 ^ 2 + t83 ^ 2) * pkin(1) ^ 2, t72, t59, 0, t73, 0, 0, t68 * t115, 0.2e1 * t68 * t76, 0.2e1 * t97, t73 * t62 + t68 ^ 2 + t52, t65, t55, t51, t63, t50, t73, -0.2e1 * t24 * t77 + 0.2e1 * t46, 0.2e1 * t98, t88 * t116, t24 ^ 2 + t25 ^ 2 + t52, t33, t16, t29, t32, -t28, t73, -0.2e1 * t6 * t77 + 0.2e1 * t18, 0.2e1 * t105, 0.2e1 * t113, t38 ^ 2 + t6 ^ 2 + t7 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t107, -t109, 0, 0, t72, t59, 0, t73, 0, 0, t106 * t77, -t106 * t76, t95 + t97, -t68 * pkin(2) + t67 * t71 + t48, t65, t55, t51, t63, t50, t73, t99 * t77 + t46 + t57, t96 + t98, (t99 * t82 + (-t25 - t31) * t79) * t76, t24 * t30 + t25 * t31 + t48, t33, t16, t29, t32, -t28, t73, t18 + t22 + (-t6 - t9) * t77, t104 + t105, t112 + t113, t7 * t10 + t38 * t43 + t6 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t72, t59, 0, t73, 0, 0, pkin(2) * t114, pkin(2) * t116, 0.2e1 * t95, pkin(2) ^ 2 + t73 * t84 + t69, t65, t55, t51, t63, t50, t73, -0.2e1 * t30 * t77 + 0.2e1 * t57, 0.2e1 * t96, t87 * t116, t30 ^ 2 + t31 ^ 2 + t69, t33, t16, t29, t32, -t28, t73, -0.2e1 * t9 * t77 + 0.2e1 * t22, 0.2e1 * t104, 0.2e1 * t112, t10 ^ 2 + t43 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, t76, 0, t68, 0, 0, 0, 0, 0, 0, -t100, t64, -t42, t88, 0, 0, 0, 0, 0, 0, -t103, t39, t11, t6 * t44 + t7 * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t77, t76, 0, -pkin(2), 0, 0, 0, 0, 0, 0, -t100, t64, -t42, t87, 0, 0, 0, 0, 0, 0, -t103, t39, t11, t10 * t45 + t9 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44 ^ 2 + t45 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, -t101, -t77, t24, -t25, 0, 0, 0, 0, t36, 0, -t34, -t77, t6 - t92, t60 - t7, t13, (t6 * t81 + t7 * t78) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, 0, -t101, -t77, t30, -t31, 0, 0, 0, 0, t36, 0, -t34, -t77, t9 - t92, -t10 + t60, t13, (t10 * t78 + t81 * t9) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, -t79, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t45, 0, (t44 * t81 + t45 * t78) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t108, -0.2e1 * t110, 0, (t78 ^ 2 + t81 ^ 2) * pkin(4) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, -t77, t6, -t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, -t77, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, -t45, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t108, -t110, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t1;
