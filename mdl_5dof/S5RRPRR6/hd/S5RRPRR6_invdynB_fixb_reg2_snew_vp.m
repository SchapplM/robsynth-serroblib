% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:18
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:17:32
% EndTime: 2022-01-20 11:17:46
% DurationCPUTime: 11.64s
% Computational Cost: add. (55564->556), mult. (77966->850), div. (0->0), fcn. (50965->10), ass. (0->391)
t612 = qJD(1) + qJD(2);
t607 = t612 ^ 2;
t623 = cos(qJ(2));
t608 = qJDD(1) + qJDD(2);
t619 = sin(qJ(2));
t663 = t619 * t608;
t573 = t623 * t607 + t663;
t654 = t623 * t608;
t664 = t619 * t607;
t576 = -t654 + t664;
t620 = sin(qJ(1));
t624 = cos(qJ(1));
t523 = t620 * t573 + t624 * t576;
t554 = pkin(6) * t573 - t623 * g(3);
t695 = pkin(6) * t576 - t619 * g(3);
t702 = pkin(5) * t523 + t620 * t554 + t624 * t695;
t631 = t624 * t573 - t620 * t576;
t701 = pkin(5) * t631 + t624 * t554 - t620 * t695;
t599 = t624 * g(1) + t620 * g(2);
t625 = qJD(1) ^ 2;
t581 = -t625 * pkin(1) - t599;
t598 = t620 * g(1) - t624 * g(2);
t630 = qJDD(1) * pkin(1) + t598;
t532 = t619 * t581 - t623 * t630;
t533 = t623 * t581 + t619 * t630;
t640 = t619 * t532 + t623 * t533;
t474 = t623 * t532 - t619 * t533;
t653 = t624 * t474;
t698 = -t620 * t640 + t653;
t662 = t620 * t474;
t413 = t624 * t640 + t662;
t617 = sin(qJ(5));
t618 = sin(qJ(4));
t621 = cos(qJ(5));
t622 = cos(qJ(4));
t615 = sin(pkin(9));
t676 = t612 * t615;
t539 = (-t617 * t622 - t618 * t621) * t676;
t549 = (qJD(4) * t612 * t622 + t608 * t618) * t615;
t647 = t618 * t676;
t674 = t615 * t622;
t550 = -qJD(4) * t647 + t608 * t674;
t465 = t539 * qJD(5) - t617 * t549 + t621 * t550;
t616 = cos(pkin(9));
t672 = t616 * t612;
t594 = -qJD(4) + t672;
t585 = -qJD(5) + t594;
t682 = t539 * t585;
t697 = t465 - t682;
t506 = -t607 * pkin(2) + t608 * qJ(3) + t533;
t688 = 2 * qJD(3);
t696 = t612 * t688 + t506;
t610 = t615 ^ 2;
t611 = t616 ^ 2;
t562 = (t610 + t611) * t616 * t607;
t642 = t616 * t654;
t528 = -t619 * t562 + t642;
t530 = t623 * t562 + t616 * t663;
t469 = t624 * t528 - t620 * t530;
t694 = t620 * t528 + t624 * t530;
t673 = t616 * t608;
t592 = -qJDD(4) + t673;
t582 = -qJDD(5) + t592;
t646 = t612 * t674;
t541 = -t617 * t647 + t621 * t646;
t681 = t541 * t539;
t628 = -t582 + t681;
t693 = t617 * t628;
t560 = t594 * t646;
t508 = t560 - t549;
t692 = t618 * t508;
t690 = t621 * t628;
t637 = t594 * t647;
t509 = t550 + t637;
t501 = t622 * t509;
t639 = t621 * t549 + t617 * t550;
t438 = (qJD(5) + t585) * t541 + t639;
t537 = t539 ^ 2;
t538 = t541 ^ 2;
t583 = t585 ^ 2;
t591 = t594 ^ 2;
t687 = pkin(3) * t615;
t686 = pkin(3) * t616;
t603 = t608 * pkin(2);
t685 = t616 * g(3);
t680 = t585 * t617;
t679 = t585 * t621;
t678 = t592 * t615;
t677 = t610 * t607;
t675 = t615 * t616;
t548 = -t594 * pkin(4) - pkin(8) * t646;
t613 = t618 ^ 2;
t593 = t613 * t677;
t636 = -pkin(7) * t615 - t686;
t564 = t636 * t612;
t652 = t688 + t564;
t410 = t685 + t549 * pkin(4) - pkin(8) * t593 + (t506 + (t548 * t622 + t652) * t612) * t615;
t671 = t617 * t410;
t482 = t582 + t681;
t670 = t617 * t482;
t487 = -t615 * g(3) + t696 * t616;
t459 = t564 * t672 + t487;
t505 = -t607 * qJ(3) + qJDD(3) + t532 - t603;
t485 = t636 * t608 + t505;
t479 = t622 * t485;
t649 = t594 * t676;
t385 = -t592 * pkin(4) - t550 * pkin(8) + t479 + (-pkin(4) * t622 * t677 + pkin(8) * t649 - t459) * t618;
t409 = t622 * t459 + t618 * t485;
t386 = -pkin(4) * t593 - t549 * pkin(8) + t594 * t548 + t409;
t335 = -t621 * t385 + t617 * t386;
t336 = t617 * t385 + t621 * t386;
t301 = -t621 * t335 + t617 * t336;
t669 = t618 * t301;
t458 = t685 + (t652 * t612 + t506) * t615;
t668 = t618 * t458;
t648 = t607 * t618 * t622;
t579 = t610 * t648;
t546 = -t579 + t592;
t667 = t618 * t546;
t547 = -t579 - t592;
t666 = t618 * t547;
t665 = t619 * t505;
t661 = t621 * t410;
t660 = t621 * t482;
t659 = t622 * t301;
t658 = t622 * t458;
t657 = t622 * t546;
t656 = t622 * t547;
t655 = t623 * t505;
t614 = t622 ^ 2;
t645 = t614 * t677;
t644 = t615 * t681;
t643 = t616 * t681;
t641 = -t505 + t603;
t302 = t617 * t335 + t621 * t336;
t408 = t618 * t459 - t479;
t486 = t696 * t615 + t685;
t423 = t615 * t486 + t616 * t487;
t543 = -t620 * t598 - t624 * t599;
t609 = t615 * t610;
t638 = t609 * t648;
t589 = t624 * qJDD(1) - t620 * t625;
t635 = -pkin(5) * t589 - t620 * g(3);
t634 = t616 * t579;
t358 = -t622 * t408 + t618 * t409;
t361 = t618 * t408 + t622 * t409;
t422 = t616 * t486 - t615 * t487;
t535 = t573 * t675;
t536 = t615 * t642 - t664 * t675;
t633 = t624 * t535 + t620 * t536;
t632 = t620 * t535 - t624 * t536;
t542 = t624 * t598 - t620 * t599;
t602 = t611 * t607;
t601 = t611 * t608;
t600 = t610 * t608;
t588 = t620 * qJDD(1) + t624 * t625;
t572 = t602 - t677;
t571 = t602 + t677;
t567 = t601 - t600;
t566 = t601 + t600;
t565 = -pkin(5) * t588 + t624 * g(3);
t561 = (t611 * t615 + t609) * t607;
t559 = t593 - t645;
t558 = t593 + t645;
t557 = t591 - t645;
t556 = -t593 - t591;
t555 = t593 - t591;
t534 = -t645 - t591;
t529 = t623 * t561 + t615 * t663;
t526 = t619 * t561 - t615 * t654;
t518 = t623 * t567 - t619 * t572;
t517 = t623 * t566 - t619 * t571;
t516 = t619 * t567 + t623 * t572;
t515 = t619 * t566 + t623 * t571;
t514 = -t538 + t583;
t513 = t537 - t583;
t512 = (-t613 - t614) * t649;
t511 = t637 - t550;
t507 = t560 + t549;
t504 = -t618 * t550 + t614 * t649;
t503 = t622 * t549 + t613 * t649;
t499 = -t538 - t583;
t498 = t622 * t556 - t666;
t497 = t622 * t555 + t667;
t496 = -t618 * t557 + t656;
t495 = t618 * t556 + t656;
t494 = -t618 * t555 + t657;
t493 = -t622 * t557 - t666;
t492 = -t538 + t537;
t491 = -t619 * t512 - t623 * t678;
t490 = t623 * t512 - t619 * t678;
t489 = -t618 * t534 + t657;
t488 = t622 * t534 + t667;
t480 = -t583 - t537;
t477 = t616 * t501 + t638;
t476 = -t616 * t692 - t638;
t470 = -t620 * t526 + t624 * t529;
t468 = t624 * t526 + t620 * t529;
t467 = pkin(1) * g(3) + pkin(6) * t640;
t466 = -t537 - t538;
t464 = -t541 * qJD(5) - t639;
t463 = (-t539 * t621 - t541 * t617) * t585;
t462 = (-t539 * t617 + t541 * t621) * t585;
t461 = -t620 * t515 + t624 * t517;
t460 = t624 * t515 + t620 * t517;
t456 = t622 * t508 - t618 * t509;
t455 = -t622 * t507 - t618 * t511;
t454 = -t501 - t692;
t453 = -t618 * t507 + t622 * t511;
t452 = t616 * t498 - t615 * t508;
t451 = t616 * t497 - t615 * t507;
t450 = t616 * t496 - t615 * t511;
t449 = t615 * t498 + t616 * t508;
t448 = t616 * t489 + t509 * t615;
t447 = t615 * t489 - t509 * t616;
t446 = t621 * t513 + t670;
t445 = -t617 * t514 + t690;
t444 = t617 * t513 - t660;
t443 = t621 * t514 + t693;
t442 = -t465 - t682;
t437 = (qJD(5) - t585) * t541 + t639;
t436 = t623 * t477 - t619 * t504;
t435 = t623 * t476 - t619 * t503;
t434 = t619 * t477 + t623 * t504;
t433 = t619 * t476 + t623 * t503;
t432 = t616 * t456 - t615 * t559;
t431 = t616 * t455 - t615 * t558;
t430 = t615 * t455 + t616 * t558;
t429 = -t617 * t499 + t660;
t428 = t621 * t499 + t670;
t427 = t621 * t465 + t541 * t680;
t426 = t617 * t465 - t541 * t679;
t425 = -t617 * t464 + t539 * t679;
t424 = t621 * t464 + t539 * t680;
t420 = t621 * t480 - t693;
t419 = t617 * t480 + t690;
t418 = -pkin(7) * t495 + t668;
t417 = -pkin(6) * t526 - t619 * t487 + t616 * t655;
t416 = -pkin(6) * t528 - t619 * t486 + t615 * t655;
t415 = pkin(6) * t529 + t623 * t487 + t616 * t665;
t414 = -pkin(6) * t530 + t623 * t486 + t615 * t665;
t411 = -pkin(7) * t488 + t658;
t407 = t623 * t452 + t619 * t495;
t406 = t623 * t451 - t619 * t494;
t405 = t623 * t450 - t619 * t493;
t404 = t619 * t452 - t623 * t495;
t403 = t619 * t451 + t623 * t494;
t402 = t619 * t450 + t623 * t493;
t401 = -t618 * t462 + t622 * t463;
t400 = -t622 * t462 - t618 * t463;
t399 = -pkin(6) * t515 + t623 * t422;
t398 = pkin(6) * t517 + t619 * t422;
t397 = t623 * t448 + t619 * t488;
t396 = t619 * t448 - t623 * t488;
t395 = t623 * t423 + t665;
t394 = t619 * t423 - t655;
t393 = t616 * t401 - t615 * t582;
t392 = -pkin(3) * t495 + t408;
t391 = -pkin(3) * t488 + t409;
t390 = t623 * t432 - t619 * t454;
t389 = t623 * t431 + t619 * t453;
t388 = t619 * t432 + t623 * t454;
t387 = t619 * t431 - t623 * t453;
t381 = -t618 * t444 + t622 * t446;
t380 = -t618 * t443 + t622 * t445;
t379 = -t622 * t444 - t618 * t446;
t378 = -t622 * t443 - t618 * t445;
t377 = -t438 * t621 - t617 * t442;
t376 = -t621 * t437 - t617 * t697;
t375 = -t438 * t617 + t621 * t442;
t374 = -t617 * t437 + t621 * t697;
t373 = -t618 * t428 + t622 * t429;
t372 = t622 * t428 + t618 * t429;
t371 = -t618 * t426 + t622 * t427;
t370 = -t618 * t424 + t622 * t425;
t369 = -t622 * t426 - t618 * t427;
t368 = -t622 * t424 - t618 * t425;
t367 = -pkin(8) * t428 + t661;
t366 = -t618 * t419 + t622 * t420;
t365 = t622 * t419 + t618 * t420;
t364 = -pkin(2) * t449 - pkin(3) * t508 - pkin(7) * t498 + t658;
t363 = -pkin(8) * t419 + t671;
t362 = -pkin(2) * t447 + pkin(3) * t509 - pkin(7) * t489 - t668;
t360 = t616 * t371 - t644;
t359 = t616 * t370 + t644;
t357 = -t620 * t404 + t624 * t407;
t356 = t624 * t404 + t620 * t407;
t355 = t616 * t381 - t615 * t438;
t354 = t616 * t380 - t615 * t442;
t353 = -t620 * t396 + t624 * t397;
t352 = t624 * t396 + t620 * t397;
t351 = t623 * t393 - t619 * t400;
t350 = t619 * t393 + t623 * t400;
t349 = -t620 * t394 + t624 * t395;
t348 = t624 * t394 + t620 * t395;
t347 = t616 * t373 + t615 * t697;
t346 = t615 * t373 - t616 * t697;
t345 = -pkin(4) * t697 + pkin(8) * t429 + t671;
t344 = t616 * t366 + t615 * t437;
t343 = t615 * t366 - t616 * t437;
t342 = -pkin(7) * t453 - t358;
t341 = t616 * t361 + t615 * t458;
t340 = t615 * t361 - t616 * t458;
t339 = -pkin(4) * t437 + pkin(8) * t420 - t661;
t338 = -t620 * t387 + t624 * t389;
t337 = t624 * t387 + t620 * t389;
t334 = -pkin(6) * t394 - (pkin(2) * t619 - qJ(3) * t623) * t422;
t332 = -qJ(3) * t449 - t615 * t392 + t616 * t418;
t331 = -qJ(3) * t447 - t615 * t391 + t616 * t411;
t330 = -t618 * t375 + t622 * t377;
t329 = -t618 * t374 + t622 * t376;
t328 = t622 * t375 + t618 * t377;
t327 = -t622 * t374 - t618 * t376;
t326 = -pkin(2) * t430 - pkin(3) * t558 - pkin(7) * t455 - t361;
t325 = t616 * t329 - t615 * t492;
t324 = t623 * t360 - t619 * t369;
t323 = t623 * t359 - t619 * t368;
t322 = t619 * t360 + t623 * t369;
t321 = t619 * t359 + t623 * t368;
t320 = t616 * t330 + t615 * t466;
t319 = t615 * t330 - t616 * t466;
t318 = pkin(6) * t395 - (-pkin(2) * t623 - qJ(3) * t619 - pkin(1)) * t422;
t317 = t623 * t355 - t619 * t379;
t316 = t623 * t354 - t619 * t378;
t315 = t619 * t355 + t623 * t379;
t314 = t619 * t354 + t623 * t378;
t313 = -qJ(3) * t430 + t616 * t342 + t453 * t687;
t312 = t623 * t347 + t619 * t372;
t311 = t619 * t347 - t623 * t372;
t310 = t623 * t344 + t619 * t365;
t309 = t619 * t344 - t623 * t365;
t308 = t623 * t341 + t619 * t358;
t307 = t619 * t341 - t623 * t358;
t306 = -pkin(3) * t328 - pkin(4) * t375;
t305 = -pkin(2) * t340 + pkin(3) * t458 - pkin(7) * t361;
t304 = -pkin(3) * t372 - pkin(4) * t428 + t336;
t303 = -pkin(3) * t365 - pkin(4) * t419 + t335;
t300 = -pkin(6) * t404 + t623 * t332 - t619 * t364;
t299 = -pkin(7) * t372 - t618 * t345 + t622 * t367;
t298 = -pkin(6) * t396 + t623 * t331 - t619 * t362;
t297 = -pkin(7) * t365 - t618 * t339 + t622 * t363;
t296 = -pkin(1) * t449 + pkin(6) * t407 + t619 * t332 + t623 * t364;
t295 = -qJ(3) * t340 + (-pkin(7) * t616 + t687) * t358;
t294 = t623 * t325 - t619 * t327;
t293 = t619 * t325 + t623 * t327;
t292 = -pkin(4) * t410 + pkin(8) * t302;
t291 = t623 * t320 + t619 * t328;
t290 = t619 * t320 - t623 * t328;
t289 = -pkin(1) * t447 + pkin(6) * t397 + t619 * t331 + t623 * t362;
t288 = -pkin(8) * t375 - t301;
t287 = -pkin(4) * t466 + pkin(8) * t377 + t302;
t286 = -t620 * t311 + t624 * t312;
t285 = t624 * t311 + t620 * t312;
t284 = -t620 * t309 + t624 * t310;
t283 = t624 * t309 + t620 * t310;
t282 = -pkin(6) * t387 + t623 * t313 - t619 * t326;
t281 = -pkin(2) * t346 + pkin(3) * t697 - pkin(7) * t373 - t622 * t345 - t618 * t367;
t280 = -t620 * t307 + t624 * t308;
t279 = t624 * t307 + t620 * t308;
t278 = -pkin(2) * t343 + pkin(3) * t437 - pkin(7) * t366 - t622 * t339 - t618 * t363;
t277 = -pkin(1) * t430 + pkin(6) * t389 + t619 * t313 + t623 * t326;
t276 = t622 * t302 - t669;
t275 = t618 * t302 + t659;
t274 = t616 * t276 + t615 * t410;
t273 = t615 * t276 - t616 * t410;
t272 = -qJ(3) * t346 + t616 * t299 - t615 * t304;
t271 = -t620 * t290 + t624 * t291;
t270 = t624 * t290 + t620 * t291;
t269 = -qJ(3) * t343 + t616 * t297 - t615 * t303;
t268 = -pkin(6) * t307 + t623 * t295 - t619 * t305;
t267 = -pkin(3) * t275 - pkin(4) * t301;
t266 = -pkin(7) * t328 - t618 * t287 + t622 * t288;
t265 = -pkin(1) * t340 + pkin(6) * t308 + t619 * t295 + t623 * t305;
t264 = -pkin(2) * t319 + pkin(3) * t466 - pkin(7) * t330 - t622 * t287 - t618 * t288;
t263 = -pkin(7) * t275 - pkin(8) * t659 - t618 * t292;
t262 = t623 * t274 + t619 * t275;
t261 = t619 * t274 - t623 * t275;
t260 = -pkin(6) * t311 + t623 * t272 - t619 * t281;
t259 = -qJ(3) * t319 + t616 * t266 - t615 * t306;
t258 = -pkin(6) * t309 + t623 * t269 - t619 * t278;
t257 = -pkin(1) * t346 + pkin(6) * t312 + t619 * t272 + t623 * t281;
t256 = -pkin(1) * t343 + pkin(6) * t310 + t619 * t269 + t623 * t278;
t255 = -pkin(2) * t273 + pkin(3) * t410 - pkin(7) * t276 + pkin(8) * t669 - t622 * t292;
t254 = -t620 * t261 + t624 * t262;
t253 = t624 * t261 + t620 * t262;
t252 = -qJ(3) * t273 + t616 * t263 - t615 * t267;
t251 = -pkin(6) * t290 + t623 * t259 - t619 * t264;
t250 = -pkin(1) * t319 + pkin(6) * t291 + t619 * t259 + t623 * t264;
t249 = -pkin(6) * t261 + t623 * t252 - t619 * t255;
t248 = -pkin(1) * t273 + pkin(6) * t262 + t619 * t252 + t623 * t255;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t588, -t589, 0, t543, 0, 0, 0, 0, 0, 0, -t631, t523, 0, t413, 0, 0, 0, 0, 0, 0, -t694, t470, t461, t349, 0, 0, 0, 0, 0, 0, t357, t353, t338, t280, 0, 0, 0, 0, 0, 0, t284, t286, t271, t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t589, -t588, 0, t542, 0, 0, 0, 0, 0, 0, -t523, -t631, 0, -t698, 0, 0, 0, 0, 0, 0, t469, t468, t460, t348, 0, 0, 0, 0, 0, 0, t356, t352, t337, t279, 0, 0, 0, 0, 0, 0, t283, t285, t270, t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t422, 0, 0, 0, 0, 0, 0, t449, t447, t430, t340, 0, 0, 0, 0, 0, 0, t343, t346, t319, t273; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t589, 0, -t588, 0, t635, -t565, -t542, -pkin(5) * t542, 0, 0, -t523, 0, -t631, 0, t702, t701, t698, pkin(5) * t698 + pkin(6) * t653 - t620 * t467, -t632, -t620 * t516 + t624 * t518, t470, t632, t694, 0, -pkin(5) * t469 - t620 * t414 + t624 * t416, -pkin(5) * t468 - t620 * t415 + t624 * t417, -pkin(5) * t460 - t620 * t398 + t624 * t399, -pkin(5) * t348 - t620 * t318 + t624 * t334, -t620 * t434 + t624 * t436, -t620 * t388 + t624 * t390, -t620 * t402 + t624 * t405, -t620 * t433 + t624 * t435, -t620 * t403 + t624 * t406, -t620 * t490 + t624 * t491, -pkin(5) * t356 - t620 * t296 + t624 * t300, -pkin(5) * t352 - t620 * t289 + t624 * t298, -pkin(5) * t337 - t620 * t277 + t624 * t282, -pkin(5) * t279 - t620 * t265 + t624 * t268, -t620 * t322 + t624 * t324, -t620 * t293 + t624 * t294, -t620 * t314 + t624 * t316, -t620 * t321 + t624 * t323, -t620 * t315 + t624 * t317, -t620 * t350 + t624 * t351, -pkin(5) * t283 - t620 * t256 + t624 * t258, -pkin(5) * t285 - t620 * t257 + t624 * t260, -pkin(5) * t270 - t620 * t250 + t624 * t251, -pkin(5) * t253 - t620 * t248 + t624 * t249; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t588, 0, t589, 0, t565, t635, t543, pkin(5) * t543, 0, 0, t631, 0, -t523, 0, -t701, t702, t413, pkin(5) * t413 + pkin(6) * t662 + t624 * t467, t633, t624 * t516 + t620 * t518, t468, -t633, -t469, 0, -pkin(5) * t694 + t624 * t414 + t620 * t416, pkin(5) * t470 + t624 * t415 + t620 * t417, pkin(5) * t461 + t624 * t398 + t620 * t399, pkin(5) * t349 + t624 * t318 + t620 * t334, t624 * t434 + t620 * t436, t624 * t388 + t620 * t390, t624 * t402 + t620 * t405, t624 * t433 + t620 * t435, t624 * t403 + t620 * t406, t624 * t490 + t620 * t491, pkin(5) * t357 + t624 * t296 + t620 * t300, pkin(5) * t353 + t624 * t289 + t620 * t298, pkin(5) * t338 + t624 * t277 + t620 * t282, pkin(5) * t280 + t624 * t265 + t620 * t268, t624 * t322 + t620 * t324, t624 * t293 + t620 * t294, t624 * t314 + t620 * t316, t624 * t321 + t620 * t323, t624 * t315 + t620 * t317, t624 * t350 + t620 * t351, pkin(5) * t284 + t624 * t256 + t620 * t258, pkin(5) * t286 + t624 * t257 + t620 * t260, pkin(5) * t271 + t624 * t250 + t620 * t251, pkin(5) * t254 + t624 * t248 + t620 * t249; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t598, t599, 0, 0, 0, 0, 0, 0, 0, t608, -pkin(1) * t576 - t532, -pkin(1) * t573 - t533, 0, -pkin(1) * t474, t600, 0.2e1 * t615 * t673, 0, t601, 0, 0, pkin(1) * t528 - qJ(3) * t562 + t616 * t641, pkin(1) * t526 + qJ(3) * t561 - t615 * t641, pkin(1) * t515 + pkin(2) * t571 + qJ(3) * t566 + t423, pkin(1) * t394 - pkin(2) * t505 + qJ(3) * t423, t615 * t501 - t634, t615 * t456 + t616 * t559, t615 * t496 + t616 * t511, -t615 * t692 + t634, t615 * t497 + t616 * t507, t616 * t592, pkin(1) * t404 - pkin(2) * t495 + qJ(3) * t452 + t616 * t392 + t615 * t418, pkin(1) * t396 - pkin(2) * t488 + qJ(3) * t448 + t616 * t391 + t615 * t411, pkin(1) * t387 + qJ(3) * t431 + t615 * t342 + (-pkin(2) - t686) * t453, pkin(1) * t307 + qJ(3) * t341 + (-pkin(2) + t636) * t358, t615 * t371 + t643, t615 * t329 + t616 * t492, t615 * t380 + t616 * t442, t615 * t370 - t643, t615 * t381 + t616 * t438, t615 * t401 + t616 * t582, pkin(1) * t309 - pkin(2) * t365 + qJ(3) * t344 + t615 * t297 + t616 * t303, pkin(1) * t311 - pkin(2) * t372 + qJ(3) * t347 + t615 * t299 + t616 * t304, pkin(1) * t290 - pkin(2) * t328 + qJ(3) * t320 + t615 * t266 + t616 * t306, pkin(1) * t261 - pkin(2) * t275 + qJ(3) * t274 + t615 * t263 + t616 * t267;];
tauB_reg = t1;
