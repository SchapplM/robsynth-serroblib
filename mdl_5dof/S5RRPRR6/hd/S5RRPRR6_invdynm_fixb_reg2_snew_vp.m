% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:18
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:17:46
% EndTime: 2022-01-20 11:18:02
% DurationCPUTime: 16.69s
% Computational Cost: add. (94132->624), mult. (131905->873), div. (0->0), fcn. (85974->10), ass. (0->434)
t1100 = qJD(1) + qJD(2);
t1096 = t1100 ^ 2;
t1110 = cos(qJ(2));
t1097 = qJDD(1) + qJDD(2);
t1106 = sin(qJ(2));
t1171 = t1106 * t1097;
t1060 = t1096 * t1110 + t1171;
t1039 = pkin(6) * t1060 - g(3) * t1110;
t1107 = sin(qJ(1));
t1111 = cos(qJ(1));
t1167 = t1110 * t1097;
t1063 = t1096 * t1106 - t1167;
t1133 = t1060 * t1111 - t1063 * t1107;
t1217 = pkin(6) * t1063 - g(3) * t1106;
t1228 = pkin(5) * t1133 + t1111 * t1039 - t1107 * t1217;
t1214 = t1060 * t1107 + t1063 * t1111;
t1227 = pkin(5) * t1214 + t1107 * t1039 + t1111 * t1217;
t1104 = sin(qJ(5));
t1103 = cos(pkin(9));
t1174 = t1103 * t1097;
t1081 = -qJDD(4) + t1174;
t1070 = -qJDD(5) + t1081;
t1105 = sin(qJ(4));
t1108 = cos(qJ(5));
t1109 = cos(qJ(4));
t1102 = sin(pkin(9));
t1180 = t1100 * t1102;
t1027 = (-t1104 * t1109 - t1105 * t1108) * t1180;
t1179 = t1100 * t1109;
t1159 = t1102 * t1179;
t1177 = t1102 * t1105;
t1160 = t1100 * t1177;
t1029 = -t1104 * t1160 + t1108 * t1159;
t1187 = t1029 * t1027;
t1218 = -t1070 + t1187;
t1226 = t1104 * t1218;
t1225 = t1108 * t1218;
t1087 = g(1) * t1111 + g(2) * t1107;
t1112 = qJD(1) ^ 2;
t1069 = -pkin(1) * t1112 - t1087;
t1086 = g(1) * t1107 - g(2) * t1111;
t1129 = qJDD(1) * pkin(1) + t1086;
t1020 = t1106 * t1069 - t1110 * t1129;
t1021 = t1110 * t1069 + t1106 * t1129;
t1146 = t1020 * t1106 + t1021 * t1110;
t954 = t1020 * t1110 - t1021 * t1106;
t1189 = t1111 * t954;
t1223 = -t1107 * t1146 + t1189;
t1195 = t1107 * t954;
t1222 = t1111 * t1146 + t1195;
t1083 = t1100 * t1103 - qJD(4);
t1074 = -qJD(5) + t1083;
t1188 = t1027 * t1074;
t1073 = qJD(4) * t1160;
t1168 = t1109 * t1097;
t1035 = t1102 * t1168 - t1073;
t1182 = t1097 * t1105;
t1127 = qJD(4) * t1179 + t1182;
t1121 = t1127 * t1102;
t946 = t1027 * qJD(5) + t1108 * t1035 - t1104 * t1121;
t1219 = t946 - t1188;
t1099 = t1102 ^ 2;
t1114 = t1103 ^ 2;
t1049 = (t1099 + t1114) * t1103 * t1096;
t1154 = t1103 * t1167;
t1016 = -t1049 * t1106 + t1154;
t1018 = t1049 * t1110 + t1103 * t1171;
t1216 = t1016 * t1111 - t1018 * t1107;
t1215 = t1016 * t1107 + t1018 * t1111;
t1210 = 2 * qJD(3);
t996 = -pkin(2) * t1096 + qJ(3) * t1097 + t1021;
t1153 = t1100 * t1210 + t996;
t1204 = t1103 * g(3);
t970 = t1102 * t1153 + t1204;
t1205 = t1102 * g(3);
t971 = t1103 * t1153 - t1205;
t897 = t1102 * t970 + t1103 * t971;
t1145 = t1104 * t1035 + t1108 * t1121;
t914 = (qJD(5) + t1074) * t1029 + t1145;
t1183 = t1083 * t1100;
t1162 = t1105 * t1183;
t1000 = t1102 * (t1162 + t1168) - t1073;
t1025 = t1027 ^ 2;
t1026 = t1029 ^ 2;
t1071 = t1074 ^ 2;
t1080 = t1083 ^ 2;
t1211 = t1105 ^ 2;
t1163 = t1083 * t1180;
t1181 = t1099 * t1096;
t1206 = pkin(3) * t1103;
t1139 = -pkin(7) * t1102 - t1206;
t1166 = t1100 * t1139 + t1210;
t1137 = t1100 * t1166 + t996;
t942 = t1103 * t1137 - t1205;
t995 = -pkin(2) * t1097 - qJ(3) * t1096 + qJDD(3) + t1020;
t968 = t1097 * t1139 + t995;
t961 = t1109 * t968;
t853 = -t1081 * pkin(4) - t1035 * pkin(8) + t961 + (-pkin(4) * t1109 * t1181 + pkin(8) * t1163 - t942) * t1105;
t1034 = -pkin(4) * t1083 - pkin(8) * t1159;
t1082 = t1211 * t1181;
t883 = t1105 * t968 + t1109 * t942;
t854 = -pkin(4) * t1082 - pkin(8) * t1121 + t1083 * t1034 + t883;
t801 = t1104 * t854 - t1108 * t853;
t802 = t1104 * t853 + t1108 * t854;
t759 = t1104 * t802 - t1108 * t801;
t1209 = pkin(4) * t759;
t917 = t1188 + t946;
t845 = -t1104 * t914 - t1108 * t917;
t1208 = pkin(4) * t845;
t1207 = pkin(3) * t1102;
t1201 = -pkin(2) * t995 + qJ(3) * t897;
t990 = t1102 * t995;
t991 = t1103 * t995;
t884 = t1204 + pkin(4) * t1121 - pkin(8) * t1082 + (t996 + (t1034 * t1109 + t1166) * t1100) * t1102;
t1200 = t1104 * t884;
t965 = t1070 + t1187;
t1199 = t1104 * t965;
t1198 = t1105 * t759;
t941 = t1102 * t1137 + t1204;
t1197 = t1105 * t941;
t1196 = t1106 * t995;
t1194 = t1108 * t884;
t1193 = t1108 * t965;
t1192 = t1109 * t759;
t1191 = t1109 * t941;
t1190 = t1110 * t995;
t1186 = t1074 * t1029;
t1185 = t1074 * t1104;
t1184 = t1074 * t1108;
t1090 = t1102 * t1097;
t1178 = t1102 * t1103;
t1176 = t1102 * t1106;
t1175 = t1102 * t1110;
t1161 = t1096 * t1105 * t1109;
t1067 = t1099 * t1161;
t1032 = -t1067 + t1081;
t1173 = t1105 * t1032;
t1033 = -t1067 - t1081;
t1172 = t1105 * t1033;
t1170 = t1109 * t1032;
t1169 = t1109 * t1033;
t1164 = pkin(2) * t1174 - qJ(3) * t1049 - t991;
t1101 = t1109 ^ 2;
t1158 = t1101 * t1181;
t1157 = t1102 * t1187;
t1156 = t1102 * t1174;
t1155 = t1103 * t1187;
t1079 = t1096 * t1178;
t760 = t1104 * t801 + t1108 * t802;
t882 = t1105 * t942 - t961;
t829 = t1105 * t882 + t1109 * t883;
t736 = t1105 * t760 + t1192;
t747 = -pkin(4) * t884 + pkin(8) * t760;
t719 = -pkin(7) * t736 - pkin(8) * t1192 - t1105 * t747;
t727 = -pkin(3) * t736 - t1209;
t737 = t1109 * t760 - t1198;
t734 = t1102 * t884 + t1103 * t737;
t1152 = -pkin(2) * t736 + qJ(3) * t734 + t1102 * t719 + t1103 * t727;
t847 = t1104 * t917 - t1108 * t914;
t947 = -t1025 - t1026;
t742 = -pkin(4) * t947 + pkin(8) * t847 + t760;
t743 = -pkin(8) * t845 - t759;
t794 = t1105 * t847 + t1109 * t845;
t725 = -pkin(7) * t794 - t1105 * t742 + t1109 * t743;
t767 = -pkin(3) * t794 - t1208;
t796 = -t1105 * t845 + t1109 * t847;
t784 = t1102 * t947 + t1103 * t796;
t1151 = -pkin(2) * t794 + qJ(3) * t784 + t1102 * t725 + t1103 * t767;
t962 = -t1071 - t1025;
t893 = t1108 * t962 - t1226;
t913 = (qJD(5) - t1074) * t1029 + t1145;
t803 = -pkin(4) * t913 + pkin(8) * t893 - t1194;
t892 = t1104 * t962 + t1225;
t831 = -pkin(8) * t892 + t1200;
t834 = t1105 * t893 + t1109 * t892;
t753 = -pkin(7) * t834 - t1105 * t803 + t1109 * t831;
t1130 = pkin(4) * t892 - t801;
t762 = -pkin(3) * t834 - t1130;
t835 = -t1105 * t892 + t1109 * t893;
t811 = t1102 * t913 + t1103 * t835;
t1150 = -pkin(2) * t834 + qJ(3) * t811 + t1102 * t753 + t1103 * t762;
t985 = -t1026 - t1071;
t904 = -t1104 * t985 + t1193;
t812 = -pkin(4) * t1219 + pkin(8) * t904 + t1200;
t903 = t1108 * t985 + t1199;
t836 = -pkin(8) * t903 + t1194;
t842 = t1105 * t904 + t1109 * t903;
t757 = -pkin(7) * t842 - t1105 * t812 + t1109 * t836;
t1123 = pkin(4) * t903 - t802;
t764 = -pkin(3) * t842 - t1123;
t843 = -t1105 * t903 + t1109 * t904;
t815 = t1102 * t1219 + t1103 * t843;
t1149 = -pkin(2) * t842 + qJ(3) * t815 + t1102 * t757 + t1103 * t764;
t1022 = -t1158 - t1080;
t972 = t1022 * t1109 + t1173;
t860 = -pkin(3) * t972 + t883;
t885 = -pkin(7) * t972 + t1191;
t973 = -t1022 * t1105 + t1170;
t927 = t1000 * t1102 + t1103 * t973;
t1148 = -pkin(2) * t972 + qJ(3) * t927 + t1102 * t885 + t1103 * t860;
t1041 = -t1082 - t1080;
t981 = t1041 * t1105 + t1169;
t862 = -pkin(3) * t981 + t882;
t891 = -pkin(7) * t981 + t1197;
t984 = t1041 * t1109 - t1172;
t1047 = t1083 * t1159;
t998 = t1047 - t1121;
t934 = -t1102 * t998 + t1103 * t984;
t1147 = -pkin(2) * t981 + qJ(3) * t934 + t1102 * t891 + t1103 * t862;
t1144 = -t1086 * t1107 - t1087 * t1111;
t1089 = t1099 * t1097;
t1091 = t1114 * t1097;
t1055 = t1091 + t1089;
t1092 = t1114 * t1096;
t1058 = t1092 + t1181;
t1143 = pkin(2) * t1058 + qJ(3) * t1055 + t897;
t1098 = t1102 * t1099;
t1142 = t1098 * t1161;
t1141 = t1083 * t1160;
t1140 = -pkin(3) * t941 + pkin(7) * t829;
t1078 = qJDD(1) * t1111 - t1107 * t1112;
t1138 = -pkin(5) * t1078 - g(3) * t1107;
t895 = t1102 * t971 - t1103 * t970;
t826 = t1105 * t883 - t1109 * t882;
t1136 = t1103 * t1067;
t1023 = t1060 * t1178;
t1024 = -t1079 * t1106 + t1102 * t1154;
t1135 = t1023 * t1111 + t1024 * t1107;
t1134 = t1023 * t1107 - t1024 * t1111;
t1132 = t1086 * t1111 - t1087 * t1107;
t1048 = (t1102 * t1114 + t1098) * t1096;
t1131 = -pkin(2) * t1090 + qJ(3) * t1048 + t990;
t997 = t1047 + t1121;
t999 = -t1073 + (-t1162 + t1168) * t1102;
t936 = -t1105 * t997 - t1109 * t999;
t808 = -pkin(7) * t936 - t826;
t1043 = t1082 + t1158;
t938 = t1105 * t999 - t1109 * t997;
t907 = -t1043 * t1102 + t1103 * t938;
t1128 = qJ(3) * t907 + t1102 * t808 + (-pkin(2) - t1206) * t936;
t1125 = pkin(3) * t998 + pkin(7) * t984 - t1191;
t1124 = -pkin(3) * t1000 + pkin(7) * t973 + t1197;
t1122 = pkin(3) * t1043 + pkin(7) * t938 + t829;
t807 = t1102 * t941 + t1103 * t829;
t1120 = qJ(3) * t807 + (-pkin(2) + t1139) * t826;
t1119 = -pkin(3) * t947 + pkin(7) * t796 + t1105 * t743 + t1109 * t742;
t1118 = -pkin(3) * t913 + pkin(7) * t835 + t1105 * t831 + t1109 * t803;
t1117 = -pkin(3) * t1219 + pkin(7) * t843 + t1105 * t836 + t1109 * t812;
t1116 = -pkin(3) * t884 + pkin(7) * t737 - pkin(8) * t1198 + t1109 * t747;
t1077 = qJDD(1) * t1107 + t1111 * t1112;
t1072 = 0.2e1 * t1156;
t1064 = t1103 * t1081;
t1059 = -t1092 + t1181;
t1056 = t1091 - t1089;
t1053 = -pkin(5) * t1077 + g(3) * t1111;
t1044 = -t1082 + t1158;
t1042 = t1080 - t1158;
t1040 = t1082 - t1080;
t1017 = t1048 * t1110 + t1102 * t1171;
t1014 = t1048 * t1106 - t1102 * t1167;
t1008 = t1056 * t1110 + t1059 * t1106;
t1007 = t1055 * t1110 - t1058 * t1106;
t1006 = t1056 * t1106 - t1059 * t1110;
t1005 = t1055 * t1106 + t1058 * t1110;
t1004 = -t1026 + t1071;
t1003 = t1025 - t1071;
t1002 = (-t1101 - t1211) * t1163;
t994 = t1035 * t1105 - t1101 * t1163;
t993 = (-t1109 * t1127 - t1183 * t1211) * t1102;
t989 = (t1035 + t1141) * t1109;
t988 = (t1182 + (qJD(4) - t1083) * t1179) * t1177;
t987 = -pkin(1) * t1060 - t1021;
t986 = -pkin(1) * t1063 - t1020;
t983 = t1040 * t1109 + t1173;
t982 = -t1042 * t1105 + t1169;
t980 = t1040 * t1105 - t1170;
t979 = t1042 * t1109 + t1172;
t976 = t1026 - t1025;
t975 = -t1002 * t1106 - t1081 * t1175;
t974 = t1002 * t1110 - t1081 * t1176;
t959 = t1103 * t989 + t1142;
t958 = t1103 * t988 - t1142;
t957 = t1102 * t989 - t1136;
t956 = t1102 * t988 + t1136;
t951 = -t1014 * t1107 + t1017 * t1111;
t950 = t1014 * t1111 + t1017 * t1107;
t949 = pkin(1) * t954;
t948 = pkin(1) * g(3) + pkin(6) * t1146;
t945 = -qJD(5) * t1029 - t1145;
t944 = (-t1027 * t1108 - t1029 * t1104) * t1074;
t943 = (-t1027 * t1104 + t1029 * t1108) * t1074;
t939 = -t1000 * t1105 + t1109 * t998;
t937 = t1000 * t1109 + t1105 * t998;
t933 = -t1102 * t997 + t1103 * t983;
t932 = t1102 * t999 + t1103 * t982;
t931 = t1102 * t984 + t1103 * t998;
t930 = t1102 * t983 + t1103 * t997;
t929 = t1102 * t982 - t1103 * t999;
t926 = -t1000 * t1103 + t1102 * t973;
t925 = t1003 * t1108 + t1199;
t924 = -t1004 * t1104 + t1225;
t923 = t1003 * t1104 - t1193;
t922 = t1004 * t1108 + t1226;
t920 = pkin(1) * t1016 + t1164;
t919 = pkin(1) * t1014 + t1131;
t912 = t1106 * t994 + t1110 * t959;
t911 = t1106 * t993 + t1110 * t958;
t910 = t1106 * t959 - t1110 * t994;
t909 = t1106 * t958 - t1110 * t993;
t908 = t1044 * t1102 + t1103 * t939;
t906 = -t1044 * t1103 + t1102 * t939;
t905 = t1043 * t1103 + t1102 * t938;
t901 = t1029 * t1185 + t1108 * t946;
t900 = -t1029 * t1184 + t1104 * t946;
t899 = t1027 * t1184 - t1104 * t945;
t898 = t1027 * t1185 + t1108 * t945;
t889 = -pkin(6) * t1014 + t1103 * t1190 - t1106 * t971;
t888 = -pkin(6) * t1016 - t1106 * t970 + t1175 * t995;
t887 = pkin(6) * t1017 + t1103 * t1196 + t1110 * t971;
t886 = -pkin(6) * t1018 + t1110 * t970 + t1176 * t995;
t879 = t1106 * t981 + t1110 * t934;
t878 = t1106 * t980 + t1110 * t933;
t877 = t1106 * t979 + t1110 * t932;
t876 = t1106 * t934 - t1110 * t981;
t875 = t1106 * t933 - t1110 * t980;
t874 = t1106 * t932 - t1110 * t979;
t873 = -t1105 * t943 + t1109 * t944;
t872 = t1105 * t944 + t1109 * t943;
t871 = -pkin(6) * t1005 - t1110 * t895;
t870 = pkin(6) * t1007 - t1106 * t895;
t869 = t1106 * t972 + t1110 * t927;
t868 = t1106 * t927 - t1110 * t972;
t867 = t1110 * t897 + t1196;
t866 = t1106 * t897 - t1190;
t865 = -t1070 * t1102 + t1103 * t873;
t864 = t1070 * t1103 + t1102 * t873;
t863 = pkin(1) * t1005 + t1143;
t859 = t1106 * t937 + t1110 * t908;
t858 = t1106 * t936 + t1110 * t907;
t857 = t1106 * t908 - t1110 * t937;
t856 = t1106 * t907 - t1110 * t936;
t851 = -t1105 * t923 + t1109 * t925;
t850 = -t1105 * t922 + t1109 * t924;
t849 = t1105 * t925 + t1109 * t923;
t848 = t1105 * t924 + t1109 * t922;
t846 = -t1104 * t1219 - t1108 * t913;
t844 = -t1104 * t913 + t1108 * t1219;
t840 = -t1105 * t900 + t1109 * t901;
t839 = -t1105 * t898 + t1109 * t899;
t838 = t1105 * t901 + t1109 * t900;
t837 = t1105 * t899 + t1109 * t898;
t832 = -pkin(2) * t931 - t1125;
t830 = -pkin(2) * t926 - t1124;
t828 = t1103 * t840 - t1157;
t827 = t1103 * t839 + t1157;
t825 = t1102 * t840 + t1155;
t824 = t1102 * t839 - t1155;
t822 = -t1102 * t914 + t1103 * t851;
t821 = t1102 * t917 + t1103 * t850;
t820 = t1102 * t851 + t1103 * t914;
t819 = t1102 * t850 - t1103 * t917;
t818 = pkin(1) * t866 + t1201;
t817 = t1106 * t872 + t1110 * t865;
t816 = t1106 * t865 - t1110 * t872;
t814 = t1102 * t843 - t1103 * t1219;
t810 = t1102 * t835 - t1103 * t913;
t806 = t1102 * t829 - t1103 * t941;
t800 = -pkin(6) * t866 + (pkin(2) * t1106 - qJ(3) * t1110) * t895;
t798 = -qJ(3) * t931 - t1102 * t862 + t1103 * t891;
t797 = -qJ(3) * t926 - t1102 * t860 + t1103 * t885;
t795 = -t1105 * t844 + t1109 * t846;
t793 = t1105 * t846 + t1109 * t844;
t791 = -pkin(2) * t905 - t1122;
t790 = t1102 * t976 + t1103 * t795;
t789 = t1102 * t795 - t1103 * t976;
t788 = t1106 * t838 + t1110 * t828;
t787 = t1106 * t837 + t1110 * t827;
t786 = t1106 * t828 - t1110 * t838;
t785 = t1106 * t827 - t1110 * t837;
t783 = t1102 * t796 - t1103 * t947;
t781 = pkin(6) * t867 + (-pkin(2) * t1110 - qJ(3) * t1106 - pkin(1)) * t895;
t780 = t1106 * t849 + t1110 * t822;
t779 = t1106 * t848 + t1110 * t821;
t778 = t1106 * t822 - t1110 * t849;
t777 = t1106 * t821 - t1110 * t848;
t776 = -qJ(3) * t905 + t1103 * t808 + t1207 * t936;
t775 = t1106 * t842 + t1110 * t815;
t774 = t1106 * t815 - t1110 * t842;
t773 = pkin(1) * t876 + t1147;
t772 = t1106 * t834 + t1110 * t811;
t771 = t1106 * t811 - t1110 * t834;
t770 = pkin(1) * t868 + t1148;
t769 = t1106 * t826 + t1110 * t807;
t768 = t1106 * t807 - t1110 * t826;
t765 = -pkin(2) * t806 - t1140;
t758 = -pkin(6) * t876 - t1106 * t832 + t1110 * t798;
t755 = pkin(1) * t856 + t1128;
t754 = -pkin(6) * t868 - t1106 * t830 + t1110 * t797;
t751 = -pkin(1) * t931 + pkin(6) * t879 + t1106 * t798 + t1110 * t832;
t750 = -qJ(3) * t806 + (-pkin(7) * t1103 + t1207) * t826;
t749 = t1106 * t793 + t1110 * t790;
t748 = t1106 * t790 - t1110 * t793;
t746 = t1106 * t794 + t1110 * t784;
t745 = t1106 * t784 - t1110 * t794;
t744 = -pkin(1) * t926 + pkin(6) * t869 + t1106 * t797 + t1110 * t830;
t741 = -pkin(6) * t856 - t1106 * t791 + t1110 * t776;
t740 = -pkin(2) * t814 - t1117;
t739 = -pkin(2) * t810 - t1118;
t738 = -pkin(1) * t905 + pkin(6) * t858 + t1106 * t776 + t1110 * t791;
t733 = t1102 * t737 - t1103 * t884;
t731 = pkin(1) * t768 + t1120;
t730 = -qJ(3) * t814 - t1102 * t764 + t1103 * t757;
t729 = -qJ(3) * t810 - t1102 * t762 + t1103 * t753;
t728 = -pkin(6) * t768 - t1106 * t765 + t1110 * t750;
t723 = -pkin(1) * t806 + pkin(6) * t769 + t1106 * t750 + t1110 * t765;
t722 = pkin(1) * t774 + t1149;
t721 = pkin(1) * t771 + t1150;
t720 = -pkin(2) * t783 - t1119;
t717 = t1106 * t736 + t1110 * t734;
t716 = t1106 * t734 - t1110 * t736;
t715 = -pkin(6) * t774 - t1106 * t740 + t1110 * t730;
t714 = -qJ(3) * t783 - t1102 * t767 + t1103 * t725;
t713 = -pkin(6) * t771 - t1106 * t739 + t1110 * t729;
t712 = -pkin(1) * t814 + pkin(6) * t775 + t1106 * t730 + t1110 * t740;
t711 = -pkin(1) * t810 + pkin(6) * t772 + t1106 * t729 + t1110 * t739;
t710 = pkin(1) * t745 + t1151;
t709 = -pkin(2) * t733 - t1116;
t708 = -qJ(3) * t733 - t1102 * t727 + t1103 * t719;
t707 = -pkin(6) * t745 - t1106 * t720 + t1110 * t714;
t706 = -pkin(1) * t783 + pkin(6) * t746 + t1106 * t714 + t1110 * t720;
t705 = pkin(1) * t716 + t1152;
t704 = -pkin(6) * t716 - t1106 * t709 + t1110 * t708;
t703 = -pkin(1) * t733 + pkin(6) * t717 + t1106 * t708 + t1110 * t709;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1078, 0, -t1077, 0, t1138, -t1053, -t1132, -pkin(5) * t1132, 0, 0, -t1214, 0, -t1133, 0, t1227, t1228, t1223, pkin(5) * t1223 + pkin(6) * t1189 - t1107 * t948, -t1134, -t1006 * t1107 + t1008 * t1111, t951, t1134, t1215, 0, -pkin(5) * t1216 - t1107 * t886 + t1111 * t888, -pkin(5) * t950 - t1107 * t887 + t1111 * t889, t1111 * t871 - t1107 * t870 - pkin(5) * (t1005 * t1111 + t1007 * t1107), t1111 * t800 - t1107 * t781 - pkin(5) * (t1107 * t867 + t1111 * t866), -t1107 * t910 + t1111 * t912, -t1107 * t857 + t1111 * t859, -t1107 * t874 + t1111 * t877, -t1107 * t909 + t1111 * t911, -t1107 * t875 + t1111 * t878, -t1107 * t974 + t1111 * t975, t1111 * t758 - t1107 * t751 - pkin(5) * (t1107 * t879 + t1111 * t876), t1111 * t754 - t1107 * t744 - pkin(5) * (t1107 * t869 + t1111 * t868), t1111 * t741 - t1107 * t738 - pkin(5) * (t1107 * t858 + t1111 * t856), t1111 * t728 - t1107 * t723 - pkin(5) * (t1107 * t769 + t1111 * t768), -t1107 * t786 + t1111 * t788, -t1107 * t748 + t1111 * t749, -t1107 * t777 + t1111 * t779, -t1107 * t785 + t1111 * t787, -t1107 * t778 + t1111 * t780, -t1107 * t816 + t1111 * t817, t1111 * t713 - t1107 * t711 - pkin(5) * (t1107 * t772 + t1111 * t771), t1111 * t715 - t1107 * t712 - pkin(5) * (t1107 * t775 + t1111 * t774), t1111 * t707 - t1107 * t706 - pkin(5) * (t1107 * t746 + t1111 * t745), t1111 * t704 - t1107 * t703 - pkin(5) * (t1107 * t717 + t1111 * t716); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1077, 0, t1078, 0, t1053, t1138, t1144, pkin(5) * t1144, 0, 0, t1133, 0, -t1214, 0, -t1228, t1227, t1222, pkin(5) * t1222 + pkin(6) * t1195 + t1111 * t948, t1135, t1006 * t1111 + t1008 * t1107, t950, -t1135, -t1216, 0, -pkin(5) * t1215 + t1107 * t888 + t1111 * t886, pkin(5) * t951 + t1107 * t889 + t1111 * t887, t1107 * t871 + t1111 * t870 + pkin(5) * (-t1005 * t1107 + t1007 * t1111), t1107 * t800 + t1111 * t781 + pkin(5) * (-t1107 * t866 + t1111 * t867), t1107 * t912 + t1111 * t910, t1107 * t859 + t1111 * t857, t1107 * t877 + t1111 * t874, t1107 * t911 + t1111 * t909, t1107 * t878 + t1111 * t875, t1107 * t975 + t1111 * t974, t1107 * t758 + t1111 * t751 + pkin(5) * (-t1107 * t876 + t1111 * t879), t1107 * t754 + t1111 * t744 + pkin(5) * (-t1107 * t868 + t1111 * t869), t1107 * t741 + t1111 * t738 + pkin(5) * (-t1107 * t856 + t1111 * t858), t1107 * t728 + t1111 * t723 + pkin(5) * (-t1107 * t768 + t1111 * t769), t1107 * t788 + t1111 * t786, t1107 * t749 + t1111 * t748, t1107 * t779 + t1111 * t777, t1107 * t787 + t1111 * t785, t1107 * t780 + t1111 * t778, t1107 * t817 + t1111 * t816, t1107 * t713 + t1111 * t711 + pkin(5) * (-t1107 * t771 + t1111 * t772), t1107 * t715 + t1111 * t712 + pkin(5) * (-t1107 * t774 + t1111 * t775), t1107 * t707 + t1111 * t706 + pkin(5) * (-t1107 * t745 + t1111 * t746), t1107 * t704 + t1111 * t703 + pkin(5) * (-t1107 * t716 + t1111 * t717); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1086, t1087, 0, 0, 0, 0, 0, 0, 0, t1097, t986, t987, 0, -t949, t1089, t1072, 0, t1091, 0, 0, t920, t919, t863, t818, t957, t906, t929, t956, t930, t1064, t773, t770, t755, t731, t825, t789, t819, t824, t820, t864, t721, t722, t710, t705; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1112, 0, 0, -g(3), -t1086, 0, 0, 0, -t1063, 0, -t1060, 0, t1217, t1039, t954, pkin(6) * t954, t1024, t1008, t1017, -t1024, t1018, 0, t888, t889, t871, t800, t912, t859, t877, t911, t878, t975, t758, t754, t741, t728, t788, t749, t779, t787, t780, t817, t713, t715, t707, t704; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, 0, qJDD(1), 0, g(3), 0, -t1087, 0, 0, 0, t1060, 0, -t1063, 0, -t1039, t1217, t1146, t948, t1023, t1006, t1014, -t1023, -t1016, 0, t886, t887, t870, t781, t910, t857, t874, t909, t875, t974, t751, t744, t738, t723, t786, t748, t777, t785, t778, t816, t711, t712, t706, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1086, t1087, 0, 0, 0, 0, 0, 0, 0, t1097, t986, t987, 0, -t949, t1089, t1072, 0, t1091, 0, 0, t920, t919, t863, t818, t957, t906, t929, t956, t930, t1064, t773, t770, t755, t731, t825, t789, t819, t824, t820, t864, t721, t722, t710, t705; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1097, 0, -t1096, 0, 0, -g(3), t1020, 0, t1156, t1056, t1048, -t1156, t1049, 0, t990, t991, -t895, -qJ(3) * t895, t959, t908, t932, t958, t933, -t1102 * t1081, t798, t797, t776, t750, t828, t790, t821, t827, t822, t865, t729, t730, t714, t708; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, 0, t1097, 0, g(3), 0, t1021, 0, t1079, -t1059, -t1090, -t1079, -t1174, 0, t970, t971, 0, -pkin(2) * t895, -t994, -t937, -t979, -t993, -t980, t1002, t832, t830, t791, t765, -t838, -t793, -t848, -t837, -t849, -t872, t739, t740, t720, t709; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1097, -t1020, -t1021, 0, 0, t1089, t1072, 0, t1091, 0, 0, t1164, t1131, t1143, t1201, t957, t906, t929, t956, t930, t1064, t1147, t1148, t1128, t1120, t825, t789, t819, t824, t820, t864, t1150, t1149, t1151, t1152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1090, t1174, t1079, 0, t1092, 0, 0, t995, t970, 0, t989, t939, t982, t988, t983, 0, t891, t885, t808, -pkin(7) * t826, t840, t795, t850, t839, t851, t873, t753, t757, t725, t719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1090, -t1181, t1174, -t1079, 0, -t995, 0, t971, 0, -t1067, -t1044, -t999, t1067, t997, t1081, t862, t860, -pkin(3) * t936, -pkin(3) * t826, t1187, -t976, -t917, -t1187, t914, t1070, t762, t764, t767, t727; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1079, t1059, t1090, t1079, t1174, 0, -t970, -t971, 0, 0, t994, t937, t979, t993, t980, -t1002, t1125, t1124, t1122, t1140, t838, t793, t848, t837, t849, t872, t1118, t1117, t1119, t1116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1035, t998, t1033, -t1141, t1040, t1141, 0, t941, t882, 0, t901, t846, t924, t899, t925, t944, t831, t836, t743, -pkin(8) * t759; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1047, t1000, t1042, -t1121, -t1032, t1047, -t941, 0, t883, 0, t900, t844, t922, t898, t923, t943, t803, t812, t742, t747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1067, t1044, t999, -t1067, -t997, -t1081, -t882, -t883, 0, 0, -t1187, t976, t917, t1187, -t914, -t1070, t1130, t1123, t1208, t1209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t946, -t913, t1218, t1188, t1003, -t1188, 0, t884, t801, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1186, t1219, t1004, t945, -t965, t1186, -t884, 0, t802, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1187, t976, t917, t1187, -t914, -t1070, -t801, -t802, 0, 0;];
m_new_reg = t1;
