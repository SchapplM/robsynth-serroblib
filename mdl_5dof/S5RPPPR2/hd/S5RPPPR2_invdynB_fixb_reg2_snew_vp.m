% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:00
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 08:59:55
% EndTime: 2022-01-23 09:00:09
% DurationCPUTime: 14.71s
% Computational Cost: add. (36714->632), mult. (105567->979), div. (0->0), fcn. (74317->10), ass. (0->451)
t648 = sin(pkin(9));
t649 = sin(pkin(8));
t650 = sin(pkin(7));
t709 = qJDD(1) * t650;
t689 = t649 * t709;
t651 = cos(pkin(9));
t652 = cos(pkin(8));
t653 = cos(pkin(7));
t594 = (t648 * t650 * t652 + t651 * t653) * qJD(1);
t712 = t650 * qJD(1);
t596 = -t648 * t653 * qJD(1) + t651 * t652 * t712;
t733 = t596 * t594;
t749 = t689 - t733;
t751 = t648 * t749;
t750 = t651 * t749;
t654 = sin(qJ(5));
t656 = cos(qJ(5));
t692 = t649 * t712;
t555 = t654 * t596 - t656 * t692;
t557 = t656 * t596 + t654 * t692;
t505 = t557 * t555;
t708 = qJDD(1) * t652;
t688 = t650 * t708;
t707 = t653 * qJDD(1);
t713 = t648 * t688 + t651 * t707;
t685 = qJDD(5) + t713;
t745 = -t505 + t685;
t748 = t654 * t745;
t747 = t656 * t745;
t655 = sin(qJ(1));
t657 = cos(qJ(1));
t628 = t657 * g(1) + t655 * g(2);
t658 = qJD(1) ^ 2;
t664 = -t658 * pkin(1) + qJDD(1) * qJ(2) - t628;
t744 = 2 * qJD(2);
t746 = qJD(1) * t744 + t664;
t720 = t653 * t658;
t631 = t648 * t707;
t589 = t651 * t688 - t631;
t500 = -t555 * qJD(5) + t656 * t589 + t654 * t689;
t585 = qJD(5) + t594;
t517 = t585 * t555;
t455 = -t517 + t500;
t680 = t654 * t589 - t656 * t689;
t452 = (qJD(5) - t585) * t557 + t680;
t552 = t555 ^ 2;
t553 = t557 ^ 2;
t583 = t585 ^ 2;
t586 = t594 ^ 2;
t587 = t596 ^ 2;
t743 = 2 * qJD(4);
t742 = pkin(2) * t650;
t741 = pkin(2) * t653;
t740 = pkin(3) * t649;
t739 = pkin(3) * t652;
t738 = pkin(4) * t648;
t737 = t653 * g(3);
t736 = qJDD(1) * pkin(1);
t735 = t585 * t654;
t734 = t585 * t656;
t645 = t650 ^ 2;
t732 = t645 * t658;
t647 = t653 ^ 2;
t640 = t647 * t658;
t561 = -t650 * g(3) + t746 * t653;
t673 = -qJ(3) * t650 - t741;
t527 = t673 * t720 + t561;
t627 = t655 * g(1) - t657 * g(2);
t666 = -t658 * qJ(2) + qJDD(2) - t627;
t669 = -pkin(1) + t673;
t662 = t669 * qJDD(1) + t666;
t681 = t649 * t527 - t652 * t662;
t665 = pkin(3) * t707 - qJ(4) * t640 + qJDD(4) + t681;
t671 = -qJ(4) * t652 + t740;
t598 = t671 * t712;
t679 = ((2 * qJD(3)) + t598) * t652;
t442 = t679 * t712 + t665;
t731 = t648 * t442;
t525 = t733 + t689;
t730 = t648 * t525;
t663 = (t673 * qJD(1) + t744) * qJD(1);
t683 = qJDD(3) + t737;
t523 = t683 + (t663 + t664) * t650;
t729 = t649 * t523;
t700 = t649 * t652 * t658;
t616 = t645 * t700;
t600 = -t616 + t707;
t728 = t649 * t600;
t601 = -t616 - t707;
t727 = t649 * t601;
t726 = t650 * t653;
t725 = t651 * t442;
t724 = t651 * t525;
t723 = t652 * t523;
t722 = t652 * t600;
t721 = t652 * t601;
t538 = t594 * pkin(4) - t596 * pkin(6);
t643 = t649 ^ 2;
t634 = t643 * t732;
t691 = qJD(3) * t712;
t478 = t652 * t527 + (t662 - 0.2e1 * t691) * t649;
t445 = -pkin(3) * t640 - qJ(4) * t707 - t598 * t692 + t478;
t672 = -qJ(4) * t649 - t739;
t661 = ((t672 * t653 - pkin(1)) * t658 + (qJ(2) + t671) * qJDD(1) + t663 - t628) * t650 + t683;
t682 = t648 * t445 - t651 * t661;
t371 = -pkin(4) * t689 - pkin(6) * t634 + (t743 + t538) * t596 + t682;
t719 = t654 * t371;
t485 = t505 + t685;
t718 = t654 * t485;
t599 = -t666 + t736;
t717 = t655 * t599;
t716 = t656 * t371;
t715 = t656 * t485;
t714 = t657 * t599;
t397 = t651 * t445 - t594 * t743 + t648 * t661;
t372 = -pkin(4) * t634 + pkin(6) * t689 - t594 * t538 + t397;
t402 = t713 * pkin(4) - t589 * pkin(6) + (t679 + (pkin(4) * t596 + pkin(6) * t594) * t649) * t712 + t665;
t331 = t656 * t372 + t654 * t402;
t710 = qJDD(1) * t649;
t706 = t655 * qJDD(1);
t705 = t657 * qJDD(1);
t646 = t652 ^ 2;
t703 = t646 * t732;
t702 = t648 * t505;
t701 = t649 * t733;
t699 = t649 * t720;
t698 = t650 * t720;
t697 = t651 * t505;
t696 = t652 * t733;
t695 = t652 * t720;
t694 = pkin(4) * t651 + pkin(3);
t693 = qJD(1) * t594 * t649;
t690 = t651 * t708;
t687 = t653 * t706;
t686 = t653 * t705;
t684 = t599 + t736;
t330 = t654 * t372 - t656 * t402;
t560 = t746 * t650 + t737;
t504 = t650 * t560 + t653 * t561;
t572 = -t655 * t627 - t657 * t628;
t644 = t650 * t645;
t678 = t644 * t700;
t677 = t649 * t695;
t676 = t594 * t692;
t675 = t596 * t692;
t624 = -t655 * t658 + t705;
t674 = -pkin(5) * t624 - t655 * g(3);
t670 = t645 * t677;
t301 = -t656 * t330 + t654 * t331;
t302 = t654 * t330 + t656 * t331;
t396 = t596 * t743 + t682;
t337 = -t651 * t396 + t648 * t397;
t338 = t648 * t396 + t651 * t397;
t477 = 0.2e1 * t652 * t691 + t681;
t412 = -t652 * t477 + t649 * t478;
t413 = t649 * t477 + t652 * t478;
t503 = t653 * t560 - t650 * t561;
t571 = t657 * t627 - t655 * t628;
t623 = t657 * t658 + t706;
t610 = (t645 + t647) * t720;
t568 = -t655 * t610 + t686;
t667 = t657 * t610 + t687;
t531 = t675 - t713;
t639 = t647 * qJDD(1);
t638 = t645 * qJDD(1);
t632 = t643 * t709;
t619 = t640 - t732;
t618 = t640 + t732;
t615 = t649 * t688;
t613 = t639 - t638;
t612 = t639 + t638;
t609 = -t640 - t703;
t608 = t640 - t703;
t607 = (t647 * t650 + t644) * t658;
t606 = -t634 - t640;
t605 = t634 - t640;
t604 = -pkin(5) * t623 + t657 * g(3);
t603 = t634 - t703;
t602 = t634 + t703;
t593 = (t699 - t708) * t650;
t592 = (t699 + t708) * t650;
t591 = (t695 - t710) * t650;
t590 = (t695 + t710) * t650;
t582 = t624 * t726;
t581 = t623 * t726;
t578 = (-t643 - t646) * t698;
t577 = (qJDD(1) * t646 + t677) * t650;
t576 = t646 * t698 - t615;
t575 = t643 * t698 + t615;
t574 = -t650 * t677 + t632;
t569 = t657 * t607 + t650 * t706;
t567 = t655 * t607 - t650 * t705;
t566 = -t587 - t634;
t565 = -t587 + t634;
t564 = t586 - t634;
t563 = t657 * t612 - t655 * t618;
t562 = t655 * t612 + t657 * t618;
t550 = t653 * t577 + t678;
t549 = t653 * t574 - t678;
t548 = -t649 * t608 + t721;
t547 = -t649 * t609 + t722;
t546 = t652 * t606 - t727;
t545 = t652 * t605 + t728;
t544 = -t652 * t608 - t727;
t543 = t652 * t609 + t728;
t542 = t649 * t606 + t721;
t541 = -t649 * t605 + t722;
t539 = -t587 + t586;
t537 = -t652 * t590 - t649 * t593;
t536 = t652 * t591 - t649 * t592;
t535 = -t649 * t590 + t652 * t593;
t534 = -t649 * t591 - t652 * t592;
t533 = t631 + (-t690 - t693) * t650;
t532 = -t631 + (t690 - t693) * t650;
t530 = -t675 - t713;
t528 = -t634 - t586;
t521 = t651 * t589 - t648 * t675;
t520 = -t648 * t589 - t651 * t675;
t519 = t648 * t713 + t651 * t676;
t518 = -t648 * t676 + t651 * t713;
t516 = -t553 + t583;
t515 = t552 - t583;
t514 = t586 + t587;
t513 = (-t594 * t651 + t596 * t648) * t692;
t512 = (t594 * t648 + t596 * t651) * t692;
t511 = t653 * t548 - t650 * t593;
t510 = t653 * t547 + t650 * t592;
t509 = t653 * t546 - t650 * t591;
t508 = t653 * t545 - t650 * t590;
t507 = t650 * t547 - t653 * t592;
t506 = t650 * t546 + t653 * t591;
t501 = -t553 + t552;
t499 = -t557 * qJD(5) - t680;
t498 = t653 * t537 - t650 * t602;
t497 = t653 * t536 - t650 * t603;
t496 = t650 * t537 + t653 * t602;
t495 = t652 * t513 + t632;
t494 = -t649 * t513 + t615;
t493 = -t553 - t583;
t492 = t651 * t564 - t730;
t491 = -t648 * t566 - t724;
t490 = -t648 * t565 + t750;
t489 = -t648 * t564 - t724;
t488 = t651 * t566 - t730;
t487 = -t651 * t565 - t751;
t483 = -t583 - t552;
t482 = t657 * t504 - t717;
t481 = t655 * t504 + t714;
t480 = -qJ(3) * t543 + t723;
t479 = -qJ(3) * t542 + t729;
t474 = t652 * t521 + t701;
t473 = t652 * t519 - t701;
t472 = -t649 * t521 + t696;
t471 = -t649 * t519 - t696;
t470 = t651 * t531 - t648 * t533;
t469 = t651 * t530 - t648 * t532;
t468 = t648 * t531 + t651 * t533;
t467 = -t648 * t530 - t651 * t532;
t466 = t552 + t553;
t465 = t651 * t528 - t751;
t464 = t648 * t528 + t750;
t463 = t657 * t510 + t655 * t543;
t462 = t657 * t509 + t655 * t542;
t461 = t655 * t510 - t657 * t543;
t460 = t655 * t509 - t657 * t542;
t459 = (-t555 * t656 + t557 * t654) * t585;
t458 = (t555 * t654 + t557 * t656) * t585;
t456 = -t517 - t500;
t453 = (-qJD(5) - t585) * t557 - t680;
t451 = t657 * t498 + t655 * t535;
t450 = t655 * t498 - t657 * t535;
t449 = t656 * t500 - t557 * t735;
t448 = -t654 * t500 - t557 * t734;
t447 = -t654 * t499 + t555 * t734;
t446 = -t656 * t499 - t555 * t735;
t444 = -pkin(2) * t543 + t478;
t443 = -pkin(2) * t542 + t477;
t440 = t652 * t492 + t531 * t649;
t439 = t652 * t491 + t649 * t532;
t438 = t652 * t490 - t649 * t533;
t437 = -t649 * t492 + t531 * t652;
t436 = t649 * t491 - t652 * t532;
t435 = -t649 * t490 - t652 * t533;
t434 = t653 * t495 - t650 * t512;
t433 = t651 * t459 + t648 * t685;
t432 = -t648 * t459 + t651 * t685;
t431 = t652 * t469 - t649 * t539;
t430 = -t649 * t469 - t652 * t539;
t429 = t656 * t515 - t718;
t428 = -t654 * t516 + t747;
t427 = -t654 * t515 - t715;
t426 = -t656 * t516 - t748;
t425 = t652 * t465 - t649 * t530;
t424 = t649 * t465 + t652 * t530;
t423 = t653 * t474 - t650 * t520;
t422 = t653 * t473 - t650 * t518;
t421 = t652 * t470 - t649 * t514;
t420 = t649 * t470 + t652 * t514;
t419 = -t654 * t493 - t715;
t418 = t656 * t493 - t718;
t417 = -pkin(1) * t506 - pkin(2) * t591 - qJ(3) * t546 + t723;
t416 = -pkin(1) * t507 + pkin(2) * t592 - qJ(3) * t547 - t729;
t415 = t656 * t483 - t748;
t414 = t654 * t483 + t747;
t411 = t651 * t449 + t702;
t410 = t651 * t447 - t702;
t409 = -t648 * t449 + t697;
t408 = -t648 * t447 - t697;
t407 = -qJ(4) * t488 + t725;
t406 = t653 * t440 - t650 * t489;
t405 = t653 * t439 + t650 * t488;
t404 = t653 * t438 - t650 * t487;
t403 = t650 * t439 - t653 * t488;
t399 = -qJ(4) * t464 + t731;
t398 = -qJ(3) * t535 - t412;
t395 = t653 * t413 + t650 * t523;
t394 = t650 * t413 - t653 * t523;
t393 = -t452 * t656 - t654 * t456;
t392 = t656 * t453 - t654 * t455;
t391 = -t452 * t654 + t656 * t456;
t390 = -t654 * t453 - t656 * t455;
t389 = t653 * t431 - t650 * t467;
t388 = t652 * t433 - t649 * t458;
t387 = -t649 * t433 - t652 * t458;
t386 = t653 * t425 + t650 * t464;
t385 = t650 * t425 - t653 * t464;
t384 = t653 * t421 + t650 * t468;
t383 = t650 * t421 - t653 * t468;
t382 = t651 * t429 - t648 * t452;
t381 = t651 * t428 - t648 * t456;
t380 = -t648 * t429 - t651 * t452;
t379 = -t648 * t428 - t651 * t456;
t378 = -qJ(2) * t507 - t650 * t444 + t653 * t480;
t377 = -qJ(2) * t506 - t650 * t443 + t653 * t479;
t376 = t651 * t419 + t455 * t648;
t375 = t648 * t419 - t455 * t651;
t374 = t651 * t415 - t648 * t453;
t373 = t648 * t415 + t651 * t453;
t370 = t651 * t392 - t648 * t501;
t369 = -t648 * t392 - t651 * t501;
t368 = -pkin(1) * t496 - pkin(2) * t602 - qJ(3) * t537 - t413;
t366 = -pkin(3) * t488 + t397;
t365 = t652 * t411 - t649 * t448;
t364 = t652 * t410 - t649 * t446;
t363 = -t649 * t411 - t652 * t448;
t362 = -t649 * t410 - t652 * t446;
t361 = -pkin(3) * t464 + t396;
t360 = t651 * t393 - t648 * t466;
t359 = t648 * t393 + t651 * t466;
t358 = -qJ(2) * t496 + t653 * t398 + t535 * t742;
t357 = t657 * t405 + t655 * t436;
t356 = t655 * t405 - t657 * t436;
t355 = -pkin(2) * t436 + pkin(3) * t532 - qJ(4) * t491 - t731;
t354 = t653 * t388 - t650 * t432;
t353 = t657 * t386 + t655 * t424;
t352 = t655 * t386 - t657 * t424;
t351 = t652 * t382 - t649 * t427;
t350 = t652 * t381 - t649 * t426;
t349 = -t649 * t382 - t652 * t427;
t348 = -t649 * t381 - t652 * t426;
t347 = -pkin(2) * t424 - pkin(3) * t530 - qJ(4) * t465 + t725;
t346 = t657 * t384 + t655 * t420;
t345 = t655 * t384 - t657 * t420;
t344 = t657 * t395 + t655 * t412;
t343 = t655 * t395 - t657 * t412;
t342 = t652 * t376 + t649 * t418;
t341 = t649 * t376 - t652 * t418;
t340 = -pkin(1) * t394 + pkin(2) * t523 - qJ(3) * t413;
t339 = -pkin(6) * t418 + t716;
t336 = t652 * t374 + t649 * t414;
t335 = t649 * t374 - t652 * t414;
t334 = -pkin(6) * t414 + t719;
t333 = t653 * t365 - t650 * t409;
t332 = t653 * t364 - t650 * t408;
t329 = t652 * t370 - t649 * t390;
t328 = -t649 * t370 - t652 * t390;
t327 = -qJ(4) * t468 - t337;
t326 = t652 * t360 + t649 * t391;
t325 = t649 * t360 - t652 * t391;
t324 = t652 * t338 + t649 * t442;
t323 = t649 * t338 - t652 * t442;
t322 = -qJ(2) * t394 + (-qJ(3) * t653 + t742) * t412;
t321 = -qJ(3) * t436 - t649 * t366 + t652 * t407;
t320 = t653 * t351 - t650 * t380;
t319 = t653 * t350 - t650 * t379;
t318 = -pkin(4) * t418 + t331;
t317 = -pkin(4) * t414 + t330;
t316 = -qJ(3) * t424 - t649 * t361 + t652 * t399;
t315 = t653 * t342 + t650 * t375;
t314 = t650 * t342 - t653 * t375;
t313 = t653 * t336 + t650 * t373;
t312 = t650 * t336 - t653 * t373;
t311 = -pkin(2) * t420 - pkin(3) * t514 - qJ(4) * t470 - t338;
t310 = -qJ(3) * t420 + t652 * t327 + t468 * t740;
t309 = t653 * t329 - t650 * t369;
t308 = -pkin(3) * t375 + pkin(4) * t455 - pkin(6) * t419 - t719;
t307 = -pkin(3) * t373 - pkin(4) * t453 - pkin(6) * t415 + t716;
t306 = t653 * t326 + t650 * t359;
t305 = t650 * t326 - t653 * t359;
t304 = -pkin(1) * t403 + pkin(2) * t488 - qJ(3) * t439 - t652 * t366 - t649 * t407;
t303 = -pkin(1) * t385 + pkin(2) * t464 - qJ(3) * t425 - t652 * t361 - t649 * t399;
t300 = t653 * t324 + t650 * t337;
t299 = t650 * t324 - t653 * t337;
t298 = -pkin(1) * t383 - qJ(3) * t421 - t649 * t327 + (pkin(2) + t739) * t468;
t297 = t657 * t315 + t655 * t341;
t296 = t655 * t315 - t657 * t341;
t295 = -pkin(2) * t323 + pkin(3) * t442 - qJ(4) * t338;
t294 = t657 * t313 + t655 * t335;
t293 = t655 * t313 - t657 * t335;
t292 = -qJ(2) * t403 + t653 * t321 - t650 * t355;
t291 = -pkin(6) * t391 - t301;
t290 = t651 * t302 + t648 * t371;
t289 = t648 * t302 - t651 * t371;
t288 = -qJ(2) * t385 + t653 * t316 - t650 * t347;
t287 = -qJ(4) * t375 - t648 * t318 + t651 * t339;
t286 = -qJ(4) * t373 - t648 * t317 + t651 * t334;
t285 = t657 * t306 + t655 * t325;
t284 = t655 * t306 - t657 * t325;
t283 = -qJ(3) * t323 + t671 * t337;
t282 = t657 * t300 + t655 * t323;
t281 = t655 * t300 - t657 * t323;
t280 = -pkin(3) * t359 - pkin(4) * t466 - pkin(6) * t393 - t302;
t279 = -qJ(2) * t383 + t653 * t310 - t650 * t311;
t278 = -qJ(4) * t359 + t651 * t291 + t391 * t738;
t277 = -pkin(2) * t341 + pkin(3) * t418 - qJ(4) * t376 - t651 * t318 - t648 * t339;
t276 = -pkin(2) * t335 + pkin(3) * t414 - qJ(4) * t374 - t651 * t317 - t648 * t334;
t275 = t652 * t290 + t649 * t301;
t274 = t649 * t290 - t652 * t301;
t273 = -pkin(2) * t325 - qJ(4) * t360 - t648 * t291 + t694 * t391;
t272 = -pkin(3) * t289 + pkin(4) * t371 - pkin(6) * t302;
t271 = -qJ(3) * t341 + t652 * t287 - t649 * t308;
t270 = -qJ(3) * t335 + t652 * t286 - t649 * t307;
t269 = -pkin(1) * t299 - qJ(3) * t324 + (pkin(2) - t672) * t337;
t268 = -qJ(4) * t289 + (-pkin(6) * t651 + t738) * t301;
t267 = -pkin(1) * t314 + pkin(2) * t375 - qJ(3) * t342 - t649 * t287 - t652 * t308;
t266 = t653 * t275 + t650 * t289;
t265 = t650 * t275 - t653 * t289;
t264 = -qJ(2) * t299 + t653 * t283 - t650 * t295;
t263 = -pkin(1) * t312 + pkin(2) * t373 - qJ(3) * t336 - t649 * t286 - t652 * t307;
t262 = -qJ(3) * t325 + t652 * t278 - t649 * t280;
t261 = -pkin(1) * t305 + pkin(2) * t359 - qJ(3) * t326 - t649 * t278 - t652 * t280;
t260 = -qJ(2) * t314 + t653 * t271 - t650 * t277;
t259 = -qJ(2) * t312 + t653 * t270 - t650 * t276;
t258 = t657 * t266 + t655 * t274;
t257 = t655 * t266 - t657 * t274;
t256 = -pkin(2) * t274 - qJ(4) * t290 + (pkin(6) * t648 + t694) * t301;
t255 = -qJ(2) * t305 + t653 * t262 - t650 * t273;
t254 = -qJ(3) * t274 + t652 * t268 - t649 * t272;
t253 = -pkin(1) * t265 + pkin(2) * t289 - qJ(3) * t275 - t649 * t268 - t652 * t272;
t252 = -qJ(2) * t265 + t653 * t254 - t650 * t256;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t623, -t624, 0, t572, 0, 0, 0, 0, 0, 0, -t667, t569, t563, t482, 0, 0, 0, 0, 0, 0, t462, t463, t451, t344, 0, 0, 0, 0, 0, 0, t353, t357, t346, t282, 0, 0, 0, 0, 0, 0, t294, t297, t285, t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t624, -t623, 0, t571, 0, 0, 0, 0, 0, 0, t568, t567, t562, t481, 0, 0, 0, 0, 0, 0, t460, t461, t450, t343, 0, 0, 0, 0, 0, 0, t352, t356, t345, t281, 0, 0, 0, 0, 0, 0, t293, t296, t284, t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t503, 0, 0, 0, 0, 0, 0, t506, t507, t496, t394, 0, 0, 0, 0, 0, 0, t385, t403, t383, t299, 0, 0, 0, 0, 0, 0, t312, t314, t305, t265; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t624, 0, -t623, 0, t674, -t604, -t571, -pkin(5) * t571, t582, t657 * t613 - t655 * t619, t569, -t582, t667, 0, -pkin(5) * t568 - t655 * t560 - t650 * t714, -pkin(5) * t567 - t655 * t561 - t653 * t714, -pkin(5) * t562 + t657 * t503, -pkin(5) * t481 - (pkin(1) * t655 - qJ(2) * t657) * t503, t657 * t550 - t655 * t576, t657 * t497 - t655 * t534, t657 * t511 - t655 * t544, t657 * t549 - t655 * t575, t657 * t508 - t655 * t541, -t655 * t578 - t650 * t686, -pkin(5) * t460 + t657 * t377 - t655 * t417, -pkin(5) * t461 + t657 * t378 - t655 * t416, -pkin(5) * t450 + t657 * t358 - t655 * t368, -pkin(5) * t343 + t657 * t322 - t655 * t340, t657 * t423 - t655 * t472, t657 * t389 - t655 * t430, t657 * t404 - t655 * t435, t657 * t422 - t655 * t471, t657 * t406 - t655 * t437, t657 * t434 - t655 * t494, -pkin(5) * t352 + t657 * t288 - t655 * t303, -pkin(5) * t356 + t657 * t292 - t655 * t304, -pkin(5) * t345 + t657 * t279 - t655 * t298, -pkin(5) * t281 + t657 * t264 - t655 * t269, t657 * t333 - t655 * t363, t657 * t309 - t655 * t328, t657 * t319 - t655 * t348, t657 * t332 - t655 * t362, t657 * t320 - t655 * t349, t657 * t354 - t655 * t387, -pkin(5) * t293 + t657 * t259 - t655 * t263, -pkin(5) * t296 + t657 * t260 - t655 * t267, -pkin(5) * t284 + t657 * t255 - t655 * t261, -pkin(5) * t257 + t657 * t252 - t655 * t253; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t623, 0, t624, 0, t604, t674, t572, pkin(5) * t572, t581, t655 * t613 + t657 * t619, t567, -t581, -t568, 0, -pkin(5) * t667 + t657 * t560 - t650 * t717, pkin(5) * t569 + t657 * t561 - t653 * t717, pkin(5) * t563 + t655 * t503, pkin(5) * t482 - (-pkin(1) * t657 - qJ(2) * t655) * t503, t655 * t550 + t657 * t576, t655 * t497 + t657 * t534, t655 * t511 + t657 * t544, t655 * t549 + t657 * t575, t655 * t508 + t657 * t541, t657 * t578 - t650 * t687, pkin(5) * t462 + t655 * t377 + t657 * t417, pkin(5) * t463 + t655 * t378 + t657 * t416, pkin(5) * t451 + t655 * t358 + t657 * t368, pkin(5) * t344 + t655 * t322 + t657 * t340, t655 * t423 + t657 * t472, t655 * t389 + t657 * t430, t655 * t404 + t657 * t435, t655 * t422 + t657 * t471, t655 * t406 + t657 * t437, t655 * t434 + t657 * t494, pkin(5) * t353 + t655 * t288 + t657 * t303, pkin(5) * t357 + t655 * t292 + t657 * t304, pkin(5) * t346 + t655 * t279 + t657 * t298, pkin(5) * t282 + t655 * t264 + t657 * t269, t655 * t333 + t657 * t363, t655 * t309 + t657 * t328, t655 * t319 + t657 * t348, t655 * t332 + t657 * t362, t655 * t320 + t657 * t349, t655 * t354 + t657 * t387, pkin(5) * t294 + t655 * t259 + t657 * t263, pkin(5) * t297 + t655 * t260 + t657 * t267, pkin(5) * t285 + t655 * t255 + t657 * t261, pkin(5) * t258 + t655 * t252 + t657 * t253; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t627, t628, 0, 0, t638, 0.2e1 * t650 * t707, 0, t639, 0, 0, -qJ(2) * t610 + t653 * t684, qJ(2) * t607 - t650 * t684, pkin(1) * t618 + qJ(2) * t612 + t504, pkin(1) * t599 + qJ(2) * t504, t650 * t577 - t670, t650 * t536 + t653 * t603, t650 * t548 + t653 * t593, t650 * t574 + t670, t650 * t545 + t653 * t590, t639, -pkin(1) * t542 + qJ(2) * t509 + t653 * t443 + t650 * t479, -pkin(1) * t543 + qJ(2) * t510 + t653 * t444 + t650 * t480, qJ(2) * t498 + t650 * t398 + (-pkin(1) - t741) * t535, qJ(2) * t395 + t412 * t669, t650 * t474 + t653 * t520, t650 * t431 + t653 * t467, t650 * t438 + t653 * t487, t650 * t473 + t653 * t518, t650 * t440 + t653 * t489, t650 * t495 + t653 * t512, -pkin(1) * t424 + qJ(2) * t386 + t650 * t316 + t653 * t347, -pkin(1) * t436 + qJ(2) * t405 + t650 * t321 + t653 * t355, -pkin(1) * t420 + qJ(2) * t384 + t650 * t310 + t653 * t311, -pkin(1) * t323 + qJ(2) * t300 + t650 * t283 + t653 * t295, t650 * t365 + t653 * t409, t650 * t329 + t653 * t369, t650 * t350 + t653 * t379, t650 * t364 + t653 * t408, t650 * t351 + t653 * t380, t650 * t388 + t653 * t432, -pkin(1) * t335 + qJ(2) * t313 + t650 * t270 + t653 * t276, -pkin(1) * t341 + qJ(2) * t315 + t650 * t271 + t653 * t277, -pkin(1) * t325 + qJ(2) * t306 + t650 * t262 + t653 * t273, -pkin(1) * t274 + qJ(2) * t266 + t650 * t254 + t653 * t256;];
tauB_reg = t1;
