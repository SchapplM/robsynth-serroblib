% Calculate inertial parameters regressor of joint inertia matrix for
% S5RRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:20
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RRRRP11_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP11_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP11_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:18:32
% EndTime: 2019-12-31 22:18:37
% DurationCPUTime: 1.63s
% Computational Cost: add. (1287->182), mult. (3115->337), div. (0->0), fcn. (3364->8), ass. (0->119)
t67 = sin(qJ(4));
t61 = t67 ^ 2;
t70 = cos(qJ(4));
t63 = t70 ^ 2;
t134 = t61 + t63;
t65 = sin(pkin(5));
t72 = cos(qJ(2));
t104 = t65 * t72;
t69 = sin(qJ(2));
t105 = t65 * t69;
t66 = cos(pkin(5));
t68 = sin(qJ(3));
t71 = cos(qJ(3));
t36 = t71 * t105 + t66 * t68;
t20 = t70 * t104 + t36 * t67;
t111 = t20 * t70;
t22 = -t67 * t104 + t36 * t70;
t18 = t22 * t67;
t133 = (t18 + t111) * t68;
t132 = t20 ^ 2;
t34 = t68 * t105 - t66 * t71;
t33 = t34 ^ 2;
t131 = -0.2e1 * t36;
t82 = -t70 * pkin(4) - t67 * qJ(5);
t43 = -pkin(3) + t82;
t130 = -0.2e1 * t43;
t129 = 0.2e1 * t65;
t128 = -0.2e1 * t68;
t127 = 0.2e1 * t68;
t125 = pkin(1) * t72;
t48 = pkin(7) * t105;
t28 = t48 + (-pkin(2) - t125) * t66;
t10 = t34 * pkin(3) - t36 * pkin(9) + t28;
t126 = pkin(1) * t69;
t89 = pkin(7) * t104;
t29 = t89 + (pkin(8) + t126) * t66;
t30 = (-pkin(2) * t72 - pkin(8) * t69 - pkin(1)) * t65;
t14 = t71 * t29 + t68 * t30;
t12 = -pkin(9) * t104 + t14;
t4 = t67 * t10 + t70 * t12;
t124 = pkin(3) * t67;
t123 = pkin(3) * t70;
t122 = pkin(8) * t67;
t121 = pkin(9) * t22;
t94 = t34 * qJ(5);
t1 = t94 + t4;
t120 = t1 * t70;
t119 = t34 * pkin(4);
t118 = t4 * t70;
t62 = t68 ^ 2;
t117 = t62 * pkin(8);
t116 = t67 * pkin(9);
t115 = t68 * pkin(8);
t114 = t70 * pkin(9);
t13 = -t68 * t29 + t71 * t30;
t11 = pkin(3) * t104 - t13;
t113 = t11 * t67;
t112 = t11 * t70;
t110 = t22 * t20;
t109 = t34 * t20;
t108 = t34 * t71;
t107 = t36 * t68;
t60 = t65 ^ 2;
t106 = t60 * t72;
t103 = t66 * t69;
t31 = t67 * t34;
t102 = t67 * t68;
t101 = t67 * t70;
t100 = t67 * t71;
t99 = t68 * t34;
t98 = t68 * t71;
t97 = t70 * t34;
t56 = t70 * t68;
t96 = t70 * t71;
t44 = -t71 * pkin(3) - t68 * pkin(9) - pkin(2);
t27 = pkin(8) * t96 + t67 * t44;
t95 = t134 * pkin(9) ^ 2;
t93 = t71 * qJ(5);
t92 = 0.2e1 * t104;
t91 = pkin(9) * t31;
t90 = pkin(9) * t97;
t88 = t20 * t102;
t87 = t68 * t104;
t86 = t71 * t104;
t85 = t67 * t98;
t84 = t62 * t101;
t83 = -t70 * t10 + t67 * t12;
t81 = -pkin(4) * t67 + t70 * qJ(5);
t80 = -t13 * t68 + t14 * t71;
t78 = t67 * t20 - t22 * t70;
t23 = -t93 + t27;
t40 = t70 * t44;
t24 = -t40 + (pkin(4) + t122) * t71;
t77 = t23 * t70 + t24 * t67;
t26 = -pkin(8) * t100 + t40;
t76 = -t26 * t67 + t27 * t70;
t75 = -t71 * t20 + t67 * t99;
t74 = pkin(8) ^ 2;
t64 = t71 ^ 2;
t58 = t62 * t74;
t55 = t63 * t62;
t54 = t61 * t62;
t52 = t60 * t72 ^ 2;
t50 = pkin(9) * t100;
t47 = t67 * t56;
t45 = t96 * t128;
t42 = 0.2e1 * t134 * pkin(9);
t41 = (t61 - t63) * t68;
t38 = pkin(1) * t103 + t89;
t37 = t66 * t125 - t48;
t32 = (pkin(8) - t81) * t68;
t19 = t22 ^ 2;
t17 = pkin(9) * t111;
t16 = t22 * t56;
t15 = 0.2e1 * t22 * t34;
t9 = -t22 * t71 + t34 * t56;
t5 = t20 * pkin(4) - t22 * qJ(5) + t11;
t2 = t83 - t119;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t60 * t69 ^ 2, 0.2e1 * t69 * t106, t103 * t129, t52, t66 * t92, t66 ^ 2, 0.2e1 * pkin(1) * t106 + 0.2e1 * t37 * t66, -0.2e1 * t60 * t126 - 0.2e1 * t38 * t66, (-t37 * t69 + t38 * t72) * t129, t60 * pkin(1) ^ 2 + t37 ^ 2 + t38 ^ 2, t36 ^ 2, t34 * t131, t104 * t131, t33, t34 * t92, t52, -0.2e1 * t13 * t104 + 0.2e1 * t28 * t34, 0.2e1 * t14 * t104 + 0.2e1 * t28 * t36, -0.2e1 * t13 * t36 - 0.2e1 * t14 * t34, t13 ^ 2 + t14 ^ 2 + t28 ^ 2, t19, -0.2e1 * t110, t15, t132, -0.2e1 * t109, t33, 0.2e1 * t11 * t20 - 0.2e1 * t34 * t83, 0.2e1 * t11 * t22 - 0.2e1 * t4 * t34, -0.2e1 * t4 * t20 + 0.2e1 * t22 * t83, t11 ^ 2 + t4 ^ 2 + t83 ^ 2, t19, t15, 0.2e1 * t110, t33, 0.2e1 * t109, t132, -0.2e1 * t2 * t34 + 0.2e1 * t5 * t20, -0.2e1 * t1 * t20 + 0.2e1 * t2 * t22, 0.2e1 * t1 * t34 - 0.2e1 * t5 * t22, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, 0, t104, t66, t37, -t38, 0, 0, t107, t36 * t71 - t99, -t87, -t108, -t86, 0, -pkin(2) * t34 + pkin(8) * t87 - t28 * t71, -pkin(2) * t36 + pkin(8) * t86 + t28 * t68, (t107 - t108) * pkin(8) + t80, -t28 * pkin(2) + pkin(8) * t80, t16, -t133, t9, t88, -t75, -t108, t26 * t34 + t83 * t71 + (pkin(8) * t20 + t113) * t68, -t27 * t34 + t4 * t71 + (pkin(8) * t22 + t112) * t68, -t27 * t20 - t26 * t22 + (-t4 * t67 + t70 * t83) * t68, t11 * t115 - t26 * t83 + t4 * t27, t16, t9, t133, -t108, t75, t88, t102 * t5 + t2 * t71 + t32 * t20 - t24 * t34, -t23 * t20 + t24 * t22 + (-t1 * t67 + t2 * t70) * t68, -t1 * t71 - t32 * t22 + t23 * t34 - t5 * t56, t1 * t23 + t2 * t24 + t5 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t62, 0.2e1 * t98, 0, t64, 0, 0, 0.2e1 * pkin(2) * t71, pkin(2) * t128, 0.2e1 * (t62 + t64) * pkin(8), pkin(2) ^ 2 + t64 * t74 + t58, t55, -0.2e1 * t84, t45, t54, 0.2e1 * t85, t64, 0.2e1 * t67 * t117 - 0.2e1 * t26 * t71, 0.2e1 * t70 * t117 + 0.2e1 * t27 * t71, (-t26 * t70 - t27 * t67) * t127, t26 ^ 2 + t27 ^ 2 + t58, t55, t45, 0.2e1 * t84, t64, -0.2e1 * t85, t54, 0.2e1 * t102 * t32 + 0.2e1 * t24 * t71, (-t23 * t67 + t24 * t70) * t127, -0.2e1 * t23 * t71 - 0.2e1 * t32 * t56, t23 ^ 2 + t24 ^ 2 + t32 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, -t104, t13, -t14, 0, 0, t18, -t78, t31, -t111, t97, 0, -pkin(3) * t20 - t112 - t91, -pkin(3) * t22 + t113 - t90, t118 - t17 + (t83 + t121) * t67, -t11 * pkin(3) + (t67 * t83 + t118) * pkin(9), t18, t31, t78, 0, -t97, -t111, t43 * t20 - t5 * t70 - t91, t120 - t17 + (t2 + t121) * t67, -t43 * t22 - t5 * t67 + t90, t5 * t43 + (t2 * t67 + t120) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, 0, t71, 0, -t115, -t71 * pkin(8), 0, 0, t47, -t41, -t100, -t47, -t96, 0, t50 + (-pkin(8) * t70 - t124) * t68, pkin(9) * t96 + (t122 - t123) * t68, t76, -pkin(3) * t115 + pkin(9) * t76, t47, -t100, t41, 0, t96, -t47, t102 * t43 - t32 * t70 + t50, t77, -t32 * t67 + (-pkin(9) * t71 - t43 * t68) * t70, pkin(9) * t77 + t32 * t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, 0.2e1 * t101, 0, t63, 0, 0, 0.2e1 * t123, -0.2e1 * t124, t42, pkin(3) ^ 2 + t95, t61, 0, -0.2e1 * t101, 0, 0, t63, t70 * t130, t42, t67 * t130, t43 ^ 2 + t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, -t20, t34, -t83, -t4, 0, 0, 0, t22, 0, t34, t20, 0, -t83 + 0.2e1 * t119, -t22 * pkin(4) - t20 * qJ(5), 0.2e1 * t94 + t4, -t2 * pkin(4) + t1 * qJ(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t56, 0, -t102, -t71, t26, -t27, 0, 0, 0, t56, 0, -t71, t102, 0, t40 + (-0.2e1 * pkin(4) - t122) * t71, t82 * t68, -0.2e1 * t93 + t27, -t24 * pkin(4) + t23 * qJ(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t70, 0, -t116, -t114, 0, 0, 0, t67, 0, 0, -t70, 0, -t116, t81, t114, t81 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0.2e1 * pkin(4), 0, 0.2e1 * qJ(5), pkin(4) ^ 2 + qJ(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t34, t22, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t56, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, 0, t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg = t3;
