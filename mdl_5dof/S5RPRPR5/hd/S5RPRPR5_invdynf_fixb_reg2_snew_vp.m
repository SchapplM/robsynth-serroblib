% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:26
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:26:42
% EndTime: 2022-01-23 09:26:45
% DurationCPUTime: 3.64s
% Computational Cost: add. (18796->249), mult. (48930->354), div. (0->0), fcn. (34499->10), ass. (0->197)
t1496 = cos(pkin(8));
t1488 = t1496 * qJDD(1);
t1519 = t1488 - qJDD(3);
t1493 = sin(pkin(9));
t1495 = cos(pkin(9));
t1498 = sin(qJ(3));
t1501 = cos(qJ(3));
t1494 = sin(pkin(8));
t1534 = qJD(1) * t1494;
t1452 = (-t1493 * t1501 - t1495 * t1498) * t1534;
t1531 = qJD(1) * t1501;
t1516 = t1494 * t1531;
t1532 = qJD(1) * t1498;
t1517 = t1494 * t1532;
t1454 = -t1493 * t1517 + t1495 * t1516;
t1529 = t1452 * t1454;
t1421 = -t1519 + t1529;
t1503 = qJD(1) ^ 2;
t1490 = t1494 ^ 2;
t1491 = t1496 ^ 2;
t1523 = t1490 + t1491;
t1471 = t1523 * t1503;
t1533 = qJD(1) * t1496;
t1484 = -qJD(3) + t1533;
t1479 = -qJD(5) + t1484;
t1544 = qJD(5) - t1479;
t1497 = sin(qJ(5));
t1500 = cos(qJ(5));
t1423 = -t1500 * t1452 + t1454 * t1497;
t1543 = t1423 ^ 2;
t1425 = t1452 * t1497 + t1454 * t1500;
t1542 = t1425 ^ 2;
t1541 = t1452 ^ 2;
t1540 = t1454 ^ 2;
t1539 = t1479 ^ 2;
t1538 = t1484 ^ 2;
t1537 = t1498 ^ 2;
t1536 = 2 * qJD(2);
t1535 = g(3) * t1496;
t1530 = t1423 * t1425;
t1528 = t1452 * t1484;
t1527 = t1454 * t1484;
t1526 = t1490 * t1503;
t1509 = -pkin(2) * t1496 - pkin(6) * t1494;
t1469 = t1509 * qJD(1);
t1525 = t1536 + t1469;
t1524 = qJD(5) + t1479;
t1499 = sin(qJ(1));
t1502 = cos(qJ(1));
t1476 = -g(1) * t1502 - g(2) * t1499;
t1465 = -pkin(1) * t1503 + qJDD(1) * qJ(2) + t1476;
t1444 = -g(3) * t1494 + t1496 * t1465 + t1533 * t1536;
t1427 = t1469 * t1533 + t1444;
t1475 = g(1) * t1499 - t1502 * g(2);
t1508 = -qJ(2) * t1503 + qJDD(2) - t1475;
t1446 = (-pkin(1) + t1509) * qJDD(1) + t1508;
t1405 = t1501 * t1427 + t1498 * t1446;
t1522 = qJDD(1) * t1498;
t1521 = qJDD(1) * t1501;
t1520 = t1494 * qJDD(1);
t1518 = t1484 * t1532;
t1515 = t1537 * t1526;
t1514 = t1501 * t1526;
t1438 = t1501 * t1446;
t1477 = qJD(3) * t1517;
t1461 = t1501 * t1520 - t1477;
t1390 = -pkin(3) * t1519 - qJ(4) * t1461 + t1438 + (qJ(4) * t1484 * t1534 - pkin(3) * t1514 - t1427) * t1498;
t1458 = -pkin(3) * t1484 - qJ(4) * t1516;
t1507 = (-qJD(3) * t1531 - t1522) * t1494;
t1391 = -pkin(3) * t1515 + qJ(4) * t1507 + t1484 * t1458 + t1405;
t1364 = 0.2e1 * qJD(4) * t1452 + t1493 * t1390 + t1495 * t1391;
t1513 = -qJDD(5) + t1519;
t1432 = t1495 * t1461 + t1493 * t1507;
t1511 = t1461 * t1493 - t1495 * t1507;
t1512 = -t1432 * t1497 - t1500 * t1511;
t1411 = -t1432 - t1528;
t1510 = t1498 * t1514;
t1363 = -0.2e1 * qJD(4) * t1454 + t1495 * t1390 - t1391 * t1493;
t1506 = -t1500 * t1432 + t1497 * t1511;
t1397 = t1535 + qJDD(4) - pkin(3) * t1507 - qJ(4) * t1515 + (t1465 + (t1458 * t1501 + t1525) * qJD(1)) * t1494;
t1492 = t1501 ^ 2;
t1481 = t1496 * t1503 * t1494;
t1474 = -qJDD(1) * t1499 - t1502 * t1503;
t1473 = qJDD(1) * t1502 - t1499 * t1503;
t1470 = t1523 * qJDD(1);
t1468 = t1496 * t1471;
t1467 = t1494 * t1471;
t1464 = (t1492 + t1537) * t1526;
t1463 = -t1538 - t1515;
t1462 = qJDD(1) * pkin(1) - t1508;
t1460 = -t1510 - t1519;
t1459 = -t1510 + t1519;
t1451 = -t1492 * t1526 - t1538;
t1443 = -0.2e1 * qJD(2) * t1534 - t1465 * t1494 - t1535;
t1442 = -t1477 + (t1518 + t1521) * t1494;
t1441 = (-t1522 + (-qJD(3) - t1484) * t1531) * t1494;
t1440 = (t1522 + (qJD(3) - t1484) * t1531) * t1494;
t1439 = t1477 + (t1518 - t1521) * t1494;
t1436 = -pkin(4) * t1484 - pkin(7) * t1454;
t1435 = -t1538 - t1540;
t1434 = -t1460 * t1498 + t1463 * t1501;
t1433 = t1460 * t1501 + t1463 * t1498;
t1429 = -t1451 * t1498 + t1459 * t1501;
t1428 = t1451 * t1501 + t1459 * t1498;
t1426 = t1535 + (t1525 * qJD(1) + t1465) * t1494;
t1420 = t1519 + t1529;
t1419 = -t1538 - t1541;
t1417 = -t1540 - t1541;
t1416 = -t1443 * t1494 + t1444 * t1496;
t1415 = t1443 * t1496 + t1444 * t1494;
t1414 = -t1539 - t1542;
t1413 = -t1439 * t1498 + t1441 * t1501;
t1412 = t1439 * t1501 + t1441 * t1498;
t1410 = t1432 - t1528;
t1409 = -t1511 - t1527;
t1408 = t1511 - t1527;
t1407 = t1434 * t1496 + t1440 * t1494;
t1406 = t1434 * t1494 - t1440 * t1496;
t1404 = -t1427 * t1498 + t1438;
t1403 = t1429 * t1496 + t1442 * t1494;
t1402 = t1429 * t1494 - t1442 * t1496;
t1401 = t1413 * t1496 - t1464 * t1494;
t1400 = t1413 * t1494 + t1464 * t1496;
t1399 = t1420 * t1495 - t1435 * t1493;
t1398 = t1420 * t1493 + t1435 * t1495;
t1396 = -t1513 - t1530;
t1395 = t1513 - t1530;
t1394 = -t1539 - t1543;
t1393 = t1419 * t1495 - t1421 * t1493;
t1392 = t1419 * t1493 + t1421 * t1495;
t1386 = t1409 * t1495 - t1411 * t1493;
t1385 = t1409 * t1493 + t1411 * t1495;
t1384 = -t1542 - t1543;
t1383 = -t1404 * t1498 + t1405 * t1501;
t1382 = t1404 * t1501 + t1405 * t1498;
t1381 = t1395 * t1500 - t1414 * t1497;
t1380 = t1395 * t1497 + t1414 * t1500;
t1379 = -t1398 * t1498 + t1399 * t1501;
t1378 = t1398 * t1501 + t1399 * t1498;
t1377 = t1524 * t1423 + t1506;
t1376 = -t1544 * t1423 - t1506;
t1375 = -t1524 * t1425 + t1512;
t1374 = t1544 * t1425 - t1512;
t1373 = t1511 * pkin(4) - t1541 * pkin(7) + t1436 * t1454 + t1397;
t1372 = t1394 * t1500 - t1396 * t1497;
t1371 = t1394 * t1497 + t1396 * t1500;
t1370 = -t1392 * t1498 + t1393 * t1501;
t1369 = t1383 * t1496 + t1426 * t1494;
t1368 = t1392 * t1501 + t1393 * t1498;
t1367 = t1383 * t1494 - t1426 * t1496;
t1366 = t1379 * t1496 + t1410 * t1494;
t1365 = t1379 * t1494 - t1410 * t1496;
t1362 = t1370 * t1496 + t1408 * t1494;
t1361 = t1370 * t1494 - t1408 * t1496;
t1360 = -t1385 * t1498 + t1386 * t1501;
t1359 = t1385 * t1501 + t1386 * t1498;
t1358 = -t1380 * t1493 + t1381 * t1495;
t1357 = t1380 * t1495 + t1381 * t1493;
t1356 = t1360 * t1496 + t1417 * t1494;
t1355 = t1360 * t1494 - t1417 * t1496;
t1354 = -t1541 * pkin(4) - t1511 * pkin(7) + t1484 * t1436 + t1364;
t1353 = t1375 * t1500 - t1377 * t1497;
t1352 = t1375 * t1497 + t1377 * t1500;
t1351 = t1421 * pkin(4) + t1411 * pkin(7) + t1363;
t1350 = -t1371 * t1493 + t1372 * t1495;
t1349 = t1371 * t1495 + t1372 * t1493;
t1348 = -t1363 * t1493 + t1364 * t1495;
t1347 = t1363 * t1495 + t1364 * t1493;
t1346 = -t1357 * t1498 + t1358 * t1501;
t1345 = t1357 * t1501 + t1358 * t1498;
t1344 = -t1352 * t1493 + t1353 * t1495;
t1343 = t1352 * t1495 + t1353 * t1493;
t1342 = t1351 * t1497 + t1354 * t1500;
t1341 = t1351 * t1500 - t1354 * t1497;
t1340 = -t1349 * t1498 + t1350 * t1501;
t1339 = t1349 * t1501 + t1350 * t1498;
t1338 = t1346 * t1496 + t1376 * t1494;
t1337 = t1346 * t1494 - t1376 * t1496;
t1336 = t1340 * t1496 + t1374 * t1494;
t1335 = t1340 * t1494 - t1374 * t1496;
t1334 = -t1347 * t1498 + t1348 * t1501;
t1333 = t1347 * t1501 + t1348 * t1498;
t1332 = t1334 * t1496 + t1397 * t1494;
t1331 = t1334 * t1494 - t1397 * t1496;
t1330 = -t1343 * t1498 + t1344 * t1501;
t1329 = t1343 * t1501 + t1344 * t1498;
t1328 = -t1341 * t1497 + t1342 * t1500;
t1327 = t1341 * t1500 + t1342 * t1497;
t1326 = t1330 * t1496 + t1384 * t1494;
t1325 = t1330 * t1494 - t1384 * t1496;
t1324 = -t1327 * t1493 + t1328 * t1495;
t1323 = t1327 * t1495 + t1328 * t1493;
t1322 = -t1323 * t1498 + t1324 * t1501;
t1321 = t1323 * t1501 + t1324 * t1498;
t1320 = t1322 * t1496 + t1373 * t1494;
t1319 = t1322 * t1494 - t1373 * t1496;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1474, -t1473, 0, -t1475 * t1499 + t1476 * t1502, 0, 0, 0, 0, 0, 0, -t1468 * t1502 - t1499 * t1488, t1467 * t1502 + t1499 * t1520, t1470 * t1502 - t1471 * t1499, t1416 * t1502 - t1462 * t1499, 0, 0, 0, 0, 0, 0, t1407 * t1502 + t1433 * t1499, t1403 * t1502 + t1428 * t1499, t1401 * t1502 + t1412 * t1499, t1369 * t1502 + t1382 * t1499, 0, 0, 0, 0, 0, 0, t1362 * t1502 + t1368 * t1499, t1366 * t1502 + t1378 * t1499, t1356 * t1502 + t1359 * t1499, t1332 * t1502 + t1333 * t1499, 0, 0, 0, 0, 0, 0, t1336 * t1502 + t1339 * t1499, t1338 * t1502 + t1345 * t1499, t1326 * t1502 + t1329 * t1499, t1320 * t1502 + t1321 * t1499; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1473, t1474, 0, t1475 * t1502 + t1476 * t1499, 0, 0, 0, 0, 0, 0, -t1468 * t1499 + t1502 * t1488, t1467 * t1499 - t1502 * t1520, t1470 * t1499 + t1471 * t1502, t1416 * t1499 + t1462 * t1502, 0, 0, 0, 0, 0, 0, t1407 * t1499 - t1433 * t1502, t1403 * t1499 - t1428 * t1502, t1401 * t1499 - t1412 * t1502, t1369 * t1499 - t1382 * t1502, 0, 0, 0, 0, 0, 0, t1362 * t1499 - t1368 * t1502, t1366 * t1499 - t1378 * t1502, t1356 * t1499 - t1359 * t1502, t1332 * t1499 - t1333 * t1502, 0, 0, 0, 0, 0, 0, t1336 * t1499 - t1339 * t1502, t1338 * t1499 - t1345 * t1502, t1326 * t1499 - t1329 * t1502, t1320 * t1499 - t1321 * t1502; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1415, 0, 0, 0, 0, 0, 0, t1406, t1402, t1400, t1367, 0, 0, 0, 0, 0, 0, t1361, t1365, t1355, t1331, 0, 0, 0, 0, 0, 0, t1335, t1337, t1325, t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1503, -qJDD(1), 0, t1476, 0, 0, 0, 0, 0, 0, -t1468, t1467, t1470, t1416, 0, 0, 0, 0, 0, 0, t1407, t1403, t1401, t1369, 0, 0, 0, 0, 0, 0, t1362, t1366, t1356, t1332, 0, 0, 0, 0, 0, 0, t1336, t1338, t1326, t1320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1503, 0, t1475, 0, 0, 0, 0, 0, 0, t1488, -t1520, t1471, t1462, 0, 0, 0, 0, 0, 0, -t1433, -t1428, -t1412, -t1382, 0, 0, 0, 0, 0, 0, -t1368, -t1378, -t1359, -t1333, 0, 0, 0, 0, 0, 0, -t1339, -t1345, -t1329, -t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1415, 0, 0, 0, 0, 0, 0, t1406, t1402, t1400, t1367, 0, 0, 0, 0, 0, 0, t1361, t1365, t1355, t1331, 0, 0, 0, 0, 0, 0, t1335, t1337, t1325, t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1491 * t1503, t1481, t1488, t1444, 0, 0, 0, 0, 0, 0, t1434, t1429, t1413, t1383, 0, 0, 0, 0, 0, 0, t1370, t1379, t1360, t1334, 0, 0, 0, 0, 0, 0, t1340, t1346, t1330, t1322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1481, -t1526, -t1520, t1443, 0, 0, 0, 0, 0, 0, -t1440, -t1442, t1464, -t1426, 0, 0, 0, 0, 0, 0, -t1408, -t1410, -t1417, -t1397, 0, 0, 0, 0, 0, 0, -t1374, -t1376, -t1384, -t1373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1488, t1520, -t1471, -t1462, 0, 0, 0, 0, 0, 0, t1433, t1428, t1412, t1382, 0, 0, 0, 0, 0, 0, t1368, t1378, t1359, t1333, 0, 0, 0, 0, 0, 0, t1339, t1345, t1329, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1463, t1459, t1441, t1405, 0, 0, 0, 0, 0, 0, t1393, t1399, t1386, t1348, 0, 0, 0, 0, 0, 0, t1350, t1358, t1344, t1324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1460, t1451, t1439, t1404, 0, 0, 0, 0, 0, 0, t1392, t1398, t1385, t1347, 0, 0, 0, 0, 0, 0, t1349, t1357, t1343, t1323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1440, t1442, -t1464, t1426, 0, 0, 0, 0, 0, 0, t1408, t1410, t1417, t1397, 0, 0, 0, 0, 0, 0, t1374, t1376, t1384, t1373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1419, t1420, t1409, t1364, 0, 0, 0, 0, 0, 0, t1372, t1381, t1353, t1328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1421, t1435, t1411, t1363, 0, 0, 0, 0, 0, 0, t1371, t1380, t1352, t1327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1408, t1410, t1417, t1397, 0, 0, 0, 0, 0, 0, t1374, t1376, t1384, t1373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1394, t1395, t1375, t1342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1396, t1414, t1377, t1341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1374, t1376, t1384, t1373;];
f_new_reg = t1;
