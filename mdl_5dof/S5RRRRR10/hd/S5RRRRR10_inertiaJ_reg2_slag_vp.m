% Calculate inertial parameters regressor of joint inertia matrix for
% S5RRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RRRRR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR10_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR10_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:35:58
% EndTime: 2019-12-31 22:36:04
% DurationCPUTime: 1.76s
% Computational Cost: add. (2060->176), mult. (4774->360), div. (0->0), fcn. (5388->10), ass. (0->111)
t75 = sin(qJ(5));
t69 = t75 ^ 2;
t79 = cos(qJ(5));
t71 = t79 ^ 2;
t102 = t69 + t71;
t76 = sin(qJ(4));
t121 = t76 * pkin(3);
t63 = pkin(10) + t121;
t104 = t102 * t63;
t73 = sin(pkin(5));
t78 = sin(qJ(2));
t113 = t73 * t78;
t74 = cos(pkin(5));
t77 = sin(qJ(3));
t81 = cos(qJ(3));
t42 = -t77 * t113 + t74 * t81;
t43 = t81 * t113 + t74 * t77;
t80 = cos(qJ(4));
t26 = -t80 * t42 + t43 * t76;
t28 = t42 * t76 + t43 * t80;
t82 = cos(qJ(2));
t124 = pkin(1) * t82;
t58 = pkin(7) * t113;
t37 = t58 + (-pkin(2) - t124) * t74;
t29 = -t42 * pkin(3) + t37;
t10 = t26 * pkin(4) - t28 * pkin(10) + t29;
t112 = t73 * t82;
t125 = pkin(1) * t78;
t96 = pkin(7) * t112;
t38 = t96 + (pkin(8) + t125) * t74;
t39 = (-pkin(2) * t82 - pkin(8) * t78 - pkin(1)) * t73;
t23 = t38 * t81 + t39 * t77;
t16 = pkin(9) * t42 + t23;
t105 = t80 * t16;
t22 = -t38 * t77 + t81 * t39;
t97 = pkin(3) * t112;
t13 = -pkin(9) * t43 + t22 - t97;
t8 = t13 * t76 + t105;
t6 = -pkin(10) * t112 + t8;
t2 = t10 * t79 - t6 * t75;
t3 = t10 * t75 + t6 * t79;
t134 = -t2 * t75 + t3 * t79;
t133 = t26 ^ 2;
t126 = -pkin(9) - pkin(8);
t53 = t126 * t81;
t93 = t126 * t77;
t33 = -t53 * t76 - t80 * t93;
t132 = t33 ^ 2;
t49 = t76 * t77 - t80 * t81;
t131 = t49 ^ 2;
t130 = -0.2e1 * t26;
t65 = -pkin(3) * t81 - pkin(2);
t129 = 0.2e1 * t65;
t128 = 0.2e1 * t73;
t127 = 0.2e1 * t81;
t91 = -t80 * t13 + t16 * t76;
t5 = pkin(4) * t112 + t91;
t122 = t5 * t79;
t120 = t80 * pkin(3);
t64 = -pkin(4) - t120;
t119 = pkin(4) - t64;
t19 = t79 * t112 + t28 * t75;
t17 = t19 * t79;
t21 = -t75 * t112 + t28 * t79;
t18 = t21 * t75;
t118 = t26 * t49;
t117 = t33 * t79;
t116 = t42 * t81;
t115 = t43 * t77;
t68 = t73 ^ 2;
t114 = t68 * t82;
t111 = t74 * t78;
t24 = t75 * t26;
t51 = t76 * t81 + t77 * t80;
t110 = t75 * t51;
t109 = t75 * t63;
t108 = t75 * t79;
t25 = t79 * t26;
t107 = t79 * t51;
t106 = t79 * t63;
t103 = t102 * pkin(10);
t70 = t77 ^ 2;
t72 = t81 ^ 2;
t101 = t70 + t72;
t100 = -0.2e1 * t51 * t49;
t99 = -0.2e1 * t112;
t98 = 0.2e1 * t112;
t95 = t77 * t112;
t94 = t81 * t112;
t90 = -pkin(4) * t51 - pkin(10) * t49;
t30 = pkin(4) * t49 - pkin(10) * t51 + t65;
t35 = -t80 * t53 + t76 * t93;
t14 = t30 * t79 - t35 * t75;
t15 = t30 * t75 + t35 * t79;
t9 = -t14 * t75 + t15 * t79;
t88 = t18 - t17;
t87 = -t22 * t77 + t23 * t81;
t86 = -t49 * t63 + t51 * t64;
t61 = t68 * t82 ^ 2;
t59 = 0.2e1 * t108;
t48 = t51 ^ 2;
t47 = pkin(1) * t111 + t96;
t46 = t74 * t124 - t58;
t45 = t79 * t49;
t44 = t75 * t49;
t41 = t75 * t107;
t32 = t33 * t75;
t31 = (-t69 + t71) * t51;
t11 = -t19 * t75 + t21 * t79;
t4 = t5 * t75;
t1 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t68 * t78 ^ 2, 0.2e1 * t78 * t114, t111 * t128, t61, t74 * t98, t74 ^ 2, 0.2e1 * pkin(1) * t114 + 0.2e1 * t46 * t74, -0.2e1 * t68 * t125 - 0.2e1 * t47 * t74, (-t46 * t78 + t47 * t82) * t128, pkin(1) ^ 2 * t68 + t46 ^ 2 + t47 ^ 2, t43 ^ 2, 0.2e1 * t43 * t42, t43 * t99, t42 ^ 2, t42 * t99, t61, -0.2e1 * t22 * t112 - 0.2e1 * t37 * t42, 0.2e1 * t23 * t112 + 0.2e1 * t37 * t43, -0.2e1 * t22 * t43 + 0.2e1 * t23 * t42, t22 ^ 2 + t23 ^ 2 + t37 ^ 2, t28 ^ 2, t28 * t130, t28 * t99, t133, t26 * t98, t61, 0.2e1 * t112 * t91 + 0.2e1 * t26 * t29, 0.2e1 * t8 * t112 + 0.2e1 * t28 * t29, -0.2e1 * t26 * t8 + 0.2e1 * t28 * t91, t29 ^ 2 + t8 ^ 2 + t91 ^ 2, t21 ^ 2, -0.2e1 * t21 * t19, 0.2e1 * t21 * t26, t19 ^ 2, t19 * t130, t133, 0.2e1 * t19 * t5 + 0.2e1 * t2 * t26, 0.2e1 * t21 * t5 - 0.2e1 * t26 * t3, -0.2e1 * t19 * t3 - 0.2e1 * t2 * t21, t2 ^ 2 + t3 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, 0, t112, t74, t46, -t47, 0, 0, t115, t42 * t77 + t43 * t81, -t95, t116, -t94, 0, pkin(2) * t42 + pkin(8) * t95 - t37 * t81, -pkin(2) * t43 + pkin(8) * t94 + t37 * t77, (t115 + t116) * pkin(8) + t87, -t37 * pkin(2) + t87 * pkin(8), t28 * t51, -t26 * t51 - t28 * t49, -t51 * t112, t118, t49 * t112, 0, t33 * t112 + t26 * t65 + t29 * t49, t35 * t112 + t28 * t65 + t29 * t51, -t26 * t35 + t28 * t33 - t49 * t8 + t51 * t91, t29 * t65 + t33 * t91 + t35 * t8, t21 * t107, (-t18 - t17) * t51, t26 * t107 + t21 * t49, t19 * t110, -t26 * t110 - t19 * t49, t118, t5 * t110 + t14 * t26 + t19 * t33 + t2 * t49, t5 * t107 - t15 * t26 + t21 * t33 - t3 * t49, -t14 * t21 - t15 * t19 + (-t2 * t79 - t3 * t75) * t51, t14 * t2 + t15 * t3 + t33 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t70, t77 * t127, 0, t72, 0, 0, pkin(2) * t127, -0.2e1 * pkin(2) * t77, 0.2e1 * t101 * pkin(8), t101 * pkin(8) ^ 2 + pkin(2) ^ 2, t48, t100, 0, t131, 0, 0, t49 * t129, t51 * t129, 0.2e1 * t33 * t51 - 0.2e1 * t35 * t49, t35 ^ 2 + t65 ^ 2 + t132, t71 * t48, -0.2e1 * t48 * t108, 0.2e1 * t49 * t107, t69 * t48, t75 * t100, t131, 0.2e1 * t33 * t110 + 0.2e1 * t14 * t49, 0.2e1 * t33 * t107 - 0.2e1 * t15 * t49, 0.2e1 * (-t14 * t79 - t15 * t75) * t51, t14 ^ 2 + t15 ^ 2 + t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, 0, t42, -t112, t22, -t23, 0, 0, 0, 0, t28, 0, -t26, -t112, -t80 * t97 - t91, -t105 + (-t13 + t97) * t76, (-t26 * t76 - t28 * t80) * pkin(3), (t76 * t8 - t80 * t91) * pkin(3), t18, t11, t24, -t17, t25, 0, -t26 * t109 + t19 * t64 - t122, -t26 * t106 + t21 * t64 + t4, t88 * t63 + t134, t134 * t63 + t5 * t64; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, t81, 0, -t77 * pkin(8), -t81 * pkin(8), 0, 0, 0, 0, t51, 0, -t49, 0, -t33, -t35, (-t49 * t76 - t51 * t80) * pkin(3), (-t33 * t80 + t35 * t76) * pkin(3), t41, t31, t44, -t41, t45, 0, t86 * t75 - t117, t86 * t79 + t32, t9, t33 * t64 + t9 * t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t120, -0.2e1 * t121, 0, (t76 ^ 2 + t80 ^ 2) * pkin(3) ^ 2, t69, t59, 0, t71, 0, 0, -0.2e1 * t64 * t79, 0.2e1 * t64 * t75, 0.2e1 * t104, t102 * t63 ^ 2 + t64 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, -t112, -t91, -t8, 0, 0, t18, t11, t24, -t17, t25, 0, -pkin(4) * t19 - pkin(10) * t24 - t122, -pkin(4) * t21 - pkin(10) * t25 + t4, t88 * pkin(10) + t134, -t5 * pkin(4) + pkin(10) * t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, 0, -t49, 0, -t33, -t35, 0, 0, t41, t31, t44, -t41, t45, 0, t90 * t75 - t117, t90 * t79 + t32, t9, -t33 * pkin(4) + t9 * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t120, -t121, 0, 0, t69, t59, 0, t71, 0, 0, t119 * t79, -t119 * t75, t103 + t104, -t64 * pkin(4) + pkin(10) * t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t69, t59, 0, t71, 0, 0, 0.2e1 * pkin(4) * t79, -0.2e1 * pkin(4) * t75, 0.2e1 * t103, t102 * pkin(10) ^ 2 + pkin(4) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, -t19, t26, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t110, t49, t14, -t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, t79, 0, -t109, -t106, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, t79, 0, -t75 * pkin(10), -t79 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t1;
