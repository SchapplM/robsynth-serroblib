% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:21
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:21:06
% EndTime: 2022-01-23 09:21:17
% DurationCPUTime: 11.42s
% Computational Cost: add. (51409->494), mult. (76171->686), div. (0->0), fcn. (45228->10), ass. (0->344)
t898 = qJD(1) + qJD(3);
t894 = t898 ^ 2;
t895 = qJDD(1) + qJDD(3);
t907 = sin(qJ(3));
t910 = cos(qJ(3));
t857 = t894 * t910 + t895 * t907;
t860 = t894 * t907 - t895 * t910;
t903 = sin(pkin(8));
t905 = cos(pkin(8));
t801 = t857 * t905 - t860 * t903;
t805 = t857 * t903 + t860 * t905;
t908 = sin(qJ(1));
t911 = cos(qJ(1));
t1005 = t801 * t911 - t805 * t908;
t901 = g(3) - qJDD(2);
t1006 = pkin(6) * t860 - t901 * t907;
t827 = pkin(6) * t857 - t901 * t910;
t1012 = qJ(2) * t805 + t1006 * t905 + t827 * t903;
t731 = qJ(2) * t801 - t1006 * t903 + t827 * t905;
t1024 = pkin(5) * t1005 - t1012 * t908 + t911 * t731;
t1013 = t801 * t908 + t805 * t911;
t1023 = pkin(5) * t1013 + t1012 * t911 + t908 * t731;
t882 = g(1) * t908 - t911 * g(2);
t867 = qJDD(1) * pkin(1) + t882;
t883 = g(1) * t911 + g(2) * t908;
t912 = qJD(1) ^ 2;
t868 = -pkin(1) * t912 - t883;
t812 = t867 * t903 + t868 * t905;
t808 = -pkin(2) * t912 + t812;
t931 = t867 * t905 - t868 * t903;
t920 = qJDD(1) * pkin(2) + t931;
t750 = t808 * t907 - t910 * t920;
t751 = t910 * t808 + t907 * t920;
t951 = t750 * t907 + t910 * t751;
t686 = t750 * t910 - t751 * t907;
t984 = t686 * t903;
t1010 = t905 * t951 + t984;
t983 = t686 * t905;
t635 = -t903 * t951 + t983;
t1021 = t1010 * t911 + t635 * t908;
t1020 = -t1010 * t908 + t635 * t911;
t902 = sin(pkin(9));
t897 = t902 ^ 2;
t904 = cos(pkin(9));
t914 = t904 ^ 2;
t846 = (t897 + t914) * t904 * t894;
t961 = t904 * t910;
t815 = -t846 * t907 + t895 * t961;
t962 = t904 * t907;
t817 = t846 * t910 + t895 * t962;
t759 = t815 * t905 - t817 * t903;
t761 = t815 * t903 + t817 * t905;
t1015 = t759 * t911 - t761 * t908;
t1014 = t759 * t908 + t761 * t911;
t950 = t905 * t812 - t903 * t931;
t755 = -t812 * t903 - t905 * t931;
t980 = t755 * t908;
t1011 = t911 * t950 + t980;
t979 = t755 * t911;
t1009 = -t908 * t950 + t979;
t871 = qJDD(1) * t903 + t905 * t912;
t838 = qJ(2) * t871 - t901 * t905;
t872 = qJDD(1) * t905 - t903 * t912;
t932 = -qJ(2) * t872 - t901 * t903;
t991 = t911 * t871 + t872 * t908;
t1004 = pkin(5) * t991 + t911 * t838 - t908 * t932;
t820 = -t871 * t908 + t911 * t872;
t1003 = -pkin(5) * t820 + t908 * t838 + t911 * t932;
t966 = t902 * t904;
t822 = t857 * t966;
t875 = t894 * t966;
t963 = t904 * t895;
t954 = t902 * t963;
t823 = -t907 * t875 + t910 * t954;
t767 = t822 * t905 + t823 * t903;
t770 = t822 * t903 - t823 * t905;
t1002 = t767 * t911 - t770 * t908;
t1001 = t767 * t908 + t770 * t911;
t906 = sin(qJ(5));
t909 = cos(qJ(5));
t830 = (qJD(5) * t898 * t909 + t895 * t906) * t902;
t879 = t898 * t904 - qJD(5);
t959 = t879 * t898 * t902;
t843 = t909 * t959;
t790 = t843 - t830;
t999 = t790 * t906;
t889 = t904 * t901;
t741 = -t894 * pkin(3) + t895 * qJ(4) + t751;
t989 = 2 * qJD(4);
t947 = t898 * t989 + t741;
t716 = t947 * t902 + t889;
t969 = t901 * t902;
t717 = t947 * t904 - t969;
t669 = t902 * t716 + t904 * t717;
t970 = t898 * t906;
t955 = t902 * t970;
t870 = qJD(5) * t955;
t958 = t879 * t970;
t972 = t895 * t909;
t792 = t902 * (t958 + t972) - t870;
t876 = t879 ^ 2;
t988 = pkin(1) * t901;
t987 = pkin(4) * t902;
t986 = pkin(4) * t904;
t939 = -pkin(7) * t902 - t986;
t929 = t741 + (t939 * t898 + t989) * t898;
t699 = t902 * t929 + t889;
t982 = t699 * t906;
t981 = t699 * t909;
t956 = t894 * t906 * t909;
t865 = t897 * t956;
t877 = -qJDD(5) + t963;
t828 = -t865 + t877;
t978 = t828 * t906;
t977 = t828 * t909;
t829 = -t865 - t877;
t976 = t829 * t906;
t975 = t829 * t909;
t971 = t897 * t894;
t736 = -t895 * pkin(3) - t894 * qJ(4) + qJDD(4) + t750;
t732 = t902 * t736;
t886 = t902 * t895;
t965 = t902 * t907;
t964 = t902 * t910;
t733 = t904 * t736;
t960 = -pkin(3) * t736 + qJ(4) * t669;
t900 = t909 ^ 2;
t957 = t900 * t971;
t953 = pkin(3) * t963 - qJ(4) * t846 - t733;
t639 = t669 * t907 - t736 * t910;
t952 = pkin(2) * t639 + t960;
t700 = t904 * t929 - t969;
t720 = t939 * t895 + t736;
t654 = t700 * t906 - t909 * t720;
t655 = t700 * t909 + t720 * t906;
t624 = t654 * t906 + t909 * t655;
t948 = -t882 * t908 - t911 * t883;
t896 = t902 * t897;
t946 = t896 * t956;
t945 = t879 * t955;
t819 = -t957 - t876;
t772 = t819 * t909 + t978;
t648 = -pkin(4) * t772 + t655;
t676 = -pkin(7) * t772 + t981;
t773 = -t819 * t906 + t977;
t719 = t773 * t904 + t792 * t902;
t944 = -pkin(3) * t772 + qJ(4) * t719 + t904 * t648 + t902 * t676;
t899 = t906 ^ 2;
t878 = t899 * t971;
t833 = -t878 - t876;
t779 = t833 * t906 + t975;
t650 = -pkin(4) * t779 + t654;
t678 = -pkin(7) * t779 + t982;
t782 = t833 * t909 - t976;
t727 = t782 * t904 - t790 * t902;
t943 = -pkin(3) * t779 + qJ(4) * t727 + t904 * t650 + t902 * t678;
t885 = t897 * t895;
t887 = t914 * t895;
t853 = t887 + t885;
t888 = t914 * t894;
t855 = t888 + t971;
t942 = pkin(3) * t855 + qJ(4) * t853 + t669;
t941 = pkin(2) * t815 + t953;
t940 = -pkin(4) * t699 + pkin(7) * t624;
t874 = qJDD(1) * t911 - t908 * t912;
t938 = -pkin(5) * t874 - g(3) * t908;
t937 = -pkin(2) * t860 - t750;
t936 = t904 * t865;
t680 = t719 * t907 - t772 * t910;
t935 = pkin(2) * t680 + t944;
t691 = t727 * t907 - t779 * t910;
t934 = pkin(2) * t691 + t943;
t797 = t853 * t907 + t855 * t910;
t933 = pkin(2) * t797 + t942;
t623 = -t654 * t909 + t655 * t906;
t668 = t716 * t904 - t717 * t902;
t930 = t882 * t911 - t883 * t908;
t845 = (t902 * t914 + t896) * t894;
t928 = -pkin(3) * t886 + qJ(4) * t845 + t732;
t813 = t845 * t907 - t895 * t964;
t925 = pkin(2) * t813 + t928;
t789 = t843 + t830;
t791 = -t870 + (-t958 + t972) * t902;
t737 = -t789 * t906 - t791 * t909;
t616 = -pkin(7) * t737 - t623;
t739 = -t789 * t909 + t791 * t906;
t839 = t878 + t957;
t706 = t739 * t904 - t839 * t902;
t924 = qJ(4) * t706 + t902 * t616 + (-pkin(3) - t986) * t737;
t923 = -pkin(4) * t792 + pkin(7) * t773 + t982;
t922 = pkin(4) * t790 + pkin(7) * t782 - t981;
t671 = t706 * t907 - t737 * t910;
t921 = pkin(2) * t671 + t924;
t919 = pkin(4) * t839 + pkin(7) * t739 + t624;
t610 = t624 * t904 + t699 * t902;
t918 = qJ(4) * t610 + (-pkin(3) + t939) * t623;
t596 = t610 * t907 - t623 * t910;
t917 = pkin(2) * t596 + t918;
t916 = -pkin(2) * t857 - t751;
t873 = qJDD(1) * t908 + t911 * t912;
t869 = 0.2e1 * t954;
t863 = t904 * t877;
t856 = -t888 + t971;
t854 = t887 - t885;
t849 = -pkin(5) * t873 + g(3) * t911;
t840 = -t878 + t957;
t834 = t876 - t957;
t832 = t878 - t876;
t831 = t909 * t886 - t870;
t816 = t845 * t910 + t895 * t965;
t800 = t854 * t910 + t856 * t907;
t799 = t853 * t910 - t855 * t907;
t798 = t854 * t907 - t856 * t910;
t795 = (-t899 - t900) * t959;
t788 = pkin(1) * t872 + t931;
t787 = -pkin(1) * t871 - t812;
t786 = t831 * t906 - t900 * t959;
t785 = -t830 * t909 - t899 * t959;
t784 = (t831 + t945) * t909;
t781 = t832 * t909 + t978;
t780 = -t834 * t906 + t975;
t778 = t832 * t906 - t977;
t777 = t834 * t909 + t976;
t775 = -t795 * t907 - t877 * t964;
t774 = t795 * t910 - t877 * t965;
t766 = t784 * t904 + t946;
t765 = -t904 * t999 - t946;
t764 = t784 * t902 - t936;
t763 = -t902 * t999 + t936;
t760 = -t813 * t903 + t816 * t905;
t757 = t813 * t905 + t816 * t903;
t752 = pkin(1) * t755;
t749 = qJ(2) * t950 + t988;
t745 = -t798 * t903 + t800 * t905;
t744 = -t797 * t903 + t799 * t905;
t743 = t798 * t905 + t800 * t903;
t742 = t797 * t905 + t799 * t903;
t740 = t790 * t909 - t792 * t906;
t738 = t792 * t909 + t999;
t726 = t781 * t904 - t789 * t902;
t725 = t780 * t904 + t791 * t902;
t724 = t782 * t902 + t790 * t904;
t723 = t781 * t902 + t789 * t904;
t722 = t780 * t902 - t791 * t904;
t718 = t773 * t902 - t792 * t904;
t711 = t766 * t910 + t786 * t907;
t710 = t765 * t910 + t785 * t907;
t709 = t766 * t907 - t786 * t910;
t708 = t765 * t907 - t785 * t910;
t707 = t740 * t904 + t840 * t902;
t705 = t740 * t902 - t840 * t904;
t704 = t739 * t902 + t839 * t904;
t702 = -t774 * t903 + t775 * t905;
t701 = t774 * t905 + t775 * t903;
t698 = -pkin(1) * t805 + t937;
t697 = -pkin(1) * t801 + t916;
t696 = -t757 * t908 + t760 * t911;
t695 = t757 * t911 + t760 * t908;
t694 = t727 * t910 + t779 * t907;
t693 = t726 * t910 + t778 * t907;
t692 = t725 * t910 + t777 * t907;
t690 = t726 * t907 - t778 * t910;
t689 = t725 * t907 - t777 * t910;
t683 = pkin(2) * t686;
t682 = pkin(2) * t901 + pkin(6) * t951;
t681 = t719 * t910 + t772 * t907;
t674 = t707 * t910 + t738 * t907;
t673 = t706 * t910 + t737 * t907;
t672 = t707 * t907 - t738 * t910;
t665 = pkin(1) * t759 + t941;
t664 = pkin(1) * t757 + t925;
t663 = -t709 * t903 + t711 * t905;
t662 = -t708 * t903 + t710 * t905;
t661 = t709 * t905 + t711 * t903;
t660 = t708 * t905 + t710 * t903;
t659 = -pkin(6) * t813 - t717 * t907 + t736 * t961;
t658 = -pkin(6) * t815 - t716 * t907 + t736 * t964;
t657 = pkin(6) * t816 + t717 * t910 + t736 * t962;
t656 = -pkin(6) * t817 + t716 * t910 + t736 * t965;
t652 = -pkin(6) * t797 + t668 * t910;
t651 = pkin(6) * t799 + t668 * t907;
t646 = -t691 * t903 + t694 * t905;
t645 = -t690 * t903 + t693 * t905;
t644 = -t689 * t903 + t692 * t905;
t643 = t691 * t905 + t694 * t903;
t642 = t690 * t905 + t693 * t903;
t641 = t689 * t905 + t692 * t903;
t640 = t669 * t910 + t736 * t907;
t637 = -pkin(3) * t724 - t922;
t632 = -pkin(3) * t718 - t923;
t631 = -t680 * t903 + t681 * t905;
t630 = t680 * t905 + t681 * t903;
t629 = pkin(1) * t742 + t933;
t628 = -t672 * t903 + t674 * t905;
t627 = -t671 * t903 + t673 * t905;
t626 = t672 * t905 + t674 * t903;
t625 = t671 * t905 + t673 * t903;
t622 = -pkin(1) * t635 - t683;
t620 = -qJ(2) * t757 - t657 * t903 + t659 * t905;
t619 = -qJ(2) * t759 - t656 * t903 + t658 * t905;
t618 = qJ(2) * t760 + t657 * t905 + t659 * t903;
t617 = -qJ(2) * t761 + t656 * t905 + t658 * t903;
t615 = -qJ(4) * t724 - t650 * t902 + t678 * t904;
t613 = -qJ(4) * t718 - t648 * t902 + t676 * t904;
t612 = -qJ(2) * t742 - t651 * t903 + t652 * t905;
t611 = qJ(2) * t744 + t651 * t905 + t652 * t903;
t609 = t624 * t902 - t699 * t904;
t607 = -t639 * t903 + t640 * t905;
t606 = t639 * t905 + t640 * t903;
t605 = pkin(6) * t983 + qJ(2) * t635 - t682 * t903;
t604 = pkin(6) * t984 + qJ(2) * t1010 + t682 * t905 + t988;
t603 = -pkin(3) * t704 - t919;
t602 = -pkin(6) * t639 - (pkin(3) * t907 - qJ(4) * t910) * t668;
t601 = -qJ(4) * t704 + t616 * t904 + t737 * t987;
t600 = pkin(6) * t640 - (-pkin(3) * t910 - qJ(4) * t907 - pkin(2)) * t668;
t599 = -pkin(6) * t691 + t615 * t910 - t637 * t907;
t598 = pkin(1) * t643 + t934;
t597 = t610 * t910 + t623 * t907;
t594 = -pkin(6) * t680 + t613 * t910 - t632 * t907;
t593 = -pkin(2) * t724 + pkin(6) * t694 + t615 * t907 + t637 * t910;
t592 = pkin(1) * t630 + t935;
t591 = -pkin(2) * t718 + pkin(6) * t681 + t613 * t907 + t632 * t910;
t590 = -pkin(3) * t609 - t940;
t589 = pkin(1) * t606 + t952;
t588 = pkin(1) * t625 + t921;
t587 = -qJ(4) * t609 + (-pkin(7) * t904 + t987) * t623;
t586 = -pkin(6) * t671 + t601 * t910 - t603 * t907;
t585 = -pkin(2) * t704 + pkin(6) * t673 + t601 * t907 + t603 * t910;
t584 = -t596 * t903 + t597 * t905;
t583 = t596 * t905 + t597 * t903;
t582 = -qJ(2) * t606 - t600 * t903 + t602 * t905;
t581 = -qJ(2) * t643 - t593 * t903 + t599 * t905;
t580 = pkin(1) * t668 + qJ(2) * t607 + t600 * t905 + t602 * t903;
t579 = -pkin(1) * t724 + qJ(2) * t646 + t593 * t905 + t599 * t903;
t578 = -qJ(2) * t630 - t591 * t903 + t594 * t905;
t577 = -pkin(1) * t718 + qJ(2) * t631 + t591 * t905 + t594 * t903;
t576 = -pkin(6) * t596 + t587 * t910 - t590 * t907;
t575 = -qJ(2) * t625 - t585 * t903 + t586 * t905;
t574 = -pkin(1) * t704 + qJ(2) * t627 + t585 * t905 + t586 * t903;
t573 = -pkin(2) * t609 + pkin(6) * t597 + t587 * t907 + t590 * t910;
t572 = pkin(1) * t583 + t917;
t571 = -qJ(2) * t583 - t573 * t903 + t576 * t905;
t570 = -pkin(1) * t609 + qJ(2) * t584 + t573 * t905 + t576 * t903;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t874, 0, -t873, 0, t938, -t849, -t930, -pkin(5) * t930, 0, 0, t820, 0, -t991, 0, t1003, t1004, t1009, pkin(5) * t1009 + qJ(2) * t979 - t908 * t749, 0, 0, -t1013, 0, -t1005, 0, t1023, t1024, t1020, pkin(5) * t1020 - t908 * t604 + t911 * t605, -t1001, -t743 * t908 + t745 * t911, t696, t1001, t1014, 0, -pkin(5) * t1015 - t908 * t617 + t911 * t619, -pkin(5) * t695 - t618 * t908 + t620 * t911, t911 * t612 - t908 * t611 - pkin(5) * (t742 * t911 + t744 * t908), t911 * t582 - t908 * t580 - pkin(5) * (t606 * t911 + t607 * t908), -t661 * t908 + t663 * t911, -t626 * t908 + t628 * t911, -t641 * t908 + t644 * t911, -t660 * t908 + t662 * t911, -t642 * t908 + t645 * t911, -t701 * t908 + t702 * t911, t911 * t581 - t908 * t579 - pkin(5) * (t643 * t911 + t646 * t908), t911 * t578 - t908 * t577 - pkin(5) * (t630 * t911 + t631 * t908), t911 * t575 - t908 * t574 - pkin(5) * (t625 * t911 + t627 * t908), t911 * t571 - t908 * t570 - pkin(5) * (t583 * t911 + t584 * t908); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t873, 0, t874, 0, t849, t938, t948, pkin(5) * t948, 0, 0, t991, 0, t820, 0, -t1004, t1003, t1011, pkin(5) * t1011 + qJ(2) * t980 + t911 * t749, 0, 0, t1005, 0, -t1013, 0, -t1024, t1023, t1021, pkin(5) * t1021 + t911 * t604 + t908 * t605, t1002, t743 * t911 + t745 * t908, t695, -t1002, -t1015, 0, -pkin(5) * t1014 + t911 * t617 + t908 * t619, pkin(5) * t696 + t618 * t911 + t620 * t908, t908 * t612 + t911 * t611 + pkin(5) * (-t742 * t908 + t744 * t911), t908 * t582 + t911 * t580 + pkin(5) * (-t606 * t908 + t607 * t911), t661 * t911 + t663 * t908, t626 * t911 + t628 * t908, t641 * t911 + t644 * t908, t660 * t911 + t662 * t908, t642 * t911 + t645 * t908, t701 * t911 + t702 * t908, t908 * t581 + t911 * t579 + pkin(5) * (-t643 * t908 + t646 * t911), t908 * t578 + t911 * t577 + pkin(5) * (-t630 * t908 + t631 * t911), t908 * t575 + t911 * t574 + pkin(5) * (-t625 * t908 + t627 * t911), t908 * t571 + t911 * t570 + pkin(5) * (-t583 * t908 + t584 * t911); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t883, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t788, t787, 0, -t752, 0, 0, 0, 0, 0, t895, t698, t697, 0, t622, t885, t869, 0, t887, 0, 0, t665, t664, t629, t589, t764, t705, t722, t763, t723, t863, t598, t592, t588, t572; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t912, 0, 0, -g(3), -t882, 0, 0, 0, t872, 0, -t871, 0, t932, t838, t755, qJ(2) * t755, 0, 0, -t805, 0, -t801, 0, t1012, t731, t635, t605, -t770, t745, t760, t770, t761, 0, t619, t620, t612, t582, t663, t628, t644, t662, t645, t702, t581, t578, t575, t571; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, 0, qJDD(1), 0, g(3), 0, -t883, 0, 0, 0, t871, 0, t872, 0, -t838, t932, t950, t749, 0, 0, t801, 0, -t805, 0, -t731, t1012, t1010, t604, t767, t743, t757, -t767, -t759, 0, t617, t618, t611, t580, t661, t626, t641, t660, t642, t701, t579, t577, t574, t570; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t883, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t788, t787, 0, -t752, 0, 0, 0, 0, 0, t895, t698, t697, 0, t622, t885, t869, 0, t887, 0, 0, t665, t664, t629, t589, t764, t705, t722, t763, t723, t863, t598, t592, t588, t572; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t912, 0, 0, -t901, -t931, 0, 0, 0, -t860, 0, -t857, 0, t1006, t827, t686, pkin(6) * t686, t823, t800, t816, -t823, t817, 0, t658, t659, t652, t602, t711, t674, t692, t710, t693, t775, t599, t594, t586, t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, 0, qJDD(1), 0, t901, 0, t812, 0, 0, 0, t857, 0, -t860, 0, -t827, t1006, t951, t682, t822, t798, t813, -t822, -t815, 0, t656, t657, t651, t600, t709, t672, t689, t708, t690, t774, t593, t591, t585, t573; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t931, -t812, 0, 0, 0, 0, 0, 0, 0, t895, t937, t916, 0, -t683, t885, t869, 0, t887, 0, 0, t941, t925, t933, t952, t764, t705, t722, t763, t723, t863, t934, t935, t921, t917; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t895, 0, -t894, 0, 0, -t901, t750, 0, t954, t854, t845, -t954, t846, 0, t732, t733, t668, qJ(4) * t668, t766, t707, t725, t765, t726, -t902 * t877, t615, t613, t601, t587; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t894, 0, t895, 0, t901, 0, t751, 0, t875, -t856, -t886, -t875, -t963, 0, t716, t717, 0, pkin(3) * t668, -t786, -t738, -t777, -t785, -t778, t795, t637, t632, t603, t590; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t895, -t750, -t751, 0, 0, t885, t869, 0, t887, 0, 0, t953, t928, t942, t960, t764, t705, t722, t763, t723, t863, t943, t944, t924, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t886, t963, t875, 0, t888, 0, 0, t736, t716, 0, t784, t740, t780, -t999, t781, 0, t678, t676, t616, -pkin(7) * t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t886, -t971, t963, -t875, 0, -t736, 0, t717, 0, -t865, -t840, -t791, t865, t789, t877, t650, t648, -pkin(4) * t737, -pkin(4) * t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t875, t856, t886, t875, t963, 0, -t716, -t717, 0, 0, t786, t738, t777, t785, t778, -t795, t922, t923, t919, t940; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, t790, t829, -t945, t832, t945, 0, t699, t654, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t843, t792, t834, -t830, -t828, t843, -t699, 0, t655, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t865, t840, t791, -t865, -t789, -t877, -t654, -t655, 0, 0;];
m_new_reg = t1;
