% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:21
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:21:17
% EndTime: 2022-01-23 09:21:19
% DurationCPUTime: 2.24s
% Computational Cost: add. (8124->172), mult. (12134->252), div. (0->0), fcn. (7317->10), ass. (0->142)
t1150 = qJD(1) + qJD(3);
t1146 = t1150 ^ 2;
t1159 = sin(qJ(3));
t1147 = qJDD(1) + qJDD(3);
t1162 = cos(qJ(3));
t1176 = t1162 * t1147;
t1122 = t1159 * t1146 - t1176;
t1155 = sin(pkin(8));
t1157 = cos(pkin(8));
t1177 = t1159 * t1147;
t1168 = -t1162 * t1146 - t1177;
t1098 = t1157 * t1122 - t1155 * t1168;
t1160 = sin(qJ(1));
t1163 = cos(qJ(1));
t1189 = t1155 * t1122 + t1157 * t1168;
t1193 = t1160 * t1098 + t1163 * t1189;
t1192 = t1163 * t1098 - t1160 * t1189;
t1154 = sin(pkin(9));
t1148 = t1154 ^ 2;
t1156 = cos(pkin(9));
t1149 = t1156 ^ 2;
t1175 = t1148 + t1149;
t1119 = t1175 * t1146;
t1178 = t1156 * t1150;
t1133 = -qJD(5) + t1178;
t1186 = t1133 ^ 2;
t1185 = 2 * qJD(4);
t1158 = sin(qJ(5));
t1184 = t1147 * t1158;
t1161 = cos(qJ(5));
t1183 = t1147 * t1161;
t1182 = t1148 * t1146;
t1181 = t1150 * t1158;
t1180 = t1150 * t1161;
t1179 = t1154 * t1147;
t1137 = t1160 * g(1) - t1163 * g(2);
t1125 = qJDD(1) * pkin(1) + t1137;
t1138 = -t1163 * g(1) - t1160 * g(2);
t1164 = qJD(1) ^ 2;
t1126 = -t1164 * pkin(1) + t1138;
t1102 = t1155 * t1125 + t1157 * t1126;
t1100 = -t1164 * pkin(2) + t1102;
t1101 = t1157 * t1125 - t1155 * t1126;
t1167 = qJDD(1) * pkin(2) + t1101;
t1076 = t1162 * t1100 + t1159 * t1167;
t1139 = t1156 * t1147;
t1174 = t1139 - qJDD(5);
t1173 = t1133 * t1181;
t1072 = -t1146 * pkin(3) + t1147 * qJ(4) + t1076;
t1153 = -g(3) + qJDD(2);
t1062 = t1156 * t1072 + t1154 * t1153 + t1178 * t1185;
t1075 = -t1159 * t1100 + t1162 * t1167;
t1128 = -t1155 * qJDD(1) - t1157 * t1164;
t1129 = t1157 * qJDD(1) - t1155 * t1164;
t1172 = t1163 * t1128 - t1160 * t1129;
t1171 = t1158 * t1161 * t1182;
t1170 = -pkin(4) * t1156 - pkin(7) * t1154;
t1169 = t1160 * t1128 + t1163 * t1129;
t1069 = -t1147 * pkin(3) - t1146 * qJ(4) + qJDD(4) - t1075;
t1152 = t1161 ^ 2;
t1151 = t1158 ^ 2;
t1141 = t1156 * t1153;
t1132 = t1156 * t1146 * t1154;
t1131 = -t1160 * qJDD(1) - t1163 * t1164;
t1130 = t1163 * qJDD(1) - t1160 * t1164;
t1127 = t1154 * qJD(5) * t1181;
t1117 = t1175 * t1147;
t1114 = t1170 * t1150;
t1113 = t1156 * t1119;
t1112 = t1154 * t1119;
t1111 = (t1151 + t1152) * t1182;
t1110 = -t1151 * t1182 - t1186;
t1109 = -t1171 - t1174;
t1108 = -t1171 + t1174;
t1107 = -t1152 * t1182 - t1186;
t1106 = -t1162 * t1113 - t1156 * t1177;
t1105 = t1162 * t1112 + t1154 * t1177;
t1104 = -t1159 * t1113 + t1156 * t1176;
t1103 = t1159 * t1112 - t1154 * t1176;
t1095 = t1162 * t1117 - t1159 * t1119;
t1094 = t1159 * t1117 + t1162 * t1119;
t1090 = t1127 + (t1173 - t1183) * t1154;
t1089 = -t1127 + (t1173 + t1183) * t1154;
t1088 = (-t1184 + (-qJD(5) - t1133) * t1180) * t1154;
t1087 = (t1184 + (qJD(5) - t1133) * t1180) * t1154;
t1086 = -t1158 * t1109 + t1161 * t1110;
t1085 = t1161 * t1109 + t1158 * t1110;
t1084 = -t1158 * t1107 + t1161 * t1108;
t1083 = t1161 * t1107 + t1158 * t1108;
t1082 = -t1155 * t1104 + t1157 * t1106;
t1081 = -t1155 * t1103 + t1157 * t1105;
t1080 = t1157 * t1104 + t1155 * t1106;
t1079 = t1157 * t1103 + t1155 * t1105;
t1078 = -t1155 * t1101 + t1157 * t1102;
t1077 = t1157 * t1101 + t1155 * t1102;
t1074 = -t1155 * t1094 + t1157 * t1095;
t1073 = t1157 * t1094 + t1155 * t1095;
t1071 = t1161 * t1088 - t1158 * t1090;
t1070 = t1158 * t1088 + t1161 * t1090;
t1067 = t1156 * t1086 + t1154 * t1087;
t1066 = t1154 * t1086 - t1156 * t1087;
t1065 = t1147 * t1170 + t1069;
t1064 = t1156 * t1084 + t1154 * t1089;
t1063 = t1154 * t1084 - t1156 * t1089;
t1061 = t1141 + (-0.2e1 * qJD(4) * t1150 - t1072) * t1154;
t1060 = t1156 * t1071 - t1154 * t1111;
t1059 = t1154 * t1071 + t1156 * t1111;
t1058 = t1114 * t1178 + t1062;
t1057 = -t1141 + (t1072 + (t1185 + t1114) * t1150) * t1154;
t1056 = t1162 * t1067 + t1159 * t1085;
t1055 = t1159 * t1067 - t1162 * t1085;
t1054 = -t1159 * t1075 + t1162 * t1076;
t1053 = t1162 * t1075 + t1159 * t1076;
t1052 = t1162 * t1064 + t1159 * t1083;
t1051 = t1159 * t1064 - t1162 * t1083;
t1050 = t1162 * t1060 + t1159 * t1070;
t1049 = t1159 * t1060 - t1162 * t1070;
t1048 = -t1154 * t1061 + t1156 * t1062;
t1047 = t1156 * t1061 + t1154 * t1062;
t1046 = t1161 * t1058 + t1158 * t1065;
t1045 = -t1158 * t1058 + t1161 * t1065;
t1044 = -t1155 * t1055 + t1157 * t1056;
t1043 = t1157 * t1055 + t1155 * t1056;
t1042 = t1162 * t1048 + t1159 * t1069;
t1041 = t1159 * t1048 - t1162 * t1069;
t1040 = -t1155 * t1053 + t1157 * t1054;
t1039 = t1157 * t1053 + t1155 * t1054;
t1038 = -t1155 * t1051 + t1157 * t1052;
t1037 = t1157 * t1051 + t1155 * t1052;
t1036 = -t1155 * t1049 + t1157 * t1050;
t1035 = t1157 * t1049 + t1155 * t1050;
t1034 = -t1158 * t1045 + t1161 * t1046;
t1033 = t1161 * t1045 + t1158 * t1046;
t1032 = t1156 * t1034 + t1154 * t1057;
t1031 = t1154 * t1034 - t1156 * t1057;
t1030 = -t1155 * t1041 + t1157 * t1042;
t1029 = t1157 * t1041 + t1155 * t1042;
t1028 = t1162 * t1032 + t1159 * t1033;
t1027 = t1159 * t1032 - t1162 * t1033;
t1026 = -t1155 * t1027 + t1157 * t1028;
t1025 = t1157 * t1027 + t1155 * t1028;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1131, -t1130, 0, -t1160 * t1137 + t1163 * t1138, 0, 0, 0, 0, 0, 0, t1172, -t1169, 0, -t1160 * t1077 + t1163 * t1078, 0, 0, 0, 0, 0, 0, t1193, t1192, 0, -t1160 * t1039 + t1163 * t1040, 0, 0, 0, 0, 0, 0, -t1160 * t1080 + t1163 * t1082, -t1160 * t1079 + t1163 * t1081, -t1160 * t1073 + t1163 * t1074, -t1160 * t1029 + t1163 * t1030, 0, 0, 0, 0, 0, 0, -t1160 * t1043 + t1163 * t1044, -t1160 * t1037 + t1163 * t1038, -t1160 * t1035 + t1163 * t1036, -t1160 * t1025 + t1163 * t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1130, t1131, 0, t1163 * t1137 + t1160 * t1138, 0, 0, 0, 0, 0, 0, t1169, t1172, 0, t1163 * t1077 + t1160 * t1078, 0, 0, 0, 0, 0, 0, -t1192, t1193, 0, t1163 * t1039 + t1160 * t1040, 0, 0, 0, 0, 0, 0, t1163 * t1080 + t1160 * t1082, t1163 * t1079 + t1160 * t1081, t1163 * t1073 + t1160 * t1074, t1163 * t1029 + t1160 * t1030, 0, 0, 0, 0, 0, 0, t1163 * t1043 + t1160 * t1044, t1163 * t1037 + t1160 * t1038, t1163 * t1035 + t1160 * t1036, t1163 * t1025 + t1160 * t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1066, t1063, t1059, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1164, -qJDD(1), 0, t1138, 0, 0, 0, 0, 0, 0, t1128, -t1129, 0, t1078, 0, 0, 0, 0, 0, 0, t1189, t1098, 0, t1040, 0, 0, 0, 0, 0, 0, t1082, t1081, t1074, t1030, 0, 0, 0, 0, 0, 0, t1044, t1038, t1036, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1164, 0, t1137, 0, 0, 0, 0, 0, 0, t1129, t1128, 0, t1077, 0, 0, 0, 0, 0, 0, -t1098, t1189, 0, t1039, 0, 0, 0, 0, 0, 0, t1080, t1079, t1073, t1029, 0, 0, 0, 0, 0, 0, t1043, t1037, t1035, t1025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1066, t1063, t1059, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1164, -qJDD(1), 0, t1102, 0, 0, 0, 0, 0, 0, t1168, t1122, 0, t1054, 0, 0, 0, 0, 0, 0, t1106, t1105, t1095, t1042, 0, 0, 0, 0, 0, 0, t1056, t1052, t1050, t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1164, 0, t1101, 0, 0, 0, 0, 0, 0, -t1122, t1168, 0, t1053, 0, 0, 0, 0, 0, 0, t1104, t1103, t1094, t1041, 0, 0, 0, 0, 0, 0, t1055, t1051, t1049, t1027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1066, t1063, t1059, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1146, -t1147, 0, t1076, 0, 0, 0, 0, 0, 0, -t1113, t1112, t1117, t1048, 0, 0, 0, 0, 0, 0, t1067, t1064, t1060, t1032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1147, -t1146, 0, t1075, 0, 0, 0, 0, 0, 0, t1139, -t1179, t1119, -t1069, 0, 0, 0, 0, 0, 0, -t1085, -t1083, -t1070, -t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1153, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1066, t1063, t1059, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1149 * t1146, t1132, t1139, t1062, 0, 0, 0, 0, 0, 0, t1086, t1084, t1071, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1132, -t1182, -t1179, t1061, 0, 0, 0, 0, 0, 0, -t1087, -t1089, t1111, -t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1139, t1179, -t1119, t1069, 0, 0, 0, 0, 0, 0, t1085, t1083, t1070, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1110, t1108, t1088, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1109, t1107, t1090, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1087, t1089, -t1111, t1057;];
f_new_reg = t1;
