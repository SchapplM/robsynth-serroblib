% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:21
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:20:58
% EndTime: 2022-01-23 09:21:06
% DurationCPUTime: 7.92s
% Computational Cost: add. (31729->444), mult. (47250->671), div. (0->0), fcn. (28279->10), ass. (0->306)
t476 = (qJD(1) + qJD(3));
t471 = t476 ^ 2;
t472 = qJDD(1) + qJDD(3);
t485 = sin(qJ(3));
t488 = cos(qJ(3));
t435 = t471 * t488 + t472 * t485;
t438 = t471 * t485 - t472 * t488;
t481 = sin(pkin(8));
t483 = cos(pkin(8));
t381 = t435 * t483 - t438 * t481;
t479 = g(3) - qJDD(2);
t409 = pkin(6) * t435 - t479 * t488;
t554 = pkin(6) * t438 - t479 * t485;
t318 = qJ(2) * t381 + t409 * t483 - t481 * t554;
t385 = t435 * t481 + t438 * t483;
t486 = sin(qJ(1));
t489 = cos(qJ(1));
t332 = t381 * t486 + t385 * t489;
t561 = qJ(2) * t385 + t409 * t481 + t483 * t554;
t569 = pkin(5) * t332 + t318 * t486 + t489 * t561;
t553 = t381 * t489 - t385 * t486;
t568 = pkin(5) * t553 + t318 * t489 - t486 * t561;
t459 = g(1) * t486 - t489 * g(2);
t444 = qJDD(1) * pkin(1) + t459;
t460 = g(1) * t489 + g(2) * t486;
t490 = qJD(1) ^ 2;
t445 = -pkin(1) * t490 - t460;
t390 = t481 * t444 + t483 * t445;
t388 = -pkin(2) * t490 + t390;
t495 = t444 * t483 - t445 * t481;
t493 = qJDD(1) * pkin(2) + t495;
t336 = t485 * t388 - t488 * t493;
t337 = t488 * t388 + t485 * t493;
t505 = t336 * t485 + t488 * t337;
t277 = t336 * t488 - t337 * t485;
t533 = t277 * t483;
t236 = -t481 * t505 + t533;
t534 = t277 * t481;
t557 = t483 * t505 + t534;
t209 = t236 * t486 + t489 * t557;
t565 = t236 * t489 - t486 * t557;
t480 = sin(pkin(9));
t474 = t480 ^ 2;
t482 = cos(pkin(9));
t475 = t482 ^ 2;
t426 = (t474 + t475) * t482 * t471;
t513 = t482 * t488;
t393 = -t426 * t485 + t472 * t513;
t514 = t482 * t485;
t395 = t426 * t488 + t472 * t514;
t344 = t393 * t483 - t395 * t481;
t346 = t393 * t481 + t395 * t483;
t288 = t344 * t489 - t346 * t486;
t562 = t344 * t486 + t346 * t489;
t504 = t483 * t390 - t481 * t495;
t340 = -t390 * t481 - t483 * t495;
t529 = t340 * t489;
t558 = -t486 * t504 + t529;
t530 = t340 * t486;
t286 = t489 * t504 + t530;
t447 = qJDD(1) * t481 + t483 * t490;
t448 = qJDD(1) * t483 - t481 * t490;
t398 = -t447 * t486 + t489 * t448;
t420 = qJ(2) * t447 - t479 * t483;
t496 = -qJ(2) * t448 - t479 * t481;
t556 = -pkin(5) * t398 + t420 * t486 + t489 * t496;
t325 = -pkin(3) * t471 + qJ(4) * t472 + t337;
t538 = 2 * qJD(4);
t555 = (t476 * t538) + t325;
t540 = t489 * t447 + t448 * t486;
t551 = pkin(5) * t540 + t420 * t489 - t486 * t496;
t517 = t480 * t482;
t402 = t435 * t517;
t507 = t472 * t517;
t403 = -t471 * t480 * t514 + t488 * t507;
t350 = t402 * t483 + t403 * t481;
t353 = t402 * t481 - t403 * t483;
t550 = t350 * t489 - t353 * t486;
t549 = t350 * t486 + t353 * t489;
t484 = sin(qJ(5));
t487 = cos(qJ(5));
t412 = (qJD(5) * t476 * t487 + t472 * t484) * t480;
t520 = t476 * t482;
t455 = -qJD(5) + t520;
t521 = t476 * t480;
t511 = t455 * t521;
t423 = t487 * t511;
t369 = t423 - t412;
t548 = t369 * t484;
t508 = t484 * t521;
t413 = t487 * t480 * t472 - qJD(5) * t508;
t501 = t455 * t508;
t370 = t413 + t501;
t365 = t370 * t487;
t452 = t455 ^ 2;
t537 = pkin(1) * t479;
t536 = pkin(4) * t480;
t535 = pkin(4) * t482;
t466 = t472 * pkin(3);
t499 = -pkin(7) * t480 - t535;
t427 = t499 * t476;
t465 = t482 * t479;
t292 = t465 + (t325 + (t538 + t427) * t476) * t480;
t532 = t292 * t484;
t531 = t292 * t487;
t509 = t471 * t484 * t487;
t442 = t474 * t509;
t453 = t472 * t482 - qJDD(5);
t410 = -t442 + t453;
t528 = t410 * t484;
t527 = t410 * t487;
t411 = -t442 - t453;
t526 = t411 * t484;
t525 = t411 * t487;
t522 = t471 * t474;
t516 = t480 * t485;
t515 = t480 * t488;
t307 = -t480 * t479 + t555 * t482;
t293 = t427 * t520 + t307;
t320 = -t471 * qJ(4) + qJDD(4) + t336 - t466;
t310 = t472 * t499 + t320;
t252 = t487 * t293 + t484 * t310;
t478 = t487 ^ 2;
t510 = t478 * t522;
t506 = -t320 + t466;
t251 = t293 * t484 - t487 * t310;
t306 = t555 * t480 + t465;
t263 = t306 * t480 + t482 * t307;
t405 = -t459 * t486 - t489 * t460;
t473 = t480 * t474;
t500 = t473 * t509;
t450 = qJDD(1) * t489 - t486 * t490;
t498 = -pkin(5) * t450 - g(3) * t486;
t497 = t482 * t442;
t225 = -t251 * t487 + t252 * t484;
t226 = t251 * t484 + t252 * t487;
t262 = t306 * t482 - t307 * t480;
t404 = t459 * t489 - t460 * t486;
t477 = t484 ^ 2;
t463 = t475 * t471;
t462 = t475 * t472;
t461 = t474 * t472;
t454 = t477 * t522;
t449 = qJDD(1) * t486 + t489 * t490;
t434 = t463 - t522;
t433 = t463 + t522;
t431 = t462 - t461;
t430 = t462 + t461;
t428 = -pkin(5) * t449 + g(3) * t489;
t425 = (t475 * t480 + t473) * t471;
t422 = t454 - t510;
t421 = t454 + t510;
t416 = t452 - t510;
t415 = -t454 - t452;
t414 = t454 - t452;
t397 = -t510 - t452;
t394 = t425 * t488 + t472 * t516;
t391 = t425 * t485 - t472 * t515;
t380 = t431 * t488 - t434 * t485;
t379 = t430 * t488 - t433 * t485;
t378 = t431 * t485 + t434 * t488;
t377 = t430 * t485 + t433 * t488;
t373 = (-t477 - t478) * t511;
t372 = t501 - t413;
t368 = t423 + t412;
t367 = -t413 * t484 + t478 * t511;
t366 = t412 * t487 + t477 * t511;
t363 = t415 * t487 - t526;
t362 = t414 * t487 + t528;
t361 = -t416 * t484 + t525;
t360 = t415 * t484 + t525;
t359 = -t414 * t484 + t527;
t358 = -t416 * t487 - t526;
t357 = -t373 * t485 - t453 * t515;
t356 = t373 * t488 - t453 * t516;
t355 = -t397 * t484 + t527;
t354 = t397 * t487 + t528;
t349 = t365 * t482 + t500;
t348 = -t482 * t548 - t500;
t345 = -t391 * t481 + t394 * t483;
t342 = t391 * t483 + t394 * t481;
t335 = qJ(2) * t504 + t537;
t329 = -t378 * t481 + t380 * t483;
t328 = -t377 * t481 + t379 * t483;
t327 = t378 * t483 + t380 * t481;
t326 = t377 * t483 + t379 * t481;
t324 = t369 * t487 - t370 * t484;
t323 = -t368 * t487 - t372 * t484;
t322 = -t365 - t548;
t321 = -t368 * t484 + t372 * t487;
t314 = t363 * t482 - t369 * t480;
t313 = t362 * t482 - t368 * t480;
t312 = t361 * t482 - t372 * t480;
t311 = t363 * t480 + t369 * t482;
t309 = t355 * t482 + t370 * t480;
t308 = t355 * t480 - t370 * t482;
t302 = t349 * t488 - t367 * t485;
t301 = t348 * t488 - t366 * t485;
t300 = t349 * t485 + t367 * t488;
t299 = t348 * t485 + t366 * t488;
t298 = t324 * t482 - t422 * t480;
t297 = t323 * t482 - t421 * t480;
t296 = t323 * t480 + t421 * t482;
t295 = -t356 * t481 + t357 * t483;
t294 = t356 * t483 + t357 * t481;
t289 = -t342 * t486 + t345 * t489;
t287 = t342 * t489 + t345 * t486;
t284 = t314 * t488 + t360 * t485;
t283 = t313 * t488 - t359 * t485;
t282 = t312 * t488 - t358 * t485;
t281 = t314 * t485 - t360 * t488;
t280 = t313 * t485 + t359 * t488;
t279 = t312 * t485 + t358 * t488;
t274 = pkin(2) * t479 + pkin(6) * t505;
t273 = t309 * t488 + t354 * t485;
t272 = t309 * t485 - t354 * t488;
t271 = -t326 * t486 + t328 * t489;
t270 = t326 * t489 + t328 * t486;
t269 = -pkin(7) * t360 + t532;
t268 = -pkin(7) * t354 + t531;
t267 = t298 * t488 - t322 * t485;
t266 = t297 * t488 + t321 * t485;
t265 = t298 * t485 + t322 * t488;
t264 = t297 * t485 - t321 * t488;
t260 = -t300 * t481 + t302 * t483;
t259 = -t299 * t481 + t301 * t483;
t258 = t300 * t483 + t302 * t481;
t257 = t299 * t483 + t301 * t481;
t256 = -pkin(6) * t391 - t307 * t485 + t320 * t513;
t255 = -pkin(6) * t393 - t306 * t485 + t320 * t515;
t254 = pkin(6) * t394 + t307 * t488 + t320 * t514;
t253 = -pkin(6) * t395 + t306 * t488 + t320 * t516;
t250 = -pkin(6) * t377 + t262 * t488;
t249 = pkin(6) * t379 + t262 * t485;
t248 = -pkin(4) * t360 + t251;
t247 = -pkin(4) * t354 + t252;
t246 = -t281 * t481 + t284 * t483;
t245 = -t280 * t481 + t283 * t483;
t244 = -t279 * t481 + t282 * t483;
t243 = t281 * t483 + t284 * t481;
t242 = t280 * t483 + t283 * t481;
t241 = t279 * t483 + t282 * t481;
t240 = t263 * t488 + t320 * t485;
t239 = t263 * t485 - t320 * t488;
t238 = -pkin(3) * t311 - pkin(4) * t369 - pkin(7) * t363 + t531;
t233 = -pkin(3) * t308 + pkin(4) * t370 - pkin(7) * t355 - t532;
t232 = -t272 * t481 + t273 * t483;
t231 = t272 * t483 + t273 * t481;
t230 = -t265 * t481 + t267 * t483;
t229 = -t264 * t481 + t266 * t483;
t228 = t265 * t483 + t267 * t481;
t227 = t264 * t483 + t266 * t481;
t224 = -qJ(2) * t342 - t254 * t481 + t256 * t483;
t223 = -qJ(2) * t344 - t253 * t481 + t255 * t483;
t222 = qJ(2) * t345 + t254 * t483 + t256 * t481;
t221 = -qJ(2) * t346 + t253 * t483 + t255 * t481;
t220 = -pkin(7) * t321 - t225;
t219 = -qJ(4) * t311 - t248 * t480 + t269 * t482;
t218 = -qJ(4) * t308 - t247 * t480 + t268 * t482;
t217 = -qJ(2) * t326 - t249 * t481 + t250 * t483;
t216 = qJ(2) * t328 + t249 * t483 + t250 * t481;
t215 = t226 * t482 + t292 * t480;
t214 = t226 * t480 - t292 * t482;
t213 = -t243 * t486 + t246 * t489;
t212 = t243 * t489 + t246 * t486;
t211 = -t239 * t481 + t240 * t483;
t210 = t239 * t483 + t240 * t481;
t207 = pkin(6) * t533 + qJ(2) * t236 - t274 * t481;
t206 = pkin(6) * t534 + qJ(2) * t557 + t274 * t483 + t537;
t205 = -t231 * t486 + t232 * t489;
t204 = t231 * t489 + t232 * t486;
t203 = -pkin(3) * t296 - pkin(4) * t421 - pkin(7) * t323 - t226;
t202 = -pkin(6) * t239 - (pkin(3) * t485 - qJ(4) * t488) * t262;
t201 = -qJ(4) * t296 + t220 * t482 + t321 * t536;
t200 = -t227 * t486 + t229 * t489;
t199 = t227 * t489 + t229 * t486;
t198 = pkin(6) * t240 - (-pkin(3) * t488 - qJ(4) * t485 - pkin(2)) * t262;
t197 = -pkin(6) * t281 + t219 * t488 - t238 * t485;
t196 = t215 * t488 + t225 * t485;
t195 = t215 * t485 - t225 * t488;
t194 = -pkin(6) * t272 + t218 * t488 - t233 * t485;
t193 = -pkin(2) * t311 + pkin(6) * t284 + t219 * t485 + t238 * t488;
t192 = -pkin(2) * t308 + pkin(6) * t273 + t218 * t485 + t233 * t488;
t191 = -pkin(3) * t214 + pkin(4) * t292 - pkin(7) * t226;
t190 = -t210 * t486 + t211 * t489;
t189 = t210 * t489 + t211 * t486;
t188 = -qJ(4) * t214 + (-pkin(7) * t482 + t536) * t225;
t187 = -pkin(6) * t264 + t201 * t488 - t203 * t485;
t186 = -pkin(2) * t296 + pkin(6) * t266 + t201 * t485 + t203 * t488;
t185 = -t195 * t481 + t196 * t483;
t184 = t195 * t483 + t196 * t481;
t183 = -qJ(2) * t210 - t198 * t481 + t202 * t483;
t182 = -qJ(2) * t243 - t193 * t481 + t197 * t483;
t181 = pkin(1) * t262 + qJ(2) * t211 + t198 * t483 + t202 * t481;
t180 = -pkin(1) * t311 + qJ(2) * t246 + t193 * t483 + t197 * t481;
t179 = -qJ(2) * t231 - t192 * t481 + t194 * t483;
t178 = -pkin(1) * t308 + qJ(2) * t232 + t192 * t483 + t194 * t481;
t177 = -pkin(6) * t195 + t188 * t488 - t191 * t485;
t176 = -qJ(2) * t227 - t186 * t481 + t187 * t483;
t175 = -pkin(1) * t296 + qJ(2) * t229 + t186 * t483 + t187 * t481;
t174 = -t184 * t486 + t185 * t489;
t173 = t184 * t489 + t185 * t486;
t172 = -pkin(2) * t214 + pkin(6) * t196 + t188 * t485 + t191 * t488;
t171 = -qJ(2) * t184 - t172 * t481 + t177 * t483;
t170 = -pkin(1) * t214 + qJ(2) * t185 + t172 * t483 + t177 * t481;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t449, -t450, 0, t405, 0, 0, 0, 0, 0, 0, -t540, -t398, 0, t286, 0, 0, 0, 0, 0, 0, -t553, t332, 0, t209, 0, 0, 0, 0, 0, 0, -t562, t289, t271, t190, 0, 0, 0, 0, 0, 0, t213, t205, t200, t174; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t450, -t449, 0, t404, 0, 0, 0, 0, 0, 0, t398, -t540, 0, -t558, 0, 0, 0, 0, 0, 0, -t332, -t553, 0, -t565, 0, 0, 0, 0, 0, 0, t288, t287, t270, t189, 0, 0, 0, 0, 0, 0, t212, t204, t199, t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t479, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t479, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t262, 0, 0, 0, 0, 0, 0, t311, t308, t296, t214; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t450, 0, -t449, 0, t498, -t428, -t404, -pkin(5) * t404, 0, 0, t398, 0, -t540, 0, t556, t551, t558, pkin(5) * t558 + qJ(2) * t529 - t335 * t486, 0, 0, -t332, 0, -t553, 0, t569, t568, t565, pkin(5) * t565 - t206 * t486 + t207 * t489, -t549, -t327 * t486 + t329 * t489, t289, t549, t562, 0, -pkin(5) * t288 - t221 * t486 + t223 * t489, -pkin(5) * t287 - t222 * t486 + t224 * t489, -pkin(5) * t270 - t216 * t486 + t217 * t489, -pkin(5) * t189 - t181 * t486 + t183 * t489, -t258 * t486 + t260 * t489, -t228 * t486 + t230 * t489, -t241 * t486 + t244 * t489, -t257 * t486 + t259 * t489, -t242 * t486 + t245 * t489, -t294 * t486 + t295 * t489, -pkin(5) * t212 - t180 * t486 + t182 * t489, -pkin(5) * t204 - t178 * t486 + t179 * t489, -pkin(5) * t199 - t175 * t486 + t176 * t489, -pkin(5) * t173 - t170 * t486 + t171 * t489; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t449, 0, t450, 0, t428, t498, t405, pkin(5) * t405, 0, 0, t540, 0, t398, 0, -t551, t556, t286, pkin(5) * t286 + qJ(2) * t530 + t335 * t489, 0, 0, t553, 0, -t332, 0, -t568, t569, t209, pkin(5) * t209 + t206 * t489 + t207 * t486, t550, t327 * t489 + t329 * t486, t287, -t550, -t288, 0, -pkin(5) * t562 + t221 * t489 + t223 * t486, pkin(5) * t289 + t222 * t489 + t224 * t486, pkin(5) * t271 + t216 * t489 + t217 * t486, pkin(5) * t190 + t181 * t489 + t183 * t486, t258 * t489 + t260 * t486, t228 * t489 + t230 * t486, t241 * t489 + t244 * t486, t257 * t489 + t259 * t486, t242 * t489 + t245 * t486, t294 * t489 + t295 * t486, pkin(5) * t213 + t180 * t489 + t182 * t486, pkin(5) * t205 + t178 * t489 + t179 * t486, pkin(5) * t200 + t175 * t489 + t176 * t486, pkin(5) * t174 + t170 * t489 + t171 * t486; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t459, t460, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t448 + t495, -pkin(1) * t447 - t390, 0, -pkin(1) * t340, 0, 0, 0, 0, 0, t472, -pkin(1) * t385 - pkin(2) * t438 - t336, -pkin(1) * t381 - pkin(2) * t435 - t337, 0, -pkin(1) * t236 - pkin(2) * t277, t461, 0.2e1 * t507, 0, t462, 0, 0, pkin(1) * t344 + pkin(2) * t393 - qJ(4) * t426 + t482 * t506, pkin(1) * t342 + pkin(2) * t391 + qJ(4) * t425 - t480 * t506, pkin(1) * t326 + pkin(2) * t377 + pkin(3) * t433 + qJ(4) * t430 + t263, pkin(1) * t210 + pkin(2) * t239 - pkin(3) * t320 + qJ(4) * t263, t365 * t480 - t497, t324 * t480 + t422 * t482, t361 * t480 + t372 * t482, -t480 * t548 + t497, t362 * t480 + t368 * t482, t482 * t453, pkin(1) * t243 + pkin(2) * t281 - pkin(3) * t360 + qJ(4) * t314 + t248 * t482 + t269 * t480, pkin(1) * t231 + pkin(2) * t272 - pkin(3) * t354 + qJ(4) * t309 + t247 * t482 + t268 * t480, pkin(1) * t227 + pkin(2) * t264 + qJ(4) * t297 + t480 * t220 + (-pkin(3) - t535) * t321, pkin(1) * t184 + pkin(2) * t195 + qJ(4) * t215 + (-pkin(3) + t499) * t225;];
tauB_reg = t1;
