% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:03
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:03:06
% EndTime: 2022-01-20 11:03:21
% DurationCPUTime: 13.59s
% Computational Cost: add. (78125->557), mult. (109665->855), div. (0->0), fcn. (77666->10), ass. (0->380)
t649 = cos(qJ(2));
t681 = (qJD(1) + qJD(2));
t679 = t681 ^ 2;
t639 = qJDD(1) + qJDD(2);
t645 = sin(qJ(2));
t694 = t645 * t639;
t613 = t649 * t679 + t694;
t669 = t645 * t679;
t686 = t649 * t639;
t616 = t669 - t686;
t646 = sin(qJ(1));
t650 = cos(qJ(1));
t569 = t646 * t613 + t650 * t616;
t595 = pkin(6) * t613 - t649 * g(3);
t718 = pkin(6) * t616 - t645 * g(3);
t728 = pkin(5) * t569 + t646 * t595 + t650 * t718;
t661 = t650 * t613 - t646 * t616;
t727 = pkin(5) * t661 + t650 * t595 - t646 * t718;
t626 = t650 * g(1) + t646 * g(2);
t652 = qJD(1) ^ 2;
t619 = -t652 * pkin(1) - t626;
t625 = t646 * g(1) - t650 * g(2);
t659 = qJDD(1) * pkin(1) + t625;
t579 = t649 * t619 + t645 * t659;
t719 = -t679 * pkin(2) + t639 * qJ(3) + (2 * qJD(3) * t681) + t579;
t578 = t645 * t619 - t649 * t659;
t671 = t645 * t578 + t649 * t579;
t528 = t649 * t578 - t645 * t579;
t685 = t650 * t528;
t724 = -t646 * t671 + t685;
t693 = t646 * t528;
t476 = t650 * t671 + t693;
t643 = sin(qJ(5));
t641 = sin(pkin(9));
t642 = cos(pkin(9));
t648 = cos(qJ(4));
t668 = t648 * t681;
t644 = sin(qJ(4));
t670 = t644 * t681;
t599 = t641 * t670 - t642 * t668;
t601 = t641 * t668 + t642 * t670;
t647 = cos(qJ(5));
t545 = t647 * t599 + t643 * t601;
t547 = -t643 * t599 + t647 * t601;
t497 = t547 * t545;
t680 = qJDD(4) + qJDD(5);
t713 = -t497 + t680;
t723 = t643 * t713;
t562 = t601 * t599;
t711 = qJDD(4) - t562;
t722 = t644 * t711;
t721 = t647 * t713;
t720 = t648 * t711;
t655 = t642 ^ 2;
t632 = t655 * t679;
t653 = t641 ^ 2;
t667 = t653 * t679;
t611 = t667 + t632;
t603 = t611 * t642;
t674 = t642 * t686;
t574 = -t645 * t603 + t674;
t576 = t649 * t603 + t642 * t694;
t523 = t650 * t574 - t646 * t576;
t717 = t646 * t574 + t650 * t576;
t714 = (t648 * t641 + t644 * t642) * t639;
t640 = qJD(4) + qJD(5);
t540 = t640 * t545;
t706 = t639 * t642;
t596 = t644 * t641 * t639 - t648 * t706;
t683 = t601 * qJD(4);
t557 = -t596 - t683;
t684 = t599 * qJD(4);
t559 = t714 - t684;
t657 = t545 * qJD(5) - t643 * t557 - t647 * t559;
t712 = -t540 - t657;
t672 = -t647 * t557 + t643 * t559;
t440 = (qJD(5) - t640) * t547 + t672;
t543 = t545 ^ 2;
t544 = t547 ^ 2;
t710 = t599 ^ 2;
t598 = t601 ^ 2;
t637 = t640 ^ 2;
t633 = t639 * pkin(2);
t709 = t642 * g(3);
t705 = t640 * t643;
t704 = t640 * t647;
t509 = -t709 + (t679 * t642 * pkin(3) - t639 * pkin(7) - t719) * t641;
t535 = -t641 * g(3) + t719 * t642;
t510 = -pkin(3) * t632 + pkin(7) * t706 + t535;
t462 = -t648 * t509 + t644 * t510;
t463 = t644 * t509 + t648 * t510;
t404 = -t648 * t462 + t644 * t463;
t703 = t641 * t404;
t702 = t641 * t642;
t701 = t642 * t404;
t551 = -t679 * qJ(3) + qJDD(3) + t578 - t633;
t530 = -pkin(3) * t706 - t611 * pkin(7) + t551;
t584 = qJD(4) * pkin(4) - t601 * pkin(8);
t453 = -t557 * pkin(4) - t710 * pkin(8) + t601 * t584 + t530;
t700 = t643 * t453;
t494 = t497 + t680;
t699 = t643 * t494;
t413 = (-t559 - t684) * pkin(8) + t711 * pkin(4) - t462;
t417 = -t710 * pkin(4) + t557 * pkin(8) - qJD(4) * t584 + t463;
t370 = -t647 * t413 + t643 * t417;
t371 = t643 * t413 + t647 * t417;
t334 = -t647 * t370 + t643 * t371;
t698 = t644 * t334;
t697 = t644 * t530;
t554 = qJDD(4) + t562;
t696 = t644 * t554;
t695 = t645 * t551;
t692 = t647 * t453;
t691 = t647 * t494;
t690 = t648 * t334;
t689 = t648 * t530;
t688 = t648 * t554;
t687 = t649 * t551;
t678 = t645 * t497;
t677 = t645 * t562;
t676 = t649 * t497;
t675 = t649 * t562;
t673 = -t551 + t633;
t335 = t643 * t370 + t647 * t371;
t405 = t644 * t462 + t648 * t463;
t534 = t719 * t641 + t709;
t486 = t641 * t534 + t642 * t535;
t583 = -t646 * t625 - t650 * t626;
t621 = t650 * qJDD(1) - t646 * t652;
t664 = -pkin(5) * t621 - t646 * g(3);
t485 = t642 * t534 - t641 * t535;
t580 = t613 * t702;
t581 = t641 * t674 - t669 * t702;
t663 = t650 * t580 + t646 * t581;
t662 = t646 * t580 - t650 * t581;
t582 = t650 * t625 - t646 * t626;
t651 = qJD(4) ^ 2;
t631 = t655 * t639;
t630 = t653 * t639;
t620 = t646 * qJDD(1) + t650 * t652;
t612 = -t667 + t632;
t607 = t631 - t630;
t606 = t631 + t630;
t605 = -pkin(5) * t620 + t650 * g(3);
t602 = t611 * t641;
t587 = -t598 - t651;
t586 = -t598 + t651;
t585 = -t651 + t710;
t575 = t649 * t602 + t641 * t694;
t572 = t645 * t602 - t641 * t686;
t566 = t649 * t607 - t645 * t612;
t565 = t649 * t606 - t645 * t611;
t564 = t645 * t607 + t649 * t612;
t563 = t645 * t606 + t649 * t611;
t560 = -t598 + t710;
t558 = t714 - 0.2e1 * t684;
t556 = t596 + 0.2e1 * t683;
t552 = -t651 - t710;
t542 = (-t599 * t648 + t601 * t644) * qJD(4);
t541 = (-t599 * t644 - t601 * t648) * qJD(4);
t538 = -t544 + t637;
t537 = t543 - t637;
t536 = -t544 - t637;
t533 = -t598 - t710;
t524 = -t646 * t572 + t650 * t575;
t522 = t650 * t572 + t646 * t575;
t521 = t648 * t559 - t644 * t683;
t520 = t644 * t559 + t648 * t683;
t519 = -t644 * t557 + t648 * t684;
t518 = t648 * t557 + t644 * t684;
t517 = -t644 * t587 - t688;
t516 = -t644 * t586 + t720;
t515 = t648 * t585 - t696;
t514 = t648 * t587 - t696;
t513 = t648 * t586 + t722;
t512 = t644 * t585 + t688;
t511 = pkin(1) * g(3) + pkin(6) * t671;
t505 = -t646 * t563 + t650 * t565;
t504 = t650 * t563 + t646 * t565;
t503 = -t648 * t556 - t644 * t558;
t502 = -t596 * t648 + t644 * t714;
t501 = -t644 * t556 + t648 * t558;
t500 = -t596 * t644 - t648 * t714;
t499 = t648 * t552 - t722;
t498 = t644 * t552 + t720;
t496 = -t544 + t543;
t492 = -t637 - t543;
t491 = -t641 * t541 + t642 * t542;
t490 = (-t545 * t647 + t547 * t643) * t640;
t489 = (-t545 * t643 - t547 * t647) * t640;
t488 = t645 * qJDD(4) + t649 * t491;
t487 = -t649 * qJDD(4) + t645 * t491;
t482 = -t547 * qJD(5) - t672;
t481 = -t543 - t544;
t480 = -pkin(6) * t572 - t645 * t535 + t642 * t687;
t479 = -pkin(6) * t574 - t645 * t534 + t641 * t687;
t478 = pkin(6) * t575 + t649 * t535 + t642 * t695;
t477 = -pkin(6) * t576 + t649 * t534 + t641 * t695;
t474 = -pkin(7) * t514 + t689;
t473 = -t641 * t520 + t642 * t521;
t472 = -t641 * t518 + t642 * t519;
t471 = -t641 * t514 + t642 * t517;
t470 = -t641 * t513 + t642 * t516;
t469 = -t641 * t512 + t642 * t515;
t468 = t642 * t514 + t641 * t517;
t467 = t647 * t537 - t699;
t466 = -t643 * t538 + t721;
t465 = t643 * t537 + t691;
t464 = t647 * t538 + t723;
t461 = -t643 * t536 - t691;
t460 = t647 * t536 - t699;
t458 = -pkin(7) * t498 + t697;
t457 = -pkin(6) * t563 + t649 * t485;
t456 = pkin(6) * t565 + t645 * t485;
t455 = t649 * t486 + t695;
t454 = t645 * t486 - t687;
t452 = t649 * t470 + t645 * t714;
t451 = t649 * t469 - t645 * t596;
t450 = t645 * t470 - t649 * t714;
t449 = t645 * t469 + t649 * t596;
t448 = -pkin(3) * t558 + pkin(7) * t517 + t697;
t447 = -t641 * t501 + t642 * t503;
t446 = -t641 * t500 + t642 * t502;
t445 = t642 * t500 + t641 * t502;
t444 = -t540 + t657;
t439 = (qJD(5) + t640) * t547 + t672;
t438 = -t641 * t498 + t642 * t499;
t437 = t642 * t498 + t641 * t499;
t436 = t649 * t473 + t677;
t435 = t649 * t472 - t677;
t434 = t645 * t473 - t675;
t433 = t645 * t472 + t675;
t432 = -t547 * t705 - t647 * t657;
t431 = t547 * t704 - t643 * t657;
t430 = -t643 * t482 + t545 * t704;
t429 = t647 * t482 + t545 * t705;
t428 = t649 * t471 + t645 * t558;
t427 = t645 * t471 - t649 * t558;
t426 = t647 * t492 - t723;
t425 = t643 * t492 + t721;
t424 = -pkin(3) * t556 + pkin(7) * t499 - t689;
t423 = -t644 * t489 + t648 * t490;
t422 = t648 * t489 + t644 * t490;
t421 = t649 * t447 - t645 * t560;
t420 = t645 * t447 + t649 * t560;
t419 = t649 * t438 + t645 * t556;
t418 = t645 * t438 - t649 * t556;
t415 = t649 * t446 + t645 * t533;
t414 = t645 * t446 - t649 * t533;
t410 = -pkin(2) * t445 - pkin(3) * t500;
t409 = -t644 * t465 + t648 * t467;
t408 = -t644 * t464 + t648 * t466;
t407 = t648 * t465 + t644 * t467;
t406 = t648 * t464 + t644 * t466;
t403 = -t644 * t460 + t648 * t461;
t402 = t648 * t460 + t644 * t461;
t401 = -pkin(8) * t460 + t692;
t400 = -t646 * t454 + t650 * t455;
t399 = t650 * t454 + t646 * t455;
t398 = -pkin(8) * t425 + t700;
t397 = -pkin(2) * t468 - pkin(3) * t514 + t463;
t396 = -t440 * t647 - t643 * t444;
t395 = -t647 * t439 - t643 * t712;
t394 = -t440 * t643 + t647 * t444;
t393 = -t643 * t439 + t647 * t712;
t392 = -pkin(3) * t530 + pkin(7) * t405;
t391 = -t644 * t431 + t648 * t432;
t390 = -t644 * t429 + t648 * t430;
t389 = t648 * t431 + t644 * t432;
t388 = t648 * t429 + t644 * t430;
t387 = -t646 * t427 + t650 * t428;
t386 = t650 * t427 + t646 * t428;
t385 = -t644 * t425 + t648 * t426;
t384 = t648 * t425 + t644 * t426;
t383 = -pkin(7) * t500 - t404;
t382 = -pkin(6) * t454 - (pkin(2) * t645 - qJ(3) * t649) * t485;
t381 = -pkin(2) * t437 - pkin(3) * t498 + t462;
t380 = -t641 * t422 + t642 * t423;
t379 = t649 * t380 + t645 * t680;
t378 = t645 * t380 - t649 * t680;
t377 = -pkin(3) * t533 + pkin(7) * t502 + t405;
t376 = -t646 * t418 + t650 * t419;
t375 = t650 * t418 + t646 * t419;
t374 = -qJ(3) * t468 - t641 * t448 + t642 * t474;
t373 = -t646 * t414 + t650 * t415;
t372 = t650 * t414 + t646 * t415;
t368 = -pkin(4) * t712 + pkin(8) * t461 + t700;
t367 = pkin(6) * t455 - (-pkin(2) * t649 - qJ(3) * t645 - pkin(1)) * t485;
t366 = -qJ(3) * t437 - t641 * t424 + t642 * t458;
t365 = -pkin(4) * t439 + pkin(8) * t426 - t692;
t364 = -t641 * t407 + t642 * t409;
t363 = -t641 * t406 + t642 * t408;
t362 = t642 * t405 - t703;
t361 = t641 * t405 + t701;
t360 = -t641 * t402 + t642 * t403;
t359 = t642 * t402 + t641 * t403;
t358 = t649 * t362 + t645 * t530;
t357 = t645 * t362 - t649 * t530;
t356 = -t644 * t394 + t648 * t396;
t355 = -t644 * t393 + t648 * t395;
t354 = t648 * t394 + t644 * t396;
t353 = t648 * t393 + t644 * t395;
t352 = -t641 * t389 + t642 * t391;
t351 = -t641 * t388 + t642 * t390;
t350 = -t641 * t384 + t642 * t385;
t349 = t642 * t384 + t641 * t385;
t348 = t649 * t364 - t645 * t440;
t347 = t649 * t363 - t645 * t444;
t346 = t645 * t364 + t649 * t440;
t345 = t645 * t363 + t649 * t444;
t344 = t649 * t360 + t645 * t712;
t343 = t645 * t360 - t649 * t712;
t342 = t649 * t352 + t678;
t341 = t649 * t351 - t678;
t340 = t645 * t352 - t676;
t339 = t645 * t351 + t676;
t338 = -pkin(2) * t361 - pkin(3) * t404;
t337 = t649 * t350 + t645 * t439;
t336 = t645 * t350 - t649 * t439;
t333 = -pkin(6) * t427 + t649 * t374 - t645 * t397;
t332 = -qJ(3) * t445 - t641 * t377 + t642 * t383;
t331 = -pkin(7) * t402 - t644 * t368 + t648 * t401;
t330 = -pkin(4) * t453 + pkin(8) * t335;
t329 = -pkin(1) * t468 + pkin(6) * t428 + t645 * t374 + t649 * t397;
t328 = -pkin(6) * t418 + t649 * t366 - t645 * t381;
t327 = -pkin(7) * t384 - t644 * t365 + t648 * t398;
t326 = -pkin(7) * t701 - qJ(3) * t361 - t641 * t392;
t325 = -pkin(3) * t712 + pkin(7) * t403 + t648 * t368 + t644 * t401;
t324 = -pkin(8) * t394 - t334;
t323 = -pkin(1) * t437 + pkin(6) * t419 + t645 * t366 + t649 * t381;
t322 = -t646 * t357 + t650 * t358;
t321 = t650 * t357 + t646 * t358;
t320 = -t641 * t354 + t642 * t356;
t319 = -t641 * t353 + t642 * t355;
t318 = t642 * t354 + t641 * t356;
t317 = -pkin(3) * t439 + pkin(7) * t385 + t648 * t365 + t644 * t398;
t316 = -pkin(4) * t481 + pkin(8) * t396 + t335;
t315 = -pkin(6) * t414 + t649 * t332 - t645 * t410;
t314 = t649 * t319 - t645 * t496;
t313 = t645 * t319 + t649 * t496;
t312 = -pkin(2) * t359 - pkin(3) * t402 - pkin(4) * t460 + t371;
t311 = t649 * t320 + t645 * t481;
t310 = t645 * t320 - t649 * t481;
t309 = -t646 * t343 + t650 * t344;
t308 = t650 * t343 + t646 * t344;
t307 = -pkin(1) * t445 + pkin(6) * t415 + t645 * t332 + t649 * t410;
t306 = -pkin(2) * t349 - pkin(3) * t384 - pkin(4) * t425 + t370;
t305 = -t646 * t336 + t650 * t337;
t304 = t650 * t336 + t646 * t337;
t303 = t648 * t335 - t698;
t302 = t644 * t335 + t690;
t301 = -pkin(2) * t318 - pkin(3) * t354 - pkin(4) * t394;
t300 = -pkin(6) * t357 + t649 * t326 - t645 * t338;
t299 = -qJ(3) * t359 - t641 * t325 + t642 * t331;
t298 = -t646 * t310 + t650 * t311;
t297 = t650 * t310 + t646 * t311;
t296 = -pkin(1) * t361 + pkin(6) * t358 + t645 * t326 + t649 * t338;
t295 = -qJ(3) * t349 - t641 * t317 + t642 * t327;
t294 = -pkin(7) * t354 - t644 * t316 + t648 * t324;
t293 = -pkin(3) * t481 + pkin(7) * t356 + t648 * t316 + t644 * t324;
t292 = -t641 * t302 + t642 * t303;
t291 = t642 * t302 + t641 * t303;
t290 = -pkin(7) * t302 - pkin(8) * t690 - t644 * t330;
t289 = t649 * t292 + t645 * t453;
t288 = t645 * t292 - t649 * t453;
t287 = -pkin(3) * t453 + pkin(7) * t303 - pkin(8) * t698 + t648 * t330;
t286 = -pkin(6) * t343 + t649 * t299 - t645 * t312;
t285 = -pkin(1) * t359 + pkin(6) * t344 + t645 * t299 + t649 * t312;
t284 = -pkin(6) * t336 + t649 * t295 - t645 * t306;
t283 = -pkin(2) * t291 - pkin(3) * t302 - pkin(4) * t334;
t282 = -pkin(1) * t349 + pkin(6) * t337 + t645 * t295 + t649 * t306;
t281 = -t646 * t288 + t650 * t289;
t280 = t650 * t288 + t646 * t289;
t279 = -qJ(3) * t318 - t641 * t293 + t642 * t294;
t278 = -qJ(3) * t291 - t641 * t287 + t642 * t290;
t277 = -pkin(6) * t310 + t649 * t279 - t645 * t301;
t276 = -pkin(1) * t318 + pkin(6) * t311 + t645 * t279 + t649 * t301;
t275 = -pkin(6) * t288 + t649 * t278 - t645 * t283;
t274 = -pkin(1) * t291 + pkin(6) * t289 + t645 * t278 + t649 * t283;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t620, -t621, 0, t583, 0, 0, 0, 0, 0, 0, -t661, t569, 0, t476, 0, 0, 0, 0, 0, 0, -t717, t524, t505, t400, 0, 0, 0, 0, 0, 0, t376, t387, t373, t322, 0, 0, 0, 0, 0, 0, t305, t309, t298, t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t621, -t620, 0, t582, 0, 0, 0, 0, 0, 0, -t569, -t661, 0, -t724, 0, 0, 0, 0, 0, 0, t523, t522, t504, t399, 0, 0, 0, 0, 0, 0, t375, t386, t372, t321, 0, 0, 0, 0, 0, 0, t304, t308, t297, t280; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, 0, 0, 0, 0, 0, 0, t437, t468, t445, t361, 0, 0, 0, 0, 0, 0, t349, t359, t318, t291; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t621, 0, -t620, 0, t664, -t605, -t582, -pkin(5) * t582, 0, 0, -t569, 0, -t661, 0, t728, t727, t724, pkin(5) * t724 + pkin(6) * t685 - t646 * t511, -t662, -t646 * t564 + t650 * t566, t524, t662, t717, 0, -pkin(5) * t523 - t646 * t477 + t650 * t479, -pkin(5) * t522 - t646 * t478 + t650 * t480, -pkin(5) * t504 - t646 * t456 + t650 * t457, -pkin(5) * t399 - t646 * t367 + t650 * t382, -t646 * t434 + t650 * t436, -t646 * t420 + t650 * t421, -t646 * t450 + t650 * t452, -t646 * t433 + t650 * t435, -t646 * t449 + t650 * t451, -t646 * t487 + t650 * t488, -pkin(5) * t375 - t646 * t323 + t650 * t328, -pkin(5) * t386 - t646 * t329 + t650 * t333, -pkin(5) * t372 - t646 * t307 + t650 * t315, -pkin(5) * t321 - t646 * t296 + t650 * t300, -t646 * t340 + t650 * t342, -t646 * t313 + t650 * t314, -t646 * t345 + t650 * t347, -t646 * t339 + t650 * t341, -t646 * t346 + t650 * t348, -t646 * t378 + t650 * t379, -pkin(5) * t304 - t646 * t282 + t650 * t284, -pkin(5) * t308 - t646 * t285 + t650 * t286, -pkin(5) * t297 - t646 * t276 + t650 * t277, -pkin(5) * t280 - t646 * t274 + t650 * t275; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t620, 0, t621, 0, t605, t664, t583, pkin(5) * t583, 0, 0, t661, 0, -t569, 0, -t727, t728, t476, pkin(5) * t476 + pkin(6) * t693 + t650 * t511, t663, t650 * t564 + t646 * t566, t522, -t663, -t523, 0, -pkin(5) * t717 + t650 * t477 + t646 * t479, pkin(5) * t524 + t650 * t478 + t646 * t480, pkin(5) * t505 + t650 * t456 + t646 * t457, pkin(5) * t400 + t650 * t367 + t646 * t382, t650 * t434 + t646 * t436, t650 * t420 + t646 * t421, t650 * t450 + t646 * t452, t650 * t433 + t646 * t435, t650 * t449 + t646 * t451, t650 * t487 + t646 * t488, pkin(5) * t376 + t650 * t323 + t646 * t328, pkin(5) * t387 + t650 * t329 + t646 * t333, pkin(5) * t373 + t650 * t307 + t646 * t315, pkin(5) * t322 + t650 * t296 + t646 * t300, t650 * t340 + t646 * t342, t650 * t313 + t646 * t314, t650 * t345 + t646 * t347, t650 * t339 + t646 * t341, t650 * t346 + t646 * t348, t650 * t378 + t646 * t379, pkin(5) * t305 + t650 * t282 + t646 * t284, pkin(5) * t309 + t650 * t285 + t646 * t286, pkin(5) * t298 + t650 * t276 + t646 * t277, pkin(5) * t281 + t650 * t274 + t646 * t275; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t625, t626, 0, 0, 0, 0, 0, 0, 0, t639, -pkin(1) * t616 - t578, -pkin(1) * t613 - t579, 0, -pkin(1) * t528, t630, 0.2e1 * t639 * t702, 0, t631, 0, 0, pkin(1) * t574 - qJ(3) * t603 + t642 * t673, pkin(1) * t572 + qJ(3) * t602 - t641 * t673, pkin(1) * t563 + pkin(2) * t611 + qJ(3) * t606 + t486, pkin(1) * t454 - pkin(2) * t551 + qJ(3) * t486, t642 * t520 + t641 * t521, t642 * t501 + t641 * t503, t642 * t513 + t641 * t516, t642 * t518 + t641 * t519, t642 * t512 + t641 * t515, t642 * t541 + t641 * t542, pkin(1) * t418 - pkin(2) * t556 + qJ(3) * t438 + t642 * t424 + t641 * t458, pkin(1) * t427 - pkin(2) * t558 + qJ(3) * t471 + t642 * t448 + t641 * t474, pkin(1) * t414 - pkin(2) * t533 + qJ(3) * t446 + t642 * t377 + t641 * t383, pkin(1) * t357 - pkin(2) * t530 - pkin(7) * t703 + qJ(3) * t362 + t642 * t392, t642 * t389 + t641 * t391, t642 * t353 + t641 * t355, t642 * t406 + t641 * t408, t642 * t388 + t641 * t390, t642 * t407 + t641 * t409, t642 * t422 + t641 * t423, pkin(1) * t336 - pkin(2) * t439 + qJ(3) * t350 + t642 * t317 + t641 * t327, pkin(1) * t343 - pkin(2) * t712 + qJ(3) * t360 + t642 * t325 + t641 * t331, pkin(1) * t310 - pkin(2) * t481 + qJ(3) * t320 + t642 * t293 + t641 * t294, pkin(1) * t288 - pkin(2) * t453 + qJ(3) * t292 + t642 * t287 + t641 * t290;];
tauB_reg = t1;
