% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:03
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:03:39
% EndTime: 2022-01-20 11:03:42
% DurationCPUTime: 3.20s
% Computational Cost: add. (20656->204), mult. (28988->297), div. (0->0), fcn. (20569->10), ass. (0->169)
t1403 = sin(pkin(9));
t1404 = cos(pkin(9));
t1406 = sin(qJ(4));
t1410 = cos(qJ(4));
t1453 = -t1403 * t1406 + t1404 * t1410;
t1402 = qJD(1) + qJD(2);
t1398 = t1402 ^ 2;
t1407 = sin(qJ(2));
t1399 = qJDD(1) + qJDD(2);
t1411 = cos(qJ(2));
t1430 = t1411 * t1399;
t1380 = t1407 * t1398 - t1430;
t1408 = sin(qJ(1));
t1412 = cos(qJ(1));
t1431 = t1407 * t1399;
t1423 = -t1411 * t1398 - t1431;
t1452 = t1408 * t1380 + t1412 * t1423;
t1451 = t1412 * t1380 - t1408 * t1423;
t1422 = t1403 * t1410 + t1404 * t1406;
t1448 = t1422 * t1399;
t1400 = t1404 ^ 2;
t1415 = t1403 ^ 2;
t1427 = t1400 + t1415;
t1377 = t1427 * t1398;
t1401 = qJD(4) + qJD(5);
t1447 = qJD(5) + t1401;
t1368 = t1453 * t1402;
t1370 = t1422 * t1402;
t1405 = sin(qJ(5));
t1409 = cos(qJ(5));
t1339 = -t1409 * t1368 + t1405 * t1370;
t1446 = t1339 ^ 2;
t1341 = t1405 * t1368 + t1409 * t1370;
t1445 = t1341 ^ 2;
t1444 = t1368 ^ 2;
t1443 = t1370 ^ 2;
t1442 = t1401 ^ 2;
t1441 = qJD(3) * t1402;
t1440 = t1341 * t1339;
t1439 = t1368 * qJD(4);
t1438 = t1370 * qJD(4);
t1437 = t1370 * t1368;
t1436 = t1398 * t1404;
t1435 = t1400 * t1398;
t1434 = t1403 * t1399;
t1395 = t1404 * t1399;
t1429 = t1415 * t1398;
t1428 = qJD(5) - t1401;
t1391 = -t1412 * g(1) - t1408 * g(2);
t1414 = qJD(1) ^ 2;
t1382 = -t1414 * pkin(1) + t1391;
t1390 = t1408 * g(1) - t1412 * g(2);
t1420 = qJDD(1) * pkin(1) + t1390;
t1360 = t1411 * t1382 + t1407 * t1420;
t1352 = -t1398 * pkin(2) + t1399 * qJ(3) + t1360;
t1425 = -t1404 * g(3) - 0.2e1 * t1403 * t1441;
t1326 = (pkin(3) * t1436 - pkin(7) * t1399 - t1352) * t1403 + t1425;
t1336 = -t1403 * g(3) + (t1352 + 0.2e1 * t1441) * t1404;
t1327 = -pkin(3) * t1435 + pkin(7) * t1395 + t1336;
t1310 = t1406 * t1326 + t1410 * t1327;
t1426 = -qJDD(4) - qJDD(5);
t1309 = t1410 * t1326 - t1406 * t1327;
t1351 = t1448 + t1439;
t1333 = t1453 * t1399;
t1419 = -t1333 + t1438;
t1424 = -t1405 * t1351 - t1409 * t1419;
t1359 = -t1407 * t1382 + t1411 * t1420;
t1347 = qJDD(4) + t1437;
t1345 = -t1399 * pkin(2) - t1398 * qJ(3) + qJDD(3) - t1359;
t1332 = -pkin(3) * t1395 + t1345 + (-t1429 - t1435) * pkin(7);
t1418 = -t1409 * t1351 + t1405 * t1419;
t1413 = qJD(4) ^ 2;
t1385 = t1403 * t1436;
t1384 = -t1408 * qJDD(1) - t1412 * t1414;
t1383 = t1412 * qJDD(1) - t1408 * t1414;
t1373 = t1427 * t1399;
t1372 = t1404 * t1377;
t1371 = t1403 * t1377;
t1362 = -t1413 - t1443;
t1361 = qJD(4) * pkin(4) - t1370 * pkin(8);
t1358 = -t1411 * t1372 - t1404 * t1431;
t1357 = t1411 * t1371 + t1403 * t1431;
t1356 = -t1407 * t1372 + t1404 * t1430;
t1355 = t1407 * t1371 - t1403 * t1430;
t1354 = t1411 * t1373 - t1407 * t1377;
t1353 = t1407 * t1373 + t1411 * t1377;
t1350 = t1448 + 0.2e1 * t1439;
t1349 = -t1333 + 0.2e1 * t1438;
t1348 = -qJDD(4) + t1437;
t1346 = -t1413 - t1444;
t1337 = -t1442 - t1445;
t1335 = -t1403 * t1352 + t1425;
t1334 = -t1443 - t1444;
t1331 = -t1407 * t1359 + t1411 * t1360;
t1330 = t1411 * t1359 + t1407 * t1360;
t1329 = t1410 * t1348 - t1406 * t1362;
t1328 = t1406 * t1348 + t1410 * t1362;
t1322 = t1410 * t1333 + t1406 * t1448;
t1321 = t1406 * t1333 - t1410 * t1448;
t1320 = t1410 * t1346 - t1406 * t1347;
t1319 = t1406 * t1346 + t1410 * t1347;
t1318 = t1426 - t1440;
t1317 = -t1426 - t1440;
t1316 = -t1442 - t1446;
t1315 = -t1403 * t1335 + t1404 * t1336;
t1314 = t1404 * t1335 + t1403 * t1336;
t1313 = -t1445 - t1446;
t1312 = -t1403 * t1328 + t1404 * t1329;
t1311 = t1404 * t1328 + t1403 * t1329;
t1308 = t1409 * t1318 - t1405 * t1337;
t1307 = t1405 * t1318 + t1409 * t1337;
t1306 = t1411 * t1315 + t1407 * t1345;
t1305 = t1407 * t1315 - t1411 * t1345;
t1304 = t1419 * pkin(4) - t1444 * pkin(8) + t1370 * t1361 + t1332;
t1303 = -t1403 * t1321 + t1404 * t1322;
t1302 = t1404 * t1321 + t1403 * t1322;
t1301 = t1428 * t1339 + t1418;
t1300 = -t1447 * t1339 - t1418;
t1299 = -t1428 * t1341 + t1424;
t1298 = t1447 * t1341 - t1424;
t1297 = -t1403 * t1319 + t1404 * t1320;
t1296 = t1404 * t1319 + t1403 * t1320;
t1295 = t1411 * t1312 + t1407 * t1350;
t1294 = t1407 * t1312 - t1411 * t1350;
t1293 = t1409 * t1316 - t1405 * t1317;
t1292 = t1405 * t1316 + t1409 * t1317;
t1291 = t1411 * t1297 + t1407 * t1349;
t1290 = t1407 * t1297 - t1411 * t1349;
t1289 = -t1444 * pkin(4) - t1419 * pkin(8) - qJD(4) * t1361 + t1310;
t1288 = t1411 * t1303 + t1407 * t1334;
t1287 = t1407 * t1303 - t1411 * t1334;
t1286 = (-t1351 + t1439) * pkin(8) + t1347 * pkin(4) + t1309;
t1285 = -t1406 * t1309 + t1410 * t1310;
t1284 = t1410 * t1309 + t1406 * t1310;
t1283 = -t1406 * t1307 + t1410 * t1308;
t1282 = t1410 * t1307 + t1406 * t1308;
t1281 = t1409 * t1299 - t1405 * t1301;
t1280 = t1405 * t1299 + t1409 * t1301;
t1279 = -t1406 * t1292 + t1410 * t1293;
t1278 = t1410 * t1292 + t1406 * t1293;
t1277 = t1405 * t1286 + t1409 * t1289;
t1276 = t1409 * t1286 - t1405 * t1289;
t1275 = -t1403 * t1284 + t1404 * t1285;
t1274 = t1404 * t1284 + t1403 * t1285;
t1273 = -t1403 * t1282 + t1404 * t1283;
t1272 = t1404 * t1282 + t1403 * t1283;
t1271 = t1411 * t1275 + t1407 * t1332;
t1270 = t1407 * t1275 - t1411 * t1332;
t1269 = -t1406 * t1280 + t1410 * t1281;
t1268 = t1410 * t1280 + t1406 * t1281;
t1267 = -t1403 * t1278 + t1404 * t1279;
t1266 = t1404 * t1278 + t1403 * t1279;
t1265 = t1411 * t1273 + t1407 * t1300;
t1264 = t1407 * t1273 - t1411 * t1300;
t1263 = t1411 * t1267 + t1407 * t1298;
t1262 = t1407 * t1267 - t1411 * t1298;
t1261 = -t1405 * t1276 + t1409 * t1277;
t1260 = t1409 * t1276 + t1405 * t1277;
t1259 = -t1403 * t1268 + t1404 * t1269;
t1258 = t1404 * t1268 + t1403 * t1269;
t1257 = t1411 * t1259 + t1407 * t1313;
t1256 = t1407 * t1259 - t1411 * t1313;
t1255 = -t1406 * t1260 + t1410 * t1261;
t1254 = t1410 * t1260 + t1406 * t1261;
t1253 = -t1403 * t1254 + t1404 * t1255;
t1252 = t1404 * t1254 + t1403 * t1255;
t1251 = t1411 * t1253 + t1407 * t1304;
t1250 = t1407 * t1253 - t1411 * t1304;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1384, -t1383, 0, -t1408 * t1390 + t1412 * t1391, 0, 0, 0, 0, 0, 0, t1452, t1451, 0, -t1408 * t1330 + t1412 * t1331, 0, 0, 0, 0, 0, 0, -t1408 * t1356 + t1412 * t1358, -t1408 * t1355 + t1412 * t1357, -t1408 * t1353 + t1412 * t1354, -t1408 * t1305 + t1412 * t1306, 0, 0, 0, 0, 0, 0, -t1408 * t1290 + t1412 * t1291, -t1408 * t1294 + t1412 * t1295, -t1408 * t1287 + t1412 * t1288, -t1408 * t1270 + t1412 * t1271, 0, 0, 0, 0, 0, 0, -t1408 * t1262 + t1412 * t1263, -t1408 * t1264 + t1412 * t1265, -t1408 * t1256 + t1412 * t1257, -t1408 * t1250 + t1412 * t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1383, t1384, 0, t1412 * t1390 + t1408 * t1391, 0, 0, 0, 0, 0, 0, -t1451, t1452, 0, t1412 * t1330 + t1408 * t1331, 0, 0, 0, 0, 0, 0, t1412 * t1356 + t1408 * t1358, t1412 * t1355 + t1408 * t1357, t1412 * t1353 + t1408 * t1354, t1412 * t1305 + t1408 * t1306, 0, 0, 0, 0, 0, 0, t1412 * t1290 + t1408 * t1291, t1412 * t1294 + t1408 * t1295, t1412 * t1287 + t1408 * t1288, t1412 * t1270 + t1408 * t1271, 0, 0, 0, 0, 0, 0, t1412 * t1262 + t1408 * t1263, t1412 * t1264 + t1408 * t1265, t1412 * t1256 + t1408 * t1257, t1412 * t1250 + t1408 * t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1314, 0, 0, 0, 0, 0, 0, t1296, t1311, t1302, t1274, 0, 0, 0, 0, 0, 0, t1266, t1272, t1258, t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1414, -qJDD(1), 0, t1391, 0, 0, 0, 0, 0, 0, t1423, t1380, 0, t1331, 0, 0, 0, 0, 0, 0, t1358, t1357, t1354, t1306, 0, 0, 0, 0, 0, 0, t1291, t1295, t1288, t1271, 0, 0, 0, 0, 0, 0, t1263, t1265, t1257, t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1414, 0, t1390, 0, 0, 0, 0, 0, 0, -t1380, t1423, 0, t1330, 0, 0, 0, 0, 0, 0, t1356, t1355, t1353, t1305, 0, 0, 0, 0, 0, 0, t1290, t1294, t1287, t1270, 0, 0, 0, 0, 0, 0, t1262, t1264, t1256, t1250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1314, 0, 0, 0, 0, 0, 0, t1296, t1311, t1302, t1274, 0, 0, 0, 0, 0, 0, t1266, t1272, t1258, t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1398, -t1399, 0, t1360, 0, 0, 0, 0, 0, 0, -t1372, t1371, t1373, t1315, 0, 0, 0, 0, 0, 0, t1297, t1312, t1303, t1275, 0, 0, 0, 0, 0, 0, t1267, t1273, t1259, t1253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1399, -t1398, 0, t1359, 0, 0, 0, 0, 0, 0, t1395, -t1434, t1377, -t1345, 0, 0, 0, 0, 0, 0, -t1349, -t1350, -t1334, -t1332, 0, 0, 0, 0, 0, 0, -t1298, -t1300, -t1313, -t1304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1314, 0, 0, 0, 0, 0, 0, t1296, t1311, t1302, t1274, 0, 0, 0, 0, 0, 0, t1266, t1272, t1258, t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1435, t1385, t1395, t1336, 0, 0, 0, 0, 0, 0, t1320, t1329, t1322, t1285, 0, 0, 0, 0, 0, 0, t1279, t1283, t1269, t1255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1385, -t1429, -t1434, t1335, 0, 0, 0, 0, 0, 0, t1319, t1328, t1321, t1284, 0, 0, 0, 0, 0, 0, t1278, t1282, t1268, t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1395, t1434, -t1377, t1345, 0, 0, 0, 0, 0, 0, t1349, t1350, t1334, t1332, 0, 0, 0, 0, 0, 0, t1298, t1300, t1313, t1304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1346, t1348, t1333, t1310, 0, 0, 0, 0, 0, 0, t1293, t1308, t1281, t1261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1347, t1362, -t1448, t1309, 0, 0, 0, 0, 0, 0, t1292, t1307, t1280, t1260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1349, t1350, t1334, t1332, 0, 0, 0, 0, 0, 0, t1298, t1300, t1313, t1304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1316, t1318, t1299, t1277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1317, t1337, t1301, t1276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1298, t1300, t1313, t1304;];
f_new_reg = t1;
