% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x28]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-15 21:36
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPRR8_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR8_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR8_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR8_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-15 21:35:17
% EndTime: 2021-01-15 21:35:35
% DurationCPUTime: 5.42s
% Computational Cost: add. (5540->322), mult. (11209->468), div. (0->0), fcn. (13160->8), ass. (0->263)
t221 = sin(pkin(9));
t222 = cos(pkin(9));
t225 = sin(qJ(2));
t227 = cos(qJ(2));
t198 = -t221 * t225 + t222 * t227;
t199 = t221 * t227 + t222 * t225;
t224 = sin(qJ(4));
t385 = cos(qJ(4));
t168 = -t385 * t198 + t224 * t199;
t226 = cos(qJ(5));
t413 = t226 * t168;
t420 = t413 / 0.2e1;
t421 = -t413 / 0.2e1;
t423 = t421 + t420;
t428 = qJD(5) * t423;
t352 = t168 ^ 2;
t197 = t385 * t199;
t344 = t224 * t198;
t400 = t197 + t344;
t416 = t400 ^ 2;
t417 = t416 - t352;
t426 = t417 * t226;
t430 = qJD(1) * t426;
t434 = t428 + t430;
t295 = qJD(2) + qJD(4);
t223 = sin(qJ(5));
t433 = 0.2e1 * t223;
t380 = -qJ(3) - pkin(6);
t205 = t380 * t225;
t206 = t380 * t227;
t266 = t222 * t205 + t206 * t221;
t244 = -pkin(7) * t199 + t266;
t403 = t224 * t244;
t176 = t221 * t205 - t222 * t206;
t126 = -pkin(7) * t198 - t176;
t418 = t385 * t126;
t424 = -t418 + t403;
t432 = t424 * t223;
t431 = t424 * t226;
t427 = t417 * t223;
t429 = qJD(1) * t427;
t262 = t418 / 0.2e1;
t406 = t400 * qJD(1);
t279 = t168 * t406;
t261 = t197 / 0.2e1;
t399 = t261 + t344 / 0.2e1;
t425 = qJD(5) * t399 + t279;
t402 = t385 * t244;
t419 = t224 * t126;
t56 = t402 + t419;
t422 = t417 * qJD(1);
t414 = t223 * t400;
t275 = t414 / 0.2e1;
t381 = t400 * pkin(4);
t382 = t168 * pkin(8);
t93 = t381 + t382;
t415 = -t168 / 0.2e1;
t392 = t168 / 0.2e1;
t394 = t400 / 0.2e1;
t395 = -t402 / 0.2e1;
t383 = pkin(8) * t400;
t411 = t295 * t168;
t410 = qJD(1) * t168;
t409 = qJD(3) * t168;
t407 = t399 * qJD(1);
t405 = 0.2e1 * t400;
t219 = t223 ^ 2;
t220 = t226 ^ 2;
t209 = t220 - t219;
t404 = t209 * t295;
t87 = 0.2e1 * t421;
t288 = pkin(2) * t222 + pkin(3);
t384 = pkin(2) * t221;
t194 = t224 * t384 - t385 * t288;
t188 = -pkin(4) + t194;
t401 = t188 + t194;
t195 = t224 * t288 + t385 * t384;
t189 = pkin(8) + t195;
t390 = -t188 / 0.2e1;
t269 = t194 / 0.2e1 + t390;
t229 = (-t189 / 0.2e1 + t195 / 0.2e1) * t400 + t269 * t168;
t398 = -t383 / 0.2e1 + t229;
t349 = t223 * t226;
t281 = qJD(1) * t349;
t268 = t219 / 0.2e1 - t220 / 0.2e1;
t70 = t268 * t400;
t397 = t281 * t416 + t295 * t70;
t389 = -t223 / 0.2e1;
t387 = -t226 / 0.2e1;
t386 = t226 / 0.2e1;
t218 = t225 * pkin(2);
t379 = qJD(2) * pkin(2);
t213 = -pkin(2) * t227 - pkin(1);
t182 = -t198 * pkin(3) + t213;
t259 = t168 * pkin(4) - t383;
t230 = t182 + t259;
t19 = -t226 * t230 + t432;
t235 = t400 * t424;
t183 = pkin(3) * t199 + t218;
t58 = t183 + t93;
t1 = -t19 * t400 + t223 * t235 + t413 * t58;
t378 = t1 * qJD(1);
t20 = t223 * t230 + t431;
t75 = t223 * t168;
t2 = -t20 * t400 + t226 * t235 - t58 * t75;
t377 = t2 * qJD(1);
t3 = (-t19 + t432) * t400 + t93 * t413;
t374 = t3 * qJD(1);
t4 = (-t20 + t431) * t400 - t93 * t75;
t373 = t4 * qJD(1);
t228 = t383 / 0.2e1 + pkin(4) * t415 + t229;
t5 = t223 * t228;
t372 = t5 * qJD(1);
t369 = t223 * t56;
t368 = t226 * t56;
t318 = qJD(2) * t226;
t270 = 0.2e1 * t394;
t82 = t270 * t226;
t367 = t82 * qJD(4) + t318 * t400;
t13 = t168 * t19 + t414 * t56;
t366 = qJD(1) * t13;
t342 = t226 * t400;
t14 = -t168 * t20 - t342 * t56;
t365 = qJD(1) * t14;
t253 = t352 + t416;
t29 = t253 * t223;
t362 = qJD(1) * t29;
t31 = t253 * t226;
t360 = qJD(1) * t31;
t34 = t168 * t183 + t182 * t400;
t359 = qJD(1) * t34;
t35 = -t168 * t182 + t183 * t400;
t358 = qJD(1) * t35;
t61 = t176 * t198 - t199 * t266;
t355 = qJD(1) * t61;
t63 = (t415 + t392) * t349;
t354 = qJD(1) * t63;
t33 = t213 * t218;
t339 = t33 * qJD(1);
t337 = t70 * qJD(1);
t336 = t414 * qJD(1);
t271 = t394 - t400 / 0.2e1;
t73 = t271 * t223;
t335 = t73 * qJD(1);
t74 = t270 * t223;
t334 = t74 * qJD(1);
t333 = t75 * qJD(1);
t77 = t415 * t433;
t67 = t77 * qJD(1);
t81 = t271 * t226;
t332 = t81 * qJD(1);
t331 = t82 * qJD(1);
t330 = t413 * qJD(1);
t86 = 0.2e1 * t420;
t329 = t86 * qJD(1);
t328 = t87 * qJD(1);
t92 = t209 * t416;
t327 = t92 * qJD(1);
t159 = -t198 * t218 + t199 * t213;
t326 = qJD(1) * t159;
t160 = t198 * t213 + t199 * t218;
t325 = qJD(1) * t160;
t323 = qJD(1) * t182;
t322 = qJD(1) * t227;
t321 = qJD(2) * t400;
t319 = qJD(2) * t223;
t317 = qJD(3) * t400;
t315 = qJD(4) * t400;
t314 = qJD(4) * t182;
t313 = qJD(4) * t223;
t312 = qJD(4) * t226;
t311 = qJD(5) * t223;
t217 = qJD(5) * t226;
t109 = 0.2e1 * t261 + t344;
t309 = t109 * qJD(1);
t234 = (t221 * t198 / 0.2e1 - t222 * t199 / 0.2e1) * pkin(2);
t124 = -t218 / 0.2e1 + t234;
t308 = t124 * qJD(1);
t165 = t261 - t197 / 0.2e1;
t305 = t165 * qJD(1);
t304 = t165 * qJD(4);
t172 = t198 ^ 2 + t199 ^ 2;
t301 = t172 * qJD(1);
t185 = t195 * qJD(4);
t300 = t198 * qJD(1);
t299 = t199 * qJD(1);
t210 = -t225 ^ 2 + t227 ^ 2;
t298 = t210 * qJD(1);
t297 = t225 * qJD(2);
t296 = t227 * qJD(2);
t293 = pkin(1) * t225 * qJD(1);
t292 = pkin(1) * t322;
t284 = t168 * t323;
t283 = t400 * t323;
t282 = t220 * t406;
t280 = qJD(5) * t168 * t400;
t278 = t400 * t410;
t211 = t223 * t217;
t277 = t225 * t322;
t276 = t226 * t406;
t274 = t168 * t389;
t265 = t295 * t226;
t263 = t400 * t281;
t260 = pkin(4) / 0.2e1 + t269;
t257 = -0.2e1 * t263;
t256 = 0.2e1 * t263;
t255 = t223 * t265;
t254 = t295 * t349;
t251 = -t188 * t168 - t189 * t400;
t22 = t395 + t402 / 0.2e1;
t250 = -qJD(1) * t22 - qJD(2) * t194;
t21 = t262 - t418 / 0.2e1;
t249 = qJD(1) * t21 + qJD(2) * t195;
t248 = t400 * (-qJD(5) - t410);
t247 = qJD(4) * t109 + t321;
t245 = t382 / 0.2e1 + t381 / 0.2e1;
t241 = t189 * t392 + t400 * t390;
t233 = t58 / 0.2e1 + t241;
t9 = t223 * t233;
t243 = -qJD(1) * t9 - t188 * t318;
t8 = t226 * t228;
t242 = -qJD(1) * t8 - t195 * t319;
t11 = t226 * t233;
t240 = qJD(1) * t11 - t188 * t319;
t237 = t411 * t400;
t236 = t93 / 0.2e1 + t245;
t110 = t260 * t223;
t17 = t236 * t226;
t232 = pkin(4) * t313 + qJD(1) * t17 + qJD(2) * t110;
t111 = t260 * t226;
t15 = t236 * t223;
t231 = pkin(4) * t312 - qJD(1) * t15 + qJD(2) * t111;
t208 = t209 * qJD(5);
t184 = t194 * qJD(4);
t181 = t223 * t185;
t125 = -0.2e1 * t400 * t211;
t123 = t218 / 0.2e1 + t234;
t113 = pkin(4) * t387 + t401 * t386;
t112 = pkin(4) * t389 + t401 * t223 / 0.2e1;
t95 = t257 + t404;
t94 = t256 - t404;
t91 = t295 * t399;
t80 = t275 - t414 / 0.2e1;
t79 = 0.2e1 * t275;
t78 = -t75 / 0.2e1 - t274;
t69 = t81 * qJD(4);
t66 = t78 * qJD(5);
t65 = t77 * qJD(5);
t64 = t70 * qJD(5);
t62 = t87 * t223;
t60 = -t311 + t67;
t53 = t254 - t337;
t52 = -t255 + t337;
t27 = t268 * t168 + t219 * t392 + t220 * t415;
t24 = 0.2e1 * t262 - t403;
t23 = -t419 + 0.2e1 * t395;
t18 = -t245 * t226 + t93 * t386 - t369;
t16 = t245 * t223 + t93 * t389 - t368;
t12 = -t369 / 0.2e1 + t56 * t389 + t58 * t386 - t241 * t226;
t10 = -t368 / 0.2e1 + t56 * t387 + t58 * t389 + t241 * t223;
t7 = pkin(4) * t420 + t398 * t226 + t432;
t6 = -pkin(4) * t274 + t398 * t223 - t431;
t25 = [0, 0, 0, t225 * t296, t210 * qJD(2), 0, 0, 0, -pkin(1) * t297, -pkin(1) * t296, t159 * qJD(2), t160 * qJD(2), qJD(3) * t172, qJD(2) * t33 + qJD(3) * t61, -t237, -t295 * t417, 0, 0, 0, qJD(2) * t34 + t314 * t400, qJD(2) * t35 - t168 * t314, -t211 * t416 - t220 * t237, t342 * t411 * t433 - t92 * qJD(5), -t223 * t280 + t295 * t426, -t226 * t280 - t295 * t427, (t315 + t321) * t168, qJD(2) * t1 + qJD(3) * t29 + qJD(4) * t3 + qJD(5) * t14, qJD(2) * t2 + qJD(3) * t31 + qJD(4) * t4 + qJD(5) * t13; 0, 0, 0, t277, t298, t296, -t297, 0, -pkin(6) * t296 - t293, pkin(6) * t297 - t292, -qJD(2) * t176 + t326, -qJD(2) * t266 + t325, (-t198 * t222 - t199 * t221) * t379, t339 + t123 * qJD(3) + (-t176 * t222 + t221 * t266) * t379, -t278, -t422, -t411, -t247, 0, -qJD(2) * t424 + qJD(4) * t24 + t359, -qJD(2) * t56 + qJD(4) * t23 + t358, qJD(4) * t62 - t64 - (t223 * t318 + t282) * t168, t27 * qJD(4) + t125 - (qJD(2) * t209 + t257) * t168, qJD(4) * t79 + t319 * t400 + t434, t66 - t429 + t367, t425, t378 + (t223 * t251 - t431) * qJD(2) + t6 * qJD(4) + t12 * qJD(5), t377 + (t226 * t251 + t432) * qJD(2) + t7 * qJD(4) + t10 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t301, qJD(2) * t123 + t355, 0, 0, 0, 0, 0, t304, 0, 0, 0, 0, 0, 0, t66 - t69 + t362, qJD(4) * t80 + t360 + t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t279, -t422, -t411, -qJD(2) * t109 - t315, 0, qJD(2) * t24 + qJD(3) * t165 - qJD(4) * t424 + t283, qJD(2) * t23 - qJD(4) * t56 - t284, qJD(2) * t62 - t64 + (-t223 * t312 - t282) * t168, t27 * qJD(2) + t125 + (-qJD(4) * t209 + t256) * t168, qJD(2) * t79 + t313 * t400 + t434, qJD(2) * t82 + t312 * t400 - t429, t425, t374 + t6 * qJD(2) - t81 * qJD(3) + (t223 * t259 - t431) * qJD(4) + t18 * qJD(5), t373 + t7 * qJD(2) + t80 * qJD(3) + (t226 * t259 + t432) * qJD(4) + t16 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t397, -t255 * t405 - t327, t223 * t248 + t295 * t423, qJD(2) * t78 + t226 * t248, t91, qJD(2) * t12 + qJD(3) * t78 + qJD(4) * t18 - qJD(5) * t20 + t365, qJD(2) * t10 + qJD(3) * t423 + qJD(4) * t16 + qJD(5) * t19 + t366; 0, 0, 0, -t277, -t298, 0, 0, 0, t293, t292, -qJD(3) * t199 - t326, -qJD(3) * t198 - t325, 0, qJD(3) * t124 - t339, t278, t422, 0, -t304, 0, -qJD(4) * t21 - t317 - t359, qJD(4) * t22 - t358 + t409, qJD(4) * t63 + t220 * t278 - t64, -t168 * t256 + t125, -qJD(4) * t73 + qJD(5) * t86 - t430, t65 - t69 + t429, -t425, qJD(4) * t5 - qJD(5) * t11 - t226 * t317 - t378, qJD(3) * t414 + qJD(4) * t8 + qJD(5) * t9 - t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t185, t184, t211, t208, 0, 0, 0, -t185 * t226 + t188 * t311, t188 * t217 + t181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, -t300, 0, t308, 0, 0, 0, 0, 0, -t406, t410, 0, 0, 0, 0, 0, -t276, t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t305, 0, -t185 - t249, t184 - t250, t211 + t354, t208, -t335, -t332, 0, t112 * qJD(5) - t195 * t265 + t372, qJD(5) * t113 + t181 - t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, t95, t217 + t329, t60, -t407, qJD(4) * t112 - t189 * t217 - t240, qJD(4) * t113 + t189 * t311 - t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199 * qJD(2), t198 * qJD(2), -t301, -qJD(2) * t124 - t355, 0, 0, 0, 0, 0, t247, -t411, 0, 0, 0, 0, 0, t65 - t362 + t367, -qJD(2) * t414 - qJD(4) * t74 + qJD(5) * t87 - t360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t299, t300, 0, -t308, 0, 0, 0, 0, 0, t406, -t410, 0, 0, 0, 0, 0, t276, -t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t309, -t410, 0, 0, 0, 0, 0, t331, -t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, -t217 + t328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t279, t422, 0, t165 * qJD(2), 0, qJD(2) * t21 - qJD(3) * t109 - t283, -qJD(2) * t22 + t284 + t409, -qJD(2) * t63 + t220 * t279 - t64, t168 * t257 + t125, qJD(2) * t73 + qJD(5) * t413 - t430, qJD(2) * t81 - qJD(5) * t75 + t429, -t425, -qJD(2) * t5 - qJD(3) * t82 - qJD(5) * t17 - t374, -qJD(2) * t8 + qJD(3) * t74 + qJD(5) * t15 - t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t305, 0, t249, t250, t211 - t354, t208, t335, t332, 0, -qJD(5) * t110 + t195 * t318 - t372, -qJD(5) * t111 + t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t309, t410, 0, 0, 0, 0, 0, -t331, t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211, t208, 0, 0, 0, -pkin(4) * t311, -pkin(4) * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, t95, t217 + t330, -t311 - t333, -t407, -pkin(8) * t217 - t232, pkin(8) * t311 - t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t397, t254 * t405 + t327, -qJD(2) * t86 - qJD(4) * t413 + t223 * t279, -qJD(2) * t77 + qJD(4) * t75 + t226 * t279, t91, qJD(2) * t11 - qJD(3) * t77 + qJD(4) * t17 - t365, -qJD(2) * t9 - qJD(3) * t87 - qJD(4) * t15 - t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, t94, -t329, -t67, t407, qJD(4) * t110 + t240, qJD(4) * t111 + t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t67, -t328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, t94, -t330, t333, t407, t232, t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t25;
