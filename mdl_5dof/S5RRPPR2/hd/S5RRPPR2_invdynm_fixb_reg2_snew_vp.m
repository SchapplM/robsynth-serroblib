% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 10:06
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 10:06:06
% EndTime: 2022-01-20 10:06:18
% DurationCPUTime: 12.57s
% Computational Cost: add. (54668->498), mult. (76171->683), div. (0->0), fcn. (45228->10), ass. (0->345)
t908 = qJD(1) + qJD(2);
t904 = t908 ^ 2;
t915 = cos(pkin(8));
t905 = qJDD(1) + qJDD(2);
t913 = sin(pkin(8));
t987 = t913 * t905;
t866 = t915 * t904 + t987;
t983 = t915 * t905;
t869 = t913 * t904 - t983;
t917 = sin(qJ(2));
t920 = cos(qJ(2));
t811 = t920 * t866 - t917 * t869;
t815 = t917 * t866 + t920 * t869;
t918 = sin(qJ(1));
t921 = cos(qJ(1));
t1010 = t921 * t811 - t918 * t815;
t911 = g(3) - qJDD(3);
t1011 = qJ(3) * t869 - t913 * t911;
t837 = qJ(3) * t866 - t915 * t911;
t1022 = pkin(6) * t815 + t1011 * t920 + t917 * t837;
t743 = pkin(6) * t811 - t1011 * t917 + t920 * t837;
t1035 = pkin(5) * t1010 - t1022 * t918 + t921 * t743;
t1023 = t918 * t811 + t921 * t815;
t1034 = pkin(5) * t1023 + t1022 * t921 + t918 * t743;
t893 = t918 * g(1) - t921 * g(2);
t880 = qJDD(1) * pkin(1) + t893;
t894 = t921 * g(1) + t918 * g(2);
t922 = qJD(1) ^ 2;
t881 = -t922 * pkin(1) - t894;
t830 = t917 * t880 + t920 * t881;
t817 = -t904 * pkin(2) + t830;
t941 = t920 * t880 - t917 * t881;
t930 = t905 * pkin(2) + t941;
t759 = t913 * t817 - t915 * t930;
t760 = t915 * t817 + t913 * t930;
t961 = t913 * t759 + t915 * t760;
t696 = t915 * t759 - t913 * t760;
t978 = t917 * t696;
t1015 = t920 * t961 + t978;
t973 = t920 * t696;
t645 = -t917 * t961 + t973;
t1032 = t1015 * t921 + t918 * t645;
t1031 = -t1015 * t918 + t921 * t645;
t875 = t917 * t904 - t920 * t905;
t1012 = pkin(6) * t875 - t917 * g(3);
t872 = t920 * t904 + t917 * t905;
t845 = pkin(6) * t872 - t920 * g(3);
t942 = t921 * t872 - t918 * t875;
t1026 = pkin(5) * t942 - t1012 * t918 + t921 * t845;
t912 = sin(pkin(9));
t907 = t912 ^ 2;
t914 = cos(pkin(9));
t924 = t914 ^ 2;
t856 = (t907 + t924) * t914 * t904;
t964 = t914 * t983;
t825 = -t913 * t856 + t964;
t985 = t914 * t905;
t827 = t915 * t856 + t913 * t985;
t764 = t920 * t825 - t917 * t827;
t766 = t917 * t825 + t920 * t827;
t1025 = t921 * t764 - t918 * t766;
t1024 = t918 * t764 + t921 * t766;
t1007 = t918 * t872 + t921 * t875;
t1021 = pkin(5) * t1007 + t1012 * t921 + t918 * t845;
t960 = t920 * t830 - t917 * t941;
t771 = -t917 * t830 - t920 * t941;
t972 = t921 * t771;
t1017 = -t918 * t960 + t972;
t977 = t918 * t771;
t1016 = t921 * t960 + t977;
t989 = t912 * t914;
t832 = t866 * t989;
t886 = t904 * t989;
t833 = -t913 * t886 + t912 * t964;
t777 = t920 * t832 + t917 * t833;
t780 = t917 * t832 - t920 * t833;
t1009 = t921 * t777 - t918 * t780;
t1008 = t918 * t777 + t921 * t780;
t916 = sin(qJ(5));
t919 = cos(qJ(5));
t840 = (qJD(5) * t908 * t919 + t905 * t916) * t912;
t890 = t914 * t908 - qJD(5);
t970 = t890 * t908 * t912;
t853 = t919 * t970;
t800 = t853 - t840;
t1006 = t916 * t800;
t900 = t914 * t911;
t746 = -t904 * pkin(3) + t905 * qJ(4) + t760;
t999 = 2 * qJD(4);
t957 = t908 * t999 + t746;
t725 = t912 * t957 + t900;
t990 = t912 * t911;
t726 = t914 * t957 - t990;
t679 = t912 * t725 + t914 * t726;
t992 = t908 * t916;
t967 = t912 * t992;
t883 = qJD(5) * t967;
t969 = t890 * t992;
t994 = t905 * t919;
t802 = t912 * (t969 + t994) - t883;
t887 = t890 ^ 2;
t998 = pkin(4) * t912;
t997 = pkin(4) * t914;
t993 = t907 * t904;
t745 = -t905 * pkin(3) - t904 * qJ(4) + qJDD(4) + t759;
t738 = t912 * t745;
t888 = -qJDD(5) + t985;
t991 = t912 * t888;
t897 = t912 * t905;
t988 = t913 * t745;
t739 = t914 * t745;
t984 = t915 * t745;
t949 = -pkin(7) * t912 - t997;
t939 = t746 + (t949 * t908 + t999) * t908;
t709 = t912 * t939 + t900;
t981 = t916 * t709;
t968 = t904 * t916 * t919;
t878 = t907 * t968;
t838 = -t878 + t888;
t980 = t916 * t838;
t839 = -t878 - t888;
t979 = t916 * t839;
t976 = t919 * t709;
t975 = t919 * t838;
t974 = t919 * t839;
t971 = -pkin(3) * t745 + qJ(4) * t679;
t910 = t919 ^ 2;
t966 = t910 * t993;
t965 = t912 * t985;
t963 = pkin(3) * t985 - qJ(4) * t856 - t739;
t649 = t913 * t679 - t984;
t962 = pkin(2) * t649 + t971;
t710 = t914 * t939 - t990;
t727 = t905 * t949 + t745;
t664 = t916 * t710 - t919 * t727;
t665 = t919 * t710 + t916 * t727;
t634 = t916 * t664 + t919 * t665;
t958 = -t918 * t893 - t921 * t894;
t906 = t912 * t907;
t956 = t906 * t968;
t955 = t890 * t967;
t831 = -t966 - t887;
t784 = t919 * t831 + t980;
t658 = -pkin(4) * t784 + t665;
t686 = -pkin(7) * t784 + t976;
t785 = -t916 * t831 + t975;
t730 = t914 * t785 + t802 * t912;
t954 = -pkin(3) * t784 + qJ(4) * t730 + t914 * t658 + t912 * t686;
t909 = t916 ^ 2;
t889 = t909 * t993;
t847 = -t889 - t887;
t789 = t916 * t847 + t974;
t660 = -pkin(4) * t789 + t664;
t688 = -pkin(7) * t789 + t981;
t792 = t919 * t847 - t979;
t737 = t914 * t792 - t912 * t800;
t953 = -pkin(3) * t789 + qJ(4) * t737 + t914 * t660 + t912 * t688;
t896 = t907 * t905;
t898 = t924 * t905;
t864 = t898 + t896;
t899 = t924 * t904;
t870 = t899 + t993;
t952 = pkin(3) * t870 + qJ(4) * t864 + t679;
t951 = pkin(2) * t825 + t963;
t950 = -pkin(4) * t709 + pkin(7) * t634;
t885 = t921 * qJDD(1) - t918 * t922;
t948 = -pkin(5) * t885 - t918 * g(3);
t947 = -pkin(2) * t869 - t759;
t946 = t914 * t878;
t691 = t913 * t730 - t915 * t784;
t945 = pkin(2) * t691 + t954;
t701 = t913 * t737 - t915 * t789;
t944 = pkin(2) * t701 + t953;
t807 = t913 * t864 + t915 * t870;
t943 = pkin(2) * t807 + t952;
t633 = -t919 * t664 + t916 * t665;
t678 = t914 * t725 - t912 * t726;
t940 = t921 * t893 - t918 * t894;
t855 = (t912 * t924 + t906) * t904;
t938 = -pkin(3) * t897 + qJ(4) * t855 + t738;
t823 = t913 * t855 - t912 * t983;
t935 = pkin(2) * t823 + t938;
t799 = t853 + t840;
t801 = -t883 + (-t969 + t994) * t912;
t748 = -t916 * t799 - t919 * t801;
t625 = -pkin(7) * t748 - t633;
t750 = -t919 * t799 + t916 * t801;
t849 = t889 + t966;
t716 = t914 * t750 - t912 * t849;
t934 = qJ(4) * t716 + t912 * t625 + (-pkin(3) - t997) * t748;
t933 = -pkin(4) * t802 + pkin(7) * t785 + t981;
t932 = pkin(4) * t800 + pkin(7) * t792 - t976;
t681 = t913 * t716 - t915 * t748;
t931 = pkin(2) * t681 + t934;
t929 = pkin(4) * t849 + pkin(7) * t750 + t634;
t620 = t914 * t634 + t912 * t709;
t928 = qJ(4) * t620 + (-pkin(3) + t949) * t633;
t605 = t913 * t620 - t915 * t633;
t927 = pkin(2) * t605 + t928;
t926 = -pkin(2) * t866 - t760;
t884 = t918 * qJDD(1) + t921 * t922;
t882 = 0.2e1 * t965;
t876 = t914 * t888;
t871 = -t899 + t993;
t865 = t898 - t896;
t862 = -pkin(5) * t884 + t921 * g(3);
t850 = -t889 + t966;
t848 = t887 - t966;
t846 = t889 - t887;
t841 = t919 * t897 - t883;
t826 = t915 * t855 + t912 * t987;
t810 = t915 * t865 + t913 * t871;
t809 = t915 * t864 - t913 * t870;
t808 = t913 * t865 - t915 * t871;
t806 = (-t909 - t910) * t970;
t798 = t916 * t841 - t910 * t970;
t797 = -t919 * t840 - t909 * t970;
t796 = (t841 + t955) * t919;
t794 = -pkin(1) * t875 + t941;
t793 = -pkin(1) * t872 - t830;
t791 = t919 * t846 + t980;
t790 = -t916 * t848 + t974;
t788 = t916 * t846 - t975;
t787 = t919 * t848 + t979;
t783 = -t913 * t806 - t915 * t991;
t782 = t915 * t806 - t913 * t991;
t776 = t914 * t796 + t956;
t775 = -t1006 * t914 - t956;
t774 = t912 * t796 - t946;
t773 = -t1006 * t912 + t946;
t768 = pkin(1) * t771;
t765 = -t917 * t823 + t920 * t826;
t762 = t920 * t823 + t917 * t826;
t761 = pkin(1) * g(3) + pkin(6) * t960;
t756 = -t917 * t808 + t920 * t810;
t755 = -t917 * t807 + t920 * t809;
t754 = t920 * t808 + t917 * t810;
t753 = t920 * t807 + t917 * t809;
t751 = t919 * t800 - t916 * t802;
t749 = t919 * t802 + t1006;
t736 = t914 * t791 - t912 * t799;
t735 = t914 * t790 + t912 * t801;
t734 = t912 * t792 + t914 * t800;
t733 = t912 * t791 + t914 * t799;
t732 = t912 * t790 - t914 * t801;
t729 = t912 * t785 - t802 * t914;
t721 = t915 * t776 + t913 * t798;
t720 = t915 * t775 + t913 * t797;
t719 = t913 * t776 - t915 * t798;
t718 = t913 * t775 - t915 * t797;
t717 = t914 * t751 + t912 * t850;
t715 = t912 * t751 - t914 * t850;
t714 = t912 * t750 + t914 * t849;
t712 = -t917 * t782 + t920 * t783;
t711 = t920 * t782 + t917 * t783;
t708 = -pkin(1) * t815 + t947;
t707 = -pkin(1) * t811 + t926;
t706 = -t918 * t762 + t921 * t765;
t705 = t921 * t762 + t918 * t765;
t704 = t915 * t737 + t913 * t789;
t703 = t915 * t736 + t913 * t788;
t702 = t915 * t735 + t913 * t787;
t700 = t913 * t736 - t915 * t788;
t699 = t913 * t735 - t915 * t787;
t693 = pkin(2) * t696;
t692 = t915 * t730 + t913 * t784;
t689 = pkin(2) * t911 + qJ(3) * t961;
t684 = t915 * t717 + t913 * t749;
t683 = t915 * t716 + t913 * t748;
t682 = t913 * t717 - t915 * t749;
t675 = pkin(1) * t764 + t951;
t674 = pkin(1) * t762 + t935;
t673 = -t917 * t719 + t920 * t721;
t672 = -t917 * t718 + t920 * t720;
t671 = t920 * t719 + t917 * t721;
t670 = t920 * t718 + t917 * t720;
t669 = -qJ(3) * t823 - t913 * t726 + t914 * t984;
t668 = -qJ(3) * t825 - t913 * t725 + t912 * t984;
t667 = qJ(3) * t826 + t915 * t726 + t913 * t739;
t666 = -qJ(3) * t827 + t915 * t725 + t912 * t988;
t662 = -qJ(3) * t807 + t915 * t678;
t661 = qJ(3) * t809 + t913 * t678;
t656 = -t917 * t701 + t920 * t704;
t655 = -t917 * t700 + t920 * t703;
t654 = -t917 * t699 + t920 * t702;
t653 = t920 * t701 + t917 * t704;
t652 = t920 * t700 + t917 * t703;
t651 = t920 * t699 + t917 * t702;
t650 = t915 * t679 + t988;
t648 = -pkin(3) * t734 - t932;
t642 = -pkin(3) * t729 - t933;
t641 = -t917 * t691 + t920 * t692;
t640 = t920 * t691 + t917 * t692;
t639 = pkin(1) * t753 + t943;
t638 = -t917 * t682 + t920 * t684;
t637 = -t917 * t681 + t920 * t683;
t636 = t920 * t682 + t917 * t684;
t635 = t920 * t681 + t917 * t683;
t631 = -pkin(1) * t645 - t693;
t630 = -pkin(6) * t762 - t917 * t667 + t920 * t669;
t629 = -pkin(6) * t764 - t917 * t666 + t920 * t668;
t628 = pkin(6) * t765 + t920 * t667 + t917 * t669;
t627 = -pkin(6) * t766 + t920 * t666 + t917 * t668;
t626 = -qJ(4) * t734 - t912 * t660 + t914 * t688;
t623 = -qJ(4) * t729 - t912 * t658 + t914 * t686;
t622 = -pkin(6) * t753 - t917 * t661 + t920 * t662;
t621 = pkin(6) * t755 + t920 * t661 + t917 * t662;
t619 = t912 * t634 - t914 * t709;
t617 = -t917 * t649 + t920 * t650;
t616 = t920 * t649 + t917 * t650;
t615 = pkin(6) * t645 + qJ(3) * t973 - t917 * t689;
t614 = pkin(1) * t911 + pkin(6) * t1015 + qJ(3) * t978 + t920 * t689;
t613 = -pkin(3) * t714 - t929;
t612 = -qJ(3) * t649 - (pkin(3) * t913 - qJ(4) * t915) * t678;
t611 = -qJ(4) * t714 + t914 * t625 + t748 * t998;
t610 = qJ(3) * t650 - (-pkin(3) * t915 - qJ(4) * t913 - pkin(2)) * t678;
t609 = -qJ(3) * t701 + t915 * t626 - t913 * t648;
t608 = pkin(1) * t653 + t944;
t607 = -qJ(3) * t691 + t915 * t623 - t913 * t642;
t606 = t915 * t620 + t913 * t633;
t603 = -pkin(2) * t734 + qJ(3) * t704 + t913 * t626 + t915 * t648;
t602 = pkin(1) * t640 + t945;
t601 = -pkin(2) * t729 + qJ(3) * t692 + t913 * t623 + t915 * t642;
t600 = -pkin(3) * t619 - t950;
t599 = pkin(1) * t616 + t962;
t598 = pkin(1) * t635 + t931;
t597 = -qJ(4) * t619 + (-pkin(7) * t914 + t998) * t633;
t596 = -qJ(3) * t681 + t915 * t611 - t913 * t613;
t595 = -pkin(2) * t714 + qJ(3) * t683 + t913 * t611 + t915 * t613;
t594 = -t917 * t605 + t920 * t606;
t593 = t920 * t605 + t917 * t606;
t592 = -pkin(6) * t616 - t917 * t610 + t920 * t612;
t591 = -pkin(6) * t653 - t917 * t603 + t920 * t609;
t590 = -pkin(1) * t734 + pkin(6) * t656 + t920 * t603 + t917 * t609;
t589 = pkin(1) * t678 + pkin(6) * t617 + t920 * t610 + t917 * t612;
t588 = -pkin(6) * t640 - t917 * t601 + t920 * t607;
t587 = -pkin(1) * t729 + pkin(6) * t641 + t920 * t601 + t917 * t607;
t586 = -pkin(6) * t635 - t917 * t595 + t920 * t596;
t585 = -qJ(3) * t605 + t915 * t597 - t913 * t600;
t584 = -pkin(1) * t714 + pkin(6) * t637 + t920 * t595 + t917 * t596;
t583 = -pkin(2) * t619 + qJ(3) * t606 + t913 * t597 + t915 * t600;
t582 = pkin(1) * t593 + t927;
t581 = -pkin(6) * t593 - t917 * t583 + t920 * t585;
t580 = -pkin(1) * t619 + pkin(6) * t594 + t920 * t583 + t917 * t585;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t885, 0, -t884, 0, t948, -t862, -t940, -pkin(5) * t940, 0, 0, -t1007, 0, -t942, 0, t1021, t1026, t1017, pkin(5) * t1017 + pkin(6) * t972 - t918 * t761, 0, 0, -t1023, 0, -t1010, 0, t1034, t1035, t1031, pkin(5) * t1031 - t918 * t614 + t921 * t615, -t1008, -t918 * t754 + t921 * t756, t706, t1008, t1024, 0, -pkin(5) * t1025 - t918 * t627 + t921 * t629, -pkin(5) * t705 - t918 * t628 + t921 * t630, t921 * t622 - t918 * t621 - pkin(5) * (t921 * t753 + t918 * t755), t921 * t592 - t918 * t589 - pkin(5) * (t921 * t616 + t918 * t617), -t918 * t671 + t921 * t673, -t918 * t636 + t921 * t638, -t918 * t651 + t921 * t654, -t918 * t670 + t921 * t672, -t918 * t652 + t921 * t655, -t918 * t711 + t921 * t712, t921 * t591 - t918 * t590 - pkin(5) * (t921 * t653 + t918 * t656), t921 * t588 - t918 * t587 - pkin(5) * (t921 * t640 + t918 * t641), t921 * t586 - t918 * t584 - pkin(5) * (t921 * t635 + t918 * t637), t921 * t581 - t918 * t580 - pkin(5) * (t921 * t593 + t918 * t594); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t884, 0, t885, 0, t862, t948, t958, pkin(5) * t958, 0, 0, t942, 0, -t1007, 0, -t1026, t1021, t1016, pkin(5) * t1016 + pkin(6) * t977 + t921 * t761, 0, 0, t1010, 0, -t1023, 0, -t1035, t1034, t1032, pkin(5) * t1032 + t921 * t614 + t918 * t615, t1009, t921 * t754 + t918 * t756, t705, -t1009, -t1025, 0, -pkin(5) * t1024 + t921 * t627 + t918 * t629, pkin(5) * t706 + t921 * t628 + t918 * t630, t918 * t622 + t921 * t621 + pkin(5) * (-t918 * t753 + t921 * t755), t918 * t592 + t921 * t589 + pkin(5) * (-t918 * t616 + t921 * t617), t921 * t671 + t918 * t673, t921 * t636 + t918 * t638, t921 * t651 + t918 * t654, t921 * t670 + t918 * t672, t921 * t652 + t918 * t655, t921 * t711 + t918 * t712, t918 * t591 + t921 * t590 + pkin(5) * (-t918 * t653 + t921 * t656), t918 * t588 + t921 * t587 + pkin(5) * (-t918 * t640 + t921 * t641), t918 * t586 + t921 * t584 + pkin(5) * (-t918 * t635 + t921 * t637), t918 * t581 + t921 * t580 + pkin(5) * (-t918 * t593 + t921 * t594); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t893, t894, 0, 0, 0, 0, 0, 0, 0, t905, t794, t793, 0, -t768, 0, 0, 0, 0, 0, t905, t708, t707, 0, t631, t896, t882, 0, t898, 0, 0, t675, t674, t639, t599, t774, t715, t732, t773, t733, t876, t608, t602, t598, t582; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t922, 0, 0, -g(3), -t893, 0, 0, 0, -t875, 0, -t872, 0, t1012, t845, t771, pkin(6) * t771, 0, 0, -t815, 0, -t811, 0, t1022, t743, t645, t615, -t780, t756, t765, t780, t766, 0, t629, t630, t622, t592, t673, t638, t654, t672, t655, t712, t591, t588, t586, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t922, 0, qJDD(1), 0, g(3), 0, -t894, 0, 0, 0, t872, 0, -t875, 0, -t845, t1012, t960, t761, 0, 0, t811, 0, -t815, 0, -t743, t1022, t1015, t614, t777, t754, t762, -t777, -t764, 0, t627, t628, t621, t589, t671, t636, t651, t670, t652, t711, t590, t587, t584, t580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t893, t894, 0, 0, 0, 0, 0, 0, 0, t905, t794, t793, 0, -t768, 0, 0, 0, 0, 0, t905, t708, t707, 0, t631, t896, t882, 0, t898, 0, 0, t675, t674, t639, t599, t774, t715, t732, t773, t733, t876, t608, t602, t598, t582; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t905, 0, -t904, 0, 0, -g(3), -t941, 0, 0, 0, -t869, 0, -t866, 0, t1011, t837, t696, qJ(3) * t696, t833, t810, t826, -t833, t827, 0, t668, t669, t662, t612, t721, t684, t702, t720, t703, t783, t609, t607, t596, t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, 0, t905, 0, g(3), 0, t830, 0, 0, 0, t866, 0, -t869, 0, -t837, t1011, t961, t689, t832, t808, t823, -t832, -t825, 0, t666, t667, t661, t610, t719, t682, t699, t718, t700, t782, t603, t601, t595, t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t905, t941, -t830, 0, 0, 0, 0, 0, 0, 0, t905, t947, t926, 0, -t693, t896, t882, 0, t898, 0, 0, t951, t935, t943, t962, t774, t715, t732, t773, t733, t876, t944, t945, t931, t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t905, 0, -t904, 0, 0, -t911, t759, 0, t965, t865, t855, -t965, t856, 0, t738, t739, t678, qJ(4) * t678, t776, t717, t735, t775, t736, -t991, t626, t623, t611, t597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, 0, t905, 0, t911, 0, t760, 0, t886, -t871, -t897, -t886, -t985, 0, t725, t726, 0, pkin(3) * t678, -t798, -t749, -t787, -t797, -t788, t806, t648, t642, t613, t600; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t905, -t759, -t760, 0, 0, t896, t882, 0, t898, 0, 0, t963, t938, t952, t971, t774, t715, t732, t773, t733, t876, t953, t954, t934, t928; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t897, t985, t886, 0, t899, 0, 0, t745, t725, 0, t796, t751, t790, -t1006, t791, 0, t688, t686, t625, -pkin(7) * t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t897, -t993, t985, -t886, 0, -t745, 0, t726, 0, -t878, -t850, -t801, t878, t799, t888, t660, t658, -pkin(4) * t748, -pkin(4) * t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t886, t871, t897, t886, t985, 0, -t725, -t726, 0, 0, t798, t749, t787, t797, t788, -t806, t932, t933, t929, t950; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t841, t800, t839, -t955, t846, t955, 0, t709, t664, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t853, t802, t848, -t840, -t838, t853, -t709, 0, t665, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t878, t850, t801, -t878, -t799, -t888, -t664, -t665, 0, 0;];
m_new_reg = t1;
