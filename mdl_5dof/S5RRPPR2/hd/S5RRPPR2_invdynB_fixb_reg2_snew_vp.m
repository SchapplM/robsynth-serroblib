% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 10:06
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 10:05:56
% EndTime: 2022-01-20 10:06:06
% DurationCPUTime: 8.68s
% Computational Cost: add. (33754->446), mult. (47250->668), div. (0->0), fcn. (28279->10), ass. (0->307)
t487 = (qJD(1) + qJD(2));
t482 = t487 ^ 2;
t494 = cos(pkin(8));
t483 = qJDD(1) + qJDD(2);
t492 = sin(pkin(8));
t540 = t492 * t483;
t444 = t494 * t482 + t540;
t534 = t494 * t483;
t447 = t492 * t482 - t534;
t496 = sin(qJ(2));
t499 = cos(qJ(2));
t392 = t499 * t444 - t496 * t447;
t490 = g(3) - qJDD(3);
t420 = qJ(3) * t444 - t494 * t490;
t560 = qJ(3) * t447 - t492 * t490;
t329 = pkin(6) * t392 + t499 * t420 - t496 * t560;
t396 = t496 * t444 + t499 * t447;
t497 = sin(qJ(1));
t500 = cos(qJ(1));
t344 = t497 * t392 + t500 * t396;
t569 = pkin(6) * t396 + t496 * t420 + t499 * t560;
t579 = pkin(5) * t344 + t497 * t329 + t500 * t569;
t559 = t500 * t392 - t497 * t396;
t578 = pkin(5) * t559 + t500 * t329 - t497 * t569;
t471 = t497 * g(1) - t500 * g(2);
t458 = qJDD(1) * pkin(1) + t471;
t472 = t500 * g(1) + t497 * g(2);
t501 = qJD(1) ^ 2;
t459 = -t501 * pkin(1) - t472;
t411 = t496 * t458 + t499 * t459;
t398 = -t482 * pkin(2) + t411;
t506 = t499 * t458 - t496 * t459;
t504 = t483 * pkin(2) + t506;
t346 = t492 * t398 - t494 * t504;
t347 = t494 * t398 + t492 * t504;
t515 = t492 * t346 + t494 * t347;
t288 = t494 * t346 - t492 * t347;
t524 = t499 * t288;
t247 = -t496 * t515 + t524;
t529 = t496 * t288;
t564 = t499 * t515 + t529;
t220 = t497 * t247 + t500 * t564;
t575 = t500 * t247 - t497 * t564;
t491 = sin(pkin(9));
t485 = t491 ^ 2;
t493 = cos(pkin(9));
t486 = t493 ^ 2;
t437 = (t485 + t486) * t493 * t482;
t517 = t493 * t534;
t406 = -t492 * t437 + t517;
t537 = t493 * t483;
t408 = t494 * t437 + t492 * t537;
t351 = t499 * t406 - t496 * t408;
t353 = t496 * t406 + t499 * t408;
t297 = t500 * t351 - t497 * t353;
t572 = t497 * t351 + t500 * t353;
t451 = t499 * t482 + t496 * t483;
t454 = t496 * t482 - t499 * t483;
t401 = t497 * t451 + t500 * t454;
t428 = pkin(6) * t451 - t499 * g(3);
t561 = pkin(6) * t454 - t496 * g(3);
t571 = pkin(5) * t401 + t497 * t428 + t500 * t561;
t507 = t500 * t451 - t497 * t454;
t570 = pkin(5) * t507 + t500 * t428 - t497 * t561;
t514 = t499 * t411 - t496 * t506;
t357 = -t496 * t411 - t499 * t506;
t528 = t497 * t357;
t301 = t500 * t514 + t528;
t523 = t500 * t357;
t563 = -t497 * t514 + t523;
t332 = -t482 * pkin(3) + t483 * qJ(4) + t347;
t549 = 2 * qJD(4);
t562 = (t487 * t549) + t332;
t413 = t444 * t493 * t491;
t538 = t492 * t493;
t414 = (-t482 * t538 + t517) * t491;
t361 = t499 * t413 + t496 * t414;
t364 = t496 * t413 - t499 * t414;
t558 = t500 * t361 - t497 * t364;
t557 = t497 * t361 + t500 * t364;
t495 = sin(qJ(5));
t498 = cos(qJ(5));
t423 = (qJD(5) * t487 * t498 + t483 * t495) * t491;
t536 = t493 * t487;
t467 = -qJD(5) + t536;
t542 = t487 * t491;
t521 = t467 * t542;
t434 = t498 * t521;
t380 = t434 - t423;
t556 = t495 * t380;
t519 = t495 * t542;
t424 = t498 * t491 * t483 - qJD(5) * t519;
t511 = t467 * t519;
t381 = t424 + t511;
t376 = t498 * t381;
t464 = t467 ^ 2;
t548 = pkin(4) * t491;
t547 = pkin(4) * t493;
t478 = t483 * pkin(3);
t465 = -qJDD(5) + t537;
t544 = t465 * t491;
t543 = t485 * t482;
t331 = -t482 * qJ(4) + qJDD(4) + t346 - t478;
t541 = t492 * t331;
t535 = t494 * t331;
t510 = -pkin(7) * t491 - t547;
t439 = t510 * t487;
t477 = t493 * t490;
t303 = t477 + (t332 + (t549 + t439) * t487) * t491;
t532 = t495 * t303;
t520 = t482 * t495 * t498;
t456 = t485 * t520;
t421 = -t456 + t465;
t531 = t495 * t421;
t422 = -t456 - t465;
t530 = t495 * t422;
t527 = t498 * t303;
t526 = t498 * t421;
t525 = t498 * t422;
t318 = -t491 * t490 + t562 * t493;
t304 = t439 * t536 + t318;
t319 = t483 * t510 + t331;
t263 = t498 * t304 + t495 * t319;
t489 = t498 ^ 2;
t518 = t489 * t543;
t516 = -t331 + t478;
t262 = t495 * t304 - t498 * t319;
t317 = t562 * t491 + t477;
t274 = t491 * t317 + t493 * t318;
t416 = -t497 * t471 - t500 * t472;
t484 = t491 * t485;
t512 = t484 * t520;
t462 = t500 * qJDD(1) - t497 * t501;
t509 = -pkin(5) * t462 - t497 * g(3);
t508 = t493 * t456;
t236 = -t498 * t262 + t495 * t263;
t237 = t495 * t262 + t498 * t263;
t273 = t493 * t317 - t491 * t318;
t415 = t500 * t471 - t497 * t472;
t488 = t495 ^ 2;
t475 = t486 * t482;
t474 = t486 * t483;
t473 = t485 * t483;
t466 = t488 * t543;
t461 = t497 * qJDD(1) + t500 * t501;
t450 = t475 - t543;
t449 = t475 + t543;
t442 = t474 - t473;
t441 = t474 + t473;
t440 = -pkin(5) * t461 + t500 * g(3);
t436 = (t486 * t491 + t484) * t482;
t433 = t466 - t518;
t432 = t466 + t518;
t431 = t464 - t518;
t430 = -t466 - t464;
t429 = t466 - t464;
t412 = -t518 - t464;
t407 = t494 * t436 + t491 * t540;
t404 = t492 * t436 - t491 * t534;
t391 = t494 * t442 - t492 * t450;
t390 = t494 * t441 - t492 * t449;
t389 = t492 * t442 + t494 * t450;
t388 = t492 * t441 + t494 * t449;
t387 = (-t488 - t489) * t521;
t383 = t511 - t424;
t379 = t434 + t423;
t378 = -t495 * t424 + t489 * t521;
t377 = t498 * t423 + t488 * t521;
t374 = t498 * t430 - t530;
t373 = t498 * t429 + t531;
t372 = -t495 * t431 + t525;
t371 = t495 * t430 + t525;
t370 = -t495 * t429 + t526;
t369 = -t498 * t431 - t530;
t368 = -t495 * t412 + t526;
t367 = t498 * t412 + t531;
t366 = -t492 * t387 - t494 * t544;
t365 = t494 * t387 - t492 * t544;
t360 = t493 * t376 + t512;
t359 = -t493 * t556 - t512;
t352 = -t496 * t404 + t499 * t407;
t349 = t499 * t404 + t496 * t407;
t348 = pkin(1) * g(3) + pkin(6) * t514;
t341 = -t496 * t389 + t499 * t391;
t340 = -t496 * t388 + t499 * t390;
t339 = t499 * t389 + t496 * t391;
t338 = t499 * t388 + t496 * t390;
t336 = t498 * t380 - t495 * t381;
t335 = -t498 * t379 - t495 * t383;
t334 = -t376 - t556;
t333 = -t495 * t379 + t498 * t383;
t325 = t493 * t374 - t491 * t380;
t324 = t493 * t373 - t491 * t379;
t323 = t493 * t372 - t491 * t383;
t322 = t491 * t374 + t493 * t380;
t321 = t493 * t368 + t381 * t491;
t320 = t491 * t368 - t381 * t493;
t313 = t494 * t360 - t492 * t378;
t312 = t494 * t359 - t492 * t377;
t311 = t492 * t360 + t494 * t378;
t310 = t492 * t359 + t494 * t377;
t309 = t493 * t336 - t491 * t433;
t308 = t493 * t335 - t491 * t432;
t307 = t491 * t335 + t493 * t432;
t306 = -t496 * t365 + t499 * t366;
t305 = t499 * t365 + t496 * t366;
t298 = -t497 * t349 + t500 * t352;
t296 = t500 * t349 + t497 * t352;
t295 = t494 * t325 + t492 * t371;
t294 = t494 * t324 - t492 * t370;
t293 = t494 * t323 - t492 * t369;
t292 = t492 * t325 - t494 * t371;
t291 = t492 * t324 + t494 * t370;
t290 = t492 * t323 + t494 * t369;
t285 = t494 * t321 + t492 * t367;
t284 = t492 * t321 - t494 * t367;
t283 = -t497 * t338 + t500 * t340;
t282 = t500 * t338 + t497 * t340;
t281 = pkin(2) * t490 + qJ(3) * t515;
t280 = -pkin(7) * t371 + t532;
t279 = -pkin(7) * t367 + t527;
t278 = t494 * t309 - t492 * t334;
t277 = t494 * t308 + t492 * t333;
t276 = t492 * t309 + t494 * t334;
t275 = t492 * t308 - t494 * t333;
t271 = -t496 * t311 + t499 * t313;
t270 = -t496 * t310 + t499 * t312;
t269 = t499 * t311 + t496 * t313;
t268 = t499 * t310 + t496 * t312;
t267 = -qJ(3) * t404 - t492 * t318 + t493 * t535;
t266 = -qJ(3) * t406 - t492 * t317 + t491 * t535;
t265 = qJ(3) * t407 + t494 * t318 + t331 * t538;
t264 = -qJ(3) * t408 + t494 * t317 + t491 * t541;
t261 = -qJ(3) * t388 + t494 * t273;
t260 = qJ(3) * t390 + t492 * t273;
t259 = -pkin(4) * t371 + t262;
t258 = -pkin(4) * t367 + t263;
t257 = -t496 * t292 + t499 * t295;
t256 = -t496 * t291 + t499 * t294;
t255 = -t496 * t290 + t499 * t293;
t254 = t499 * t292 + t496 * t295;
t253 = t499 * t291 + t496 * t294;
t252 = t499 * t290 + t496 * t293;
t251 = t494 * t274 + t541;
t250 = t492 * t274 - t535;
t249 = -pkin(3) * t322 - pkin(4) * t380 - pkin(7) * t374 + t527;
t244 = -pkin(3) * t320 + pkin(4) * t381 - pkin(7) * t368 - t532;
t243 = -t496 * t284 + t499 * t285;
t242 = t499 * t284 + t496 * t285;
t241 = -t496 * t276 + t499 * t278;
t240 = -t496 * t275 + t499 * t277;
t239 = t499 * t276 + t496 * t278;
t238 = t499 * t275 + t496 * t277;
t235 = -pkin(6) * t349 - t496 * t265 + t499 * t267;
t234 = -pkin(6) * t351 - t496 * t264 + t499 * t266;
t233 = pkin(6) * t352 + t499 * t265 + t496 * t267;
t232 = -pkin(6) * t353 + t499 * t264 + t496 * t266;
t231 = -qJ(4) * t322 - t491 * t259 + t493 * t280;
t230 = -pkin(7) * t333 - t236;
t229 = -qJ(4) * t320 - t491 * t258 + t493 * t279;
t228 = -pkin(6) * t338 - t496 * t260 + t499 * t261;
t227 = pkin(6) * t340 + t499 * t260 + t496 * t261;
t226 = -t497 * t254 + t500 * t257;
t225 = t500 * t254 + t497 * t257;
t224 = t493 * t237 + t491 * t303;
t223 = t491 * t237 - t493 * t303;
t222 = -t496 * t250 + t499 * t251;
t221 = t499 * t250 + t496 * t251;
t218 = pkin(6) * t247 + qJ(3) * t524 - t496 * t281;
t217 = pkin(1) * t490 + pkin(6) * t564 + qJ(3) * t529 + t499 * t281;
t216 = -t497 * t242 + t500 * t243;
t215 = t500 * t242 + t497 * t243;
t214 = -pkin(3) * t307 - pkin(4) * t432 - pkin(7) * t335 - t237;
t213 = -qJ(3) * t250 - (pkin(3) * t492 - qJ(4) * t494) * t273;
t212 = -qJ(4) * t307 + t493 * t230 + t333 * t548;
t211 = -t497 * t238 + t500 * t240;
t210 = t500 * t238 + t497 * t240;
t209 = qJ(3) * t251 - (-pkin(3) * t494 - qJ(4) * t492 - pkin(2)) * t273;
t208 = -qJ(3) * t292 + t494 * t231 - t492 * t249;
t207 = -qJ(3) * t284 + t494 * t229 - t492 * t244;
t206 = t494 * t224 + t492 * t236;
t205 = t492 * t224 - t494 * t236;
t204 = -pkin(2) * t322 + qJ(3) * t295 + t492 * t231 + t494 * t249;
t203 = -pkin(2) * t320 + qJ(3) * t285 + t492 * t229 + t494 * t244;
t202 = -pkin(3) * t223 + pkin(4) * t303 - pkin(7) * t237;
t201 = -t497 * t221 + t500 * t222;
t200 = t500 * t221 + t497 * t222;
t199 = -qJ(4) * t223 + (-pkin(7) * t493 + t548) * t236;
t198 = -qJ(3) * t275 + t494 * t212 - t492 * t214;
t197 = -pkin(2) * t307 + qJ(3) * t277 + t492 * t212 + t494 * t214;
t196 = -t496 * t205 + t499 * t206;
t195 = t499 * t205 + t496 * t206;
t194 = -pkin(6) * t221 - t496 * t209 + t499 * t213;
t193 = -pkin(6) * t254 - t496 * t204 + t499 * t208;
t192 = -pkin(1) * t322 + pkin(6) * t257 + t499 * t204 + t496 * t208;
t191 = pkin(1) * t273 + pkin(6) * t222 + t499 * t209 + t496 * t213;
t190 = -pkin(6) * t242 - t496 * t203 + t499 * t207;
t189 = -pkin(1) * t320 + pkin(6) * t243 + t499 * t203 + t496 * t207;
t188 = -pkin(6) * t238 - t496 * t197 + t499 * t198;
t187 = -qJ(3) * t205 + t494 * t199 - t492 * t202;
t186 = -pkin(1) * t307 + pkin(6) * t240 + t499 * t197 + t496 * t198;
t185 = -t497 * t195 + t500 * t196;
t184 = t500 * t195 + t497 * t196;
t183 = -pkin(2) * t223 + qJ(3) * t206 + t492 * t199 + t494 * t202;
t182 = -pkin(6) * t195 - t496 * t183 + t499 * t187;
t181 = -pkin(1) * t223 + pkin(6) * t196 + t499 * t183 + t496 * t187;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t461, -t462, 0, t416, 0, 0, 0, 0, 0, 0, -t507, t401, 0, t301, 0, 0, 0, 0, 0, 0, -t559, t344, 0, t220, 0, 0, 0, 0, 0, 0, -t572, t298, t283, t201, 0, 0, 0, 0, 0, 0, t226, t216, t211, t185; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t462, -t461, 0, t415, 0, 0, 0, 0, 0, 0, -t401, -t507, 0, -t563, 0, 0, 0, 0, 0, 0, -t344, -t559, 0, -t575, 0, 0, 0, 0, 0, 0, t297, t296, t282, t200, 0, 0, 0, 0, 0, 0, t225, t215, t210, t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t490, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t273, 0, 0, 0, 0, 0, 0, t322, t320, t307, t223; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t462, 0, -t461, 0, t509, -t440, -t415, -pkin(5) * t415, 0, 0, -t401, 0, -t507, 0, t571, t570, t563, pkin(5) * t563 + pkin(6) * t523 - t497 * t348, 0, 0, -t344, 0, -t559, 0, t579, t578, t575, pkin(5) * t575 - t497 * t217 + t500 * t218, -t557, -t497 * t339 + t500 * t341, t298, t557, t572, 0, -pkin(5) * t297 - t497 * t232 + t500 * t234, -pkin(5) * t296 - t497 * t233 + t500 * t235, -pkin(5) * t282 - t497 * t227 + t500 * t228, -pkin(5) * t200 - t497 * t191 + t500 * t194, -t497 * t269 + t500 * t271, -t497 * t239 + t500 * t241, -t497 * t252 + t500 * t255, -t497 * t268 + t500 * t270, -t497 * t253 + t500 * t256, -t497 * t305 + t500 * t306, -pkin(5) * t225 - t497 * t192 + t500 * t193, -pkin(5) * t215 - t497 * t189 + t500 * t190, -pkin(5) * t210 - t497 * t186 + t500 * t188, -pkin(5) * t184 - t497 * t181 + t500 * t182; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t461, 0, t462, 0, t440, t509, t416, pkin(5) * t416, 0, 0, t507, 0, -t401, 0, -t570, t571, t301, pkin(5) * t301 + pkin(6) * t528 + t500 * t348, 0, 0, t559, 0, -t344, 0, -t578, t579, t220, pkin(5) * t220 + t500 * t217 + t497 * t218, t558, t500 * t339 + t497 * t341, t296, -t558, -t297, 0, -pkin(5) * t572 + t500 * t232 + t497 * t234, pkin(5) * t298 + t500 * t233 + t497 * t235, pkin(5) * t283 + t500 * t227 + t497 * t228, pkin(5) * t201 + t500 * t191 + t497 * t194, t500 * t269 + t497 * t271, t500 * t239 + t497 * t241, t500 * t252 + t497 * t255, t500 * t268 + t497 * t270, t500 * t253 + t497 * t256, t500 * t305 + t497 * t306, pkin(5) * t226 + t500 * t192 + t497 * t193, pkin(5) * t216 + t500 * t189 + t497 * t190, pkin(5) * t211 + t500 * t186 + t497 * t188, pkin(5) * t185 + t500 * t181 + t497 * t182; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t471, t472, 0, 0, 0, 0, 0, 0, 0, t483, -pkin(1) * t454 + t506, -pkin(1) * t451 - t411, 0, -pkin(1) * t357, 0, 0, 0, 0, 0, t483, -pkin(1) * t396 - pkin(2) * t447 - t346, -pkin(1) * t392 - pkin(2) * t444 - t347, 0, -pkin(1) * t247 - pkin(2) * t288, t473, 0.2e1 * t491 * t537, 0, t474, 0, 0, pkin(1) * t351 + pkin(2) * t406 - qJ(4) * t437 + t493 * t516, pkin(1) * t349 + pkin(2) * t404 + qJ(4) * t436 - t491 * t516, pkin(1) * t338 + pkin(2) * t388 + pkin(3) * t449 + qJ(4) * t441 + t274, pkin(1) * t221 + pkin(2) * t250 - pkin(3) * t331 + qJ(4) * t274, t491 * t376 - t508, t491 * t336 + t493 * t433, t491 * t372 + t493 * t383, -t491 * t556 + t508, t491 * t373 + t493 * t379, t493 * t465, pkin(1) * t254 + pkin(2) * t292 - pkin(3) * t371 + qJ(4) * t325 + t493 * t259 + t491 * t280, pkin(1) * t242 + pkin(2) * t284 - pkin(3) * t367 + qJ(4) * t321 + t493 * t258 + t491 * t279, pkin(1) * t238 + pkin(2) * t275 + qJ(4) * t308 + t491 * t230 + (-pkin(3) - t547) * t333, pkin(1) * t195 + pkin(2) * t205 + qJ(4) * t224 + (-pkin(3) + t510) * t236;];
tauB_reg = t1;
