% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 10:49
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 10:49:08
% EndTime: 2022-01-20 10:49:11
% DurationCPUTime: 2.63s
% Computational Cost: add. (11445->183), mult. (15217->261), div. (0->0), fcn. (9583->10), ass. (0->151)
t1262 = qJD(1) + qJD(2);
t1259 = t1262 ^ 2;
t1260 = qJDD(1) + qJDD(2);
t1266 = sin(pkin(9));
t1267 = cos(pkin(9));
t1232 = t1266 * t1259 - t1267 * t1260;
t1270 = sin(qJ(2));
t1274 = cos(qJ(2));
t1283 = -t1267 * t1259 - t1266 * t1260;
t1208 = t1274 * t1232 - t1270 * t1283;
t1271 = sin(qJ(1));
t1275 = cos(qJ(1));
t1306 = t1270 * t1232 + t1274 * t1283;
t1310 = t1271 * t1208 + t1275 * t1306;
t1309 = t1275 * t1208 - t1271 * t1306;
t1238 = t1270 * t1259 - t1274 * t1260;
t1282 = -t1274 * t1259 - t1270 * t1260;
t1305 = t1271 * t1238 + t1275 * t1282;
t1304 = t1275 * t1238 - t1271 * t1282;
t1261 = qJD(4) + qJD(5);
t1299 = qJD(5) + t1261;
t1268 = sin(qJ(5));
t1272 = cos(qJ(5));
t1273 = cos(qJ(4));
t1293 = t1262 * t1273;
t1269 = sin(qJ(4));
t1294 = t1262 * t1269;
t1221 = t1268 * t1294 - t1272 * t1293;
t1298 = t1221 ^ 2;
t1223 = (t1268 * t1273 + t1269 * t1272) * t1262;
t1297 = t1223 ^ 2;
t1296 = t1261 ^ 2;
t1295 = t1223 * t1221;
t1264 = t1273 ^ 2;
t1292 = t1264 * t1259;
t1291 = t1269 * t1260;
t1290 = qJD(5) - t1261;
t1250 = t1271 * g(1) - t1275 * g(2);
t1280 = qJDD(1) * pkin(1) + t1250;
t1251 = -t1275 * g(1) - t1271 * g(2);
t1277 = qJD(1) ^ 2;
t1281 = -t1277 * pkin(1) + t1251;
t1214 = t1270 * t1280 + t1274 * t1281;
t1212 = -t1259 * pkin(2) + t1214;
t1213 = -t1270 * t1281 + t1274 * t1280;
t1278 = t1260 * pkin(2) + t1213;
t1190 = t1267 * t1212 + t1266 * t1278;
t1182 = -t1259 * pkin(3) + t1260 * pkin(7) + t1190;
t1265 = -g(3) + qJDD(3);
t1177 = t1273 * t1182 + t1269 * t1265;
t1263 = t1269 ^ 2;
t1289 = t1263 + t1264;
t1249 = t1273 * t1259 * t1269;
t1241 = qJDD(4) + t1249;
t1288 = -qJDD(4) - qJDD(5);
t1287 = qJD(4) * t1294;
t1286 = qJD(4) * t1293;
t1176 = -t1269 * t1182 + t1273 * t1265;
t1189 = -t1266 * t1212 + t1267 * t1278;
t1227 = t1286 + t1291;
t1254 = t1273 * t1260;
t1284 = -t1254 + t1287;
t1285 = -t1268 * t1227 - t1272 * t1284;
t1181 = -t1260 * pkin(3) - t1259 * pkin(7) - t1189;
t1279 = -t1272 * t1227 + t1268 * t1284;
t1276 = qJD(4) ^ 2;
t1247 = -t1276 - t1292;
t1246 = -t1263 * t1259 - t1276;
t1245 = -t1271 * qJDD(1) - t1275 * t1277;
t1244 = t1275 * qJDD(1) - t1271 * t1277;
t1243 = qJD(4) * pkin(4) - pkin(8) * t1294;
t1242 = -qJDD(4) + t1249;
t1240 = t1289 * t1259;
t1235 = t1289 * t1260;
t1228 = t1254 - 0.2e1 * t1287;
t1226 = 0.2e1 * t1286 + t1291;
t1219 = -t1296 - t1297;
t1218 = t1273 * t1242 - t1269 * t1246;
t1217 = -t1269 * t1241 + t1273 * t1247;
t1216 = t1269 * t1242 + t1273 * t1246;
t1215 = t1273 * t1241 + t1269 * t1247;
t1211 = t1267 * t1235 - t1266 * t1240;
t1210 = t1266 * t1235 + t1267 * t1240;
t1202 = t1288 - t1295;
t1201 = -t1288 - t1295;
t1200 = -t1296 - t1298;
t1199 = t1267 * t1218 + t1266 * t1226;
t1198 = t1267 * t1217 - t1266 * t1228;
t1197 = t1266 * t1218 - t1267 * t1226;
t1196 = t1266 * t1217 + t1267 * t1228;
t1195 = -t1297 - t1298;
t1194 = -t1270 * t1213 + t1274 * t1214;
t1193 = t1274 * t1213 + t1270 * t1214;
t1192 = t1272 * t1202 - t1268 * t1219;
t1191 = t1268 * t1202 + t1272 * t1219;
t1188 = -t1270 * t1210 + t1274 * t1211;
t1187 = t1274 * t1210 + t1270 * t1211;
t1186 = t1290 * t1221 + t1279;
t1185 = -t1299 * t1221 - t1279;
t1184 = -t1290 * t1223 + t1285;
t1183 = t1299 * t1223 - t1285;
t1179 = t1272 * t1200 - t1268 * t1201;
t1178 = t1268 * t1200 + t1272 * t1201;
t1175 = -t1270 * t1197 + t1274 * t1199;
t1174 = -t1270 * t1196 + t1274 * t1198;
t1173 = t1274 * t1197 + t1270 * t1199;
t1172 = t1274 * t1196 + t1270 * t1198;
t1171 = t1284 * pkin(4) - pkin(8) * t1292 + t1243 * t1294 + t1181;
t1170 = -pkin(4) * t1292 - t1284 * pkin(8) - qJD(4) * t1243 + t1177;
t1169 = (-t1227 + t1286) * pkin(8) + t1241 * pkin(4) + t1176;
t1168 = -t1269 * t1191 + t1273 * t1192;
t1167 = t1273 * t1191 + t1269 * t1192;
t1166 = -t1266 * t1189 + t1267 * t1190;
t1165 = t1267 * t1189 + t1266 * t1190;
t1164 = t1272 * t1184 - t1268 * t1186;
t1163 = t1268 * t1184 + t1272 * t1186;
t1162 = -t1269 * t1178 + t1273 * t1179;
t1161 = t1273 * t1178 + t1269 * t1179;
t1160 = -t1269 * t1176 + t1273 * t1177;
t1159 = t1273 * t1176 + t1269 * t1177;
t1158 = t1267 * t1168 + t1266 * t1185;
t1157 = t1266 * t1168 - t1267 * t1185;
t1156 = t1268 * t1169 + t1272 * t1170;
t1155 = t1267 * t1162 + t1266 * t1183;
t1154 = t1272 * t1169 - t1268 * t1170;
t1153 = t1266 * t1162 - t1267 * t1183;
t1152 = t1267 * t1160 + t1266 * t1181;
t1151 = t1266 * t1160 - t1267 * t1181;
t1150 = -t1270 * t1165 + t1274 * t1166;
t1149 = t1274 * t1165 + t1270 * t1166;
t1148 = -t1269 * t1163 + t1273 * t1164;
t1147 = t1273 * t1163 + t1269 * t1164;
t1146 = t1267 * t1148 + t1266 * t1195;
t1145 = t1266 * t1148 - t1267 * t1195;
t1144 = -t1270 * t1157 + t1274 * t1158;
t1143 = t1274 * t1157 + t1270 * t1158;
t1142 = -t1270 * t1153 + t1274 * t1155;
t1141 = -t1268 * t1154 + t1272 * t1156;
t1140 = t1274 * t1153 + t1270 * t1155;
t1139 = t1272 * t1154 + t1268 * t1156;
t1138 = -t1270 * t1151 + t1274 * t1152;
t1137 = t1274 * t1151 + t1270 * t1152;
t1136 = -t1270 * t1145 + t1274 * t1146;
t1135 = t1274 * t1145 + t1270 * t1146;
t1134 = -t1269 * t1139 + t1273 * t1141;
t1133 = t1273 * t1139 + t1269 * t1141;
t1132 = t1267 * t1134 + t1266 * t1171;
t1131 = t1266 * t1134 - t1267 * t1171;
t1130 = -t1270 * t1131 + t1274 * t1132;
t1129 = t1274 * t1131 + t1270 * t1132;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1245, -t1244, 0, -t1271 * t1250 + t1275 * t1251, 0, 0, 0, 0, 0, 0, t1305, t1304, 0, -t1271 * t1193 + t1275 * t1194, 0, 0, 0, 0, 0, 0, t1310, t1309, 0, -t1271 * t1149 + t1275 * t1150, 0, 0, 0, 0, 0, 0, -t1271 * t1172 + t1275 * t1174, -t1271 * t1173 + t1275 * t1175, -t1271 * t1187 + t1275 * t1188, -t1271 * t1137 + t1275 * t1138, 0, 0, 0, 0, 0, 0, -t1271 * t1140 + t1275 * t1142, -t1271 * t1143 + t1275 * t1144, -t1271 * t1135 + t1275 * t1136, -t1271 * t1129 + t1275 * t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1244, t1245, 0, t1275 * t1250 + t1271 * t1251, 0, 0, 0, 0, 0, 0, -t1304, t1305, 0, t1275 * t1193 + t1271 * t1194, 0, 0, 0, 0, 0, 0, -t1309, t1310, 0, t1275 * t1149 + t1271 * t1150, 0, 0, 0, 0, 0, 0, t1275 * t1172 + t1271 * t1174, t1275 * t1173 + t1271 * t1175, t1275 * t1187 + t1271 * t1188, t1275 * t1137 + t1271 * t1138, 0, 0, 0, 0, 0, 0, t1275 * t1140 + t1271 * t1142, t1275 * t1143 + t1271 * t1144, t1275 * t1135 + t1271 * t1136, t1275 * t1129 + t1271 * t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1265, 0, 0, 0, 0, 0, 0, t1215, t1216, 0, t1159, 0, 0, 0, 0, 0, 0, t1161, t1167, t1147, t1133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1277, -qJDD(1), 0, t1251, 0, 0, 0, 0, 0, 0, t1282, t1238, 0, t1194, 0, 0, 0, 0, 0, 0, t1306, t1208, 0, t1150, 0, 0, 0, 0, 0, 0, t1174, t1175, t1188, t1138, 0, 0, 0, 0, 0, 0, t1142, t1144, t1136, t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1277, 0, t1250, 0, 0, 0, 0, 0, 0, -t1238, t1282, 0, t1193, 0, 0, 0, 0, 0, 0, -t1208, t1306, 0, t1149, 0, 0, 0, 0, 0, 0, t1172, t1173, t1187, t1137, 0, 0, 0, 0, 0, 0, t1140, t1143, t1135, t1129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1265, 0, 0, 0, 0, 0, 0, t1215, t1216, 0, t1159, 0, 0, 0, 0, 0, 0, t1161, t1167, t1147, t1133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1259, -t1260, 0, t1214, 0, 0, 0, 0, 0, 0, t1283, t1232, 0, t1166, 0, 0, 0, 0, 0, 0, t1198, t1199, t1211, t1152, 0, 0, 0, 0, 0, 0, t1155, t1158, t1146, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, -t1259, 0, t1213, 0, 0, 0, 0, 0, 0, -t1232, t1283, 0, t1165, 0, 0, 0, 0, 0, 0, t1196, t1197, t1210, t1151, 0, 0, 0, 0, 0, 0, t1153, t1157, t1145, t1131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1265, 0, 0, 0, 0, 0, 0, t1215, t1216, 0, t1159, 0, 0, 0, 0, 0, 0, t1161, t1167, t1147, t1133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1259, -t1260, 0, t1190, 0, 0, 0, 0, 0, 0, t1217, t1218, t1235, t1160, 0, 0, 0, 0, 0, 0, t1162, t1168, t1148, t1134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, -t1259, 0, t1189, 0, 0, 0, 0, 0, 0, t1228, -t1226, t1240, -t1181, 0, 0, 0, 0, 0, 0, -t1183, -t1185, -t1195, -t1171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1265, 0, 0, 0, 0, 0, 0, t1215, t1216, 0, t1159, 0, 0, 0, 0, 0, 0, t1161, t1167, t1147, t1133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1247, t1242, t1254, t1177, 0, 0, 0, 0, 0, 0, t1179, t1192, t1164, t1141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1241, t1246, -t1291, t1176, 0, 0, 0, 0, 0, 0, t1178, t1191, t1163, t1139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1228, t1226, -t1240, t1181, 0, 0, 0, 0, 0, 0, t1183, t1185, t1195, t1171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1200, t1202, t1184, t1156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1201, t1219, t1186, t1154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1183, t1185, t1195, t1171;];
f_new_reg = t1;
