% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:31
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:31:04
% EndTime: 2022-01-20 11:31:14
% DurationCPUTime: 11.02s
% Computational Cost: add. (59094->419), mult. (74873->563), div. (0->0), fcn. (44118->10), ass. (0->285)
t827 = qJD(1) + qJD(2);
t823 = qJD(3) + t827;
t821 = t823 ^ 2;
t826 = qJDD(1) + qJDD(2);
t822 = qJDD(3) + t826;
t831 = sin(pkin(9));
t832 = cos(pkin(9));
t781 = t832 * t821 + t831 * t822;
t784 = t831 * t821 - t832 * t822;
t834 = sin(qJ(3));
t838 = cos(qJ(3));
t716 = t838 * t781 - t834 * t784;
t830 = g(3) - qJDD(4);
t757 = qJ(4) * t781 - t832 * t830;
t908 = qJ(4) * t784 - t831 * t830;
t660 = pkin(7) * t716 + t838 * t757 - t834 * t908;
t720 = t834 * t781 + t838 * t784;
t835 = sin(qJ(2));
t839 = cos(qJ(2));
t670 = t839 * t716 - t835 * t720;
t924 = pkin(7) * t720 + t834 * t757 + t838 * t908;
t600 = pkin(6) * t670 + t839 * t660 - t835 * t924;
t836 = sin(qJ(1));
t840 = cos(qJ(1));
t674 = t835 * t716 + t839 * t720;
t929 = t840 * t670 - t836 * t674;
t942 = pkin(6) * t674 + t835 * t660 + t839 * t924;
t954 = pkin(5) * t929 + t840 * t600 - t836 * t942;
t944 = t836 * t670 + t840 * t674;
t953 = pkin(5) * t944 + t836 * t600 + t840 * t942;
t814 = t836 * g(1) - t840 * g(2);
t803 = qJDD(1) * pkin(1) + t814;
t815 = t840 * g(1) + t836 * g(2);
t843 = qJD(1) ^ 2;
t804 = -t843 * pkin(1) - t815;
t742 = -t839 * t803 + t835 * t804;
t731 = t826 * pkin(2) - t742;
t743 = t835 * t803 + t839 * t804;
t825 = t827 ^ 2;
t732 = -t825 * pkin(2) + t743;
t684 = t834 * t731 + t838 * t732;
t681 = -t821 * pkin(3) + t684;
t683 = -t838 * t731 + t834 * t732;
t848 = t822 * pkin(3) - t683;
t633 = t831 * t681 - t832 * t848;
t634 = t832 * t681 + t831 * t848;
t869 = t831 * t633 + t832 * t634;
t589 = t832 * t633 - t831 * t634;
t880 = t838 * t589;
t565 = -t834 * t869 + t880;
t884 = t834 * t589;
t914 = t838 * t869 + t884;
t549 = t839 * t565 - t835 * t914;
t938 = t835 * t565 + t839 * t914;
t951 = t836 * t549 + t840 * t938;
t950 = t840 * t549 - t836 * t938;
t787 = t838 * t821 + t834 * t822;
t790 = t834 * t821 - t838 * t822;
t724 = t839 * t787 - t835 * t790;
t761 = pkin(7) * t787 - t838 * g(3);
t909 = pkin(7) * t790 - t834 * g(3);
t668 = pkin(6) * t724 + t839 * t761 - t835 * t909;
t728 = t835 * t787 + t839 * t790;
t906 = t840 * t724 - t836 * t728;
t925 = pkin(6) * t728 + t835 * t761 + t839 * t909;
t945 = pkin(5) * t906 + t840 * t668 - t836 * t925;
t927 = t836 * t724 + t840 * t728;
t943 = pkin(5) * t927 + t836 * t668 + t840 * t925;
t868 = t834 * t683 + t838 * t684;
t639 = t838 * t683 - t834 * t684;
t879 = t839 * t639;
t593 = -t835 * t868 + t879;
t883 = t835 * t639;
t915 = t839 * t868 + t883;
t937 = t836 * t593 + t840 * t915;
t936 = t840 * t593 - t836 * t915;
t796 = t839 * t825 + t835 * t826;
t766 = pkin(6) * t796 - t839 * g(3);
t799 = t835 * t825 - t839 * t826;
t851 = t840 * t796 - t836 * t799;
t910 = pkin(6) * t799 - t835 * g(3);
t928 = pkin(5) * t851 + t840 * t766 - t836 * t910;
t905 = t836 * t796 + t840 * t799;
t926 = pkin(5) * t905 + t836 * t766 + t840 * t910;
t867 = t835 * t742 + t839 * t743;
t691 = t839 * t742 - t835 * t743;
t882 = t836 * t691;
t916 = t840 * t867 + t882;
t878 = t840 * t691;
t913 = -t836 * t867 + t878;
t629 = -t821 * pkin(4) + t822 * pkin(8) + t634;
t833 = sin(qJ(5));
t837 = cos(qJ(5));
t621 = t833 * t629 + t837 * t830;
t622 = t837 * t629 - t833 * t830;
t584 = t833 * t621 + t837 * t622;
t828 = t833 ^ 2;
t890 = t828 * t821;
t628 = -t822 * pkin(4) - t821 * pkin(8) + t633;
t623 = t833 * t628;
t809 = t837 * t821 * t833;
t800 = qJDD(5) + t809;
t887 = t833 * t800;
t801 = qJDD(5) - t809;
t886 = t833 * t801;
t885 = t833 * t822;
t624 = t837 * t628;
t881 = t837 * t801;
t816 = t837 * t822;
t586 = pkin(3) * t589;
t877 = -pkin(2) * t565 - t586;
t876 = -pkin(4) * t628 + pkin(8) * t584;
t829 = t837 ^ 2;
t875 = t828 + t829;
t874 = qJD(5) * t823;
t842 = qJD(5) ^ 2;
t806 = -t842 - t890;
t751 = -t833 * t806 - t881;
t813 = t837 * t874;
t776 = 0.2e1 * t813 + t885;
t873 = -pkin(4) * t776 + pkin(8) * t751 + t623;
t817 = t829 * t821;
t808 = -t817 - t842;
t749 = t837 * t808 - t887;
t870 = t833 * t874;
t779 = t816 - 0.2e1 * t870;
t872 = pkin(4) * t779 + pkin(8) * t749 - t624;
t572 = t831 * t584 - t832 * t628;
t871 = pkin(3) * t572 + t876;
t864 = -t836 * t814 - t840 * t815;
t863 = t831 * t809;
t862 = t832 * t809;
t573 = t832 * t584 + t831 * t628;
t555 = t838 * t572 + t834 * t573;
t861 = pkin(2) * t555 + t871;
t785 = t875 * t822;
t791 = t817 + t890;
t860 = pkin(4) * t791 + pkin(8) * t785 + t584;
t698 = t831 * t751 - t832 * t776;
t859 = pkin(3) * t698 + t873;
t697 = t831 * t749 + t832 * t779;
t858 = pkin(3) * t697 + t872;
t811 = t840 * qJDD(1) - t836 * t843;
t857 = -pkin(5) * t811 - t836 * g(3);
t856 = -pkin(3) * t784 - t633;
t855 = -pkin(2) * t790 - t683;
t722 = t831 * t785 + t832 * t791;
t854 = pkin(3) * t722 + t860;
t699 = t832 * t749 - t831 * t779;
t649 = t838 * t697 + t834 * t699;
t853 = pkin(2) * t649 + t858;
t700 = t832 * t751 + t831 * t776;
t650 = t838 * t698 + t834 * t700;
t852 = pkin(2) * t650 + t859;
t583 = t837 * t621 - t833 * t622;
t850 = t840 * t814 - t836 * t815;
t849 = -pkin(2) * t720 + t856;
t723 = t832 * t785 - t831 * t791;
t676 = t838 * t722 + t834 * t723;
t847 = pkin(2) * t676 + t854;
t846 = -pkin(2) * t787 - t684;
t845 = -pkin(3) * t781 - t634;
t844 = -pkin(2) * t716 + t845;
t841 = pkin(1) * g(3);
t810 = t836 * qJDD(1) + t840 * t843;
t807 = t817 - t842;
t805 = t842 - t890;
t794 = t837 * t800;
t793 = -pkin(5) * t810 + t840 * g(3);
t792 = -t817 + t890;
t778 = t816 - t870;
t777 = t813 + t885;
t770 = t875 * t874;
t753 = t831 * qJDD(5) + t832 * t770;
t752 = -t832 * qJDD(5) + t831 * t770;
t750 = -t833 * t805 + t794;
t748 = t837 * t807 - t886;
t747 = t837 * t806 - t886;
t746 = t837 * t805 + t887;
t745 = t833 * t808 + t794;
t744 = t833 * t807 + t881;
t741 = t837 * t777 - t828 * t874;
t740 = -t833 * t778 - t829 * t874;
t736 = (t777 + t813) * t833;
t735 = (t778 - t870) * t837;
t714 = -t833 * t776 + t837 * t779;
t713 = t837 * t776 + t833 * t779;
t710 = t832 * t750 + t831 * t885;
t709 = t832 * t748 + t831 * t816;
t708 = t831 * t750 - t832 * t885;
t707 = t831 * t748 - t832 * t816;
t706 = -pkin(1) * t799 - t742;
t705 = -pkin(1) * t796 - t743;
t704 = t832 * t741 - t863;
t703 = t832 * t740 + t863;
t702 = t831 * t741 + t862;
t701 = t831 * t740 - t862;
t694 = -t834 * t752 + t838 * t753;
t693 = t838 * t752 + t834 * t753;
t690 = t832 * t714 + t831 * t792;
t687 = t831 * t714 - t832 * t792;
t686 = pkin(1) * t691;
t685 = pkin(6) * t867 + t841;
t677 = -t834 * t722 + t838 * t723;
t664 = -t834 * t708 + t838 * t710;
t663 = -t834 * t707 + t838 * t709;
t662 = t838 * t708 + t834 * t710;
t661 = t838 * t707 + t834 * t709;
t656 = -t834 * t702 + t838 * t704;
t655 = -t834 * t701 + t838 * t703;
t654 = t838 * t702 + t834 * t704;
t653 = t838 * t701 + t834 * t703;
t652 = -t834 * t698 + t838 * t700;
t651 = -t834 * t697 + t838 * t699;
t646 = -t835 * t693 + t839 * t694;
t645 = t839 * t693 + t835 * t694;
t644 = -pkin(1) * t728 + t855;
t643 = -pkin(1) * t724 + t846;
t642 = -t834 * t687 + t838 * t690;
t641 = t838 * t687 + t834 * t690;
t636 = pkin(2) * t639;
t635 = pkin(2) * g(3) + pkin(7) * t868;
t631 = -t835 * t676 + t839 * t677;
t630 = t839 * t676 + t835 * t677;
t618 = -t835 * t662 + t839 * t664;
t617 = -t835 * t661 + t839 * t663;
t616 = t839 * t662 + t835 * t664;
t615 = t839 * t661 + t835 * t663;
t614 = -t835 * t654 + t839 * t656;
t613 = -t835 * t653 + t839 * t655;
t612 = t839 * t654 + t835 * t656;
t611 = t839 * t653 + t835 * t655;
t610 = -pkin(8) * t747 + t624;
t609 = -pkin(8) * t745 + t623;
t608 = -pkin(4) * t747 + t622;
t607 = -pkin(4) * t745 + t621;
t606 = -t835 * t650 + t839 * t652;
t605 = -t835 * t649 + t839 * t651;
t604 = t839 * t650 + t835 * t652;
t603 = t839 * t649 + t835 * t651;
t602 = -t835 * t641 + t839 * t642;
t601 = t839 * t641 + t835 * t642;
t596 = -pkin(1) * t674 + t849;
t595 = -pkin(1) * t670 + t844;
t585 = pkin(3) * t830 + qJ(4) * t869;
t580 = -qJ(4) * t722 + t832 * t583;
t579 = qJ(4) * t723 + t831 * t583;
t578 = -pkin(1) * t593 - t636;
t577 = -qJ(4) * t698 - t831 * t608 + t832 * t610;
t576 = -qJ(4) * t697 - t831 * t607 + t832 * t609;
t575 = -pkin(3) * t747 + qJ(4) * t700 + t832 * t608 + t831 * t610;
t574 = -pkin(3) * t745 + qJ(4) * t699 + t832 * t607 + t831 * t609;
t570 = pkin(1) * t604 + t852;
t569 = pkin(1) * t603 + t853;
t568 = pkin(6) * t593 + pkin(7) * t879 - t835 * t635;
t567 = pkin(6) * t915 + pkin(7) * t883 + t839 * t635 + t841;
t561 = pkin(1) * t630 + t847;
t560 = -pkin(7) * t676 - t834 * t579 + t838 * t580;
t559 = pkin(7) * t677 + t838 * t579 + t834 * t580;
t558 = -pkin(7) * t650 - t834 * t575 + t838 * t577;
t557 = -pkin(7) * t649 - t834 * t574 + t838 * t576;
t556 = -t834 * t572 + t838 * t573;
t553 = -pkin(2) * t747 + pkin(7) * t652 + t838 * t575 + t834 * t577;
t552 = -pkin(2) * t745 + pkin(7) * t651 + t838 * t574 + t834 * t576;
t551 = -qJ(4) * t572 - (pkin(4) * t831 - pkin(8) * t832) * t583;
t546 = pkin(7) * t565 + qJ(4) * t880 - t834 * t585;
t545 = pkin(2) * t830 + pkin(7) * t914 + qJ(4) * t884 + t838 * t585;
t544 = qJ(4) * t573 - (-pkin(4) * t832 - pkin(8) * t831 - pkin(3)) * t583;
t543 = -pkin(6) * t630 - t835 * t559 + t839 * t560;
t542 = pkin(6) * t631 + t839 * t559 + t835 * t560;
t541 = -t835 * t555 + t839 * t556;
t540 = t839 * t555 + t835 * t556;
t539 = -pkin(1) * t549 + t877;
t538 = -pkin(6) * t604 - t835 * t553 + t839 * t558;
t537 = -pkin(6) * t603 - t835 * t552 + t839 * t557;
t536 = -pkin(1) * t747 + pkin(6) * t606 + t839 * t553 + t835 * t558;
t535 = -pkin(1) * t745 + pkin(6) * t605 + t839 * t552 + t835 * t557;
t534 = pkin(6) * t549 - t835 * t545 + t839 * t546;
t533 = pkin(1) * t830 + pkin(6) * t938 + t839 * t545 + t835 * t546;
t532 = -pkin(7) * t555 - t834 * t544 + t838 * t551;
t531 = pkin(1) * t540 + t861;
t530 = pkin(2) * t583 + pkin(7) * t556 + t838 * t544 + t834 * t551;
t529 = -pkin(6) * t540 - t835 * t530 + t839 * t532;
t528 = pkin(1) * t583 + pkin(6) * t541 + t839 * t530 + t835 * t532;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t811, 0, -t810, 0, t857, -t793, -t850, -pkin(5) * t850, 0, 0, -t905, 0, -t851, 0, t926, t928, t913, pkin(5) * t913 + pkin(6) * t878 - t836 * t685, 0, 0, -t927, 0, -t906, 0, t943, t945, t936, pkin(5) * t936 - t836 * t567 + t840 * t568, 0, 0, -t944, 0, -t929, 0, t953, t954, t950, pkin(5) * t950 - t836 * t533 + t840 * t534, -t836 * t612 + t840 * t614, -t836 * t601 + t840 * t602, -t836 * t616 + t840 * t618, -t836 * t611 + t840 * t613, -t836 * t615 + t840 * t617, -t836 * t645 + t840 * t646, t840 * t537 - t836 * t535 - pkin(5) * (t840 * t603 + t836 * t605), t840 * t538 - t836 * t536 - pkin(5) * (t840 * t604 + t836 * t606), t840 * t543 - t836 * t542 - pkin(5) * (t840 * t630 + t836 * t631), t840 * t529 - t836 * t528 - pkin(5) * (t840 * t540 + t836 * t541); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t810, 0, t811, 0, t793, t857, t864, pkin(5) * t864, 0, 0, t851, 0, -t905, 0, -t928, t926, t916, pkin(5) * t916 + pkin(6) * t882 + t840 * t685, 0, 0, t906, 0, -t927, 0, -t945, t943, t937, pkin(5) * t937 + t840 * t567 + t836 * t568, 0, 0, t929, 0, -t944, 0, -t954, t953, t951, pkin(5) * t951 + t840 * t533 + t836 * t534, t840 * t612 + t836 * t614, t840 * t601 + t836 * t602, t840 * t616 + t836 * t618, t840 * t611 + t836 * t613, t840 * t615 + t836 * t617, t840 * t645 + t836 * t646, t836 * t537 + t840 * t535 + pkin(5) * (-t836 * t603 + t840 * t605), t836 * t538 + t840 * t536 + pkin(5) * (-t836 * t604 + t840 * t606), t836 * t543 + t840 * t542 + pkin(5) * (-t836 * t630 + t840 * t631), t836 * t529 + t840 * t528 + pkin(5) * (-t836 * t540 + t840 * t541); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t814, t815, 0, 0, 0, 0, 0, 0, 0, t826, t706, t705, 0, -t686, 0, 0, 0, 0, 0, t822, t644, t643, 0, t578, 0, 0, 0, 0, 0, t822, t596, t595, 0, t539, t736, t713, t746, t735, t744, 0, t569, t570, t561, t531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t843, 0, 0, -g(3), -t814, 0, 0, 0, -t799, 0, -t796, 0, t910, t766, t691, pkin(6) * t691, 0, 0, -t728, 0, -t724, 0, t925, t668, t593, t568, 0, 0, -t674, 0, -t670, 0, t942, t600, t549, t534, t614, t602, t618, t613, t617, t646, t537, t538, t543, t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t843, 0, qJDD(1), 0, g(3), 0, -t815, 0, 0, 0, t796, 0, -t799, 0, -t766, t910, t867, t685, 0, 0, t724, 0, -t728, 0, -t668, t925, t915, t567, 0, 0, t670, 0, -t674, 0, -t600, t942, t938, t533, t612, t601, t616, t611, t615, t645, t535, t536, t542, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t814, t815, 0, 0, 0, 0, 0, 0, 0, t826, t706, t705, 0, -t686, 0, 0, 0, 0, 0, t822, t644, t643, 0, t578, 0, 0, 0, 0, 0, t822, t596, t595, 0, t539, t736, t713, t746, t735, t744, 0, t569, t570, t561, t531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t826, 0, -t825, 0, 0, -g(3), t742, 0, 0, 0, -t790, 0, -t787, 0, t909, t761, t639, pkin(7) * t639, 0, 0, -t720, 0, -t716, 0, t924, t660, t565, t546, t656, t642, t664, t655, t663, t694, t557, t558, t560, t532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, 0, t826, 0, g(3), 0, t743, 0, 0, 0, t787, 0, -t790, 0, -t761, t909, t868, t635, 0, 0, t716, 0, -t720, 0, -t660, t924, t914, t545, t654, t641, t662, t653, t661, t693, t552, t553, t559, t530; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t826, -t742, -t743, 0, 0, 0, 0, 0, 0, 0, t822, t855, t846, 0, -t636, 0, 0, 0, 0, 0, t822, t849, t844, 0, t877, t736, t713, t746, t735, t744, 0, t853, t852, t847, t861; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t822, 0, -t821, 0, 0, -g(3), t683, 0, 0, 0, -t784, 0, -t781, 0, t908, t757, t589, qJ(4) * t589, t704, t690, t710, t703, t709, t753, t576, t577, t580, t551; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, 0, t822, 0, g(3), 0, t684, 0, 0, 0, t781, 0, -t784, 0, -t757, t908, t869, t585, t702, t687, t708, t701, t707, t752, t574, t575, t579, t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t822, -t683, -t684, 0, 0, 0, 0, 0, 0, 0, t822, t856, t845, 0, -t586, t736, t713, t746, t735, t744, 0, t858, t859, t854, t871; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t822, 0, -t821, 0, 0, -t830, t633, 0, t741, t714, t750, t740, t748, t770, t609, t610, t583, pkin(8) * t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, 0, t822, 0, t830, 0, t634, 0, t809, -t792, -t885, -t809, -t816, -qJDD(5), t607, t608, 0, pkin(4) * t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t822, -t633, -t634, 0, 0, t736, t713, t746, t735, t744, 0, t872, t873, t860, t876; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t777, t779, t800, -t813, t807, t813, 0, t628, t621, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, t776, t805, t778, t801, -t870, -t628, 0, t622, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t809, t792, t885, t809, t816, qJDD(5), -t621, -t622, 0, 0;];
m_new_reg = t1;
