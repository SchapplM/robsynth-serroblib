% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:31
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:31:14
% EndTime: 2022-01-20 11:31:17
% DurationCPUTime: 2.38s
% Computational Cost: add. (9600->149), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1075 = sin(qJ(1));
t1079 = cos(qJ(1));
t1066 = qJD(1) + qJD(2);
t1062 = qJD(3) + t1066;
t1060 = t1062 ^ 2;
t1065 = qJDD(1) + qJDD(2);
t1061 = qJDD(3) + t1065;
t1070 = sin(pkin(9));
t1071 = cos(pkin(9));
t1031 = t1060 * t1070 - t1061 * t1071;
t1073 = sin(qJ(3));
t1077 = cos(qJ(3));
t1085 = -t1060 * t1071 - t1061 * t1070;
t1009 = t1031 * t1077 - t1073 * t1085;
t1074 = sin(qJ(2));
t1078 = cos(qJ(2));
t1099 = t1031 * t1073 + t1077 * t1085;
t1106 = t1009 * t1074 + t1078 * t1099;
t991 = t1009 * t1078 - t1074 * t1099;
t1110 = t1075 * t991 + t1079 * t1106;
t1109 = -t1075 * t1106 + t1079 * t991;
t1036 = t1060 * t1073 - t1061 * t1077;
t1084 = -t1060 * t1077 - t1061 * t1073;
t1015 = t1036 * t1078 - t1074 * t1084;
t1098 = t1036 * t1074 + t1078 * t1084;
t1105 = t1015 * t1075 + t1079 * t1098;
t1104 = t1015 * t1079 - t1075 * t1098;
t1064 = t1066 ^ 2;
t1044 = t1064 * t1074 - t1065 * t1078;
t1083 = -t1064 * t1078 - t1065 * t1074;
t1097 = t1044 * t1075 + t1079 * t1083;
t1096 = t1044 * t1079 - t1075 * t1083;
t1056 = t1075 * g(1) - g(2) * t1079;
t1048 = qJDD(1) * pkin(1) + t1056;
t1057 = -g(1) * t1079 - g(2) * t1075;
t1081 = qJD(1) ^ 2;
t1049 = -pkin(1) * t1081 + t1057;
t1021 = t1078 * t1048 - t1049 * t1074;
t1019 = pkin(2) * t1065 + t1021;
t1022 = t1074 * t1048 + t1078 * t1049;
t1020 = -pkin(2) * t1064 + t1022;
t999 = t1019 * t1077 - t1020 * t1073;
t1082 = pkin(3) * t1061 + t999;
t1000 = t1073 * t1019 + t1077 * t1020;
t998 = -pkin(3) * t1060 + t1000;
t982 = t1070 * t1082 + t1071 * t998;
t1089 = qJD(5) * t1062;
t1072 = sin(qJ(5));
t1088 = t1072 * t1061;
t1076 = cos(qJ(5));
t1087 = t1076 * t1061;
t1067 = t1072 ^ 2;
t1068 = t1076 ^ 2;
t1086 = t1067 + t1068;
t981 = -t1070 * t998 + t1071 * t1082;
t1080 = qJD(5) ^ 2;
t1069 = -g(3) + qJDD(4);
t1054 = -qJDD(1) * t1075 - t1079 * t1081;
t1053 = qJDD(1) * t1079 - t1075 * t1081;
t1052 = t1076 * t1060 * t1072;
t1051 = -t1060 * t1068 - t1080;
t1050 = -t1060 * t1067 - t1080;
t1047 = -qJDD(5) + t1052;
t1046 = qJDD(5) + t1052;
t1038 = t1086 * t1060;
t1033 = t1086 * t1061;
t1028 = -0.2e1 * t1072 * t1089 + t1087;
t1027 = 0.2e1 * t1076 * t1089 + t1088;
t1026 = t1047 * t1076 - t1050 * t1072;
t1025 = -t1046 * t1072 + t1051 * t1076;
t1024 = t1047 * t1072 + t1050 * t1076;
t1023 = t1046 * t1076 + t1051 * t1072;
t1012 = t1033 * t1071 - t1038 * t1070;
t1011 = t1033 * t1070 + t1038 * t1071;
t1006 = t1026 * t1071 + t1027 * t1070;
t1005 = t1025 * t1071 - t1028 * t1070;
t1004 = t1026 * t1070 - t1027 * t1071;
t1003 = t1025 * t1070 + t1028 * t1071;
t1002 = -t1021 * t1074 + t1022 * t1078;
t1001 = t1021 * t1078 + t1022 * t1074;
t994 = -t1011 * t1073 + t1012 * t1077;
t993 = t1011 * t1077 + t1012 * t1073;
t988 = -t1004 * t1073 + t1006 * t1077;
t987 = -t1003 * t1073 + t1005 * t1077;
t986 = t1004 * t1077 + t1006 * t1073;
t985 = t1003 * t1077 + t1005 * t1073;
t984 = t1000 * t1077 - t1073 * t999;
t983 = t1000 * t1073 + t1077 * t999;
t980 = -t1074 * t993 + t1078 * t994;
t979 = t1074 * t994 + t1078 * t993;
t978 = -pkin(4) * t1060 + pkin(8) * t1061 + t982;
t977 = -t1061 * pkin(4) - t1060 * pkin(8) - t981;
t976 = t1069 * t1072 + t1076 * t978;
t975 = t1069 * t1076 - t1072 * t978;
t974 = -t1074 * t986 + t1078 * t988;
t973 = -t1074 * t985 + t1078 * t987;
t972 = t1074 * t988 + t1078 * t986;
t971 = t1074 * t987 + t1078 * t985;
t970 = -t1074 * t983 + t1078 * t984;
t969 = t1074 * t984 + t1078 * t983;
t968 = -t1070 * t981 + t1071 * t982;
t967 = t1070 * t982 + t1071 * t981;
t966 = -t1072 * t975 + t1076 * t976;
t965 = t1072 * t976 + t1076 * t975;
t964 = t1070 * t977 + t1071 * t966;
t963 = t1070 * t966 - t1071 * t977;
t962 = -t1073 * t967 + t1077 * t968;
t961 = t1073 * t968 + t1077 * t967;
t960 = -t1073 * t963 + t1077 * t964;
t959 = t1073 * t964 + t1077 * t963;
t958 = -t1074 * t961 + t1078 * t962;
t957 = t1074 * t962 + t1078 * t961;
t956 = -t1074 * t959 + t1078 * t960;
t955 = t1074 * t960 + t1078 * t959;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1054, -t1053, 0, -t1056 * t1075 + t1057 * t1079, 0, 0, 0, 0, 0, 0, t1097, t1096, 0, -t1001 * t1075 + t1002 * t1079, 0, 0, 0, 0, 0, 0, t1105, t1104, 0, -t1075 * t969 + t1079 * t970, 0, 0, 0, 0, 0, 0, t1110, t1109, 0, -t1075 * t957 + t1079 * t958, 0, 0, 0, 0, 0, 0, -t1075 * t971 + t1079 * t973, -t1075 * t972 + t1079 * t974, -t1075 * t979 + t1079 * t980, -t1075 * t955 + t1079 * t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1053, t1054, 0, t1056 * t1079 + t1057 * t1075, 0, 0, 0, 0, 0, 0, -t1096, t1097, 0, t1001 * t1079 + t1002 * t1075, 0, 0, 0, 0, 0, 0, -t1104, t1105, 0, t1075 * t970 + t1079 * t969, 0, 0, 0, 0, 0, 0, -t1109, t1110, 0, t1075 * t958 + t1079 * t957, 0, 0, 0, 0, 0, 0, t1075 * t973 + t1079 * t971, t1075 * t974 + t1079 * t972, t1075 * t980 + t1079 * t979, t1075 * t956 + t1079 * t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1023, t1024, 0, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1081, -qJDD(1), 0, t1057, 0, 0, 0, 0, 0, 0, t1083, t1044, 0, t1002, 0, 0, 0, 0, 0, 0, t1098, t1015, 0, t970, 0, 0, 0, 0, 0, 0, t1106, t991, 0, t958, 0, 0, 0, 0, 0, 0, t973, t974, t980, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1081, 0, t1056, 0, 0, 0, 0, 0, 0, -t1044, t1083, 0, t1001, 0, 0, 0, 0, 0, 0, -t1015, t1098, 0, t969, 0, 0, 0, 0, 0, 0, -t991, t1106, 0, t957, 0, 0, 0, 0, 0, 0, t971, t972, t979, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1023, t1024, 0, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1064, -t1065, 0, t1022, 0, 0, 0, 0, 0, 0, t1084, t1036, 0, t984, 0, 0, 0, 0, 0, 0, t1099, t1009, 0, t962, 0, 0, 0, 0, 0, 0, t987, t988, t994, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, -t1064, 0, t1021, 0, 0, 0, 0, 0, 0, -t1036, t1084, 0, t983, 0, 0, 0, 0, 0, 0, -t1009, t1099, 0, t961, 0, 0, 0, 0, 0, 0, t985, t986, t993, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1023, t1024, 0, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1060, -t1061, 0, t1000, 0, 0, 0, 0, 0, 0, t1085, t1031, 0, t968, 0, 0, 0, 0, 0, 0, t1005, t1006, t1012, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, -t1060, 0, t999, 0, 0, 0, 0, 0, 0, -t1031, t1085, 0, t967, 0, 0, 0, 0, 0, 0, t1003, t1004, t1011, t963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1023, t1024, 0, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1060, -t1061, 0, t982, 0, 0, 0, 0, 0, 0, t1025, t1026, t1033, t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, -t1060, 0, t981, 0, 0, 0, 0, 0, 0, t1028, -t1027, t1038, -t977; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1023, t1024, 0, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1051, t1047, t1087, t976; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1046, t1050, -t1088, t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1028, t1027, -t1038, t977;];
f_new_reg = t1;
