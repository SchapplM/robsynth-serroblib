% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 10:34
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 10:34:33
% EndTime: 2022-01-20 10:34:44
% DurationCPUTime: 11.26s
% Computational Cost: add. (56799->419), mult. (74873->562), div. (0->0), fcn. (44118->10), ass. (0->288)
t829 = qJD(1) + qJD(2);
t825 = qJD(4) + t829;
t823 = t825 ^ 2;
t840 = cos(qJ(4));
t828 = qJDD(1) + qJDD(2);
t824 = qJDD(4) + t828;
t836 = sin(qJ(4));
t887 = t836 * t824;
t783 = t840 * t823 + t887;
t882 = t840 * t824;
t786 = t836 * t823 - t882;
t833 = sin(pkin(9));
t834 = cos(pkin(9));
t718 = t834 * t783 - t833 * t786;
t832 = g(3) - qJDD(3);
t759 = pkin(7) * t783 - t840 * t832;
t914 = pkin(7) * t786 - t836 * t832;
t662 = qJ(3) * t718 + t834 * t759 - t833 * t914;
t722 = t833 * t783 + t834 * t786;
t837 = sin(qJ(2));
t841 = cos(qJ(2));
t672 = t841 * t718 - t837 * t722;
t929 = qJ(3) * t722 + t833 * t759 + t834 * t914;
t602 = pkin(6) * t672 + t841 * t662 - t837 * t929;
t838 = sin(qJ(1));
t842 = cos(qJ(1));
t676 = t837 * t718 + t841 * t722;
t934 = t842 * t672 - t838 * t676;
t947 = pkin(6) * t676 + t837 * t662 + t841 * t929;
t959 = pkin(5) * t934 + t842 * t602 - t838 * t947;
t949 = t838 * t672 + t842 * t676;
t958 = pkin(5) * t949 + t838 * t602 + t842 * t947;
t816 = t838 * g(1) - t842 * g(2);
t805 = qJDD(1) * pkin(1) + t816;
t817 = t842 * g(1) + t838 * g(2);
t844 = qJD(1) ^ 2;
t806 = -t844 * pkin(1) - t817;
t744 = -t841 * t805 + t837 * t806;
t733 = t828 * pkin(2) - t744;
t745 = t837 * t805 + t841 * t806;
t827 = t829 ^ 2;
t734 = -t827 * pkin(2) + t745;
t686 = t833 * t733 + t834 * t734;
t681 = -t827 * pkin(3) + t686;
t685 = -t834 * t733 + t833 * t734;
t849 = t828 * pkin(3) - t685;
t635 = t836 * t681 - t840 * t849;
t636 = t840 * t681 + t836 * t849;
t870 = t836 * t635 + t840 * t636;
t591 = t840 * t635 - t836 * t636;
t892 = t834 * t591;
t567 = -t833 * t870 + t892;
t894 = t833 * t591;
t918 = t834 * t870 + t894;
t551 = t841 * t567 - t837 * t918;
t943 = t837 * t567 + t841 * t918;
t956 = t838 * t551 + t842 * t943;
t955 = t842 * t551 - t838 * t943;
t794 = t834 * t827 + t833 * t828;
t797 = t833 * t827 - t834 * t828;
t727 = t841 * t794 - t837 * t797;
t763 = qJ(3) * t794 - t834 * t832;
t913 = qJ(3) * t797 - t833 * t832;
t670 = pkin(6) * t727 + t841 * t763 - t837 * t913;
t731 = t837 * t794 + t841 * t797;
t911 = t842 * t727 - t838 * t731;
t930 = pkin(6) * t731 + t837 * t763 + t841 * t913;
t950 = pkin(5) * t911 + t842 * t670 - t838 * t930;
t932 = t838 * t727 + t842 * t731;
t948 = pkin(5) * t932 + t838 * t670 + t842 * t930;
t869 = t833 * t685 + t834 * t686;
t641 = t834 * t685 - t833 * t686;
t880 = t841 * t641;
t595 = -t837 * t869 + t880;
t885 = t837 * t641;
t919 = t841 * t869 + t885;
t942 = t838 * t595 + t842 * t919;
t941 = t842 * t595 - t838 * t919;
t798 = t841 * t827 + t837 * t828;
t768 = pkin(6) * t798 - t841 * g(3);
t801 = t837 * t827 - t841 * t828;
t852 = t842 * t798 - t838 * t801;
t915 = pkin(6) * t801 - t837 * g(3);
t933 = pkin(5) * t852 + t842 * t768 - t838 * t915;
t910 = t838 * t798 + t842 * t801;
t931 = pkin(5) * t910 + t838 * t768 + t842 * t915;
t868 = t837 * t744 + t841 * t745;
t691 = t841 * t744 - t837 * t745;
t879 = t842 * t691;
t921 = -t838 * t868 + t879;
t884 = t838 * t691;
t920 = t842 * t868 + t884;
t631 = -t823 * pkin(4) + t824 * pkin(8) + t636;
t835 = sin(qJ(5));
t839 = cos(qJ(5));
t623 = t835 * t631 + t839 * t832;
t624 = t839 * t631 - t835 * t832;
t586 = t835 * t623 + t839 * t624;
t899 = pkin(1) * t832;
t898 = pkin(2) * t832;
t830 = t835 ^ 2;
t895 = t830 * t823;
t630 = -t824 * pkin(4) - t823 * pkin(8) + t635;
t625 = t835 * t630;
t811 = t839 * t823 * t835;
t802 = qJDD(5) + t811;
t890 = t835 * t802;
t803 = qJDD(5) - t811;
t889 = t835 * t803;
t888 = t835 * t824;
t626 = t839 * t630;
t883 = t839 * t803;
t818 = t839 * t824;
t588 = pkin(3) * t591;
t878 = -pkin(2) * t567 - t588;
t877 = -pkin(4) * t630 + pkin(8) * t586;
t831 = t839 ^ 2;
t876 = t830 + t831;
t875 = qJD(5) * t825;
t843 = qJD(5) ^ 2;
t808 = -t843 - t895;
t753 = -t835 * t808 - t883;
t815 = t839 * t875;
t775 = 0.2e1 * t815 + t888;
t874 = -pkin(4) * t775 + pkin(8) * t753 + t625;
t819 = t831 * t823;
t810 = -t819 - t843;
t751 = t839 * t810 - t890;
t871 = t835 * t875;
t778 = t818 - 0.2e1 * t871;
t873 = pkin(4) * t778 + pkin(8) * t751 - t626;
t574 = t836 * t586 - t840 * t630;
t872 = pkin(3) * t574 + t877;
t865 = -t838 * t816 - t842 * t817;
t864 = t836 * t811;
t863 = t840 * t811;
t575 = t840 * t586 + t836 * t630;
t557 = t834 * t574 + t833 * t575;
t862 = pkin(2) * t557 + t872;
t781 = t876 * t824;
t787 = t819 + t895;
t861 = pkin(4) * t787 + pkin(8) * t781 + t586;
t700 = t836 * t753 - t840 * t775;
t860 = pkin(3) * t700 + t874;
t699 = t836 * t751 + t840 * t778;
t859 = pkin(3) * t699 + t873;
t813 = t842 * qJDD(1) - t838 * t844;
t858 = -pkin(5) * t813 - t838 * g(3);
t857 = -pkin(3) * t786 - t635;
t856 = -pkin(2) * t797 - t685;
t724 = t836 * t781 + t840 * t787;
t855 = pkin(3) * t724 + t861;
t701 = t840 * t751 - t836 * t778;
t651 = t834 * t699 + t833 * t701;
t854 = pkin(2) * t651 + t859;
t702 = t840 * t753 + t836 * t775;
t652 = t834 * t700 + t833 * t702;
t853 = pkin(2) * t652 + t860;
t585 = t839 * t623 - t835 * t624;
t851 = t842 * t816 - t838 * t817;
t850 = -pkin(2) * t722 + t857;
t725 = t840 * t781 - t836 * t787;
t678 = t834 * t724 + t833 * t725;
t848 = pkin(2) * t678 + t855;
t847 = -pkin(2) * t794 - t686;
t846 = -pkin(3) * t783 - t636;
t845 = -pkin(2) * t718 + t846;
t812 = t838 * qJDD(1) + t842 * t844;
t809 = t819 - t843;
t807 = t843 - t895;
t792 = t839 * t802;
t791 = -pkin(5) * t812 + t842 * g(3);
t788 = -t819 + t895;
t777 = t818 - t871;
t776 = t815 + t888;
t771 = t876 * t875;
t755 = t836 * qJDD(5) + t840 * t771;
t754 = -t840 * qJDD(5) + t836 * t771;
t752 = -t835 * t807 + t792;
t750 = t839 * t809 - t889;
t749 = t839 * t808 - t889;
t748 = t839 * t807 + t890;
t747 = t835 * t810 + t792;
t746 = t835 * t809 + t883;
t743 = t839 * t776 - t830 * t875;
t742 = -t835 * t777 - t831 * t875;
t738 = (t776 + t815) * t835;
t737 = (t777 - t871) * t839;
t714 = -t835 * t775 + t839 * t778;
t713 = t839 * t775 + t835 * t778;
t712 = t840 * t752 + t835 * t887;
t711 = t840 * t750 + t836 * t818;
t710 = t836 * t752 - t835 * t882;
t709 = t836 * t750 - t839 * t882;
t708 = -pkin(1) * t801 - t744;
t707 = -pkin(1) * t798 - t745;
t706 = t840 * t743 - t864;
t705 = t840 * t742 + t864;
t704 = t836 * t743 + t863;
t703 = t836 * t742 - t863;
t696 = -t833 * t754 + t834 * t755;
t695 = t834 * t754 + t833 * t755;
t694 = t840 * t714 + t836 * t788;
t693 = t836 * t714 - t840 * t788;
t688 = pkin(1) * t691;
t687 = pkin(1) * g(3) + pkin(6) * t868;
t679 = -t833 * t724 + t834 * t725;
t666 = -t833 * t710 + t834 * t712;
t665 = -t833 * t709 + t834 * t711;
t664 = t834 * t710 + t833 * t712;
t663 = t834 * t709 + t833 * t711;
t658 = -t833 * t704 + t834 * t706;
t657 = -t833 * t703 + t834 * t705;
t656 = t834 * t704 + t833 * t706;
t655 = t834 * t703 + t833 * t705;
t654 = -t833 * t700 + t834 * t702;
t653 = -t833 * t699 + t834 * t701;
t648 = -pkin(1) * t731 + t856;
t647 = -pkin(1) * t727 + t847;
t646 = -t837 * t695 + t841 * t696;
t645 = t841 * t695 + t837 * t696;
t644 = -t833 * t693 + t834 * t694;
t643 = t834 * t693 + t833 * t694;
t638 = pkin(2) * t641;
t637 = qJ(3) * t869 + t898;
t633 = -t837 * t678 + t841 * t679;
t632 = t841 * t678 + t837 * t679;
t620 = -t837 * t664 + t841 * t666;
t619 = -t837 * t663 + t841 * t665;
t618 = t841 * t664 + t837 * t666;
t617 = t841 * t663 + t837 * t665;
t616 = -t837 * t656 + t841 * t658;
t615 = -t837 * t655 + t841 * t657;
t614 = t841 * t656 + t837 * t658;
t613 = t841 * t655 + t837 * t657;
t612 = -pkin(8) * t749 + t626;
t611 = -pkin(8) * t747 + t625;
t610 = -pkin(4) * t749 + t624;
t609 = -pkin(4) * t747 + t623;
t608 = -t837 * t652 + t841 * t654;
t607 = -t837 * t651 + t841 * t653;
t606 = t841 * t652 + t837 * t654;
t605 = t841 * t651 + t837 * t653;
t604 = -t837 * t643 + t841 * t644;
t603 = t841 * t643 + t837 * t644;
t598 = -pkin(1) * t676 + t850;
t597 = -pkin(1) * t672 + t845;
t587 = pkin(3) * t832 + pkin(7) * t870;
t582 = -pkin(7) * t724 + t840 * t585;
t581 = pkin(7) * t725 + t836 * t585;
t580 = -pkin(1) * t595 - t638;
t579 = -pkin(7) * t700 - t836 * t610 + t840 * t612;
t578 = -pkin(7) * t699 - t836 * t609 + t840 * t611;
t577 = -pkin(3) * t749 + pkin(7) * t702 + t840 * t610 + t836 * t612;
t576 = -pkin(3) * t747 + pkin(7) * t701 + t840 * t609 + t836 * t611;
t572 = pkin(1) * t606 + t853;
t571 = pkin(1) * t605 + t854;
t570 = pkin(6) * t595 + qJ(3) * t880 - t837 * t637;
t569 = pkin(6) * t919 + qJ(3) * t885 + t841 * t637 + t899;
t563 = pkin(1) * t632 + t848;
t562 = -qJ(3) * t678 - t833 * t581 + t834 * t582;
t561 = qJ(3) * t679 + t834 * t581 + t833 * t582;
t560 = -qJ(3) * t652 - t833 * t577 + t834 * t579;
t559 = -qJ(3) * t651 - t833 * t576 + t834 * t578;
t558 = -t833 * t574 + t834 * t575;
t555 = -pkin(2) * t749 + qJ(3) * t654 + t834 * t577 + t833 * t579;
t554 = -pkin(2) * t747 + qJ(3) * t653 + t834 * t576 + t833 * t578;
t553 = -pkin(7) * t574 - (pkin(4) * t836 - pkin(8) * t840) * t585;
t548 = pkin(7) * t892 + qJ(3) * t567 - t833 * t587;
t547 = pkin(7) * t894 + qJ(3) * t918 + t834 * t587 + t898;
t546 = pkin(7) * t575 - (-pkin(4) * t840 - pkin(8) * t836 - pkin(3)) * t585;
t545 = -pkin(6) * t632 - t837 * t561 + t841 * t562;
t544 = pkin(6) * t633 + t841 * t561 + t837 * t562;
t543 = -t837 * t557 + t841 * t558;
t542 = t841 * t557 + t837 * t558;
t541 = -pkin(1) * t551 + t878;
t540 = -pkin(6) * t606 - t837 * t555 + t841 * t560;
t539 = -pkin(6) * t605 - t837 * t554 + t841 * t559;
t538 = -pkin(1) * t749 + pkin(6) * t608 + t841 * t555 + t837 * t560;
t537 = -pkin(1) * t747 + pkin(6) * t607 + t841 * t554 + t837 * t559;
t536 = pkin(6) * t551 - t837 * t547 + t841 * t548;
t535 = pkin(6) * t943 + t841 * t547 + t837 * t548 + t899;
t534 = -qJ(3) * t557 - t833 * t546 + t834 * t553;
t533 = pkin(1) * t542 + t862;
t532 = pkin(2) * t585 + qJ(3) * t558 + t834 * t546 + t833 * t553;
t531 = -pkin(6) * t542 - t837 * t532 + t841 * t534;
t530 = pkin(1) * t585 + pkin(6) * t543 + t841 * t532 + t837 * t534;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t813, 0, -t812, 0, t858, -t791, -t851, -pkin(5) * t851, 0, 0, -t910, 0, -t852, 0, t931, t933, t921, pkin(5) * t921 + pkin(6) * t879 - t838 * t687, 0, 0, -t932, 0, -t911, 0, t948, t950, t941, pkin(5) * t941 - t838 * t569 + t842 * t570, 0, 0, -t949, 0, -t934, 0, t958, t959, t955, pkin(5) * t955 - t838 * t535 + t842 * t536, -t838 * t614 + t842 * t616, -t838 * t603 + t842 * t604, -t838 * t618 + t842 * t620, -t838 * t613 + t842 * t615, -t838 * t617 + t842 * t619, -t838 * t645 + t842 * t646, t842 * t539 - t838 * t537 - pkin(5) * (t842 * t605 + t838 * t607), t842 * t540 - t838 * t538 - pkin(5) * (t842 * t606 + t838 * t608), t842 * t545 - t838 * t544 - pkin(5) * (t842 * t632 + t838 * t633), t842 * t531 - t838 * t530 - pkin(5) * (t842 * t542 + t838 * t543); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t812, 0, t813, 0, t791, t858, t865, pkin(5) * t865, 0, 0, t852, 0, -t910, 0, -t933, t931, t920, pkin(5) * t920 + pkin(6) * t884 + t842 * t687, 0, 0, t911, 0, -t932, 0, -t950, t948, t942, pkin(5) * t942 + t842 * t569 + t838 * t570, 0, 0, t934, 0, -t949, 0, -t959, t958, t956, pkin(5) * t956 + t842 * t535 + t838 * t536, t842 * t614 + t838 * t616, t842 * t603 + t838 * t604, t842 * t618 + t838 * t620, t842 * t613 + t838 * t615, t842 * t617 + t838 * t619, t842 * t645 + t838 * t646, t838 * t539 + t842 * t537 + pkin(5) * (-t838 * t605 + t842 * t607), t838 * t540 + t842 * t538 + pkin(5) * (-t838 * t606 + t842 * t608), t838 * t545 + t842 * t544 + pkin(5) * (-t838 * t632 + t842 * t633), t838 * t531 + t842 * t530 + pkin(5) * (-t838 * t542 + t842 * t543); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t816, t817, 0, 0, 0, 0, 0, 0, 0, t828, t708, t707, 0, -t688, 0, 0, 0, 0, 0, t828, t648, t647, 0, t580, 0, 0, 0, 0, 0, t824, t598, t597, 0, t541, t738, t713, t748, t737, t746, 0, t571, t572, t563, t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t844, 0, 0, -g(3), -t816, 0, 0, 0, -t801, 0, -t798, 0, t915, t768, t691, pkin(6) * t691, 0, 0, -t731, 0, -t727, 0, t930, t670, t595, t570, 0, 0, -t676, 0, -t672, 0, t947, t602, t551, t536, t616, t604, t620, t615, t619, t646, t539, t540, t545, t531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, 0, qJDD(1), 0, g(3), 0, -t817, 0, 0, 0, t798, 0, -t801, 0, -t768, t915, t868, t687, 0, 0, t727, 0, -t731, 0, -t670, t930, t919, t569, 0, 0, t672, 0, -t676, 0, -t602, t947, t943, t535, t614, t603, t618, t613, t617, t645, t537, t538, t544, t530; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t816, t817, 0, 0, 0, 0, 0, 0, 0, t828, t708, t707, 0, -t688, 0, 0, 0, 0, 0, t828, t648, t647, 0, t580, 0, 0, 0, 0, 0, t824, t598, t597, 0, t541, t738, t713, t748, t737, t746, 0, t571, t572, t563, t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t828, 0, -t827, 0, 0, -g(3), t744, 0, 0, 0, -t797, 0, -t794, 0, t913, t763, t641, qJ(3) * t641, 0, 0, -t722, 0, -t718, 0, t929, t662, t567, t548, t658, t644, t666, t657, t665, t696, t559, t560, t562, t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, 0, t828, 0, g(3), 0, t745, 0, 0, 0, t794, 0, -t797, 0, -t763, t913, t869, t637, 0, 0, t718, 0, -t722, 0, -t662, t929, t918, t547, t656, t643, t664, t655, t663, t695, t554, t555, t561, t532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t828, -t744, -t745, 0, 0, 0, 0, 0, 0, 0, t828, t856, t847, 0, -t638, 0, 0, 0, 0, 0, t824, t850, t845, 0, t878, t738, t713, t748, t737, t746, 0, t854, t853, t848, t862; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t828, 0, -t827, 0, 0, -t832, t685, 0, 0, 0, -t786, 0, -t783, 0, t914, t759, t591, pkin(7) * t591, t706, t694, t712, t705, t711, t755, t578, t579, t582, t553; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, 0, t828, 0, t832, 0, t686, 0, 0, 0, t783, 0, -t786, 0, -t759, t914, t870, t587, t704, t693, t710, t703, t709, t754, t576, t577, t581, t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t828, -t685, -t686, 0, 0, 0, 0, 0, 0, 0, t824, t857, t846, 0, -t588, t738, t713, t748, t737, t746, 0, t859, t860, t855, t872; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t824, 0, -t823, 0, 0, -t832, t635, 0, t743, t714, t752, t742, t750, t771, t611, t612, t585, pkin(8) * t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, 0, t824, 0, t832, 0, t636, 0, t811, -t788, -t888, -t811, -t818, -qJDD(5), t609, t610, 0, pkin(4) * t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t824, -t635, -t636, 0, 0, t738, t713, t748, t737, t746, 0, t873, t874, t861, t877; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t776, t778, t802, -t815, t809, t815, 0, t630, t623, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, t775, t807, t777, t803, -t871, -t630, 0, t624, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t811, t788, t888, t811, t818, qJDD(5), -t623, -t624, 0, 0;];
m_new_reg = t1;
