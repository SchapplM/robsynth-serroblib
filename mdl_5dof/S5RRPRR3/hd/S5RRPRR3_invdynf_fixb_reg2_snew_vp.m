% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 10:34
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 10:34:44
% EndTime: 2022-01-20 10:34:47
% DurationCPUTime: 2.38s
% Computational Cost: add. (9204->145), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1080 = sin(qJ(1));
t1084 = cos(qJ(1));
t1071 = qJD(1) + qJD(2);
t1067 = qJD(4) + t1071;
t1065 = t1067 ^ 2;
t1070 = qJDD(1) + qJDD(2);
t1066 = qJDD(4) + t1070;
t1078 = sin(qJ(4));
t1082 = cos(qJ(4));
t1037 = t1078 * t1065 - t1082 * t1066;
t1075 = sin(pkin(9));
t1076 = cos(pkin(9));
t1090 = -t1082 * t1065 - t1078 * t1066;
t1014 = t1076 * t1037 - t1075 * t1090;
t1079 = sin(qJ(2));
t1083 = cos(qJ(2));
t1104 = t1075 * t1037 + t1076 * t1090;
t1111 = t1079 * t1014 + t1083 * t1104;
t996 = t1083 * t1014 - t1079 * t1104;
t1115 = t1080 * t996 + t1084 * t1111;
t1114 = -t1080 * t1111 + t1084 * t996;
t1069 = t1071 ^ 2;
t1044 = t1075 * t1069 - t1076 * t1070;
t1089 = -t1076 * t1069 - t1075 * t1070;
t1022 = t1083 * t1044 - t1079 * t1089;
t1103 = t1079 * t1044 + t1083 * t1089;
t1110 = t1080 * t1022 + t1084 * t1103;
t1109 = t1084 * t1022 - t1080 * t1103;
t1049 = t1079 * t1069 - t1083 * t1070;
t1088 = -t1083 * t1069 - t1079 * t1070;
t1102 = t1080 * t1049 + t1084 * t1088;
t1101 = t1084 * t1049 - t1080 * t1088;
t1094 = qJD(5) * t1067;
t1077 = sin(qJ(5));
t1093 = t1077 * t1066;
t1081 = cos(qJ(5));
t1092 = t1081 * t1066;
t1061 = t1080 * g(1) - t1084 * g(2);
t1053 = qJDD(1) * pkin(1) + t1061;
t1062 = -t1084 * g(1) - t1080 * g(2);
t1086 = qJD(1) ^ 2;
t1054 = -t1086 * pkin(1) + t1062;
t1026 = t1083 * t1053 - t1079 * t1054;
t1024 = t1070 * pkin(2) + t1026;
t1027 = t1079 * t1053 + t1083 * t1054;
t1025 = -t1069 * pkin(2) + t1027;
t1005 = t1075 * t1024 + t1076 * t1025;
t1003 = -t1069 * pkin(3) + t1005;
t1004 = t1076 * t1024 - t1075 * t1025;
t1087 = t1070 * pkin(3) + t1004;
t987 = t1082 * t1003 + t1078 * t1087;
t1072 = t1077 ^ 2;
t1073 = t1081 ^ 2;
t1091 = t1072 + t1073;
t986 = -t1078 * t1003 + t1082 * t1087;
t1085 = qJD(5) ^ 2;
t1074 = -g(3) + qJDD(3);
t1059 = -t1080 * qJDD(1) - t1084 * t1086;
t1058 = t1084 * qJDD(1) - t1080 * t1086;
t1057 = t1081 * t1065 * t1077;
t1056 = -t1073 * t1065 - t1085;
t1055 = -t1072 * t1065 - t1085;
t1052 = -qJDD(5) + t1057;
t1051 = qJDD(5) + t1057;
t1039 = t1091 * t1065;
t1034 = t1091 * t1066;
t1033 = -0.2e1 * t1077 * t1094 + t1092;
t1032 = 0.2e1 * t1081 * t1094 + t1093;
t1031 = t1081 * t1052 - t1077 * t1055;
t1030 = -t1077 * t1051 + t1081 * t1056;
t1029 = t1077 * t1052 + t1081 * t1055;
t1028 = t1081 * t1051 + t1077 * t1056;
t1017 = t1082 * t1034 - t1078 * t1039;
t1016 = t1078 * t1034 + t1082 * t1039;
t1011 = t1082 * t1031 + t1078 * t1032;
t1010 = t1082 * t1030 - t1078 * t1033;
t1009 = t1078 * t1031 - t1082 * t1032;
t1008 = t1078 * t1030 + t1082 * t1033;
t1007 = -t1079 * t1026 + t1083 * t1027;
t1006 = t1083 * t1026 + t1079 * t1027;
t999 = -t1075 * t1016 + t1076 * t1017;
t998 = t1076 * t1016 + t1075 * t1017;
t993 = -t1075 * t1009 + t1076 * t1011;
t992 = -t1075 * t1008 + t1076 * t1010;
t991 = t1076 * t1009 + t1075 * t1011;
t990 = t1076 * t1008 + t1075 * t1010;
t989 = -t1075 * t1004 + t1076 * t1005;
t988 = t1076 * t1004 + t1075 * t1005;
t985 = -t1079 * t998 + t1083 * t999;
t984 = t1079 * t999 + t1083 * t998;
t983 = -t1065 * pkin(4) + t1066 * pkin(8) + t987;
t982 = -t1066 * pkin(4) - t1065 * pkin(8) - t986;
t981 = t1077 * t1074 + t1081 * t983;
t980 = t1081 * t1074 - t1077 * t983;
t979 = -t1079 * t991 + t1083 * t993;
t978 = -t1079 * t990 + t1083 * t992;
t977 = t1079 * t993 + t1083 * t991;
t976 = t1079 * t992 + t1083 * t990;
t975 = -t1079 * t988 + t1083 * t989;
t974 = t1079 * t989 + t1083 * t988;
t973 = -t1078 * t986 + t1082 * t987;
t972 = t1078 * t987 + t1082 * t986;
t971 = -t1077 * t980 + t1081 * t981;
t970 = t1077 * t981 + t1081 * t980;
t969 = t1078 * t982 + t1082 * t971;
t968 = t1078 * t971 - t1082 * t982;
t967 = -t1075 * t972 + t1076 * t973;
t966 = t1075 * t973 + t1076 * t972;
t965 = -t1075 * t968 + t1076 * t969;
t964 = t1075 * t969 + t1076 * t968;
t963 = -t1079 * t966 + t1083 * t967;
t962 = t1079 * t967 + t1083 * t966;
t961 = -t1079 * t964 + t1083 * t965;
t960 = t1079 * t965 + t1083 * t964;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1059, -t1058, 0, -t1080 * t1061 + t1084 * t1062, 0, 0, 0, 0, 0, 0, t1102, t1101, 0, -t1080 * t1006 + t1084 * t1007, 0, 0, 0, 0, 0, 0, t1110, t1109, 0, -t1080 * t974 + t1084 * t975, 0, 0, 0, 0, 0, 0, t1115, t1114, 0, -t1080 * t962 + t1084 * t963, 0, 0, 0, 0, 0, 0, -t1080 * t976 + t1084 * t978, -t1080 * t977 + t1084 * t979, -t1080 * t984 + t1084 * t985, -t1080 * t960 + t1084 * t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1058, t1059, 0, t1084 * t1061 + t1080 * t1062, 0, 0, 0, 0, 0, 0, -t1101, t1102, 0, t1084 * t1006 + t1080 * t1007, 0, 0, 0, 0, 0, 0, -t1109, t1110, 0, t1080 * t975 + t1084 * t974, 0, 0, 0, 0, 0, 0, -t1114, t1115, 0, t1080 * t963 + t1084 * t962, 0, 0, 0, 0, 0, 0, t1080 * t978 + t1084 * t976, t1080 * t979 + t1084 * t977, t1080 * t985 + t1084 * t984, t1080 * t961 + t1084 * t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, t1028, t1029, 0, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1086, -qJDD(1), 0, t1062, 0, 0, 0, 0, 0, 0, t1088, t1049, 0, t1007, 0, 0, 0, 0, 0, 0, t1103, t1022, 0, t975, 0, 0, 0, 0, 0, 0, t1111, t996, 0, t963, 0, 0, 0, 0, 0, 0, t978, t979, t985, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1086, 0, t1061, 0, 0, 0, 0, 0, 0, -t1049, t1088, 0, t1006, 0, 0, 0, 0, 0, 0, -t1022, t1103, 0, t974, 0, 0, 0, 0, 0, 0, -t996, t1111, 0, t962, 0, 0, 0, 0, 0, 0, t976, t977, t984, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, t1028, t1029, 0, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1069, -t1070, 0, t1027, 0, 0, 0, 0, 0, 0, t1089, t1044, 0, t989, 0, 0, 0, 0, 0, 0, t1104, t1014, 0, t967, 0, 0, 0, 0, 0, 0, t992, t993, t999, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1070, -t1069, 0, t1026, 0, 0, 0, 0, 0, 0, -t1044, t1089, 0, t988, 0, 0, 0, 0, 0, 0, -t1014, t1104, 0, t966, 0, 0, 0, 0, 0, 0, t990, t991, t998, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, t1028, t1029, 0, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1069, -t1070, 0, t1005, 0, 0, 0, 0, 0, 0, t1090, t1037, 0, t973, 0, 0, 0, 0, 0, 0, t1010, t1011, t1017, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1070, -t1069, 0, t1004, 0, 0, 0, 0, 0, 0, -t1037, t1090, 0, t972, 0, 0, 0, 0, 0, 0, t1008, t1009, t1016, t968; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, t1028, t1029, 0, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1065, -t1066, 0, t987, 0, 0, 0, 0, 0, 0, t1030, t1031, t1034, t971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, -t1065, 0, t986, 0, 0, 0, 0, 0, 0, t1033, -t1032, t1039, -t982; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, 0, 0, 0, 0, 0, 0, t1028, t1029, 0, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, t1052, t1092, t981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1051, t1055, -t1093, t980; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1033, t1032, -t1039, t982;];
f_new_reg = t1;
