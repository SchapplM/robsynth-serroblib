% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 09:49
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 09:49:20
% EndTime: 2022-01-20 09:49:36
% DurationCPUTime: 16.08s
% Computational Cost: add. (72022->541), mult. (100093->769), div. (0->0), fcn. (62071->10), ass. (0->380)
t1012 = sin(qJ(1));
t1016 = cos(qJ(1));
t1007 = sin(pkin(9));
t1008 = cos(pkin(9));
t1006 = g(3) - qJDD(2);
t1011 = sin(qJ(3));
t1004 = qJD(1) + qJD(3);
t1000 = t1004 ^ 2;
t1002 = qJDD(1) + qJDD(3);
t1015 = cos(qJ(3));
t1059 = t1015 * t1002;
t968 = t1000 * t1011 - t1059;
t1107 = pkin(6) * t968 - t1006 * t1011;
t1062 = t1011 * t1002;
t965 = t1000 * t1015 + t1062;
t905 = t1007 * t965 + t1008 * t968;
t939 = pkin(6) * t965 - t1006 * t1015;
t1115 = qJ(2) * t905 + t1007 * t939 + t1008 * t1107;
t902 = t1007 * t968 - t1008 * t965;
t820 = qJ(2) * t902 + t1007 * t1107 - t1008 * t939;
t846 = t1012 * t902 - t1016 * t905;
t1125 = -pkin(5) * t846 - t1012 * t820 + t1016 * t1115;
t1116 = t1012 * t905 + t1016 * t902;
t1124 = pkin(5) * t1116 + t1012 * t1115 + t1016 * t820;
t1018 = qJD(1) ^ 2;
t988 = g(1) * t1016 + g(2) * t1012;
t1024 = pkin(1) * t1018 + t988;
t987 = g(1) * t1012 - g(2) * t1016;
t1028 = qJDD(1) * pkin(1) + t987;
t1021 = t1007 * t1024 + t1008 * t1028;
t1020 = qJDD(1) * pkin(2) + t1021;
t912 = t1007 * t1028 - t1008 * t1024;
t910 = -t1018 * pkin(2) + t912;
t854 = t1011 * t910 - t1015 * t1020;
t855 = t1011 * t1020 + t1015 * t910;
t1046 = t1011 * t854 + t1015 * t855;
t782 = t1011 * t855 - t1015 * t854;
t1084 = t1007 * t782;
t1111 = t1008 * t1046 - t1084;
t1083 = t1008 * t782;
t723 = -t1007 * t1046 - t1083;
t1122 = t1012 * t723 + t1016 * t1111;
t1121 = -t1012 * t1111 + t1016 * t723;
t1049 = -t1007 * t1021 + t1008 * t912;
t862 = t1007 * t912 + t1008 * t1021;
t1077 = t1012 * t862;
t1112 = t1016 * t1049 - t1077;
t1070 = t1016 * t862;
t1110 = -t1012 * t1049 - t1070;
t1009 = sin(qJ(5));
t1001 = qJDD(4) + qJDD(5);
t1013 = cos(qJ(5));
t1014 = cos(qJ(4));
t1065 = t1004 * t1014;
t1010 = sin(qJ(4));
t1066 = t1004 * t1010;
t946 = t1009 * t1066 - t1013 * t1065;
t948 = (t1009 * t1014 + t1010 * t1013) * t1004;
t896 = t948 * t946;
t1101 = -t896 + t1001;
t1109 = t1009 * t1101;
t1108 = t1013 * t1101;
t978 = qJDD(1) * t1008 - t1007 * t1018;
t1030 = -qJ(2) * t978 - t1006 * t1007;
t977 = qJDD(1) * t1007 + t1008 * t1018;
t1100 = t1012 * t978 + t1016 * t977;
t943 = qJ(2) * t977 - t1006 * t1008;
t1106 = pkin(5) * t1100 - t1012 * t1030 + t1016 * t943;
t917 = -t1012 * t977 + t1016 * t978;
t1104 = -pkin(5) * t917 + t1012 * t943 + t1016 * t1030;
t837 = -t1000 * pkin(3) + t1002 * pkin(7) + t855;
t812 = t1006 * t1014 + t1010 * t837;
t813 = -t1006 * t1010 + t1014 * t837;
t764 = t1010 * t812 + t1014 * t813;
t1050 = qJD(4) * t1066;
t1060 = t1014 * t1002;
t1025 = t1050 - t1060;
t1063 = t1010 * t1002;
t990 = qJD(4) * t1065;
t960 = t990 + t1063;
t867 = -qJD(5) * t946 - t1009 * t1025 + t1013 * t960;
t1003 = qJD(4) + qJD(5);
t935 = t1003 * t946;
t1102 = -t935 + t867;
t1047 = t1009 * t960 + t1013 * t1025;
t841 = (qJD(5) - t1003) * t948 + t1047;
t944 = t946 ^ 2;
t945 = t948 ^ 2;
t999 = t1003 ^ 2;
t1091 = t1014 ^ 2;
t986 = t1014 * t1000 * t1010;
t974 = qJDD(4) + t986;
t790 = (-t960 + t990) * pkin(8) + t974 * pkin(4) - t812;
t976 = qJD(4) * pkin(4) - pkin(8) * t1066;
t992 = t1091 * t1000;
t791 = -pkin(4) * t992 - pkin(8) * t1025 - qJD(4) * t976 + t813;
t740 = t1009 * t791 - t1013 * t790;
t741 = t1009 * t790 + t1013 * t791;
t693 = t1009 * t741 - t1013 * t740;
t1090 = pkin(4) * t693;
t845 = t935 + t867;
t773 = -t1009 * t841 - t1013 * t845;
t1089 = pkin(4) * t773;
t1087 = pkin(1) * t1006;
t836 = -pkin(3) * t1002 - pkin(7) * t1000 + t854;
t1086 = -pkin(3) * t836 + pkin(7) * t764;
t1085 = t1003 * t948;
t795 = pkin(4) * t1025 - pkin(8) * t992 + t1066 * t976 + t836;
t1082 = t1009 * t795;
t889 = t896 + t1001;
t1081 = t1009 * t889;
t1080 = t1010 * t693;
t828 = t1010 * t836;
t1079 = t1010 * t974;
t975 = qJDD(4) - t986;
t1078 = t1010 * t975;
t1074 = t1013 * t795;
t1073 = t1013 * t889;
t1072 = t1014 * t693;
t829 = t1014 * t836;
t961 = -0.2e1 * t1050 + t1060;
t913 = t1014 * t961;
t1071 = t1014 * t975;
t1069 = qJD(4) * t1004;
t1068 = t1003 * t1009;
t1067 = t1003 * t1013;
t1005 = t1010 ^ 2;
t1064 = t1005 * t1000;
t1056 = t1005 + t1091;
t1017 = qJD(4) ^ 2;
t982 = -t1017 - t1064;
t926 = -t1010 * t982 - t1071;
t959 = 0.2e1 * t990 + t1063;
t1055 = -pkin(3) * t959 + pkin(7) * t926 + t828;
t984 = -t992 - t1017;
t924 = t1014 * t984 - t1079;
t1054 = pkin(3) * t961 + pkin(7) * t924 - t829;
t734 = t1011 * t764 - t1015 * t836;
t1053 = pkin(2) * t734 + t1086;
t1052 = t1011 * t896;
t1051 = t1015 * t896;
t694 = t1009 * t740 + t1013 * t741;
t1045 = -t1012 * t987 - t1016 * t988;
t775 = t1009 * t845 - t1013 * t841;
t870 = -t944 - t945;
t672 = -pkin(4) * t870 + pkin(8) * t775 + t694;
t679 = -pkin(8) * t773 - t693;
t717 = -t1010 * t773 + t1014 * t775;
t1044 = -pkin(3) * t870 + pkin(7) * t717 + t1010 * t679 + t1014 * t672;
t883 = -t999 - t944;
t819 = t1013 * t883 - t1109;
t840 = (qJD(5) + t1003) * t948 + t1047;
t726 = -pkin(4) * t840 + pkin(8) * t819 - t1074;
t818 = t1009 * t883 + t1108;
t758 = -pkin(8) * t818 + t1082;
t767 = -t1010 * t818 + t1014 * t819;
t1043 = -pkin(3) * t840 + pkin(7) * t767 + t1010 * t758 + t1014 * t726;
t927 = -t945 - t999;
t853 = -t1009 * t927 - t1073;
t732 = -pkin(4) * t1102 + pkin(8) * t853 + t1082;
t852 = t1013 * t927 - t1081;
t760 = -pkin(8) * t852 + t1074;
t779 = -t1010 * t852 + t1014 * t853;
t1042 = -pkin(3) * t1102 + pkin(7) * t779 + t1010 * t760 + t1014 * t732;
t963 = t1056 * t1002;
t969 = t992 + t1064;
t1041 = pkin(3) * t969 + pkin(7) * t963 + t764;
t878 = t1011 * t926 - t1015 * t959;
t1040 = pkin(2) * t878 + t1055;
t877 = t1011 * t924 + t1015 * t961;
t1039 = pkin(2) * t877 + t1054;
t1038 = t1011 * t986;
t1037 = t1015 * t986;
t980 = qJDD(1) * t1016 - t1012 * t1018;
t1036 = -pkin(5) * t980 - g(3) * t1012;
t1035 = -pkin(2) * t968 - t854;
t709 = t1011 * t717 - t1015 * t870;
t1034 = pkin(2) * t709 + t1044;
t737 = t1011 * t767 - t1015 * t840;
t1033 = pkin(2) * t737 + t1043;
t744 = t1011 * t779 - t1015 * t1102;
t1032 = pkin(2) * t744 + t1042;
t907 = t1011 * t963 + t1015 * t969;
t1031 = pkin(2) * t907 + t1041;
t762 = t1010 * t813 - t1014 * t812;
t1029 = t1012 * t988 - t1016 * t987;
t1027 = pkin(4) * t818 - t740;
t665 = t1014 * t694 - t1080;
t682 = -pkin(4) * t795 + pkin(8) * t694;
t1026 = -pkin(3) * t795 + pkin(7) * t665 - pkin(8) * t1080 + t1014 * t682;
t660 = t1011 * t665 - t1015 * t795;
t1023 = pkin(2) * t660 + t1026;
t1022 = pkin(4) * t852 - t741;
t1019 = -pkin(2) * t965 - t855;
t983 = t992 - t1017;
t981 = t1017 - t1064;
t979 = qJDD(1) * t1012 + t1016 * t1018;
t970 = -t992 + t1064;
t964 = t1014 * t974;
t955 = -pkin(5) * t979 + g(3) * t1016;
t954 = t1056 * t1069;
t933 = -t945 + t999;
t932 = t944 - t999;
t931 = qJDD(4) * t1011 + t1015 * t954;
t930 = -qJDD(4) * t1015 + t1011 * t954;
t929 = -t1005 * t1069 + t1014 * t960;
t928 = t1010 * t1025 - t1069 * t1091;
t925 = -t1010 * t981 + t964;
t923 = t1014 * t983 - t1078;
t922 = t1014 * t982 - t1078;
t921 = t1014 * t981 + t1079;
t920 = t1010 * t984 + t964;
t919 = t1010 * t983 + t1071;
t914 = (t960 + t990) * t1010;
t908 = -t1011 * t969 + t1015 * t963;
t898 = -t1010 * t959 + t913;
t897 = t1010 * t961 + t1014 * t959;
t895 = t945 - t944;
t894 = t1010 * t1062 + t1015 * t925;
t893 = t1011 * t1060 + t1015 * t923;
t892 = -t1010 * t1059 + t1011 * t925;
t891 = t1011 * t923 - t1014 * t1059;
t887 = t1015 * t929 - t1038;
t886 = t1015 * t928 + t1038;
t885 = t1011 * t929 + t1037;
t884 = t1011 * t928 - t1037;
t882 = pkin(1) * t978 + t1021;
t881 = -pkin(1) * t977 - t912;
t880 = t1011 * t959 + t1015 * t926;
t879 = -t1011 * t961 + t1015 * t924;
t876 = (t1009 * t948 - t1013 * t946) * t1003;
t875 = (-t1009 * t946 - t1013 * t948) * t1003;
t872 = -t1007 * t930 + t1008 * t931;
t871 = t1007 * t931 + t1008 * t930;
t869 = t1011 * t970 + t1015 * t898;
t868 = t1011 * t898 - t1015 * t970;
t866 = -qJD(5) * t948 - t1047;
t860 = pkin(1) * t862;
t859 = t1013 * t932 - t1081;
t858 = -t1009 * t933 + t1108;
t857 = t1009 * t932 + t1073;
t856 = t1013 * t933 + t1109;
t851 = qJ(2) * t1049 + t1087;
t849 = -t1007 * t907 + t1008 * t908;
t848 = t1007 * t908 + t1008 * t907;
t834 = t1013 * t867 - t1068 * t948;
t833 = t1009 * t867 + t1067 * t948;
t832 = -t1009 * t866 + t1067 * t946;
t831 = t1013 * t866 + t1068 * t946;
t827 = -t1007 * t892 + t1008 * t894;
t826 = -t1007 * t891 + t1008 * t893;
t825 = t1007 * t894 + t1008 * t892;
t824 = t1007 * t893 + t1008 * t891;
t817 = -t1007 * t885 + t1008 * t887;
t816 = -t1007 * t884 + t1008 * t886;
t815 = t1007 * t887 + t1008 * t885;
t814 = t1007 * t886 + t1008 * t884;
t809 = -t1007 * t878 + t1008 * t880;
t808 = -t1007 * t877 + t1008 * t879;
t807 = t1007 * t880 + t1008 * t878;
t806 = t1007 * t879 + t1008 * t877;
t805 = -t1010 * t875 + t1014 * t876;
t804 = t1010 * t876 + t1014 * t875;
t803 = -pkin(7) * t922 + t829;
t802 = -pkin(7) * t920 + t828;
t801 = t1001 * t1011 + t1015 * t805;
t800 = -t1001 * t1015 + t1011 * t805;
t799 = -pkin(3) * t922 + t813;
t798 = -pkin(3) * t920 + t812;
t797 = -t1007 * t868 + t1008 * t869;
t796 = t1007 * t869 + t1008 * t868;
t794 = -pkin(1) * t905 + t1035;
t793 = pkin(1) * t902 + t1019;
t788 = -t1010 * t857 + t1014 * t859;
t787 = -t1010 * t856 + t1014 * t858;
t786 = t1010 * t859 + t1014 * t857;
t785 = t1010 * t858 + t1014 * t856;
t780 = pkin(2) * t782;
t778 = t1010 * t853 + t1014 * t852;
t776 = pkin(2) * t1006 + pkin(6) * t1046;
t774 = -t1009 * t1102 - t1013 * t840;
t772 = -t1009 * t840 + t1013 * t1102;
t771 = -t1010 * t833 + t1014 * t834;
t770 = -t1010 * t831 + t1014 * t832;
t769 = t1010 * t834 + t1014 * t833;
t768 = t1010 * t832 + t1014 * t831;
t766 = t1010 * t819 + t1014 * t818;
t756 = t1015 * t771 + t1052;
t755 = t1015 * t770 - t1052;
t754 = t1011 * t771 - t1051;
t753 = t1011 * t770 + t1051;
t752 = -pkin(6) * t907 - t1015 * t762;
t751 = pkin(6) * t908 - t1011 * t762;
t750 = -t1011 * t841 + t1015 * t788;
t749 = t1011 * t845 + t1015 * t787;
t748 = t1011 * t788 + t1015 * t841;
t747 = t1011 * t787 - t1015 * t845;
t746 = t1011 * t1102 + t1015 * t779;
t745 = -t1007 * t800 + t1008 * t801;
t743 = t1007 * t801 + t1008 * t800;
t738 = t1011 * t840 + t1015 * t767;
t735 = t1011 * t836 + t1015 * t764;
t730 = pkin(1) * t807 + t1040;
t729 = pkin(1) * t806 + t1039;
t728 = -pkin(6) * t878 - t1011 * t799 + t1015 * t803;
t727 = -pkin(6) * t877 - t1011 * t798 + t1015 * t802;
t720 = -pkin(2) * t922 + pkin(6) * t880 + t1011 * t803 + t1015 * t799;
t719 = -pkin(2) * t920 + pkin(6) * t879 + t1011 * t802 + t1015 * t798;
t718 = pkin(1) * t848 + t1031;
t716 = -t1010 * t772 + t1014 * t774;
t715 = t1010 * t775 + t1014 * t773;
t714 = t1010 * t774 + t1014 * t772;
t712 = t1011 * t895 + t1015 * t716;
t711 = t1011 * t716 - t1015 * t895;
t710 = t1011 * t870 + t1015 * t717;
t707 = -t1007 * t754 + t1008 * t756;
t706 = -t1007 * t753 + t1008 * t755;
t705 = t1007 * t756 + t1008 * t754;
t704 = t1007 * t755 + t1008 * t753;
t703 = -pkin(1) * t723 + t780;
t702 = -t1007 * t748 + t1008 * t750;
t701 = -t1007 * t747 + t1008 * t749;
t700 = t1007 * t750 + t1008 * t748;
t699 = t1007 * t749 + t1008 * t747;
t698 = -t1007 * t744 + t1008 * t746;
t697 = t1007 * t746 + t1008 * t744;
t696 = -pkin(3) * t778 - t1022;
t695 = -pkin(3) * t715 - t1089;
t692 = -pkin(3) * t766 - t1027;
t691 = -qJ(2) * t848 - t1007 * t751 + t1008 * t752;
t690 = qJ(2) * t849 + t1007 * t752 + t1008 * t751;
t689 = -t1007 * t737 + t1008 * t738;
t688 = t1007 * t738 + t1008 * t737;
t687 = -t1007 * t734 + t1008 * t735;
t686 = t1007 * t735 + t1008 * t734;
t685 = -pkin(6) * t1083 + qJ(2) * t723 - t1007 * t776;
t684 = -pkin(6) * t1084 + qJ(2) * t1111 + t1008 * t776 + t1087;
t683 = -pkin(7) * t778 - t1010 * t732 + t1014 * t760;
t680 = -pkin(6) * t734 + (pkin(3) * t1011 - pkin(7) * t1015) * t762;
t677 = -pkin(7) * t766 - t1010 * t726 + t1014 * t758;
t676 = -qJ(2) * t807 - t1007 * t720 + t1008 * t728;
t675 = -qJ(2) * t806 - t1007 * t719 + t1008 * t727;
t674 = -pkin(1) * t922 + qJ(2) * t809 + t1007 * t728 + t1008 * t720;
t673 = -pkin(1) * t920 + qJ(2) * t808 + t1007 * t727 + t1008 * t719;
t670 = -t1007 * t711 + t1008 * t712;
t669 = t1007 * t712 + t1008 * t711;
t668 = -t1007 * t709 + t1008 * t710;
t667 = t1007 * t710 + t1008 * t709;
t666 = pkin(6) * t735 + (-pkin(3) * t1015 - pkin(7) * t1011 - pkin(2)) * t762;
t664 = t1010 * t694 + t1072;
t662 = pkin(1) * t686 + t1053;
t661 = t1011 * t795 + t1015 * t665;
t658 = -pkin(6) * t744 - t1011 * t696 + t1015 * t683;
t657 = pkin(1) * t697 + t1032;
t656 = -pkin(6) * t737 - t1011 * t692 + t1015 * t677;
t655 = -pkin(2) * t778 + pkin(6) * t746 + t1011 * t683 + t1015 * t696;
t654 = pkin(1) * t688 + t1033;
t653 = -pkin(3) * t664 - t1090;
t652 = -pkin(2) * t766 + pkin(6) * t738 + t1011 * t677 + t1015 * t692;
t651 = -pkin(7) * t715 - t1010 * t672 + t1014 * t679;
t650 = -qJ(2) * t686 - t1007 * t666 + t1008 * t680;
t649 = -pkin(7) * t664 - pkin(8) * t1072 - t1010 * t682;
t648 = -pkin(1) * t762 + qJ(2) * t687 + t1007 * t680 + t1008 * t666;
t647 = -t1007 * t660 + t1008 * t661;
t646 = t1007 * t661 + t1008 * t660;
t645 = -pkin(6) * t709 - t1011 * t695 + t1015 * t651;
t644 = -pkin(2) * t715 + pkin(6) * t710 + t1011 * t651 + t1015 * t695;
t643 = pkin(1) * t667 + t1034;
t642 = -qJ(2) * t697 - t1007 * t655 + t1008 * t658;
t641 = -pkin(1) * t778 + qJ(2) * t698 + t1007 * t658 + t1008 * t655;
t640 = -qJ(2) * t688 - t1007 * t652 + t1008 * t656;
t639 = -pkin(1) * t766 + qJ(2) * t689 + t1007 * t656 + t1008 * t652;
t638 = -pkin(6) * t660 - t1011 * t653 + t1015 * t649;
t637 = pkin(1) * t646 + t1023;
t636 = -pkin(2) * t664 + pkin(6) * t661 + t1011 * t649 + t1015 * t653;
t635 = -qJ(2) * t667 - t1007 * t644 + t1008 * t645;
t634 = -pkin(1) * t715 + qJ(2) * t668 + t1007 * t645 + t1008 * t644;
t633 = -qJ(2) * t646 - t1007 * t636 + t1008 * t638;
t632 = -pkin(1) * t664 + qJ(2) * t647 + t1007 * t638 + t1008 * t636;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t980, 0, -t979, 0, t1036, -t955, t1029, pkin(5) * t1029, 0, 0, t917, 0, -t1100, 0, t1104, t1106, t1110, pkin(5) * t1110 - qJ(2) * t1070 - t1012 * t851, 0, 0, t846, 0, t1116, 0, t1125, -t1124, t1121, pkin(5) * t1121 - t1012 * t684 + t1016 * t685, -t1012 * t815 + t1016 * t817, -t1012 * t796 + t1016 * t797, -t1012 * t825 + t1016 * t827, -t1012 * t814 + t1016 * t816, -t1012 * t824 + t1016 * t826, -t1012 * t871 + t1016 * t872, t1016 * t675 - t1012 * t673 - pkin(5) * (t1012 * t808 + t1016 * t806), t1016 * t676 - t1012 * t674 - pkin(5) * (t1012 * t809 + t1016 * t807), t1016 * t691 - t1012 * t690 - pkin(5) * (t1012 * t849 + t1016 * t848), t1016 * t650 - t1012 * t648 - pkin(5) * (t1012 * t687 + t1016 * t686), -t1012 * t705 + t1016 * t707, -t1012 * t669 + t1016 * t670, -t1012 * t699 + t1016 * t701, -t1012 * t704 + t1016 * t706, -t1012 * t700 + t1016 * t702, -t1012 * t743 + t1016 * t745, t1016 * t640 - t1012 * t639 - pkin(5) * (t1012 * t689 + t1016 * t688), t1016 * t642 - t1012 * t641 - pkin(5) * (t1012 * t698 + t1016 * t697), t1016 * t635 - t1012 * t634 - pkin(5) * (t1012 * t668 + t1016 * t667), t1016 * t633 - t1012 * t632 - pkin(5) * (t1012 * t647 + t1016 * t646); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t979, 0, t980, 0, t955, t1036, t1045, pkin(5) * t1045, 0, 0, t1100, 0, t917, 0, -t1106, t1104, t1112, pkin(5) * t1112 - qJ(2) * t1077 + t1016 * t851, 0, 0, -t1116, 0, t846, 0, t1124, t1125, t1122, pkin(5) * t1122 + t1012 * t685 + t1016 * t684, t1012 * t817 + t1016 * t815, t1012 * t797 + t1016 * t796, t1012 * t827 + t1016 * t825, t1012 * t816 + t1016 * t814, t1012 * t826 + t1016 * t824, t1012 * t872 + t1016 * t871, t1012 * t675 + t1016 * t673 + pkin(5) * (-t1012 * t806 + t1016 * t808), t1012 * t676 + t1016 * t674 + pkin(5) * (-t1012 * t807 + t1016 * t809), t1012 * t691 + t1016 * t690 + pkin(5) * (-t1012 * t848 + t1016 * t849), t1012 * t650 + t1016 * t648 + pkin(5) * (-t1012 * t686 + t1016 * t687), t1012 * t707 + t1016 * t705, t1012 * t670 + t1016 * t669, t1012 * t701 + t1016 * t699, t1012 * t706 + t1016 * t704, t1012 * t702 + t1016 * t700, t1012 * t745 + t1016 * t743, t1012 * t640 + t1016 * t639 + pkin(5) * (-t1012 * t688 + t1016 * t689), t1012 * t642 + t1016 * t641 + pkin(5) * (-t1012 * t697 + t1016 * t698), t1012 * t635 + t1016 * t634 + pkin(5) * (-t1012 * t667 + t1016 * t668), t1012 * t633 + t1016 * t632 + pkin(5) * (-t1012 * t646 + t1016 * t647); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t987, t988, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t881, 0, t860, 0, 0, 0, 0, 0, t1002, t794, t793, 0, t703, t914, t897, t921, t913, t919, 0, t729, t730, t718, t662, t769, t714, t785, t768, t786, t804, t654, t657, t643, t637; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1018, 0, 0, -g(3), -t987, 0, 0, 0, t978, 0, -t977, 0, t1030, t943, -t862, -qJ(2) * t862, 0, 0, -t905, 0, t902, 0, t1115, -t820, t723, t685, t817, t797, t827, t816, t826, t872, t675, t676, t691, t650, t707, t670, t701, t706, t702, t745, t640, t642, t635, t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, qJDD(1), 0, g(3), 0, -t988, 0, 0, 0, t977, 0, t978, 0, -t943, t1030, t1049, t851, 0, 0, -t902, 0, -t905, 0, t820, t1115, t1111, t684, t815, t796, t825, t814, t824, t871, t673, t674, t690, t648, t705, t669, t699, t704, t700, t743, t639, t641, t634, t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t987, t988, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t881, 0, t860, 0, 0, 0, 0, 0, t1002, t794, t793, 0, t703, t914, t897, t921, t913, t919, 0, t729, t730, t718, t662, t769, t714, t785, t768, t786, t804, t654, t657, t643, t637; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1018, 0, 0, -t1006, -t1021, 0, 0, 0, -t968, 0, -t965, 0, t1107, t939, -t782, -pkin(6) * t782, t887, t869, t894, t886, t893, t931, t727, t728, t752, t680, t756, t712, t749, t755, t750, t801, t656, t658, t645, t638; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, qJDD(1), 0, t1006, 0, t912, 0, 0, 0, t965, 0, -t968, 0, -t939, t1107, t1046, t776, t885, t868, t892, t884, t891, t930, t719, t720, t751, t666, t754, t711, t747, t753, t748, t800, t652, t655, t644, t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1021, -t912, 0, 0, 0, 0, 0, 0, 0, t1002, t1035, t1019, 0, t780, t914, t897, t921, t913, t919, 0, t1039, t1040, t1031, t1053, t769, t714, t785, t768, t786, t804, t1033, t1032, t1034, t1023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, 0, -t1000, 0, 0, -t1006, t854, 0, t929, t898, t925, t928, t923, t954, t802, t803, -t762, -pkin(7) * t762, t771, t716, t787, t770, t788, t805, t677, t683, t651, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1000, 0, t1002, 0, t1006, 0, t855, 0, t986, -t970, -t1063, -t986, -t1060, -qJDD(4), t798, t799, 0, -pkin(3) * t762, -t896, -t895, -t845, t896, t841, -t1001, t692, t696, t695, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, -t854, -t855, 0, 0, t914, t897, t921, t913, t919, 0, t1054, t1055, t1041, t1086, t769, t714, t785, t768, t786, t804, t1043, t1042, t1044, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t960, t961, t974, -t990, t983, t990, 0, t836, t812, 0, t834, t774, t858, t832, t859, t876, t758, t760, t679, -pkin(8) * t693; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, t959, t981, -t1025, t975, -t1050, -t836, 0, t813, 0, t833, t772, t856, t831, t857, t875, t726, t732, t672, t682; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t986, t970, t1063, t986, t1060, qJDD(4), -t812, -t813, 0, 0, t896, t895, t845, -t896, -t841, t1001, t1027, t1022, t1089, t1090; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t867, -t840, t1101, t935, t932, -t935, 0, t795, t740, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1085, t1102, t933, t866, t889, -t1085, -t795, 0, t741, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t896, t895, t845, -t896, -t841, t1001, -t740, -t741, 0, 0;];
m_new_reg = t1;
