% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 09:49
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 09:49:08
% EndTime: 2022-01-20 09:49:20
% DurationCPUTime: 10.93s
% Computational Cost: add. (43780->509), mult. (61110->764), div. (0->0), fcn. (38139->10), ass. (0->346)
t537 = qJD(1) + qJD(3);
t533 = t537 ^ 2;
t549 = cos(qJ(3));
t535 = qJDD(1) + qJDD(3);
t545 = sin(qJ(3));
t586 = t545 * t535;
t497 = t549 * t533 + t586;
t576 = t549 * t535;
t500 = t545 * t533 - t576;
t541 = sin(pkin(9));
t542 = cos(pkin(9));
t438 = t542 * t497 - t541 * t500;
t540 = g(3) - qJDD(2);
t474 = pkin(6) * t497 - t549 * t540;
t616 = pkin(6) * t500 - t545 * t540;
t369 = qJ(2) * t438 + t542 * t474 - t541 * t616;
t442 = t541 * t497 + t542 * t500;
t546 = sin(qJ(1));
t550 = cos(qJ(1));
t389 = t546 * t438 + t550 * t442;
t624 = qJ(2) * t442 + t541 * t474 + t542 * t616;
t631 = pkin(5) * t389 + t546 * t369 + t550 * t624;
t615 = t550 * t438 - t546 * t442;
t630 = pkin(5) * t615 + t550 * t369 - t546 * t624;
t520 = t550 * g(1) + t546 * g(2);
t601 = qJD(1) ^ 2;
t555 = -t601 * pkin(1) - t520;
t519 = t546 * g(1) - t550 * g(2);
t556 = qJDD(1) * pkin(1) + t519;
t449 = t541 * t556 + t542 * t555;
t447 = -t601 * pkin(2) + t449;
t553 = -t541 * t555 + t542 * t556;
t552 = qJDD(1) * pkin(2) + t553;
t397 = t545 * t447 - t549 * t552;
t398 = t549 * t447 + t545 * t552;
t565 = t545 * t397 + t549 * t398;
t332 = t549 * t397 - t545 * t398;
t594 = t542 * t332;
t281 = -t541 * t565 + t594;
t595 = t541 * t332;
t620 = t542 * t565 + t595;
t248 = t546 * t281 + t550 * t620;
t627 = t550 * t281 - t546 * t620;
t564 = t542 * t449 - t541 * t553;
t405 = -t541 * t449 - t542 * t553;
t574 = t550 * t405;
t621 = -t546 * t564 + t574;
t584 = t546 * t405;
t337 = t550 * t564 + t584;
t509 = t541 * qJDD(1) + t542 * t601;
t510 = t542 * qJDD(1) - t541 * t601;
t450 = -t546 * t509 + t550 * t510;
t478 = qJ(2) * t509 - t542 * t540;
t557 = -qJ(2) * t510 - t541 * t540;
t619 = -pkin(5) * t450 + t546 * t478 + t550 * t557;
t543 = sin(qJ(5));
t547 = cos(qJ(5));
t548 = cos(qJ(4));
t544 = sin(qJ(4));
t597 = t537 * t544;
t481 = -t547 * t548 * t537 + t543 * t597;
t483 = (t543 * t548 + t544 * t547) * t537;
t433 = t483 * t481;
t570 = qJDD(4) + qJDD(5);
t605 = -t433 + t570;
t618 = t543 * t605;
t617 = t547 * t605;
t603 = t550 * t509 + t546 * t510;
t613 = pkin(5) * t603 + t550 * t478 - t546 * t557;
t536 = qJD(4) + qJD(5);
t470 = t536 * t481;
t572 = qJD(4) * t537;
t566 = t548 * t572;
t587 = t544 * t535;
t490 = t566 + t587;
t523 = t548 * t535;
t567 = t544 * t572;
t491 = t523 - t567;
t554 = t481 * qJD(5) - t547 * t490 - t543 * t491;
t604 = -t470 - t554;
t563 = t543 * t490 - t547 * t491;
t382 = (qJD(5) - t536) * t483 + t563;
t479 = t481 ^ 2;
t480 = t483 ^ 2;
t532 = t536 ^ 2;
t600 = pkin(1) * t540;
t599 = t536 * t543;
t598 = t536 * t547;
t538 = t544 ^ 2;
t596 = t538 * t533;
t539 = t548 ^ 2;
t524 = t539 * t533;
t379 = -t535 * pkin(3) - t533 * pkin(7) + t397;
t508 = qJD(4) * pkin(4) - pkin(8) * t597;
t343 = -t491 * pkin(4) - pkin(8) * t524 + t508 * t597 + t379;
t593 = t543 * t343;
t426 = t433 + t570;
t592 = t543 * t426;
t380 = -t533 * pkin(3) + t535 * pkin(7) + t398;
t358 = t544 * t380 + t548 * t540;
t518 = t548 * t533 * t544;
t506 = qJDD(4) + t518;
t341 = (-t490 + t566) * pkin(8) + t506 * pkin(4) - t358;
t359 = t548 * t380 - t544 * t540;
t342 = -pkin(4) * t524 + t491 * pkin(8) - qJD(4) * t508 + t359;
t292 = -t547 * t341 + t543 * t342;
t293 = t543 * t341 + t547 * t342;
t256 = -t547 * t292 + t543 * t293;
t591 = t544 * t256;
t590 = t544 * t379;
t589 = t544 * t506;
t507 = qJDD(4) - t518;
t588 = t544 * t507;
t581 = t547 * t343;
t580 = t547 * t426;
t579 = t548 * t256;
t578 = t548 * t379;
t577 = t548 * t507;
t573 = t538 + t539;
t569 = t545 * t433;
t568 = t549 * t433;
t257 = t543 * t292 + t547 * t293;
t316 = t544 * t358 + t548 * t359;
t466 = -t546 * t519 - t550 * t520;
t560 = t545 * t518;
t559 = t549 * t518;
t512 = t550 * qJDD(1) - t546 * t601;
t558 = -pkin(5) * t512 - t546 * g(3);
t315 = t548 * t358 - t544 * t359;
t465 = t550 * t519 - t546 * t520;
t551 = qJD(4) ^ 2;
t516 = -t524 - t551;
t515 = t524 - t551;
t514 = -t551 - t596;
t513 = t551 - t596;
t511 = t546 * qJDD(1) + t550 * t601;
t502 = t524 - t596;
t501 = t524 + t596;
t496 = t548 * t506;
t495 = t573 * t535;
t492 = t523 - 0.2e1 * t567;
t489 = 0.2e1 * t566 + t587;
t488 = -pkin(5) * t511 + t550 * g(3);
t487 = t573 * t572;
t468 = -t480 + t532;
t467 = t479 - t532;
t464 = t545 * qJDD(4) + t549 * t487;
t463 = -t549 * qJDD(4) + t545 * t487;
t462 = t548 * t490 - t538 * t572;
t461 = -t544 * t491 - t539 * t572;
t460 = -t480 - t532;
t459 = -t544 * t514 - t577;
t458 = -t544 * t513 + t496;
t457 = t548 * t516 - t589;
t456 = t548 * t515 - t588;
t455 = t548 * t514 - t588;
t454 = t544 * t516 + t496;
t445 = t549 * t495 - t545 * t501;
t444 = t545 * t495 + t549 * t501;
t434 = -t544 * t489 + t548 * t492;
t432 = -t480 + t479;
t431 = t549 * t458 + t544 * t586;
t430 = t549 * t456 + t545 * t523;
t429 = t545 * t458 - t544 * t576;
t428 = t545 * t456 - t548 * t576;
t424 = t549 * t462 - t560;
t423 = t549 * t461 + t560;
t422 = t545 * t462 + t559;
t421 = t545 * t461 - t559;
t420 = -t532 - t479;
t419 = t549 * t459 + t545 * t489;
t418 = t549 * t457 - t545 * t492;
t417 = t545 * t459 - t549 * t489;
t416 = t545 * t457 + t549 * t492;
t415 = (-t481 * t547 + t483 * t543) * t536;
t414 = (-t481 * t543 - t483 * t547) * t536;
t413 = -t541 * t463 + t542 * t464;
t412 = t542 * t463 + t541 * t464;
t411 = -t479 - t480;
t410 = t549 * t434 - t545 * t502;
t409 = t545 * t434 + t549 * t502;
t407 = -t483 * qJD(5) - t563;
t402 = t547 * t467 - t592;
t401 = -t543 * t468 + t617;
t400 = t543 * t467 + t580;
t399 = t547 * t468 + t618;
t396 = -t543 * t460 - t580;
t395 = t547 * t460 - t592;
t394 = qJ(2) * t564 + t600;
t392 = -t541 * t444 + t542 * t445;
t391 = t542 * t444 + t541 * t445;
t386 = -t470 + t554;
t381 = (qJD(5) + t536) * t483 + t563;
t378 = -t483 * t599 - t547 * t554;
t377 = t483 * t598 - t543 * t554;
t376 = -t543 * t407 + t481 * t598;
t375 = t547 * t407 + t481 * t599;
t373 = -t541 * t429 + t542 * t431;
t372 = -t541 * t428 + t542 * t430;
t371 = t542 * t429 + t541 * t431;
t370 = t542 * t428 + t541 * t430;
t365 = t547 * t420 - t618;
t364 = t543 * t420 + t617;
t363 = -t541 * t422 + t542 * t424;
t362 = -t541 * t421 + t542 * t423;
t361 = t542 * t422 + t541 * t424;
t360 = t542 * t421 + t541 * t423;
t356 = -t541 * t417 + t542 * t419;
t355 = -t541 * t416 + t542 * t418;
t354 = t542 * t417 + t541 * t419;
t353 = t542 * t416 + t541 * t418;
t352 = -t544 * t414 + t548 * t415;
t351 = -pkin(7) * t455 + t578;
t350 = -pkin(7) * t454 + t590;
t349 = t549 * t352 + t545 * t570;
t348 = t545 * t352 - t549 * t570;
t347 = -pkin(3) * t455 + t359;
t346 = -pkin(3) * t454 + t358;
t345 = -t541 * t409 + t542 * t410;
t344 = t542 * t409 + t541 * t410;
t335 = -t544 * t400 + t548 * t402;
t334 = -t544 * t399 + t548 * t401;
t329 = -t544 * t395 + t548 * t396;
t328 = t548 * t395 + t544 * t396;
t327 = -t546 * t391 + t550 * t392;
t326 = t550 * t391 + t546 * t392;
t325 = pkin(2) * t540 + pkin(6) * t565;
t324 = -t382 * t547 - t543 * t386;
t323 = -t547 * t381 - t543 * t604;
t322 = -t382 * t543 + t547 * t386;
t321 = -t543 * t381 + t547 * t604;
t320 = -t544 * t377 + t548 * t378;
t319 = -t544 * t375 + t548 * t376;
t318 = -t544 * t364 + t548 * t365;
t317 = t548 * t364 + t544 * t365;
t313 = -pkin(8) * t395 + t581;
t312 = -t546 * t354 + t550 * t356;
t311 = -t546 * t353 + t550 * t355;
t310 = t550 * t354 + t546 * t356;
t309 = t550 * t353 + t546 * t355;
t308 = -pkin(8) * t364 + t593;
t307 = t549 * t320 + t569;
t306 = t549 * t319 - t569;
t305 = t545 * t320 - t568;
t304 = t545 * t319 + t568;
t303 = -pkin(6) * t444 + t549 * t315;
t302 = pkin(6) * t445 + t545 * t315;
t301 = t549 * t335 - t545 * t382;
t300 = t549 * t334 - t545 * t386;
t299 = t545 * t335 + t549 * t382;
t298 = t545 * t334 + t549 * t386;
t297 = t549 * t329 + t545 * t604;
t296 = -t541 * t348 + t542 * t349;
t295 = t545 * t329 - t549 * t604;
t294 = t542 * t348 + t541 * t349;
t290 = t549 * t318 + t545 * t381;
t289 = t545 * t318 - t549 * t381;
t288 = t549 * t316 + t545 * t379;
t287 = t545 * t316 - t549 * t379;
t286 = -pkin(4) * t604 + pkin(8) * t396 + t593;
t285 = -pkin(6) * t417 - t545 * t347 + t549 * t351;
t284 = -pkin(6) * t416 - t545 * t346 + t549 * t350;
t283 = -pkin(4) * t381 + pkin(8) * t365 - t581;
t278 = -pkin(2) * t455 + pkin(6) * t419 + t549 * t347 + t545 * t351;
t277 = -pkin(2) * t454 + pkin(6) * t418 + t549 * t346 + t545 * t350;
t276 = -t544 * t322 + t548 * t324;
t275 = -t544 * t321 + t548 * t323;
t274 = t548 * t322 + t544 * t324;
t273 = t549 * t275 - t545 * t432;
t272 = t545 * t275 + t549 * t432;
t271 = t549 * t276 + t545 * t411;
t270 = t545 * t276 - t549 * t411;
t269 = -t541 * t305 + t542 * t307;
t268 = -t541 * t304 + t542 * t306;
t267 = t542 * t305 + t541 * t307;
t266 = t542 * t304 + t541 * t306;
t265 = -t541 * t299 + t542 * t301;
t264 = -t541 * t298 + t542 * t300;
t263 = t542 * t299 + t541 * t301;
t262 = t542 * t298 + t541 * t300;
t261 = -t541 * t295 + t542 * t297;
t260 = t542 * t295 + t541 * t297;
t259 = -pkin(3) * t328 - pkin(4) * t395 + t293;
t258 = -pkin(3) * t274 - pkin(4) * t322;
t255 = -pkin(3) * t317 - pkin(4) * t364 + t292;
t254 = -qJ(2) * t391 - t541 * t302 + t542 * t303;
t253 = qJ(2) * t392 + t542 * t302 + t541 * t303;
t252 = -t541 * t289 + t542 * t290;
t251 = t542 * t289 + t541 * t290;
t250 = -t541 * t287 + t542 * t288;
t249 = t542 * t287 + t541 * t288;
t246 = pkin(6) * t594 + qJ(2) * t281 - t541 * t325;
t245 = pkin(6) * t595 + qJ(2) * t620 + t542 * t325 + t600;
t244 = -pkin(7) * t328 - t544 * t286 + t548 * t313;
t243 = -pkin(4) * t343 + pkin(8) * t257;
t242 = -pkin(6) * t287 - (pkin(3) * t545 - pkin(7) * t549) * t315;
t241 = -pkin(8) * t322 - t256;
t240 = -pkin(7) * t317 - t544 * t283 + t548 * t308;
t239 = -qJ(2) * t354 - t541 * t278 + t542 * t285;
t238 = -qJ(2) * t353 - t541 * t277 + t542 * t284;
t237 = -pkin(1) * t455 + qJ(2) * t356 + t542 * t278 + t541 * t285;
t236 = -pkin(1) * t454 + qJ(2) * t355 + t542 * t277 + t541 * t284;
t235 = -pkin(4) * t411 + pkin(8) * t324 + t257;
t234 = -t541 * t272 + t542 * t273;
t233 = t542 * t272 + t541 * t273;
t232 = -t541 * t270 + t542 * t271;
t231 = t542 * t270 + t541 * t271;
t230 = pkin(6) * t288 - (-pkin(3) * t549 - pkin(7) * t545 - pkin(2)) * t315;
t229 = -t546 * t260 + t550 * t261;
t228 = t550 * t260 + t546 * t261;
t227 = t548 * t257 - t591;
t226 = t544 * t257 + t579;
t225 = -t546 * t251 + t550 * t252;
t224 = t550 * t251 + t546 * t252;
t223 = -t546 * t249 + t550 * t250;
t222 = t550 * t249 + t546 * t250;
t221 = t549 * t227 + t545 * t343;
t220 = t545 * t227 - t549 * t343;
t219 = -pkin(6) * t295 + t549 * t244 - t545 * t259;
t218 = -pkin(6) * t289 + t549 * t240 - t545 * t255;
t217 = -pkin(2) * t328 + pkin(6) * t297 + t545 * t244 + t549 * t259;
t216 = -pkin(3) * t226 - pkin(4) * t256;
t215 = -t546 * t231 + t550 * t232;
t214 = t550 * t231 + t546 * t232;
t213 = -pkin(2) * t317 + pkin(6) * t290 + t545 * t240 + t549 * t255;
t212 = -pkin(7) * t274 - t544 * t235 + t548 * t241;
t211 = -qJ(2) * t249 - t541 * t230 + t542 * t242;
t210 = -pkin(7) * t226 - pkin(8) * t579 - t544 * t243;
t209 = pkin(1) * t315 + qJ(2) * t250 + t542 * t230 + t541 * t242;
t208 = -t541 * t220 + t542 * t221;
t207 = t542 * t220 + t541 * t221;
t206 = -pkin(6) * t270 + t549 * t212 - t545 * t258;
t205 = -pkin(2) * t274 + pkin(6) * t271 + t545 * t212 + t549 * t258;
t204 = -qJ(2) * t260 - t541 * t217 + t542 * t219;
t203 = -pkin(1) * t328 + qJ(2) * t261 + t542 * t217 + t541 * t219;
t202 = -qJ(2) * t251 - t541 * t213 + t542 * t218;
t201 = -pkin(1) * t317 + qJ(2) * t252 + t542 * t213 + t541 * t218;
t200 = -t546 * t207 + t550 * t208;
t199 = t550 * t207 + t546 * t208;
t198 = -pkin(6) * t220 + t549 * t210 - t545 * t216;
t197 = -pkin(2) * t226 + pkin(6) * t221 + t545 * t210 + t549 * t216;
t196 = -qJ(2) * t231 - t541 * t205 + t542 * t206;
t195 = -pkin(1) * t274 + qJ(2) * t232 + t542 * t205 + t541 * t206;
t194 = -qJ(2) * t207 - t541 * t197 + t542 * t198;
t193 = -pkin(1) * t226 + qJ(2) * t208 + t542 * t197 + t541 * t198;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t511, -t512, 0, t466, 0, 0, 0, 0, 0, 0, -t603, -t450, 0, t337, 0, 0, 0, 0, 0, 0, -t615, t389, 0, t248, 0, 0, 0, 0, 0, 0, t311, t312, t327, t223, 0, 0, 0, 0, 0, 0, t225, t229, t215, t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t512, -t511, 0, t465, 0, 0, 0, 0, 0, 0, t450, -t603, 0, -t621, 0, 0, 0, 0, 0, 0, -t389, -t615, 0, -t627, 0, 0, 0, 0, 0, 0, t309, t310, t326, t222, 0, 0, 0, 0, 0, 0, t224, t228, t214, t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t540, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t540, 0, 0, 0, 0, 0, 0, t454, t455, 0, -t315, 0, 0, 0, 0, 0, 0, t317, t328, t274, t226; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t512, 0, -t511, 0, t558, -t488, -t465, -pkin(5) * t465, 0, 0, t450, 0, -t603, 0, t619, t613, t621, pkin(5) * t621 + qJ(2) * t574 - t546 * t394, 0, 0, -t389, 0, -t615, 0, t631, t630, t627, pkin(5) * t627 - t546 * t245 + t550 * t246, -t546 * t361 + t550 * t363, -t546 * t344 + t550 * t345, -t546 * t371 + t550 * t373, -t546 * t360 + t550 * t362, -t546 * t370 + t550 * t372, -t546 * t412 + t550 * t413, -pkin(5) * t309 - t546 * t236 + t550 * t238, -pkin(5) * t310 - t546 * t237 + t550 * t239, -pkin(5) * t326 - t546 * t253 + t550 * t254, -pkin(5) * t222 - t546 * t209 + t550 * t211, -t546 * t267 + t550 * t269, -t546 * t233 + t550 * t234, -t546 * t262 + t550 * t264, -t546 * t266 + t550 * t268, -t546 * t263 + t550 * t265, -t546 * t294 + t550 * t296, -pkin(5) * t224 - t546 * t201 + t550 * t202, -pkin(5) * t228 - t546 * t203 + t550 * t204, -pkin(5) * t214 - t546 * t195 + t550 * t196, -pkin(5) * t199 - t546 * t193 + t550 * t194; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t511, 0, t512, 0, t488, t558, t466, pkin(5) * t466, 0, 0, t603, 0, t450, 0, -t613, t619, t337, pkin(5) * t337 + qJ(2) * t584 + t550 * t394, 0, 0, t615, 0, -t389, 0, -t630, t631, t248, pkin(5) * t248 + t550 * t245 + t546 * t246, t550 * t361 + t546 * t363, t550 * t344 + t546 * t345, t550 * t371 + t546 * t373, t550 * t360 + t546 * t362, t550 * t370 + t546 * t372, t550 * t412 + t546 * t413, pkin(5) * t311 + t550 * t236 + t546 * t238, pkin(5) * t312 + t550 * t237 + t546 * t239, pkin(5) * t327 + t550 * t253 + t546 * t254, pkin(5) * t223 + t550 * t209 + t546 * t211, t550 * t267 + t546 * t269, t550 * t233 + t546 * t234, t550 * t262 + t546 * t264, t550 * t266 + t546 * t268, t550 * t263 + t546 * t265, t550 * t294 + t546 * t296, pkin(5) * t225 + t550 * t201 + t546 * t202, pkin(5) * t229 + t550 * t203 + t546 * t204, pkin(5) * t215 + t550 * t195 + t546 * t196, pkin(5) * t200 + t550 * t193 + t546 * t194; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t519, t520, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t510 + t553, -pkin(1) * t509 - t449, 0, -pkin(1) * t405, 0, 0, 0, 0, 0, t535, -pkin(1) * t442 - pkin(2) * t500 - t397, -pkin(1) * t438 - pkin(2) * t497 - t398, 0, -pkin(1) * t281 - pkin(2) * t332, (t490 + t566) * t544, t548 * t489 + t544 * t492, t548 * t513 + t589, (t491 - t567) * t548, t544 * t515 + t577, 0, pkin(1) * t353 + pkin(2) * t416 + pkin(3) * t492 + pkin(7) * t457 - t578, pkin(1) * t354 + pkin(2) * t417 - pkin(3) * t489 + pkin(7) * t459 + t590, pkin(1) * t391 + pkin(2) * t444 + pkin(3) * t501 + pkin(7) * t495 + t316, pkin(1) * t249 + pkin(2) * t287 - pkin(3) * t379 + pkin(7) * t316, t548 * t377 + t544 * t378, t548 * t321 + t544 * t323, t548 * t399 + t544 * t401, t548 * t375 + t544 * t376, t548 * t400 + t544 * t402, t548 * t414 + t544 * t415, pkin(1) * t251 + pkin(2) * t289 - pkin(3) * t381 + pkin(7) * t318 + t548 * t283 + t544 * t308, pkin(1) * t260 + pkin(2) * t295 - pkin(3) * t604 + pkin(7) * t329 + t548 * t286 + t544 * t313, pkin(1) * t231 + pkin(2) * t270 - pkin(3) * t411 + pkin(7) * t276 + t548 * t235 + t544 * t241, pkin(1) * t207 + pkin(2) * t220 - pkin(3) * t343 + pkin(7) * t227 - pkin(8) * t591 + t548 * t243;];
tauB_reg = t1;
