% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:15
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:15:07
% EndTime: 2022-01-23 09:15:09
% DurationCPUTime: 2.60s
% Computational Cost: add. (12838->201), mult. (28988->298), div. (0->0), fcn. (20569->10), ass. (0->167)
t1352 = qJD(1) ^ 2;
t1343 = cos(pkin(9));
t1336 = t1343 ^ 2;
t1341 = sin(pkin(9));
t1353 = t1341 ^ 2;
t1368 = t1336 + t1353;
t1319 = t1368 * t1352;
t1337 = qJD(4) + qJD(5);
t1386 = qJD(5) + t1337;
t1346 = sin(qJ(4));
t1349 = cos(qJ(4));
t1360 = t1341 * t1349 + t1343 * t1346;
t1385 = t1360 * qJDD(1);
t1378 = qJD(1) * t1343;
t1379 = qJD(1) * t1341;
t1306 = t1346 * t1379 - t1349 * t1378;
t1308 = t1360 * qJD(1);
t1345 = sin(qJ(5));
t1348 = cos(qJ(5));
t1279 = t1348 * t1306 + t1345 * t1308;
t1384 = t1279 ^ 2;
t1281 = -t1345 * t1306 + t1348 * t1308;
t1383 = t1281 ^ 2;
t1382 = t1306 ^ 2;
t1381 = t1308 ^ 2;
t1380 = t1337 ^ 2;
t1377 = t1281 * t1279;
t1376 = t1306 * qJD(4);
t1375 = t1308 * qJD(4);
t1374 = t1308 * t1306;
t1373 = t1336 * t1352;
t1372 = t1343 * t1352;
t1371 = t1353 * t1352;
t1370 = qJD(5) - t1337;
t1347 = sin(qJ(1));
t1350 = cos(qJ(1));
t1323 = -t1350 * g(1) - t1347 * g(2);
t1315 = -t1352 * pkin(1) + t1323;
t1342 = sin(pkin(8));
t1344 = cos(pkin(8));
t1322 = t1347 * g(1) - t1350 * g(2);
t1359 = qJDD(1) * pkin(1) + t1322;
t1292 = t1344 * t1315 + t1342 * t1359;
t1282 = -t1352 * pkin(2) + qJDD(1) * qJ(3) + t1292;
t1339 = -g(3) + qJDD(2);
t1369 = -0.2e1 * qJD(3) * t1379 + t1343 * t1339;
t1266 = (pkin(3) * t1372 - pkin(6) * qJDD(1) - t1282) * t1341 + t1369;
t1272 = 0.2e1 * qJD(3) * t1378 + t1343 * t1282 + t1341 * t1339;
t1334 = t1343 * qJDD(1);
t1267 = -pkin(3) * t1373 + pkin(6) * t1334 + t1272;
t1246 = t1346 * t1266 + t1349 * t1267;
t1367 = t1341 * qJDD(1);
t1366 = t1342 * qJDD(1);
t1365 = t1344 * qJDD(1);
t1364 = -qJDD(4) - qJDD(5);
t1245 = t1349 * t1266 - t1346 * t1267;
t1290 = t1385 - t1376;
t1273 = t1349 * t1334 - t1346 * t1367;
t1357 = -t1273 + t1375;
t1363 = -t1345 * t1290 - t1348 * t1357;
t1291 = -t1342 * t1315 + t1344 * t1359;
t1317 = -t1344 * t1352 - t1366;
t1318 = -t1342 * t1352 + t1365;
t1362 = t1350 * t1317 - t1347 * t1318;
t1286 = qJDD(4) - t1374;
t1361 = t1347 * t1317 + t1350 * t1318;
t1278 = -qJDD(1) * pkin(2) - t1352 * qJ(3) + qJDD(3) - t1291;
t1270 = -pkin(3) * t1334 + t1278 + (-t1371 - t1373) * pkin(6);
t1356 = -t1348 * t1290 + t1345 * t1357;
t1351 = qJD(4) ^ 2;
t1324 = t1341 * t1372;
t1321 = -t1347 * qJDD(1) - t1350 * t1352;
t1320 = t1350 * qJDD(1) - t1347 * t1352;
t1316 = t1368 * qJDD(1);
t1314 = t1343 * t1319;
t1313 = t1341 * t1319;
t1300 = -t1351 - t1381;
t1299 = qJD(4) * pkin(4) - t1308 * pkin(7);
t1298 = -t1344 * t1314 - t1342 * t1334;
t1297 = t1344 * t1313 + t1341 * t1366;
t1296 = -t1342 * t1314 + t1343 * t1365;
t1295 = t1342 * t1313 - t1341 * t1365;
t1294 = t1344 * t1316 - t1342 * t1319;
t1293 = t1342 * t1316 + t1344 * t1319;
t1289 = t1385 - 0.2e1 * t1376;
t1288 = -t1273 + 0.2e1 * t1375;
t1287 = -qJDD(4) - t1374;
t1285 = -t1351 - t1382;
t1275 = -t1380 - t1383;
t1274 = -t1381 - t1382;
t1271 = -t1341 * t1282 + t1369;
t1269 = t1349 * t1287 - t1346 * t1300;
t1268 = t1346 * t1287 + t1349 * t1300;
t1264 = -t1342 * t1291 + t1344 * t1292;
t1263 = t1344 * t1291 + t1342 * t1292;
t1260 = t1349 * t1273 + t1346 * t1385;
t1259 = t1346 * t1273 - t1349 * t1385;
t1258 = t1349 * t1285 - t1346 * t1286;
t1257 = t1346 * t1285 + t1349 * t1286;
t1256 = t1364 - t1377;
t1255 = -t1364 - t1377;
t1254 = -t1380 - t1384;
t1253 = -t1383 - t1384;
t1252 = -t1341 * t1271 + t1343 * t1272;
t1251 = t1343 * t1271 + t1341 * t1272;
t1250 = -t1341 * t1268 + t1343 * t1269;
t1249 = t1343 * t1268 + t1341 * t1269;
t1248 = t1348 * t1256 - t1345 * t1275;
t1247 = t1345 * t1256 + t1348 * t1275;
t1244 = t1357 * pkin(4) - t1382 * pkin(7) + t1308 * t1299 + t1270;
t1243 = -t1341 * t1259 + t1343 * t1260;
t1242 = t1343 * t1259 + t1341 * t1260;
t1241 = t1370 * t1279 + t1356;
t1240 = -t1386 * t1279 - t1356;
t1239 = -t1370 * t1281 + t1363;
t1238 = t1386 * t1281 - t1363;
t1237 = -t1341 * t1257 + t1343 * t1258;
t1236 = t1343 * t1257 + t1341 * t1258;
t1235 = t1344 * t1252 + t1342 * t1278;
t1234 = t1342 * t1252 - t1344 * t1278;
t1233 = t1344 * t1250 + t1342 * t1289;
t1232 = t1342 * t1250 - t1344 * t1289;
t1231 = t1348 * t1254 - t1345 * t1255;
t1230 = t1345 * t1254 + t1348 * t1255;
t1229 = t1344 * t1237 + t1342 * t1288;
t1228 = t1342 * t1237 - t1344 * t1288;
t1227 = t1344 * t1243 + t1342 * t1274;
t1226 = t1342 * t1243 - t1344 * t1274;
t1225 = -t1382 * pkin(4) - t1357 * pkin(7) - qJD(4) * t1299 + t1246;
t1224 = (-t1290 - t1376) * pkin(7) + t1286 * pkin(4) + t1245;
t1223 = -t1346 * t1247 + t1349 * t1248;
t1222 = t1349 * t1247 + t1346 * t1248;
t1221 = -t1346 * t1245 + t1349 * t1246;
t1220 = t1349 * t1245 + t1346 * t1246;
t1219 = t1348 * t1239 - t1345 * t1241;
t1218 = t1345 * t1239 + t1348 * t1241;
t1217 = -t1346 * t1230 + t1349 * t1231;
t1216 = t1349 * t1230 + t1346 * t1231;
t1215 = t1345 * t1224 + t1348 * t1225;
t1214 = t1348 * t1224 - t1345 * t1225;
t1213 = -t1341 * t1222 + t1343 * t1223;
t1212 = t1343 * t1222 + t1341 * t1223;
t1211 = -t1341 * t1220 + t1343 * t1221;
t1210 = t1343 * t1220 + t1341 * t1221;
t1209 = -t1346 * t1218 + t1349 * t1219;
t1208 = t1349 * t1218 + t1346 * t1219;
t1207 = t1344 * t1211 + t1342 * t1270;
t1206 = t1342 * t1211 - t1344 * t1270;
t1205 = -t1341 * t1216 + t1343 * t1217;
t1204 = t1343 * t1216 + t1341 * t1217;
t1203 = t1344 * t1213 + t1342 * t1240;
t1202 = t1342 * t1213 - t1344 * t1240;
t1201 = t1344 * t1205 + t1342 * t1238;
t1200 = t1342 * t1205 - t1344 * t1238;
t1199 = -t1345 * t1214 + t1348 * t1215;
t1198 = t1348 * t1214 + t1345 * t1215;
t1197 = -t1341 * t1208 + t1343 * t1209;
t1196 = t1343 * t1208 + t1341 * t1209;
t1195 = t1344 * t1197 + t1342 * t1253;
t1194 = t1342 * t1197 - t1344 * t1253;
t1193 = -t1346 * t1198 + t1349 * t1199;
t1192 = t1349 * t1198 + t1346 * t1199;
t1191 = -t1341 * t1192 + t1343 * t1193;
t1190 = t1343 * t1192 + t1341 * t1193;
t1189 = t1344 * t1191 + t1342 * t1244;
t1188 = t1342 * t1191 - t1344 * t1244;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1321, -t1320, 0, -t1347 * t1322 + t1350 * t1323, 0, 0, 0, 0, 0, 0, t1362, -t1361, 0, -t1347 * t1263 + t1350 * t1264, 0, 0, 0, 0, 0, 0, -t1347 * t1296 + t1350 * t1298, -t1347 * t1295 + t1350 * t1297, -t1347 * t1293 + t1350 * t1294, -t1347 * t1234 + t1350 * t1235, 0, 0, 0, 0, 0, 0, -t1347 * t1228 + t1350 * t1229, -t1347 * t1232 + t1350 * t1233, -t1347 * t1226 + t1350 * t1227, -t1347 * t1206 + t1350 * t1207, 0, 0, 0, 0, 0, 0, -t1347 * t1200 + t1350 * t1201, -t1347 * t1202 + t1350 * t1203, -t1347 * t1194 + t1350 * t1195, -t1347 * t1188 + t1350 * t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1320, t1321, 0, t1350 * t1322 + t1347 * t1323, 0, 0, 0, 0, 0, 0, t1361, t1362, 0, t1350 * t1263 + t1347 * t1264, 0, 0, 0, 0, 0, 0, t1350 * t1296 + t1347 * t1298, t1350 * t1295 + t1347 * t1297, t1350 * t1293 + t1347 * t1294, t1350 * t1234 + t1347 * t1235, 0, 0, 0, 0, 0, 0, t1350 * t1228 + t1347 * t1229, t1350 * t1232 + t1347 * t1233, t1350 * t1226 + t1347 * t1227, t1350 * t1206 + t1347 * t1207, 0, 0, 0, 0, 0, 0, t1350 * t1200 + t1347 * t1201, t1350 * t1202 + t1347 * t1203, t1350 * t1194 + t1347 * t1195, t1350 * t1188 + t1347 * t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1339, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, 0, 0, 0, 0, 0, 0, t1236, t1249, t1242, t1210, 0, 0, 0, 0, 0, 0, t1204, t1212, t1196, t1190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1352, -qJDD(1), 0, t1323, 0, 0, 0, 0, 0, 0, t1317, -t1318, 0, t1264, 0, 0, 0, 0, 0, 0, t1298, t1297, t1294, t1235, 0, 0, 0, 0, 0, 0, t1229, t1233, t1227, t1207, 0, 0, 0, 0, 0, 0, t1201, t1203, t1195, t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1352, 0, t1322, 0, 0, 0, 0, 0, 0, t1318, t1317, 0, t1263, 0, 0, 0, 0, 0, 0, t1296, t1295, t1293, t1234, 0, 0, 0, 0, 0, 0, t1228, t1232, t1226, t1206, 0, 0, 0, 0, 0, 0, t1200, t1202, t1194, t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1339, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, 0, 0, 0, 0, 0, 0, t1236, t1249, t1242, t1210, 0, 0, 0, 0, 0, 0, t1204, t1212, t1196, t1190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1352, -qJDD(1), 0, t1292, 0, 0, 0, 0, 0, 0, -t1314, t1313, t1316, t1252, 0, 0, 0, 0, 0, 0, t1237, t1250, t1243, t1211, 0, 0, 0, 0, 0, 0, t1205, t1213, t1197, t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1352, 0, t1291, 0, 0, 0, 0, 0, 0, t1334, -t1367, t1319, -t1278, 0, 0, 0, 0, 0, 0, -t1288, -t1289, -t1274, -t1270, 0, 0, 0, 0, 0, 0, -t1238, -t1240, -t1253, -t1244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1339, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, 0, 0, 0, 0, 0, 0, t1236, t1249, t1242, t1210, 0, 0, 0, 0, 0, 0, t1204, t1212, t1196, t1190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1373, t1324, t1334, t1272, 0, 0, 0, 0, 0, 0, t1258, t1269, t1260, t1221, 0, 0, 0, 0, 0, 0, t1217, t1223, t1209, t1193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1324, -t1371, -t1367, t1271, 0, 0, 0, 0, 0, 0, t1257, t1268, t1259, t1220, 0, 0, 0, 0, 0, 0, t1216, t1222, t1208, t1192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1334, t1367, -t1319, t1278, 0, 0, 0, 0, 0, 0, t1288, t1289, t1274, t1270, 0, 0, 0, 0, 0, 0, t1238, t1240, t1253, t1244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1285, t1287, t1273, t1246, 0, 0, 0, 0, 0, 0, t1231, t1248, t1219, t1199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1286, t1300, -t1385, t1245, 0, 0, 0, 0, 0, 0, t1230, t1247, t1218, t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1288, t1289, t1274, t1270, 0, 0, 0, 0, 0, 0, t1238, t1240, t1253, t1244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1254, t1256, t1239, t1215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, t1275, t1241, t1214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1238, t1240, t1253, t1244;];
f_new_reg = t1;
