% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:15
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:14:41
% EndTime: 2022-01-23 09:14:52
% DurationCPUTime: 11.24s
% Computational Cost: add. (48599->554), mult. (109665->851), div. (0->0), fcn. (77666->10), ass. (0->378)
t585 = sin(qJ(4));
t582 = cos(pkin(9));
t588 = cos(qJ(4));
t580 = sin(pkin(9));
t640 = t580 * t585;
t537 = (t582 * t588 - t640) * qJD(1);
t598 = t580 * t588 + t582 * t585;
t539 = t598 * qJD(1);
t644 = t539 * t537;
t659 = qJDD(4) + t644;
t666 = t585 * t659;
t665 = t588 * t659;
t586 = sin(qJ(1));
t589 = cos(qJ(1));
t559 = t589 * g(1) + t586 * g(2);
t645 = qJD(1) ^ 2;
t548 = -t645 * pkin(1) - t559;
t581 = sin(pkin(8));
t583 = cos(pkin(8));
t558 = t586 * g(1) - t589 * g(2);
t597 = qJDD(1) * pkin(1) + t558;
t502 = t583 * t548 + t581 * t597;
t660 = -t645 * pkin(2) + qJDD(1) * qJ(3) + 0.2e1 * qJD(1) * qJD(3) + t502;
t501 = t581 * t548 - t583 * t597;
t604 = t581 * t501 + t583 * t502;
t446 = t583 * t501 - t581 * t502;
t623 = t589 * t446;
t664 = -t586 * t604 + t623;
t631 = t586 * t446;
t395 = t589 * t604 + t631;
t615 = t581 * qJDD(1);
t551 = t583 * t645 + t615;
t614 = t583 * qJDD(1);
t552 = -t581 * t645 + t614;
t507 = -t586 * t551 + t589 * t552;
t578 = g(3) - qJDD(2);
t525 = qJ(2) * t551 - t583 * t578;
t601 = -qJ(2) * t552 - t581 * t578;
t663 = -pkin(5) * t507 + t586 * t525 + t589 * t601;
t584 = sin(qJ(5));
t587 = cos(qJ(5));
t484 = -t587 * t537 + t584 * t539;
t486 = t584 * t537 + t587 * t539;
t435 = t486 * t484;
t613 = qJDD(4) + qJDD(5);
t652 = -t435 + t613;
t662 = t584 * t652;
t661 = t587 * t652;
t593 = t582 ^ 2;
t571 = t593 * t645;
t591 = t580 ^ 2;
t619 = t591 * t645;
t554 = t571 + t619;
t650 = t589 * t551 + t586 * t552;
t657 = pkin(5) * t650 + t589 * t525 - t586 * t601;
t648 = t645 * (t591 + t593);
t546 = t582 * t648;
t607 = t582 * t614;
t513 = -t581 * t546 + t607;
t515 = t583 * t546 + t582 * t615;
t460 = t589 * t513 - t586 * t515;
t656 = t586 * t513 + t589 * t515;
t576 = qJD(4) + qJD(5);
t477 = t576 * t484;
t616 = qJDD(1) * t582;
t535 = qJDD(1) * t640 - t588 * t616;
t621 = t539 * qJD(4);
t496 = -t535 - t621;
t622 = t537 * qJD(4);
t649 = t598 * qJDD(1);
t498 = t649 + t622;
t595 = t484 * qJD(5) - t584 * t496 - t587 * t498;
t651 = -t477 - t595;
t605 = -t587 * t496 + t584 * t498;
t380 = (qJD(5) - t576) * t486 + t605;
t482 = t484 ^ 2;
t483 = t486 ^ 2;
t646 = t537 ^ 2;
t534 = t539 ^ 2;
t574 = t576 ^ 2;
t579 = qJDD(1) * pkin(2);
t643 = t576 * t584;
t642 = t576 * t587;
t564 = t582 * t578;
t620 = t582 * t645;
t449 = -t564 + (pkin(3) * t620 - pkin(6) * qJDD(1) - t660) * t580;
t470 = -t580 * t578 + t582 * t660;
t450 = -pkin(3) * t571 + pkin(6) * t616 + t470;
t398 = -t588 * t449 + t585 * t450;
t399 = t585 * t449 + t588 * t450;
t338 = -t588 * t398 + t585 * t399;
t641 = t580 * t338;
t481 = -t645 * qJ(3) + qJDD(3) + t501 - t579;
t639 = t581 * t481;
t638 = t582 * t338;
t637 = t583 * t481;
t468 = -pkin(3) * t616 - pkin(6) * t554 + t481;
t521 = qJD(4) * pkin(4) - t539 * pkin(7);
t397 = -t496 * pkin(4) - t646 * pkin(7) + t539 * t521 + t468;
t636 = t584 * t397;
t431 = t435 + t613;
t635 = t584 * t431;
t350 = (-t498 + t622) * pkin(7) + t659 * pkin(4) - t398;
t352 = -t646 * pkin(4) + t496 * pkin(7) - qJD(4) * t521 + t399;
t306 = -t587 * t350 + t584 * t352;
t307 = t584 * t350 + t587 * t352;
t271 = -t587 * t306 + t584 * t307;
t634 = t585 * t271;
t633 = t585 * t468;
t493 = qJDD(4) - t644;
t632 = t585 * t493;
t628 = t587 * t397;
t627 = t587 * t431;
t626 = t588 * t271;
t625 = t588 * t468;
t624 = t588 * t493;
t611 = t581 * t435;
t610 = t581 * t644;
t609 = t583 * t435;
t608 = t583 * t644;
t606 = -t481 + t579;
t272 = t584 * t306 + t587 * t307;
t339 = t585 * t398 + t588 * t399;
t469 = t580 * t660 + t564;
t420 = t580 * t469 + t582 * t470;
t518 = -t586 * t558 - t589 * t559;
t557 = t589 * qJDD(1) - t586 * t645;
t602 = -pkin(5) * t557 - t586 * g(3);
t419 = t582 * t469 - t580 * t470;
t519 = t551 * t582 * t580;
t520 = (-t581 * t620 + t607) * t580;
t600 = t589 * t519 + t586 * t520;
t599 = t586 * t519 - t589 * t520;
t517 = t589 * t558 - t586 * t559;
t590 = qJD(4) ^ 2;
t569 = t593 * qJDD(1);
t568 = t591 * qJDD(1);
t556 = t586 * qJDD(1) + t589 * t645;
t555 = t571 - t619;
t550 = t569 - t568;
t549 = t569 + t568;
t545 = t580 * t648;
t533 = -pkin(5) * t556 + t589 * g(3);
t528 = -t534 - t590;
t527 = -t534 + t590;
t526 = -t590 + t646;
t514 = t583 * t545 + t580 * t615;
t511 = t581 * t545 - t580 * t614;
t506 = t583 * t550 - t581 * t555;
t505 = t583 * t549 - t581 * t554;
t504 = t581 * t550 + t583 * t555;
t503 = t581 * t549 + t583 * t554;
t499 = -t534 + t646;
t497 = t649 + 0.2e1 * t622;
t495 = t535 + 0.2e1 * t621;
t491 = -t590 - t646;
t480 = (t537 * t588 + t539 * t585) * qJD(4);
t479 = (t537 * t585 - t539 * t588) * qJD(4);
t475 = -t483 + t574;
t474 = t482 - t574;
t473 = -t483 - t574;
t472 = -t534 - t646;
t467 = t588 * t498 - t585 * t621;
t466 = t585 * t498 + t588 * t621;
t465 = -t585 * t496 - t588 * t622;
t464 = t588 * t496 - t585 * t622;
t461 = -t586 * t511 + t589 * t514;
t459 = t589 * t511 + t586 * t514;
t458 = -t585 * t528 - t624;
t457 = -t585 * t527 + t665;
t456 = t588 * t526 - t632;
t455 = t588 * t528 - t632;
t454 = t588 * t527 + t666;
t453 = t585 * t526 + t624;
t452 = -t586 * t503 + t589 * t505;
t451 = t589 * t503 + t586 * t505;
t441 = -t588 * t495 - t585 * t497;
t440 = -t535 * t588 + t585 * t649;
t439 = -t585 * t495 + t588 * t497;
t438 = -t535 * t585 - t588 * t649;
t437 = t588 * t491 - t666;
t436 = t585 * t491 + t665;
t434 = pkin(1) * t578 + qJ(2) * t604;
t433 = -t483 + t482;
t429 = -t574 - t482;
t428 = -t580 * t479 + t582 * t480;
t427 = (-t484 * t587 + t486 * t584) * t576;
t426 = (-t484 * t584 - t486 * t587) * t576;
t425 = t581 * qJDD(4) + t583 * t428;
t424 = -t583 * qJDD(4) + t581 * t428;
t422 = -t486 * qJD(5) - t605;
t421 = -t482 - t483;
t417 = -pkin(6) * t455 + t625;
t416 = -t580 * t466 + t582 * t467;
t415 = -t580 * t464 + t582 * t465;
t414 = -t580 * t455 + t582 * t458;
t413 = -t580 * t454 + t582 * t457;
t412 = -t580 * t453 + t582 * t456;
t411 = t582 * t455 + t580 * t458;
t410 = t587 * t474 - t635;
t409 = -t584 * t475 + t661;
t408 = t584 * t474 + t627;
t407 = t587 * t475 + t662;
t406 = -qJ(2) * t511 - t581 * t470 + t582 * t637;
t405 = -qJ(2) * t513 - t581 * t469 + t580 * t637;
t404 = qJ(2) * t514 + t583 * t470 + t582 * t639;
t403 = -qJ(2) * t515 + t583 * t469 + t580 * t639;
t402 = -t584 * t473 - t627;
t401 = t587 * t473 - t635;
t400 = -pkin(6) * t436 + t633;
t393 = t583 * t413 + t581 * t649;
t392 = t583 * t412 - t581 * t535;
t391 = t581 * t413 - t583 * t649;
t390 = t581 * t412 + t583 * t535;
t389 = -qJ(2) * t503 + t583 * t419;
t388 = qJ(2) * t505 + t581 * t419;
t387 = -t580 * t439 + t582 * t441;
t386 = -t580 * t438 + t582 * t440;
t385 = t582 * t438 + t580 * t440;
t384 = -t477 + t595;
t379 = (qJD(5) + t576) * t486 + t605;
t378 = -pkin(3) * t497 + pkin(6) * t458 + t633;
t377 = -t580 * t436 + t582 * t437;
t376 = t582 * t436 + t580 * t437;
t375 = t583 * t416 - t610;
t374 = t583 * t415 + t610;
t373 = t581 * t416 + t608;
t372 = t581 * t415 - t608;
t371 = -t486 * t643 - t587 * t595;
t370 = t486 * t642 - t584 * t595;
t369 = -t584 * t422 + t484 * t642;
t368 = t587 * t422 + t484 * t643;
t367 = t583 * t420 + t639;
t366 = t581 * t420 - t637;
t365 = t583 * t414 + t581 * t497;
t364 = t581 * t414 - t583 * t497;
t363 = t587 * t429 - t662;
t362 = t584 * t429 + t661;
t361 = -pkin(3) * t495 + pkin(6) * t437 - t625;
t360 = -t585 * t426 + t588 * t427;
t359 = t588 * t426 + t585 * t427;
t358 = t583 * t387 - t581 * t499;
t357 = t581 * t387 + t583 * t499;
t356 = t583 * t377 + t581 * t495;
t355 = t581 * t377 - t583 * t495;
t354 = t583 * t386 + t581 * t472;
t353 = t581 * t386 - t583 * t472;
t349 = -pkin(2) * t385 - pkin(3) * t438;
t346 = -t585 * t408 + t588 * t410;
t345 = -t585 * t407 + t588 * t409;
t344 = t588 * t408 + t585 * t410;
t343 = t588 * t407 + t585 * t409;
t342 = -t585 * t401 + t588 * t402;
t341 = t588 * t401 + t585 * t402;
t340 = -pkin(7) * t401 + t628;
t337 = -t380 * t587 - t584 * t384;
t336 = -t587 * t379 - t584 * t651;
t335 = -t380 * t584 + t587 * t384;
t334 = -t584 * t379 + t587 * t651;
t333 = -pkin(7) * t362 + t636;
t332 = -t585 * t370 + t588 * t371;
t331 = -t585 * t368 + t588 * t369;
t330 = t588 * t370 + t585 * t371;
t329 = t588 * t368 + t585 * t369;
t328 = -pkin(2) * t411 - pkin(3) * t455 + t399;
t327 = -t586 * t366 + t589 * t367;
t326 = t589 * t366 + t586 * t367;
t325 = -t586 * t364 + t589 * t365;
t324 = t589 * t364 + t586 * t365;
t323 = -t585 * t362 + t588 * t363;
t322 = t588 * t362 + t585 * t363;
t321 = -pkin(3) * t468 + pkin(6) * t339;
t320 = -pkin(6) * t438 - t338;
t319 = -pkin(2) * t376 - pkin(3) * t436 + t398;
t318 = -t580 * t359 + t582 * t360;
t317 = t583 * t318 + t581 * t613;
t316 = t581 * t318 - t583 * t613;
t315 = -t586 * t355 + t589 * t356;
t314 = t589 * t355 + t586 * t356;
t313 = -qJ(2) * t366 - (pkin(2) * t581 - qJ(3) * t583) * t419;
t312 = -qJ(3) * t411 - t580 * t378 + t582 * t417;
t311 = -pkin(3) * t472 + pkin(6) * t440 + t339;
t310 = -t586 * t353 + t589 * t354;
t309 = t589 * t353 + t586 * t354;
t308 = -pkin(4) * t651 + pkin(7) * t402 + t636;
t304 = -qJ(3) * t376 - t580 * t361 + t582 * t400;
t303 = -pkin(4) * t379 + pkin(7) * t363 - t628;
t302 = qJ(2) * t367 - (-pkin(2) * t583 - qJ(3) * t581 - pkin(1)) * t419;
t301 = -t580 * t344 + t582 * t346;
t300 = -t580 * t343 + t582 * t345;
t299 = -t580 * t341 + t582 * t342;
t298 = t582 * t341 + t580 * t342;
t297 = t582 * t339 - t641;
t296 = t580 * t339 + t638;
t295 = -t585 * t335 + t588 * t337;
t294 = -t585 * t334 + t588 * t336;
t293 = t588 * t335 + t585 * t337;
t292 = t588 * t334 + t585 * t336;
t291 = t583 * t297 + t581 * t468;
t290 = t581 * t297 - t583 * t468;
t289 = -t580 * t330 + t582 * t332;
t288 = -t580 * t329 + t582 * t331;
t287 = -t580 * t322 + t582 * t323;
t286 = t582 * t322 + t580 * t323;
t285 = t583 * t301 - t581 * t380;
t284 = t583 * t300 - t581 * t384;
t283 = t581 * t301 + t583 * t380;
t282 = t581 * t300 + t583 * t384;
t281 = t583 * t299 + t581 * t651;
t280 = t581 * t299 - t583 * t651;
t279 = t583 * t289 + t611;
t278 = t583 * t288 - t611;
t277 = t581 * t289 - t609;
t276 = t581 * t288 + t609;
t275 = t583 * t287 + t581 * t379;
t274 = t581 * t287 - t583 * t379;
t273 = -pkin(2) * t296 - pkin(3) * t338;
t270 = -qJ(2) * t364 + t583 * t312 - t581 * t328;
t269 = -qJ(3) * t385 - t580 * t311 + t582 * t320;
t268 = -pkin(6) * t341 - t585 * t308 + t588 * t340;
t267 = -pkin(1) * t411 + qJ(2) * t365 + t581 * t312 + t583 * t328;
t266 = -pkin(4) * t397 + pkin(7) * t272;
t265 = -qJ(2) * t355 + t583 * t304 - t581 * t319;
t264 = -pkin(6) * t322 - t585 * t303 + t588 * t333;
t263 = -pkin(3) * t651 + pkin(6) * t342 + t588 * t308 + t585 * t340;
t262 = -pkin(1) * t376 + qJ(2) * t356 + t581 * t304 + t583 * t319;
t261 = -pkin(7) * t335 - t271;
t260 = -pkin(6) * t638 - qJ(3) * t296 - t580 * t321;
t259 = -t580 * t293 + t582 * t295;
t258 = -t580 * t292 + t582 * t294;
t257 = t582 * t293 + t580 * t295;
t256 = -pkin(3) * t379 + pkin(6) * t323 + t588 * t303 + t585 * t333;
t255 = -t586 * t290 + t589 * t291;
t254 = t589 * t290 + t586 * t291;
t253 = -pkin(4) * t421 + pkin(7) * t337 + t272;
t252 = t583 * t258 - t581 * t433;
t251 = t581 * t258 + t583 * t433;
t250 = -qJ(2) * t353 + t583 * t269 - t581 * t349;
t249 = t583 * t259 + t581 * t421;
t248 = t581 * t259 - t583 * t421;
t247 = -pkin(2) * t298 - pkin(3) * t341 - pkin(4) * t401 + t307;
t246 = -t586 * t280 + t589 * t281;
t245 = t589 * t280 + t586 * t281;
t244 = -pkin(1) * t385 + qJ(2) * t354 + t581 * t269 + t583 * t349;
t243 = -pkin(2) * t286 - pkin(3) * t322 - pkin(4) * t362 + t306;
t242 = -t586 * t274 + t589 * t275;
t241 = t589 * t274 + t586 * t275;
t240 = t588 * t272 - t634;
t239 = t585 * t272 + t626;
t238 = -pkin(2) * t257 - pkin(3) * t293 - pkin(4) * t335;
t237 = -qJ(3) * t298 - t580 * t263 + t582 * t268;
t236 = -qJ(2) * t290 + t583 * t260 - t581 * t273;
t235 = -t586 * t248 + t589 * t249;
t234 = t589 * t248 + t586 * t249;
t233 = -qJ(3) * t286 - t580 * t256 + t582 * t264;
t232 = -pkin(6) * t293 - t585 * t253 + t588 * t261;
t231 = -pkin(3) * t421 + pkin(6) * t295 + t588 * t253 + t585 * t261;
t230 = -pkin(1) * t296 + qJ(2) * t291 + t581 * t260 + t583 * t273;
t229 = -t580 * t239 + t582 * t240;
t228 = t582 * t239 + t580 * t240;
t227 = -pkin(6) * t239 - pkin(7) * t626 - t585 * t266;
t226 = t583 * t229 + t581 * t397;
t225 = t581 * t229 - t583 * t397;
t224 = -pkin(3) * t397 + pkin(6) * t240 - pkin(7) * t634 + t588 * t266;
t223 = -qJ(2) * t280 + t583 * t237 - t581 * t247;
t222 = -pkin(1) * t298 + qJ(2) * t281 + t581 * t237 + t583 * t247;
t221 = -qJ(2) * t274 + t583 * t233 - t581 * t243;
t220 = -pkin(1) * t286 + qJ(2) * t275 + t581 * t233 + t583 * t243;
t219 = -pkin(2) * t228 - pkin(3) * t239 - pkin(4) * t271;
t218 = -t586 * t225 + t589 * t226;
t217 = t589 * t225 + t586 * t226;
t216 = -qJ(3) * t257 - t580 * t231 + t582 * t232;
t215 = -qJ(3) * t228 - t580 * t224 + t582 * t227;
t214 = -qJ(2) * t248 + t583 * t216 - t581 * t238;
t213 = -pkin(1) * t257 + qJ(2) * t249 + t581 * t216 + t583 * t238;
t212 = -qJ(2) * t225 + t583 * t215 - t581 * t219;
t211 = -pkin(1) * t228 + qJ(2) * t226 + t581 * t215 + t583 * t219;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t556, -t557, 0, t518, 0, 0, 0, 0, 0, 0, -t650, -t507, 0, t395, 0, 0, 0, 0, 0, 0, -t656, t461, t452, t327, 0, 0, 0, 0, 0, 0, t315, t325, t310, t255, 0, 0, 0, 0, 0, 0, t242, t246, t235, t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t557, -t556, 0, t517, 0, 0, 0, 0, 0, 0, t507, -t650, 0, -t664, 0, 0, 0, 0, 0, 0, t460, t459, t451, t326, 0, 0, 0, 0, 0, 0, t314, t324, t309, t254, 0, 0, 0, 0, 0, 0, t241, t245, t234, t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t578, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t419, 0, 0, 0, 0, 0, 0, t376, t411, t385, t296, 0, 0, 0, 0, 0, 0, t286, t298, t257, t228; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t557, 0, -t556, 0, t602, -t533, -t517, -pkin(5) * t517, 0, 0, t507, 0, -t650, 0, t663, t657, t664, pkin(5) * t664 + qJ(2) * t623 - t586 * t434, -t599, -t586 * t504 + t589 * t506, t461, t599, t656, 0, -pkin(5) * t460 - t586 * t403 + t589 * t405, -pkin(5) * t459 - t586 * t404 + t589 * t406, -pkin(5) * t451 - t586 * t388 + t589 * t389, -pkin(5) * t326 - t586 * t302 + t589 * t313, -t586 * t373 + t589 * t375, -t586 * t357 + t589 * t358, -t586 * t391 + t589 * t393, -t586 * t372 + t589 * t374, -t586 * t390 + t589 * t392, -t586 * t424 + t589 * t425, -pkin(5) * t314 - t586 * t262 + t589 * t265, -pkin(5) * t324 - t586 * t267 + t589 * t270, -pkin(5) * t309 - t586 * t244 + t589 * t250, -pkin(5) * t254 - t586 * t230 + t589 * t236, -t586 * t277 + t589 * t279, -t586 * t251 + t589 * t252, -t586 * t282 + t589 * t284, -t586 * t276 + t589 * t278, -t586 * t283 + t589 * t285, -t586 * t316 + t589 * t317, -pkin(5) * t241 - t586 * t220 + t589 * t221, -pkin(5) * t245 - t586 * t222 + t589 * t223, -pkin(5) * t234 - t586 * t213 + t589 * t214, -pkin(5) * t217 - t586 * t211 + t589 * t212; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t556, 0, t557, 0, t533, t602, t518, pkin(5) * t518, 0, 0, t650, 0, t507, 0, -t657, t663, t395, pkin(5) * t395 + qJ(2) * t631 + t589 * t434, t600, t589 * t504 + t586 * t506, t459, -t600, -t460, 0, -pkin(5) * t656 + t589 * t403 + t586 * t405, pkin(5) * t461 + t589 * t404 + t586 * t406, pkin(5) * t452 + t589 * t388 + t586 * t389, pkin(5) * t327 + t589 * t302 + t586 * t313, t589 * t373 + t586 * t375, t589 * t357 + t586 * t358, t589 * t391 + t586 * t393, t589 * t372 + t586 * t374, t589 * t390 + t586 * t392, t589 * t424 + t586 * t425, pkin(5) * t315 + t589 * t262 + t586 * t265, pkin(5) * t325 + t589 * t267 + t586 * t270, pkin(5) * t310 + t589 * t244 + t586 * t250, pkin(5) * t255 + t589 * t230 + t586 * t236, t589 * t277 + t586 * t279, t589 * t251 + t586 * t252, t589 * t282 + t586 * t284, t589 * t276 + t586 * t278, t589 * t283 + t586 * t285, t589 * t316 + t586 * t317, pkin(5) * t242 + t589 * t220 + t586 * t221, pkin(5) * t246 + t589 * t222 + t586 * t223, pkin(5) * t235 + t589 * t213 + t586 * t214, pkin(5) * t218 + t589 * t211 + t586 * t212; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t558, t559, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t552 - t501, -pkin(1) * t551 - t502, 0, -pkin(1) * t446, t568, 0.2e1 * t580 * t616, 0, t569, 0, 0, pkin(1) * t513 - qJ(3) * t546 + t606 * t582, pkin(1) * t511 + qJ(3) * t545 - t606 * t580, pkin(1) * t503 + pkin(2) * t554 + qJ(3) * t549 + t420, pkin(1) * t366 - pkin(2) * t481 + qJ(3) * t420, t582 * t466 + t580 * t467, t582 * t439 + t580 * t441, t582 * t454 + t580 * t457, t582 * t464 + t580 * t465, t582 * t453 + t580 * t456, t582 * t479 + t580 * t480, pkin(1) * t355 - pkin(2) * t495 + qJ(3) * t377 + t582 * t361 + t580 * t400, pkin(1) * t364 - pkin(2) * t497 + qJ(3) * t414 + t582 * t378 + t580 * t417, pkin(1) * t353 - pkin(2) * t472 + qJ(3) * t386 + t582 * t311 + t580 * t320, pkin(1) * t290 - pkin(2) * t468 - pkin(6) * t641 + qJ(3) * t297 + t582 * t321, t582 * t330 + t580 * t332, t582 * t292 + t580 * t294, t582 * t343 + t580 * t345, t582 * t329 + t580 * t331, t582 * t344 + t580 * t346, t582 * t359 + t580 * t360, pkin(1) * t274 - pkin(2) * t379 + qJ(3) * t287 + t582 * t256 + t580 * t264, pkin(1) * t280 - pkin(2) * t651 + qJ(3) * t299 + t582 * t263 + t580 * t268, pkin(1) * t248 - pkin(2) * t421 + qJ(3) * t259 + t582 * t231 + t580 * t232, pkin(1) * t225 - pkin(2) * t397 + qJ(3) * t229 + t582 * t224 + t580 * t227;];
tauB_reg = t1;
