% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:15
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:14:52
% EndTime: 2022-01-23 09:15:07
% DurationCPUTime: 15.40s
% Computational Cost: add. (82767->604), mult. (187064->864), div. (0->0), fcn. (132391->10), ass. (0->421)
t1085 = cos(qJ(1));
t1077 = sin(pkin(8));
t1079 = cos(pkin(8));
t1082 = sin(qJ(1));
t1052 = g(1) * t1085 + g(2) * t1082;
t1167 = qJD(1) ^ 2;
t1041 = -pkin(1) * t1167 - t1052;
t1051 = g(1) * t1082 - g(2) * t1085;
t1096 = qJDD(1) * pkin(1) + t1051;
t996 = t1041 * t1077 - t1079 * t1096;
t997 = t1079 * t1041 + t1077 * t1096;
t1118 = t1077 * t996 + t1079 * t997;
t936 = t1077 * t997 - t1079 * t996;
t1150 = t1082 * t936;
t1187 = t1085 * t1118 - t1150;
t1144 = t1085 * t936;
t1186 = -t1082 * t1118 - t1144;
t1080 = sin(qJ(5));
t1071 = qJDD(4) + qJDD(5);
t1078 = cos(pkin(9));
t1081 = sin(qJ(4));
t1084 = cos(qJ(4));
t1076 = sin(pkin(9));
t1143 = qJD(1) * t1076;
t1029 = -qJD(1) * t1078 * t1084 + t1081 * t1143;
t1099 = t1076 * t1084 + t1078 * t1081;
t1030 = t1099 * qJD(1);
t1083 = cos(qJ(5));
t978 = t1029 * t1083 + t1030 * t1080;
t980 = -t1029 * t1080 + t1030 * t1083;
t925 = t980 * t978;
t1175 = -t925 + t1071;
t1185 = t1080 * t1175;
t995 = t1030 * t1029;
t1171 = qJDD(4) - t995;
t1184 = t1081 * t1171;
t1183 = t1083 * t1175;
t1182 = t1084 * t1171;
t1089 = t1078 ^ 2;
t1068 = t1089 * t1167;
t1087 = t1076 ^ 2;
t1131 = t1087 * t1167;
t1047 = t1068 + t1131;
t1129 = t1077 * qJDD(1);
t1044 = t1079 * t1167 + t1129;
t1074 = g(3) - qJDD(2);
t1016 = qJ(2) * t1044 - t1074 * t1079;
t1128 = t1079 * qJDD(1);
t1045 = -t1077 * t1167 + t1128;
t1103 = -qJ(2) * t1045 - t1074 * t1077;
t1170 = t1044 * t1085 + t1045 * t1082;
t1181 = pkin(5) * t1170 + t1085 * t1016 - t1082 * t1103;
t1002 = -t1044 * t1082 + t1045 * t1085;
t1180 = -pkin(5) * t1002 + t1082 * t1016 + t1085 * t1103;
t1169 = t1167 * (t1087 + t1089);
t1037 = t1078 * t1169;
t1119 = t1078 * t1128;
t1006 = -t1037 * t1077 + t1119;
t1066 = t1078 * qJDD(1);
t1008 = t1037 * t1079 + t1066 * t1077;
t1179 = t1006 * t1085 - t1008 * t1082;
t1178 = t1006 * t1082 + t1008 * t1085;
t1058 = t1078 * t1074;
t981 = -pkin(2) * t1167 + qJDD(1) * qJ(3) + t997;
t1116 = 0.2e1 * qJD(1) * qJD(3) + t981;
t958 = t1076 * t1116 + t1058;
t1139 = t1076 * t1074;
t959 = t1078 * t1116 - t1139;
t907 = t1076 * t958 + t1078 * t959;
t1064 = t1076 * qJDD(1);
t1027 = t1064 * t1081 - t1066 * t1084;
t1142 = t1030 * qJD(4);
t1092 = t1027 + t1142;
t1023 = t1029 * qJD(4);
t1028 = t1099 * qJDD(1);
t993 = -t1023 + t1028;
t910 = -qJD(5) * t978 - t1080 * t1092 + t1083 * t993;
t1072 = qJD(4) + qJD(5);
t971 = t1072 * t978;
t1176 = -t971 + t910;
t1117 = t1080 * t993 + t1083 * t1092;
t857 = (qJD(5) - t1072) * t980 + t1117;
t976 = t978 ^ 2;
t977 = t980 ^ 2;
t1166 = t1029 ^ 2;
t1026 = t1030 ^ 2;
t1070 = t1072 ^ 2;
t1138 = t1078 * t1167;
t1162 = pkin(6) * qJDD(1);
t940 = -0.2e1 * qJD(3) * t1143 - t1058 + (pkin(3) * t1138 - t1162 - t981) * t1076;
t941 = -pkin(3) * t1068 - t1139 + (t1116 + t1162) * t1078;
t875 = t1081 * t941 - t1084 * t940;
t876 = t1081 * t940 + t1084 * t941;
t809 = t1081 * t876 - t1084 * t875;
t1165 = pkin(3) * t809;
t928 = -t1027 * t1081 - t1028 * t1084;
t1164 = pkin(3) * t928;
t975 = -qJDD(1) * pkin(2) - qJ(3) * t1167 + qJDD(3) + t996;
t1161 = -pkin(2) * t975 + qJ(3) * t907;
t1160 = t1072 * t980;
t1159 = t1076 * t809;
t968 = t1076 * t975;
t1158 = t1077 * t975;
t1157 = t1078 * t809;
t969 = t1078 * t975;
t1156 = t1079 * t975;
t1012 = qJD(4) * pkin(4) - pkin(7) * t1030;
t957 = -pkin(3) * t1066 - pkin(6) * t1047 + t975;
t874 = pkin(4) * t1092 - pkin(7) * t1166 + t1012 * t1030 + t957;
t1155 = t1080 * t874;
t921 = t925 + t1071;
t1154 = t1080 * t921;
t820 = (-t993 - t1023) * pkin(7) + t1171 * pkin(4) - t875;
t821 = -pkin(4) * t1166 - pkin(7) * t1092 - qJD(4) * t1012 + t876;
t779 = t1080 * t821 - t1083 * t820;
t780 = t1080 * t820 + t1083 * t821;
t735 = t1080 * t780 - t1083 * t779;
t1153 = t1081 * t735;
t1152 = t1081 * t957;
t989 = qJDD(4) + t995;
t1151 = t1081 * t989;
t1149 = t1083 * t874;
t1148 = t1083 * t921;
t1147 = t1084 * t735;
t1146 = t1084 * t957;
t1145 = t1084 * t989;
t1141 = t1072 * t1080;
t1140 = t1072 * t1083;
t1137 = t1081 * t1029;
t1136 = t1081 * t1030;
t1133 = t1084 * t1029;
t1132 = t1084 * t1030;
t1127 = t1077 * t925;
t1126 = t1079 * t925;
t1125 = pkin(2) * t1066 - qJ(3) * t1037 - t969;
t736 = t1080 * t779 + t1083 * t780;
t701 = t1081 * t736 + t1147;
t734 = pkin(4) * t735;
t1124 = pkin(3) * t701 + t734;
t861 = t971 + t910;
t806 = -t1080 * t857 - t1083 * t861;
t808 = t1080 * t861 - t1083 * t857;
t761 = t1081 * t808 + t1084 * t806;
t803 = pkin(4) * t806;
t1123 = pkin(3) * t761 + t803;
t1122 = t1077 * t995;
t1054 = t1076 * t1138;
t1121 = t1079 * t995;
t1120 = t1076 * t1066;
t810 = t1081 * t875 + t1084 * t876;
t702 = t1084 * t736 - t1153;
t728 = -pkin(4) * t874 + pkin(7) * t736;
t682 = -pkin(3) * t874 + pkin(6) * t702 - pkin(7) * t1153 + t1084 * t728;
t686 = -pkin(6) * t701 - pkin(7) * t1147 - t1081 * t728;
t689 = -t1076 * t701 + t1078 * t702;
t1115 = -pkin(2) * t874 + qJ(3) * t689 + t1076 * t686 + t1078 * t682;
t908 = -t976 - t977;
t711 = -pkin(4) * t908 + pkin(7) * t808 + t736;
t720 = -pkin(7) * t806 - t735;
t763 = -t1081 * t806 + t1084 * t808;
t693 = -pkin(3) * t908 + pkin(6) * t763 + t1081 * t720 + t1084 * t711;
t695 = -pkin(6) * t761 - t1081 * t711 + t1084 * t720;
t718 = -t1076 * t761 + t1078 * t763;
t1114 = -pkin(2) * t908 + qJ(3) * t718 + t1076 * t695 + t1078 * t693;
t919 = -t1070 - t976;
t835 = t1083 * t919 - t1185;
t856 = (qJD(5) + t1072) * t980 + t1117;
t776 = -pkin(4) * t856 + pkin(7) * t835 - t1149;
t834 = t1080 * t919 + t1183;
t796 = -t1081 * t834 + t1084 * t835;
t804 = -pkin(7) * t834 + t1155;
t713 = -pkin(3) * t856 + pkin(6) * t796 + t1081 * t804 + t1084 * t776;
t795 = t1081 * t835 + t1084 * t834;
t726 = -pkin(6) * t795 - t1081 * t776 + t1084 * t804;
t753 = -t1076 * t795 + t1078 * t796;
t1113 = -pkin(2) * t856 + qJ(3) * t753 + t1076 * t726 + t1078 * t713;
t963 = -t977 - t1070;
t881 = -t1080 * t963 - t1148;
t781 = -pkin(4) * t1176 + pkin(7) * t881 + t1155;
t880 = t1083 * t963 - t1154;
t811 = -pkin(7) * t880 + t1149;
t813 = -t1081 * t880 + t1084 * t881;
t724 = -pkin(3) * t1176 + pkin(6) * t813 + t1081 * t811 + t1084 * t781;
t812 = t1081 * t881 + t1084 * t880;
t731 = -pkin(6) * t812 - t1081 * t781 + t1084 * t811;
t770 = -t1076 * t812 + t1078 * t813;
t1112 = -pkin(2) * t1176 + qJ(3) * t770 + t1076 * t731 + t1078 * t724;
t930 = -t1027 * t1084 + t1028 * t1081;
t962 = -t1026 - t1166;
t783 = -pkin(3) * t962 + pkin(6) * t930 + t810;
t792 = -pkin(6) * t928 - t809;
t864 = -t1076 * t928 + t1078 * t930;
t1111 = -pkin(2) * t962 + qJ(3) * t864 + t1076 * t792 + t1078 * t783;
t1086 = qJD(4) ^ 2;
t987 = -t1086 - t1166;
t927 = t1084 * t987 - t1184;
t991 = t1027 + 0.2e1 * t1142;
t831 = -pkin(3) * t991 + pkin(6) * t927 - t1146;
t926 = t1081 * t987 + t1182;
t851 = -t1076 * t926 + t1078 * t927;
t878 = -pkin(6) * t926 + t1152;
t1110 = -pkin(2) * t991 + qJ(3) * t851 + t1076 * t878 + t1078 * t831;
t1019 = -t1026 - t1086;
t947 = -t1019 * t1081 - t1145;
t992 = -0.2e1 * t1023 + t1028;
t855 = -pkin(3) * t992 + pkin(6) * t947 + t1152;
t944 = t1019 * t1084 - t1151;
t896 = -t1076 * t944 + t1078 * t947;
t902 = -pkin(6) * t944 + t1146;
t1109 = -pkin(2) * t992 + qJ(3) * t896 + t1076 * t902 + t1078 * t855;
t1108 = -t1051 * t1082 - t1052 * t1085;
t1063 = t1087 * qJDD(1);
t1065 = t1089 * qJDD(1);
t1042 = t1065 + t1063;
t1107 = pkin(2) * t1047 + qJ(3) * t1042 + t907;
t1106 = pkin(3) * t944 - t876;
t1105 = pkin(4) * t834 - t779;
t1050 = qJDD(1) * t1085 - t1082 * t1167;
t1104 = -pkin(5) * t1050 - g(3) * t1082;
t905 = t1076 * t959 - t1078 * t958;
t1010 = t1044 * t1078 * t1076;
t1011 = -t1054 * t1077 + t1076 * t1119;
t1102 = t1010 * t1085 + t1011 * t1082;
t1101 = t1010 * t1082 - t1011 * t1085;
t1100 = t1051 * t1085 - t1052 * t1082;
t1036 = t1076 * t1169;
t1098 = -pkin(2) * t1064 + qJ(3) * t1036 + t968;
t1097 = pkin(3) * t926 - t875;
t1095 = pkin(4) * t880 - t780;
t767 = t1078 * t810 - t1159;
t794 = -pkin(3) * t957 + pkin(6) * t810;
t1094 = -pkin(2) * t957 - pkin(6) * t1159 + qJ(3) * t767 + t1078 * t794;
t1093 = pkin(3) * t795 + t1105;
t1091 = pkin(3) * t812 + t1095;
t1053 = 0.2e1 * t1120;
t1049 = qJDD(1) * t1082 + t1085 * t1167;
t1048 = -t1068 + t1131;
t1043 = t1065 - t1063;
t1025 = -pkin(5) * t1049 + g(3) * t1085;
t1018 = -t1026 + t1086;
t1017 = -t1086 + t1166;
t1007 = t1036 * t1079 + t1076 * t1129;
t1004 = t1036 * t1077 - t1076 * t1128;
t1001 = t1043 * t1079 + t1048 * t1077;
t1000 = t1042 * t1079 - t1047 * t1077;
t999 = t1043 * t1077 - t1048 * t1079;
t998 = t1042 * t1077 + t1047 * t1079;
t994 = t1026 - t1166;
t973 = (-t1133 + t1136) * qJD(4);
t972 = (-t1132 - t1137) * qJD(4);
t967 = -pkin(1) * t1044 - t997;
t966 = pkin(1) * t1045 - t996;
t965 = -t977 + t1070;
t964 = t976 - t1070;
t956 = -qJD(4) * t1136 + t1084 * t993;
t955 = qJD(4) * t1132 + t1081 * t993;
t954 = qJD(4) * t1133 + t1081 * t1092;
t953 = qJD(4) * t1137 - t1084 * t1092;
t949 = -t1004 * t1082 + t1007 * t1085;
t948 = t1004 * t1085 + t1007 * t1082;
t946 = -t1018 * t1081 + t1182;
t945 = t1017 * t1084 - t1151;
t943 = t1018 * t1084 + t1184;
t942 = t1017 * t1081 + t1145;
t934 = pkin(1) * t936;
t931 = -t1081 * t992 - t1084 * t991;
t929 = -t1081 * t991 + t1084 * t992;
t924 = pkin(1) * t1074 + qJ(2) * t1118;
t923 = t977 - t976;
t918 = -t1076 * t972 + t1078 * t973;
t917 = t1076 * t973 + t1078 * t972;
t916 = (t1080 * t980 - t1083 * t978) * t1072;
t915 = (-t1080 * t978 - t1083 * t980) * t1072;
t914 = pkin(1) * t1006 + t1125;
t913 = pkin(1) * t1004 + t1098;
t912 = qJDD(4) * t1077 + t1079 * t918;
t911 = -qJDD(4) * t1079 + t1077 * t918;
t909 = -qJD(5) * t980 - t1117;
t901 = -t1076 * t955 + t1078 * t956;
t900 = -t1076 * t953 + t1078 * t954;
t899 = t1076 * t956 + t1078 * t955;
t898 = t1076 * t954 + t1078 * t953;
t895 = -t1076 * t943 + t1078 * t946;
t894 = -t1076 * t942 + t1078 * t945;
t893 = t1076 * t947 + t1078 * t944;
t892 = t1076 * t946 + t1078 * t943;
t891 = t1076 * t945 + t1078 * t942;
t889 = t1083 * t964 - t1154;
t888 = -t1080 * t965 + t1183;
t887 = t1080 * t964 + t1148;
t886 = t1083 * t965 + t1185;
t885 = -qJ(2) * t1004 - t1077 * t959 + t1078 * t1156;
t884 = -qJ(2) * t1006 + t1076 * t1156 - t1077 * t958;
t883 = qJ(2) * t1007 + t1077 * t969 + t1079 * t959;
t882 = -qJ(2) * t1008 + t1076 * t1158 + t1079 * t958;
t871 = t1028 * t1077 + t1079 * t895;
t870 = -t1027 * t1077 + t1079 * t894;
t869 = -t1028 * t1079 + t1077 * t895;
t868 = t1027 * t1079 + t1077 * t894;
t867 = -qJ(2) * t998 - t1079 * t905;
t866 = qJ(2) * t1000 - t1077 * t905;
t865 = -t1076 * t929 + t1078 * t931;
t863 = t1076 * t931 + t1078 * t929;
t862 = t1076 * t930 + t1078 * t928;
t850 = t1076 * t927 + t1078 * t926;
t847 = t1079 * t901 + t1122;
t846 = t1079 * t900 - t1122;
t845 = t1077 * t901 - t1121;
t844 = t1077 * t900 + t1121;
t843 = t1083 * t910 - t1141 * t980;
t842 = t1080 * t910 + t1140 * t980;
t841 = -t1080 * t909 + t1140 * t978;
t840 = t1083 * t909 + t1141 * t978;
t839 = t1079 * t907 + t1158;
t838 = t1077 * t907 - t1156;
t837 = t1077 * t992 + t1079 * t896;
t836 = t1077 * t896 - t1079 * t992;
t832 = pkin(1) * t998 + t1107;
t829 = -t1081 * t915 + t1084 * t916;
t828 = t1081 * t916 + t1084 * t915;
t827 = t1077 * t994 + t1079 * t865;
t826 = t1077 * t865 - t1079 * t994;
t825 = t1077 * t991 + t1079 * t851;
t824 = t1077 * t851 - t1079 * t991;
t823 = t1077 * t962 + t1079 * t864;
t822 = t1077 * t864 - t1079 * t962;
t819 = -pkin(2) * t862 - t1164;
t817 = -t1081 * t887 + t1084 * t889;
t816 = -t1081 * t886 + t1084 * t888;
t815 = t1081 * t889 + t1084 * t887;
t814 = t1081 * t888 + t1084 * t886;
t807 = -t1080 * t1176 - t1083 * t856;
t805 = -t1080 * t856 + t1083 * t1176;
t802 = pkin(1) * t838 + t1161;
t801 = -t1081 * t842 + t1084 * t843;
t800 = -t1081 * t840 + t1084 * t841;
t799 = t1081 * t843 + t1084 * t842;
t798 = t1081 * t841 + t1084 * t840;
t797 = -pkin(2) * t893 - t1106;
t790 = -pkin(2) * t850 - t1097;
t789 = -t1076 * t828 + t1078 * t829;
t788 = t1076 * t829 + t1078 * t828;
t787 = t1071 * t1077 + t1079 * t789;
t786 = -t1071 * t1079 + t1077 * t789;
t785 = -qJ(2) * t838 + (pkin(2) * t1077 - qJ(3) * t1079) * t905;
t784 = -qJ(3) * t893 - t1076 * t855 + t1078 * t902;
t777 = -qJ(3) * t850 - t1076 * t831 + t1078 * t878;
t775 = qJ(2) * t839 + (-pkin(2) * t1079 - qJ(3) * t1077 - pkin(1)) * t905;
t774 = -t1076 * t815 + t1078 * t817;
t773 = -t1076 * t814 + t1078 * t816;
t772 = t1076 * t817 + t1078 * t815;
t771 = t1076 * t816 + t1078 * t814;
t769 = t1076 * t813 + t1078 * t812;
t766 = t1076 * t810 + t1157;
t764 = pkin(1) * t836 + t1109;
t762 = -t1081 * t805 + t1084 * t807;
t760 = t1081 * t807 + t1084 * t805;
t759 = t1077 * t957 + t1079 * t767;
t758 = t1077 * t767 - t1079 * t957;
t757 = -t1076 * t799 + t1078 * t801;
t756 = -t1076 * t798 + t1078 * t800;
t755 = t1076 * t801 + t1078 * t799;
t754 = t1076 * t800 + t1078 * t798;
t752 = t1076 * t796 + t1078 * t795;
t750 = -t1077 * t857 + t1079 * t774;
t749 = t1077 * t861 + t1079 * t773;
t748 = t1077 * t774 + t1079 * t857;
t747 = t1077 * t773 - t1079 * t861;
t746 = pkin(1) * t824 + t1110;
t745 = t1077 * t1176 + t1079 * t770;
t744 = t1077 * t770 - t1079 * t1176;
t743 = t1079 * t757 + t1127;
t742 = t1079 * t756 - t1127;
t741 = t1077 * t757 - t1126;
t740 = t1077 * t756 + t1126;
t739 = t1077 * t856 + t1079 * t753;
t738 = t1077 * t753 - t1079 * t856;
t737 = -pkin(2) * t766 - t1165;
t733 = -qJ(2) * t836 - t1077 * t797 + t1079 * t784;
t732 = -qJ(3) * t862 - t1076 * t783 + t1078 * t792;
t729 = -pkin(1) * t893 + qJ(2) * t837 + t1077 * t784 + t1079 * t797;
t727 = -qJ(2) * t824 - t1077 * t790 + t1079 * t777;
t722 = pkin(1) * t822 + t1111;
t721 = -pkin(1) * t850 + qJ(2) * t825 + t1077 * t777 + t1079 * t790;
t719 = -pkin(6) * t1157 - qJ(3) * t766 - t1076 * t794;
t717 = -t1076 * t760 + t1078 * t762;
t716 = t1076 * t763 + t1078 * t761;
t715 = t1076 * t762 + t1078 * t760;
t710 = t1077 * t923 + t1079 * t717;
t709 = t1077 * t717 - t1079 * t923;
t708 = -qJ(2) * t822 - t1077 * t819 + t1079 * t732;
t707 = t1077 * t908 + t1079 * t718;
t706 = t1077 * t718 - t1079 * t908;
t705 = -pkin(2) * t769 - t1091;
t704 = -pkin(1) * t862 + qJ(2) * t823 + t1077 * t732 + t1079 * t819;
t703 = -pkin(2) * t752 - t1093;
t700 = pkin(1) * t758 + t1094;
t699 = -pkin(2) * t716 - t1123;
t698 = -qJ(3) * t769 - t1076 * t724 + t1078 * t731;
t697 = -qJ(2) * t758 - t1077 * t737 + t1079 * t719;
t696 = -qJ(3) * t752 - t1076 * t713 + t1078 * t726;
t691 = -pkin(1) * t766 + qJ(2) * t759 + t1077 * t719 + t1079 * t737;
t690 = pkin(1) * t744 + t1112;
t688 = t1076 * t702 + t1078 * t701;
t684 = t1077 * t874 + t1079 * t689;
t683 = t1077 * t689 - t1079 * t874;
t680 = pkin(1) * t738 + t1113;
t679 = -qJ(2) * t744 - t1077 * t705 + t1079 * t698;
t678 = -pkin(1) * t769 + qJ(2) * t745 + t1077 * t698 + t1079 * t705;
t677 = -qJ(2) * t738 - t1077 * t703 + t1079 * t696;
t676 = -pkin(1) * t752 + qJ(2) * t739 + t1077 * t696 + t1079 * t703;
t675 = -pkin(2) * t688 - t1124;
t674 = -qJ(3) * t716 - t1076 * t693 + t1078 * t695;
t673 = pkin(1) * t706 + t1114;
t672 = -qJ(3) * t688 - t1076 * t682 + t1078 * t686;
t671 = -qJ(2) * t706 - t1077 * t699 + t1079 * t674;
t670 = -pkin(1) * t716 + qJ(2) * t707 + t1077 * t674 + t1079 * t699;
t669 = pkin(1) * t683 + t1115;
t668 = -qJ(2) * t683 - t1077 * t675 + t1079 * t672;
t667 = -pkin(1) * t688 + qJ(2) * t684 + t1077 * t672 + t1079 * t675;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1050, 0, -t1049, 0, t1104, -t1025, -t1100, -pkin(5) * t1100, 0, 0, t1002, 0, -t1170, 0, t1180, t1181, t1186, pkin(5) * t1186 - qJ(2) * t1144 - t1082 * t924, -t1101, t1001 * t1085 - t1082 * t999, t949, t1101, t1178, 0, -pkin(5) * t1179 - t1082 * t882 + t1085 * t884, -pkin(5) * t948 - t1082 * t883 + t1085 * t885, t1085 * t867 - t1082 * t866 - pkin(5) * (t1000 * t1082 + t1085 * t998), t1085 * t785 - t1082 * t775 - pkin(5) * (t1082 * t839 + t1085 * t838), -t1082 * t845 + t1085 * t847, -t1082 * t826 + t1085 * t827, -t1082 * t869 + t1085 * t871, -t1082 * t844 + t1085 * t846, -t1082 * t868 + t1085 * t870, -t1082 * t911 + t1085 * t912, t1085 * t727 - t1082 * t721 - pkin(5) * (t1082 * t825 + t1085 * t824), t1085 * t733 - t1082 * t729 - pkin(5) * (t1082 * t837 + t1085 * t836), t1085 * t708 - t1082 * t704 - pkin(5) * (t1082 * t823 + t1085 * t822), t1085 * t697 - t1082 * t691 - pkin(5) * (t1082 * t759 + t1085 * t758), -t1082 * t741 + t1085 * t743, -t1082 * t709 + t1085 * t710, -t1082 * t747 + t1085 * t749, -t1082 * t740 + t1085 * t742, -t1082 * t748 + t1085 * t750, -t1082 * t786 + t1085 * t787, t1085 * t677 - t1082 * t676 - pkin(5) * (t1082 * t739 + t1085 * t738), t1085 * t679 - t1082 * t678 - pkin(5) * (t1082 * t745 + t1085 * t744), t1085 * t671 - t1082 * t670 - pkin(5) * (t1082 * t707 + t1085 * t706), t1085 * t668 - t1082 * t667 - pkin(5) * (t1082 * t684 + t1085 * t683); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1049, 0, t1050, 0, t1025, t1104, t1108, pkin(5) * t1108, 0, 0, t1170, 0, t1002, 0, -t1181, t1180, t1187, pkin(5) * t1187 - qJ(2) * t1150 + t1085 * t924, t1102, t1001 * t1082 + t1085 * t999, t948, -t1102, -t1179, 0, -pkin(5) * t1178 + t1082 * t884 + t1085 * t882, pkin(5) * t949 + t1082 * t885 + t1085 * t883, t1082 * t867 + t1085 * t866 + pkin(5) * (t1000 * t1085 - t1082 * t998), t1082 * t785 + t1085 * t775 + pkin(5) * (-t1082 * t838 + t1085 * t839), t1082 * t847 + t1085 * t845, t1082 * t827 + t1085 * t826, t1082 * t871 + t1085 * t869, t1082 * t846 + t1085 * t844, t1082 * t870 + t1085 * t868, t1082 * t912 + t1085 * t911, t1082 * t727 + t1085 * t721 + pkin(5) * (-t1082 * t824 + t1085 * t825), t1082 * t733 + t1085 * t729 + pkin(5) * (-t1082 * t836 + t1085 * t837), t1082 * t708 + t1085 * t704 + pkin(5) * (-t1082 * t822 + t1085 * t823), t1082 * t697 + t1085 * t691 + pkin(5) * (-t1082 * t758 + t1085 * t759), t1082 * t743 + t1085 * t741, t1082 * t710 + t1085 * t709, t1082 * t749 + t1085 * t747, t1082 * t742 + t1085 * t740, t1082 * t750 + t1085 * t748, t1082 * t787 + t1085 * t786, t1082 * t677 + t1085 * t676 + pkin(5) * (-t1082 * t738 + t1085 * t739), t1082 * t679 + t1085 * t678 + pkin(5) * (-t1082 * t744 + t1085 * t745), t1082 * t671 + t1085 * t670 + pkin(5) * (-t1082 * t706 + t1085 * t707), t1082 * t668 + t1085 * t667 + pkin(5) * (-t1082 * t683 + t1085 * t684); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1051, t1052, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t966, t967, 0, t934, t1063, t1053, 0, t1065, 0, 0, t914, t913, t832, t802, t899, t863, t892, t898, t891, t917, t746, t764, t722, t700, t755, t715, t771, t754, t772, t788, t680, t690, t673, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1167, 0, 0, -g(3), -t1051, 0, 0, 0, t1045, 0, -t1044, 0, t1103, t1016, -t936, -qJ(2) * t936, t1011, t1001, t1007, -t1011, t1008, 0, t884, t885, t867, t785, t847, t827, t871, t846, t870, t912, t727, t733, t708, t697, t743, t710, t749, t742, t750, t787, t677, t679, t671, t668; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, 0, qJDD(1), 0, g(3), 0, -t1052, 0, 0, 0, t1044, 0, t1045, 0, -t1016, t1103, t1118, t924, t1010, t999, t1004, -t1010, -t1006, 0, t882, t883, t866, t775, t845, t826, t869, t844, t868, t911, t721, t729, t704, t691, t741, t709, t747, t740, t748, t786, t676, t678, t670, t667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1051, t1052, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t966, t967, 0, t934, t1063, t1053, 0, t1065, 0, 0, t914, t913, t832, t802, t899, t863, t892, t898, t891, t917, t746, t764, t722, t700, t755, t715, t771, t754, t772, t788, t680, t690, t673, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1167, 0, 0, -t1074, t996, 0, t1120, t1043, t1036, -t1120, t1037, 0, t968, t969, -t905, -qJ(3) * t905, t901, t865, t895, t900, t894, t918, t777, t784, t732, t719, t757, t717, t773, t756, t774, t789, t696, t698, t674, t672; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, 0, qJDD(1), 0, t1074, 0, t997, 0, t1054, -t1048, -t1064, -t1054, -t1066, 0, t958, t959, 0, -pkin(2) * t905, -t995, -t994, -t1028, t995, t1027, -qJDD(4), t790, t797, t819, t737, -t925, -t923, -t861, t925, t857, -t1071, t703, t705, t699, t675; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t996, -t997, 0, 0, t1063, t1053, 0, t1065, 0, 0, t1125, t1098, t1107, t1161, t899, t863, t892, t898, t891, t917, t1110, t1109, t1111, t1094, t755, t715, t771, t754, t772, t788, t1113, t1112, t1114, t1115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, t1066, t1054, 0, t1068, 0, 0, t975, t958, 0, t956, t931, t946, t954, t945, t973, t878, t902, t792, -pkin(6) * t809, t801, t762, t816, t800, t817, t829, t726, t731, t695, t686; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, -t1131, t1066, -t1054, 0, -t975, 0, t959, 0, t955, t929, t943, t953, t942, t972, t831, t855, t783, t794, t799, t760, t814, t798, t815, t828, t713, t724, t693, t682; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1054, t1048, t1064, t1054, t1066, 0, -t958, -t959, 0, 0, t995, t994, t1028, -t995, -t1027, qJDD(4), t1097, t1106, t1164, t1165, t925, t923, t861, -t925, -t857, t1071, t1093, t1091, t1123, t1124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t993, -t991, t1171, t1023, t1017, -t1023, 0, t957, t875, 0, t843, t807, t888, t841, t889, t916, t804, t811, t720, -pkin(7) * t735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1142, t992, t1018, -t1092, t989, -t1142, -t957, 0, t876, 0, t842, t805, t886, t840, t887, t915, t776, t781, t711, t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t995, t994, t1028, -t995, -t1027, qJDD(4), -t875, -t876, 0, 0, t925, t923, t861, -t925, -t857, t1071, t1105, t1095, t803, t734; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t910, -t856, t1175, t971, t964, -t971, 0, t874, t779, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, t1176, t965, t909, t921, -t1160, -t874, 0, t780, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t925, t923, t861, -t925, -t857, t1071, -t779, -t780, 0, 0;];
m_new_reg = t1;
