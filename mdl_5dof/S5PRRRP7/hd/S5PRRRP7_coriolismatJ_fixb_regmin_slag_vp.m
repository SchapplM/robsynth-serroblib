% Calculate minimal parameter regressor of coriolis matrix for
% S5PRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x22]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-15 16:46
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-15 16:45:28
% EndTime: 2021-01-15 16:45:44
% DurationCPUTime: 3.80s
% Computational Cost: add. (2753->339), mult. (7076->531), div. (0->0), fcn. (6933->8), ass. (0->291)
t251 = cos(qJ(3));
t250 = cos(qJ(4));
t248 = sin(qJ(3));
t285 = -t251 * pkin(3) - t248 * pkin(8);
t275 = -pkin(2) + t285;
t187 = t250 * t275;
t375 = t250 * qJ(5);
t284 = -t248 * t375 + t187;
t247 = sin(qJ(4));
t410 = pkin(7) * t247;
t121 = (-pkin(4) - t410) * t251 + t284;
t380 = t247 * t251;
t335 = pkin(7) * t380;
t131 = -t284 + t335;
t434 = t121 + t131;
t373 = t250 * t251;
t333 = pkin(7) * t373;
t154 = t247 * t275 + t333;
t243 = t248 ^ 2;
t374 = t250 * t243;
t123 = -pkin(7) * t374 - t154 * t251;
t246 = sin(pkin(5));
t252 = cos(qJ(2));
t371 = t251 * t252;
t297 = -t371 / 0.2e1;
t249 = sin(qJ(2));
t377 = t249 * t250;
t256 = (t247 * t297 + t377 / 0.2e1) * t246;
t383 = t246 * t249;
t402 = cos(pkin(5));
t176 = t248 * t383 - t402 * t251;
t379 = t248 * t250;
t301 = -t379 / 0.2e1;
t289 = t176 * t301;
t382 = t246 * t252;
t323 = t247 * t382;
t294 = t402 * t248;
t324 = t251 * t383;
t177 = t294 + t324;
t394 = t177 * t250;
t130 = -t323 + t394;
t411 = -t251 / 0.2e1;
t306 = t130 * t411;
t263 = t306 + t289;
t56 = t256 + t263;
t365 = t56 * qJD(1);
t433 = t123 * qJD(2) + t365;
t378 = t249 * t247;
t255 = (t250 * t297 - t378 / 0.2e1) * t246;
t381 = t247 * t248;
t302 = -t381 / 0.2e1;
t321 = t250 * t382;
t395 = t177 * t247;
t129 = t321 + t395;
t399 = t129 * t251;
t264 = -t399 / 0.2e1 + t176 * t302;
t57 = t255 - t264;
t364 = t57 * qJD(1);
t409 = t247 * pkin(4);
t320 = pkin(7) + t409;
t202 = t320 * t248;
t244 = t250 ^ 2;
t74 = t244 * t243 * pkin(4) - t131 * t251 - t202 * t381;
t432 = t74 * qJD(2) - t364;
t303 = t382 / 0.2e1;
t421 = t130 / 0.2e1;
t38 = (t247 * t303 + t421 - t394 / 0.2e1) * t248;
t369 = t38 * qJD(1);
t404 = t251 * pkin(8);
t408 = t248 * pkin(3);
t213 = -t404 + t408;
t200 = t247 * t213;
t73 = t200 * t251 + (-t154 + t333) * t248;
t431 = t73 * qJD(2) - t369;
t304 = -t382 / 0.2e1;
t287 = t250 * t304;
t39 = (t287 + t129 / 0.2e1 - t395 / 0.2e1) * t248;
t368 = t39 * qJD(1);
t153 = -t187 + t335;
t201 = t250 * t213;
t235 = pkin(7) * t381;
t72 = t153 * t248 + (-t235 + t201) * t251;
t430 = -t72 * qJD(2) - t368;
t325 = t247 * t374;
t326 = t202 * t379;
t132 = -qJ(5) * t381 + t154;
t397 = t132 * t251;
t67 = -pkin(4) * t325 - t326 - t397;
t429 = t67 * qJD(2) + t365;
t122 = -t153 * t251 - t243 * t410;
t428 = -t122 * qJD(2) + t364;
t334 = pkin(7) * t379;
t372 = t251 * qJ(5);
t133 = -t247 * t372 + t200 - t334;
t203 = t320 * t251;
t392 = t203 * t250;
t393 = t202 * t250;
t43 = (t133 + t393) * t251 + (-t132 + t392) * t248;
t427 = t43 * qJD(2) - t369;
t407 = t248 * pkin(4);
t124 = -t250 * t372 + t201 + t235 + t407;
t42 = -t121 * t248 + t124 * t251 - t202 * t380 - t203 * t381;
t426 = -t42 * qJD(2) - t368;
t242 = t247 ^ 2;
t295 = t242 / 0.2e1 - t244 / 0.2e1;
t229 = t244 - t242;
t343 = t248 * qJD(2);
t310 = t250 * t343;
t425 = t229 * qJD(3) - 0.2e1 * t247 * t310;
t424 = t121 / 0.2e1;
t423 = t124 / 0.2e1;
t151 = (-t247 * t371 + t377) * t246;
t420 = t151 / 0.2e1;
t419 = t177 / 0.2e1;
t403 = pkin(8) + qJ(5);
t210 = t403 * t250;
t418 = -t210 / 0.2e1;
t415 = -t247 / 0.2e1;
t414 = -t248 / 0.2e1;
t413 = -t250 / 0.2e1;
t412 = t250 / 0.2e1;
t406 = t250 * pkin(4);
t405 = t251 * pkin(7);
t401 = t121 * t250;
t400 = t129 * t247;
t398 = t130 * t250;
t296 = t131 / 0.2e1 + t424;
t327 = pkin(4) * t411;
t15 = (t327 + t296) * t250;
t396 = t15 * qJD(2);
t84 = t176 * t247;
t209 = t403 * t247;
t391 = t209 * t248;
t390 = t209 * t251;
t389 = t210 * t248;
t388 = t210 * t251;
t23 = t434 * t381;
t387 = t23 * qJD(2);
t239 = -pkin(3) - t406;
t386 = t239 * t247;
t385 = t239 * t248;
t384 = t239 * t250;
t25 = (t177 - t398 - t400) * t176;
t376 = t25 * qJD(1);
t152 = (t250 * t371 + t378) * t246;
t322 = t248 * t382;
t26 = -t129 * t151 + t130 * t152 + t176 * t322;
t370 = t26 * qJD(1);
t228 = t244 + t242;
t245 = t251 ^ 2;
t230 = t245 - t243;
t359 = qJD(2) * t246;
t358 = qJD(4) * t247;
t241 = qJD(4) * t250;
t357 = qJD(4) * t251;
t354 = t130 * qJD(4);
t353 = t132 * qJD(4);
t352 = t176 * qJD(3);
t196 = t228 * t243;
t351 = t196 * qJD(2);
t198 = t230 * t247;
t350 = t198 * qJD(2);
t199 = t250 * t245 - t374;
t349 = t199 * qJD(2);
t348 = t210 * qJD(4);
t347 = t228 * qJD(3);
t346 = t230 * qJD(2);
t345 = t247 * qJD(3);
t344 = t247 * qJD(5);
t342 = t248 * qJD(3);
t341 = t250 * qJD(3);
t340 = t250 * qJD(5);
t339 = t251 * qJD(2);
t338 = t251 * qJD(3);
t185 = t201 / 0.2e1;
t337 = t185 + t235 / 0.2e1;
t336 = t247 * t406;
t332 = pkin(2) * t343;
t331 = pkin(2) * t339;
t330 = pkin(4) * t358;
t329 = pkin(4) * t241;
t328 = t409 / 0.2e1;
t319 = t247 * t357;
t318 = t250 * t357;
t317 = t252 * t359;
t316 = t247 * t241;
t315 = t247 * t341;
t314 = t251 * t344;
t313 = t248 * t338;
t312 = t248 * t339;
t311 = t248 * t341;
t309 = t248 * t340;
t308 = t250 * t339;
t307 = t251 * t340;
t305 = t202 * t415;
t300 = t379 / 0.2e1;
t299 = -t373 / 0.2e1;
t298 = t372 / 0.2e1;
t293 = pkin(4) * t300;
t292 = -qJD(4) + t339;
t290 = t247 * t311;
t288 = t248 * t303;
t286 = -t248 * t336 + t390 / 0.2e1;
t283 = -t389 / 0.2e1 - t121 / 0.2e1;
t253 = (t132 * t413 + t247 * t424 + t203 / 0.2e1) * t176 - t129 * t124 / 0.2e1 + t133 * t421 + t202 * t419;
t254 = t152 * t418 + t209 * t420 + t304 * t385;
t2 = t253 + t254;
t21 = t121 * t124 + t132 * t133 + t202 * t203;
t282 = t2 * qJD(1) + t21 * qJD(2);
t24 = pkin(4) * t326 - t132 * t434;
t3 = t296 * t130 + (t420 + t289) * pkin(4);
t281 = -t3 * qJD(1) + t24 * qJD(2);
t262 = t239 * t301 + t305;
t7 = t296 * t210 + (t423 + t262) * pkin(4);
t76 = pkin(4) * t386;
t280 = -t7 * qJD(2) + t76 * qJD(3);
t22 = (t121 * t251 + t124 * t248) * t250 + (t133 * t248 + t397) * t247;
t30 = (t399 / 0.2e1 - t152 / 0.2e1) * t250 + (t306 + t420) * t247;
t279 = t30 * qJD(1) - t22 * qJD(2);
t268 = t129 * t412 + t130 * t415;
t48 = (t303 - t268) * t248;
t61 = (t132 * t247 + t401) * t248;
t278 = -t48 * qJD(1) - t61 * qJD(2);
t135 = t209 * t247 + t210 * t250;
t171 = t336 - t386;
t44 = t305 + (-t375 / 0.2e1 + t418) * t251 + (-t384 / 0.2e1 + (0.1e1 - t295) * pkin(4)) * t248 + t337;
t277 = -t44 * qJD(2) - t171 * qJD(3);
t182 = t242 * pkin(4) + t384;
t184 = -t200 / 0.2e1;
t50 = t184 + (t248 * pkin(7) / 0.2e1 - t202 / 0.2e1) * t250 + (t298 + t385 / 0.2e1) * t247 + t286;
t276 = -t50 * qJD(2) + t182 * qJD(3);
t274 = t292 * t248;
t273 = t404 / 0.2e1 - t408 / 0.2e1;
t266 = t273 * t247;
t127 = t200 / 0.2e1 - t266;
t272 = pkin(3) * t341 - t127 * qJD(2);
t265 = t273 * t250;
t128 = -t201 / 0.2e1 + t265;
t271 = pkin(3) * t345 - t128 * qJD(2);
t270 = (t132 / 0.2e1 + t391 / 0.2e1) * t250;
t269 = t400 / 0.2e1 + t398 / 0.2e1;
t162 = t250 * t274;
t181 = t295 * t248;
t267 = -t181 * qJD(2) + t315;
t195 = t310 + t345;
t194 = t247 * t343 - t341;
t261 = qJD(2) * t325 + t181 * qJD(3);
t197 = t229 * t243;
t260 = t197 * qJD(2) + 0.2e1 * t290;
t37 = -t405 / 0.2e1 + t270 + (t327 + t283) * t247;
t257 = t294 / 0.2e1 + t324 / 0.2e1;
t46 = t257 - t269;
t258 = -t46 * qJD(1) + t37 * qJD(2) + t135 * qJD(3);
t237 = t342 / 0.2e1;
t186 = (t339 - qJD(4) / 0.2e1) * t248;
t178 = t195 * pkin(4);
t175 = t181 * qJD(4);
t161 = t195 * t251;
t160 = t194 * t251;
t159 = t247 * t274;
t104 = t235 + t185 + t265;
t103 = t184 - t266 + t334;
t86 = t176 * t250;
t59 = t256 - t263;
t58 = t255 + t264;
t51 = t239 * t302 + t393 / 0.2e1 + pkin(7) * t300 + t184 + t247 * t298 - t286;
t49 = t129 * t300 + t130 * t302 + t288;
t47 = t257 + t269;
t45 = t388 / 0.2e1 + qJ(5) * t299 - t262 + t337 + (0.1e1 + t295) * t407;
t41 = t130 * t414 + t177 * t300 + t247 * t288;
t40 = t129 * t414 + t248 * t287 + t381 * t419;
t36 = t405 / 0.2e1 + t251 * t328 + t270 + t283 * t247;
t29 = t151 * t415 + t152 * t412 + t268 * t251;
t28 = t57 * qJD(2);
t27 = t56 * qJD(2);
t20 = t59 * qJD(2) + t84 * qJD(3) - t354;
t19 = t58 * qJD(2) + t86 * qJD(3) + t129 * qJD(4);
t18 = t39 * qJD(2);
t17 = t38 * qJD(2);
t16 = t131 * t413 - t401 / 0.2e1 + pkin(4) * t299;
t14 = t41 * qJD(2) + t86 * qJD(4) + t177 * t345;
t13 = t40 * qJD(2) + t84 * qJD(4) - t177 * t341;
t12 = -t38 * qJD(3) - t57 * qJD(4);
t11 = -t39 * qJD(3) - t56 * qJD(4);
t10 = pkin(4) * t84;
t8 = pkin(4) * t423 + t202 * t328 + t239 * t293 + t418 * t434;
t6 = (t152 * t251 + t243 * t321) * qJD(2) + t41 * qJD(3) + t58 * qJD(4);
t5 = (-t151 * t251 + t243 * t323) * qJD(2) + t40 * qJD(3) + t59 * qJD(4);
t4 = pkin(4) * t420 + t176 * t293 - t434 * t130 / 0.2e1;
t1 = t253 - t254;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * qJD(2) + t25 * qJD(3); 0, 0, -t249 * t359, -t317, 0, 0, 0, 0, 0, (-t249 * t339 - t252 * t342) * t246, (t249 * t343 - t252 * t338) * t246, 0, 0, 0, 0, 0, t5, t6, t5, t6, t29 * qJD(3) + (-t151 * t250 - t152 * t247) * t343, t370 + (t151 * t121 + t152 * t132 + t202 * t322) * qJD(2) + t1 * qJD(3) + t4 * qJD(4) + t49 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177 * qJD(3) - t248 * t317, -t251 * t317 + t352, 0, 0, 0, 0, 0, t13, t14, t13, t14, t29 * qJD(2) - t228 * t352, t376 + t1 * qJD(2) + (-t135 * t176 + t177 * t239) * qJD(3) + t10 * qJD(4) + t47 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, t19, t20, t19, 0, -pkin(4) * t354 + t4 * qJD(2) + t10 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49 * qJD(2) + t47 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t12, t11, t12, t30 * qJD(3), t2 * qJD(3) - t3 * qJD(4) - t48 * qJD(5) - t370; 0, 0, 0, 0, t313, t230 * qJD(3), 0, 0, 0, -pkin(2) * t342, -pkin(2) * t338, -t243 * t316 + t244 * t313, -t197 * qJD(4) - 0.2e1 * t251 * t290, -t199 * qJD(3) + t248 * t319, t198 * qJD(3) + t248 * t318, -t313, -t72 * qJD(3) - t123 * qJD(4), t73 * qJD(3) + t122 * qJD(4), -t42 * qJD(3) - t67 * qJD(4) + t248 * t307, t43 * qJD(3) + t74 * qJD(4) - t248 * t314, -t22 * qJD(3) + t23 * qJD(4) + t196 * qJD(5), t21 * qJD(3) + t24 * qJD(4) - t61 * qJD(5); 0, 0, 0, 0, t312, t346, t338, -t342, 0, -pkin(7) * t338 - t332, pkin(7) * t342 - t331, -t175 + (t244 * t343 + t315) * t251, -0.2e1 * t248 * t316 + t251 * t425, t247 * t342 - t349, t311 + t350, -t186, (t247 * t285 - t333) * qJD(3) + t104 * qJD(4) + t430, (t250 * t285 + t335) * qJD(3) + t103 * qJD(4) + t431, (t239 * t380 - t391 - t392) * qJD(3) + t45 * qJD(4) + t314 + t426, (t203 * t247 + t239 * t373 - t389) * qJD(3) + t51 * qJD(4) + t307 + t427, ((t133 + t390) * t250 + (-t124 - t388) * t247) * qJD(3) + t16 * qJD(4) + t279, (-t124 * t209 + t133 * t210 + t203 * t239) * qJD(3) + t8 * qJD(4) + t36 * qJD(5) + t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t261, -t260, t159, t162, t237, t104 * qJD(3) - t154 * qJD(4) - t433, t103 * qJD(3) + t153 * qJD(4) - t428, t45 * qJD(3) - t353 - t429, t51 * qJD(3) + t131 * qJD(4) + t432, t16 * qJD(3) + t248 * t330 + t387, -pkin(4) * t353 + t8 * qJD(3) + t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, -t160, t351, t36 * qJD(3) + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18, t17, t18, t17, -t30 * qJD(2), -t2 * qJD(2) - t46 * qJD(5) - t376; 0, 0, 0, 0, -t312, -t346, 0, 0, 0, t332, t331, -t244 * t312 - t175, 0.2e1 * t247 * t162, -t318 + t349, t319 - t350, t186, t128 * qJD(4) - t430, t127 * qJD(4) - t431, -t44 * qJD(4) - t426, -t50 * qJD(4) - t427, -t15 * qJD(4) - t279, -t7 * qJD(4) + t37 * qJD(5) - t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t316, t229 * qJD(4), 0, 0, 0, -pkin(3) * t358, -pkin(3) * t241, -t171 * qJD(4), t182 * qJD(4), t228 * qJD(5), t76 * qJD(4) + t135 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t267, t425, t241 - t308, t292 * t247, -t343 / 0.2e1, -pkin(8) * t241 - t271, pkin(8) * t358 - t272, t277 - t348, t209 * qJD(4) + t276, -t329 - t396, -pkin(4) * t348 + t280; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t347, t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t28, t27, t28, 0, t3 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t261, t260, -t160, -t161, t237, -t128 * qJD(3) + t433, -t127 * qJD(3) + t428, t44 * qJD(3) - t309 + t429, t50 * qJD(3) + t248 * t344 - t432, t15 * qJD(3) - t387, -pkin(4) * t309 + t7 * qJD(3) - t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t267, -t425, t308, -t247 * t339, t343 / 0.2e1, t271, t272, -t277 - t344, -t276 - t340, t396, -pkin(4) * t344 - t280; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195, t194, 0, -t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48 * qJD(2) + t46 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t162, t159, -t351, -t37 * qJD(3) + t248 * t329 - t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t358, t241, -t347, -t258 + t330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t195, -t194, 0, t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t9;
