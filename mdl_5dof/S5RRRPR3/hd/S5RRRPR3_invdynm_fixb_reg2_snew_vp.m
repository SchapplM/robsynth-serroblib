% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:44
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:43:40
% EndTime: 2022-01-20 11:43:57
% DurationCPUTime: 17.55s
% Computational Cost: add. (150491->649), mult. (203831->927), div. (0->0), fcn. (136613->10), ass. (0->453)
t1210 = qJDD(1) + qJDD(2);
t1218 = sin(qJ(2));
t1222 = cos(qJ(2));
t1212 = qJD(1) + qJD(2);
t1307 = t1212 ^ 2;
t1179 = t1210 * t1218 + t1307 * t1222;
t1160 = pkin(6) * t1179 - g(3) * t1222;
t1219 = sin(qJ(1));
t1223 = cos(qJ(1));
t1182 = -t1210 * t1222 + t1307 * t1218;
t1233 = t1179 * t1223 - t1182 * t1219;
t1315 = pkin(6) * t1182 - g(3) * t1218;
t1327 = pkin(5) * t1233 + t1223 * t1160 - t1219 * t1315;
t1314 = t1179 * t1219 + t1182 * t1223;
t1326 = pkin(5) * t1314 + t1219 * t1160 + t1223 * t1315;
t1224 = qJD(3) ^ 2;
t1214 = sin(pkin(9));
t1215 = cos(pkin(9));
t1221 = cos(qJ(3));
t1270 = t1212 * t1221;
t1217 = sin(qJ(3));
t1271 = t1212 * t1217;
t1162 = t1214 * t1271 - t1215 * t1270;
t1308 = t1162 ^ 2;
t1106 = -t1224 - t1308;
t1163 = (t1214 * t1221 + t1215 * t1217) * t1212;
t1120 = t1163 * t1162;
t1309 = qJDD(3) - t1120;
t1318 = t1215 * t1309;
t1037 = t1106 * t1214 + t1318;
t1201 = qJD(3) * t1270;
t1268 = t1217 * t1210;
t1173 = t1201 + t1268;
t1199 = g(1) * t1223 + g(2) * t1219;
t1225 = qJD(1) ^ 2;
t1186 = -pkin(1) * t1225 - t1199;
t1198 = g(1) * t1219 - t1223 * g(2);
t1231 = qJDD(1) * pkin(1) + t1198;
t1130 = t1222 * t1186 + t1218 * t1231;
t1118 = -t1307 * pkin(2) + t1210 * pkin(7) + t1130;
t1282 = t1118 * t1217;
t1042 = qJDD(3) * pkin(3) - qJ(4) * t1173 - t1282 + (-g(3) + (pkin(3) * t1271 + qJ(4) * qJD(3)) * t1212) * t1221;
t1091 = -t1217 * g(3) + t1221 * t1118;
t1187 = qJD(3) * pkin(3) - qJ(4) * t1271;
t1306 = t1221 ^ 2;
t1203 = t1306 * t1307;
t1255 = qJD(3) * t1271;
t1267 = t1221 * t1210;
t1229 = -t1255 + t1267;
t1043 = -pkin(3) * t1203 + qJ(4) * t1229 - qJD(3) * t1187 + t1091;
t1234 = -0.2e1 * qJD(4) * t1163 + t1215 * t1042 - t1043 * t1214;
t1324 = pkin(3) * t1037 + t1234;
t1129 = t1186 * t1218 - t1222 * t1231;
t1247 = t1129 * t1218 + t1222 * t1130;
t1060 = t1129 * t1222 - t1130 * t1218;
t1285 = t1060 * t1223;
t1323 = -t1219 * t1247 + t1285;
t1286 = t1060 * t1219;
t1322 = t1223 * t1247 + t1286;
t1319 = t1214 * t1309;
t1216 = sin(qJ(5));
t1220 = cos(qJ(5));
t1096 = t1220 * t1162 + t1163 * t1216;
t1098 = -t1162 * t1216 + t1163 * t1220;
t1036 = t1098 * t1096;
t1209 = qJDD(3) + qJDD(5);
t1311 = -t1036 + t1209;
t1317 = t1216 * t1311;
t1316 = t1220 * t1311;
t1090 = g(3) * t1221 + t1282;
t1030 = t1217 * t1090 + t1221 * t1091;
t1121 = t1215 * t1173 + t1214 * t1229;
t1246 = t1173 * t1214 - t1215 * t1229;
t1016 = -t1096 * qJD(5) + t1220 * t1121 - t1216 * t1246;
t1211 = qJD(3) + qJD(5);
t1087 = t1211 * t1096;
t1310 = -t1087 + t1016;
t1155 = qJD(3) * t1162;
t1074 = t1155 + t1121;
t1248 = t1121 * t1216 + t1220 * t1246;
t980 = (qJD(5) - t1211) * t1098 + t1248;
t1092 = t1096 ^ 2;
t1093 = t1098 ^ 2;
t1161 = t1163 ^ 2;
t1208 = t1211 ^ 2;
t1292 = qJD(4) * t1162;
t1152 = -0.2e1 * t1292;
t1265 = t1214 * t1042 + t1215 * t1043;
t959 = t1152 + t1265;
t903 = t1214 * t959 + t1215 * t1234;
t1305 = pkin(3) * t903;
t1294 = qJD(3) * t1163;
t1072 = -t1246 + t1294;
t1018 = t1072 * t1214 - t1074 * t1215;
t1304 = pkin(3) * t1018;
t931 = pkin(4) * t1309 - pkin(8) * t1074 + t1234;
t1147 = qJD(3) * pkin(4) - pkin(8) * t1163;
t933 = -t1308 * pkin(4) - pkin(8) * t1246 - qJD(3) * t1147 + t959;
t886 = t1216 * t933 - t1220 * t931;
t887 = t1216 * t931 + t1220 * t933;
t843 = t1216 * t887 - t1220 * t886;
t1300 = t1214 * t843;
t1299 = t1215 * t843;
t1117 = -t1210 * pkin(2) - t1307 * pkin(7) + t1129;
t1045 = -t1229 * pkin(3) - qJ(4) * t1203 + t1187 * t1271 + qJDD(4) + t1117;
t967 = pkin(4) * t1246 - t1308 * pkin(8) + t1147 * t1163 + t1045;
t1298 = t1216 * t967;
t1297 = t1217 * t903;
t1296 = t1220 * t967;
t1295 = t1221 * t903;
t1293 = qJD(3) * t1212;
t1033 = t1036 + t1209;
t1290 = t1033 * t1216;
t1289 = t1033 * t1220;
t1288 = t1045 * t1214;
t1287 = t1045 * t1215;
t1109 = qJDD(3) + t1120;
t1284 = t1109 * t1214;
t1283 = t1109 * t1215;
t1281 = t1162 * t1214;
t1280 = t1162 * t1215;
t1279 = t1163 * t1214;
t1278 = t1163 * t1215;
t1174 = -0.2e1 * t1255 + t1267;
t1131 = t1174 * t1221;
t1197 = t1221 * t1307 * t1217;
t1188 = qJDD(3) + t1197;
t1277 = t1188 * t1217;
t1189 = qJDD(3) - t1197;
t1276 = t1189 * t1217;
t1275 = t1189 * t1221;
t1274 = t1211 * t1098;
t1273 = t1211 * t1216;
t1272 = t1211 * t1220;
t1213 = t1217 ^ 2;
t1269 = t1307 * t1213;
t1099 = t1217 * t1117;
t1100 = t1221 * t1117;
t1264 = -pkin(2) * t1117 + pkin(7) * t1030;
t1263 = qJDD(3) * t1222;
t1262 = t1213 + t1306;
t844 = t1216 * t886 + t1220 * t887;
t809 = t1214 * t844 + t1299;
t842 = pkin(4) * t843;
t1261 = pkin(3) * t809 + t842;
t984 = t1087 + t1016;
t915 = -t1216 * t980 - t1220 * t984;
t917 = t1216 * t984 - t1220 * t980;
t873 = t1214 * t917 + t1215 * t915;
t913 = pkin(4) * t915;
t1260 = pkin(3) * t873 + t913;
t1259 = t1218 * t1036;
t1258 = t1222 * t1036;
t1257 = t1218 * t1120;
t1256 = t1222 * t1120;
t1194 = -t1224 - t1269;
t1142 = -t1194 * t1217 - t1275;
t1172 = 0.2e1 * t1201 + t1268;
t1254 = -pkin(2) * t1172 + pkin(7) * t1142 + t1099;
t1196 = -t1203 - t1224;
t1140 = t1196 * t1221 - t1277;
t1253 = pkin(2) * t1174 + pkin(7) * t1140 - t1100;
t904 = -t1214 * t1234 + t1215 * t959;
t810 = t1215 * t844 - t1300;
t832 = -pkin(4) * t967 + pkin(8) * t844;
t789 = -pkin(3) * t967 - pkin(8) * t1300 + qJ(4) * t810 + t1215 * t832;
t793 = -pkin(8) * t1299 - qJ(4) * t809 - t1214 * t832;
t797 = -t1217 * t809 + t1221 * t810;
t1252 = -pkin(2) * t967 + pkin(7) * t797 + t1217 * t793 + t1221 * t789;
t1031 = -t1208 - t1092;
t962 = t1031 * t1220 - t1317;
t979 = (qJD(5) + t1211) * t1098 + t1248;
t889 = -pkin(4) * t979 + pkin(8) * t962 - t1296;
t961 = t1031 * t1216 + t1316;
t906 = -t1214 * t961 + t1215 * t962;
t907 = -pkin(8) * t961 + t1298;
t824 = -pkin(3) * t979 + qJ(4) * t906 + t1214 * t907 + t1215 * t889;
t905 = t1214 * t962 + t1215 * t961;
t836 = -qJ(4) * t905 - t1214 * t889 + t1215 * t907;
t867 = -t1217 * t905 + t1221 * t906;
t1251 = -pkin(2) * t979 + pkin(7) * t867 + t1217 * t836 + t1221 * t824;
t1077 = -t1093 - t1208;
t991 = -t1077 * t1216 - t1289;
t893 = -pkin(4) * t1310 + pkin(8) * t991 + t1298;
t990 = t1077 * t1220 - t1290;
t919 = -pkin(8) * t990 + t1296;
t923 = -t1214 * t990 + t1215 * t991;
t834 = -pkin(3) * t1310 + qJ(4) * t923 + t1214 * t919 + t1215 * t893;
t922 = t1214 * t991 + t1215 * t990;
t841 = -qJ(4) * t922 - t1214 * t893 + t1215 * t919;
t878 = -t1217 * t922 + t1221 * t923;
t1250 = -pkin(2) * t1310 + pkin(7) * t878 + t1217 * t841 + t1221 * t834;
t1245 = -t1198 * t1219 - t1223 * t1199;
t1014 = -t1092 - t1093;
t817 = -pkin(4) * t1014 + pkin(8) * t917 + t844;
t822 = -pkin(8) * t915 - t843;
t875 = -t1214 * t915 + t1215 * t917;
t801 = -pkin(3) * t1014 + qJ(4) * t875 + t1214 * t822 + t1215 * t817;
t803 = -qJ(4) * t873 - t1214 * t817 + t1215 * t822;
t830 = -t1217 * t873 + t1221 * t875;
t1244 = -pkin(2) * t1014 + pkin(7) * t830 + t1217 * t803 + t1221 * t801;
t1069 = -t1161 - t1308;
t1020 = t1072 * t1215 + t1074 * t1214;
t888 = -pkin(3) * t1069 + qJ(4) * t1020 + t904;
t892 = -qJ(4) * t1018 - t903;
t938 = -t1018 * t1217 + t1020 * t1221;
t1243 = -pkin(2) * t1069 + pkin(7) * t938 + t1217 * t892 + t1221 * t888;
t1070 = t1246 + t1294;
t1038 = t1106 * t1215 - t1319;
t942 = -pkin(3) * t1070 + qJ(4) * t1038 - t1287;
t966 = -t1037 * t1217 + t1038 * t1221;
t985 = -qJ(4) * t1037 + t1288;
t1242 = -pkin(2) * t1070 + pkin(7) * t966 + t1217 * t985 + t1221 * t942;
t1150 = -t1161 - t1224;
t1052 = t1150 * t1215 - t1284;
t1055 = -t1150 * t1214 - t1283;
t1002 = -t1052 * t1217 + t1055 * t1221;
t1073 = -t1155 + t1121;
t946 = -pkin(3) * t1073 + qJ(4) * t1055 + t1288;
t988 = -qJ(4) * t1052 + t1287;
t1241 = -pkin(2) * t1073 + pkin(7) * t1002 + t1217 * t988 + t1221 * t946;
t1240 = t1218 * t1197;
t1239 = t1222 * t1197;
t1177 = t1262 * t1210;
t1183 = t1203 + t1269;
t1238 = pkin(2) * t1183 + pkin(7) * t1177 + t1030;
t1237 = pkin(3) * t1052 - t1265;
t1236 = pkin(4) * t961 - t886;
t1191 = qJDD(1) * t1223 - t1219 * t1225;
t1235 = -pkin(5) * t1191 - g(3) * t1219;
t1029 = t1090 * t1221 - t1091 * t1217;
t1232 = t1198 * t1223 - t1199 * t1219;
t1230 = pkin(4) * t990 - t887;
t859 = t1221 * t904 - t1297;
t895 = -pkin(3) * t1045 + qJ(4) * t904;
t1228 = -pkin(2) * t1045 + pkin(7) * t859 - qJ(4) * t1297 + t1221 * t895;
t1227 = pkin(3) * t905 + t1236;
t1226 = pkin(3) * t922 + t1230;
t1206 = t1218 * qJDD(3);
t1195 = t1203 - t1224;
t1193 = t1224 - t1269;
t1190 = qJDD(1) * t1219 + t1223 * t1225;
t1184 = -t1203 + t1269;
t1178 = t1221 * t1188;
t1170 = -pkin(5) * t1190 + g(3) * t1223;
t1169 = t1262 * t1293;
t1149 = -t1161 + t1224;
t1148 = -t1224 + t1308;
t1146 = t1169 * t1222 + t1206;
t1145 = t1169 * t1218 - t1263;
t1144 = t1173 * t1221 - t1213 * t1293;
t1143 = -t1217 * t1229 - t1306 * t1293;
t1141 = -t1193 * t1217 + t1178;
t1139 = t1195 * t1221 - t1276;
t1138 = t1194 * t1221 - t1276;
t1137 = t1193 * t1221 + t1277;
t1136 = t1196 * t1217 + t1178;
t1135 = t1195 * t1217 + t1275;
t1132 = (t1173 + t1201) * t1217;
t1126 = t1177 * t1222 - t1183 * t1218;
t1124 = t1177 * t1218 + t1183 * t1222;
t1123 = -t1172 * t1217 + t1131;
t1122 = t1172 * t1221 + t1174 * t1217;
t1116 = t1141 * t1222 + t1218 * t1268;
t1115 = t1139 * t1222 + t1218 * t1267;
t1114 = t1141 * t1218 - t1222 * t1268;
t1113 = t1139 * t1218 - t1222 * t1267;
t1112 = t1161 - t1308;
t1105 = t1144 * t1222 - t1240;
t1104 = t1143 * t1222 + t1240;
t1103 = t1144 * t1218 + t1239;
t1102 = t1143 * t1218 - t1239;
t1095 = -pkin(1) * t1179 - t1130;
t1094 = -pkin(1) * t1182 - t1129;
t1089 = (t1279 - t1280) * qJD(3);
t1088 = (-t1278 - t1281) * qJD(3);
t1085 = t1142 * t1222 + t1172 * t1218;
t1084 = t1140 * t1222 - t1174 * t1218;
t1083 = t1142 * t1218 - t1172 * t1222;
t1082 = t1140 * t1218 + t1174 * t1222;
t1081 = -t1093 + t1208;
t1080 = t1092 - t1208;
t1076 = t1123 * t1222 + t1184 * t1218;
t1075 = t1123 * t1218 - t1184 * t1222;
t1065 = -qJD(3) * t1279 + t1121 * t1215;
t1064 = qJD(3) * t1278 + t1121 * t1214;
t1063 = qJD(3) * t1280 + t1214 * t1246;
t1062 = qJD(3) * t1281 - t1215 * t1246;
t1057 = pkin(1) * t1060;
t1056 = pkin(1) * g(3) + pkin(6) * t1247;
t1054 = -t1149 * t1214 + t1318;
t1053 = t1148 * t1215 - t1284;
t1051 = t1149 * t1215 + t1319;
t1050 = t1148 * t1214 + t1283;
t1049 = -pkin(7) * t1138 + t1100;
t1048 = -pkin(7) * t1136 + t1099;
t1047 = -pkin(2) * t1138 + t1091;
t1046 = -pkin(2) * t1136 + t1090;
t1035 = t1093 - t1092;
t1026 = -t1088 * t1217 + t1089 * t1221;
t1025 = t1088 * t1221 + t1089 * t1217;
t1024 = (-t1096 * t1220 + t1098 * t1216) * t1211;
t1023 = (-t1096 * t1216 - t1098 * t1220) * t1211;
t1022 = t1026 * t1222 + t1206;
t1021 = t1026 * t1218 - t1263;
t1019 = -t1070 * t1215 - t1073 * t1214;
t1017 = -t1070 * t1214 + t1073 * t1215;
t1015 = -qJD(5) * t1098 - t1248;
t1013 = -t1064 * t1217 + t1065 * t1221;
t1012 = -t1062 * t1217 + t1063 * t1221;
t1011 = t1064 * t1221 + t1065 * t1217;
t1010 = t1062 * t1221 + t1063 * t1217;
t1008 = pkin(1) * t1082 + t1253;
t1007 = pkin(1) * t1083 + t1254;
t1006 = -pkin(6) * t1124 + t1029 * t1222;
t1005 = pkin(6) * t1126 + t1029 * t1218;
t1004 = t1030 * t1222 + t1117 * t1218;
t1003 = t1030 * t1218 - t1117 * t1222;
t1001 = -t1051 * t1217 + t1054 * t1221;
t1000 = -t1050 * t1217 + t1053 * t1221;
t999 = t1052 * t1221 + t1055 * t1217;
t998 = t1051 * t1221 + t1054 * t1217;
t997 = t1050 * t1221 + t1053 * t1217;
t995 = t1080 * t1220 - t1290;
t994 = -t1081 * t1216 + t1316;
t993 = t1080 * t1216 + t1289;
t992 = t1081 * t1220 + t1317;
t986 = pkin(1) * t1124 + t1238;
t975 = t1013 * t1222 + t1257;
t974 = t1012 * t1222 - t1257;
t973 = t1013 * t1218 - t1256;
t972 = t1012 * t1218 + t1256;
t971 = t1016 * t1220 - t1098 * t1273;
t970 = t1016 * t1216 + t1098 * t1272;
t969 = -t1015 * t1216 + t1096 * t1272;
t968 = t1015 * t1220 + t1096 * t1273;
t965 = t1037 * t1221 + t1038 * t1217;
t956 = -pkin(6) * t1083 - t1047 * t1218 + t1049 * t1222;
t955 = -pkin(6) * t1082 - t1046 * t1218 + t1048 * t1222;
t954 = t1002 * t1222 + t1073 * t1218;
t953 = t1001 * t1222 + t1074 * t1218;
t952 = t1000 * t1222 + t1072 * t1218;
t951 = t1002 * t1218 - t1073 * t1222;
t950 = t1001 * t1218 - t1074 * t1222;
t949 = t1000 * t1218 - t1072 * t1222;
t948 = -t1023 * t1214 + t1024 * t1215;
t947 = t1023 * t1215 + t1024 * t1214;
t944 = -pkin(1) * t1138 + pkin(6) * t1085 + t1047 * t1222 + t1049 * t1218;
t943 = -pkin(1) * t1136 + pkin(6) * t1084 + t1046 * t1222 + t1048 * t1218;
t940 = t1070 * t1218 + t1222 * t966;
t939 = -t1070 * t1222 + t1218 * t966;
t937 = -t1017 * t1217 + t1019 * t1221;
t936 = t1018 * t1221 + t1020 * t1217;
t935 = t1017 * t1221 + t1019 * t1217;
t932 = pkin(1) * t1003 + t1264;
t930 = t1112 * t1218 + t1222 * t937;
t929 = -t1112 * t1222 + t1218 * t937;
t927 = -t1214 * t993 + t1215 * t995;
t926 = -t1214 * t992 + t1215 * t994;
t925 = t1214 * t995 + t1215 * t993;
t924 = t1214 * t994 + t1215 * t992;
t921 = t1069 * t1218 + t1222 * t938;
t920 = -t1069 * t1222 + t1218 * t938;
t918 = -pkin(6) * t1003 - (pkin(2) * t1218 - pkin(7) * t1222) * t1029;
t916 = -t1216 * t1310 - t1220 * t979;
t914 = -t1216 * t979 + t1220 * t1310;
t912 = -t1214 * t970 + t1215 * t971;
t911 = -t1214 * t968 + t1215 * t969;
t910 = t1214 * t971 + t1215 * t970;
t909 = t1214 * t969 + t1215 * t968;
t908 = -pkin(2) * t936 - t1304;
t902 = -pkin(2) * t999 + t1152 - t1237;
t901 = -t1217 * t947 + t1221 * t948;
t900 = t1217 * t948 + t1221 * t947;
t899 = t1209 * t1218 + t1222 * t901;
t898 = -t1209 * t1222 + t1218 * t901;
t897 = pkin(6) * t1004 - (-pkin(2) * t1222 - pkin(7) * t1218 - pkin(1)) * t1029;
t896 = -pkin(2) * t965 - t1324;
t890 = -pkin(7) * t999 - t1217 * t946 + t1221 * t988;
t883 = -pkin(7) * t965 - t1217 * t942 + t1221 * t985;
t882 = -t1217 * t925 + t1221 * t927;
t881 = -t1217 * t924 + t1221 * t926;
t880 = t1217 * t927 + t1221 * t925;
t879 = t1217 * t926 + t1221 * t924;
t877 = t1217 * t923 + t1221 * t922;
t874 = -t1214 * t914 + t1215 * t916;
t872 = t1214 * t916 + t1215 * t914;
t871 = -t1217 * t910 + t1221 * t912;
t870 = -t1217 * t909 + t1221 * t911;
t869 = t1217 * t912 + t1221 * t910;
t868 = t1217 * t911 + t1221 * t909;
t866 = t1217 * t906 + t1221 * t905;
t864 = pkin(1) * t951 + t1241;
t863 = -t1218 * t980 + t1222 * t882;
t862 = t1218 * t984 + t1222 * t881;
t861 = t1218 * t882 + t1222 * t980;
t860 = t1218 * t881 - t1222 * t984;
t858 = t1217 * t904 + t1295;
t856 = t1218 * t1310 + t1222 * t878;
t855 = t1218 * t878 - t1222 * t1310;
t854 = t1222 * t871 + t1259;
t853 = t1222 * t870 - t1259;
t852 = t1218 * t871 - t1258;
t851 = t1218 * t870 + t1258;
t850 = t1045 * t1218 + t1222 * t859;
t849 = -t1045 * t1222 + t1218 * t859;
t848 = pkin(1) * t939 + t1242;
t847 = t1218 * t979 + t1222 * t867;
t846 = t1218 * t867 - t1222 * t979;
t845 = -pkin(6) * t951 - t1218 * t902 + t1222 * t890;
t839 = -pkin(2) * t858 - t1305;
t838 = -pkin(1) * t999 + pkin(6) * t954 + t1218 * t890 + t1222 * t902;
t837 = -pkin(6) * t939 - t1218 * t896 + t1222 * t883;
t831 = -pkin(7) * t936 - t1217 * t888 + t1221 * t892;
t829 = -t1217 * t872 + t1221 * t874;
t828 = t1217 * t875 + t1221 * t873;
t827 = t1217 * t874 + t1221 * t872;
t825 = -pkin(1) * t965 + pkin(6) * t940 + t1218 * t883 + t1222 * t896;
t821 = t1035 * t1218 + t1222 * t829;
t820 = -t1035 * t1222 + t1218 * t829;
t819 = t1014 * t1218 + t1222 * t830;
t818 = -t1014 * t1222 + t1218 * t830;
t816 = -pkin(2) * t877 - t1226;
t815 = -pkin(7) * t858 - qJ(4) * t1295 - t1217 * t895;
t814 = pkin(1) * t920 + t1243;
t813 = -pkin(2) * t866 - t1227;
t812 = -pkin(6) * t920 - t1218 * t908 + t1222 * t831;
t811 = -pkin(1) * t936 + pkin(6) * t921 + t1218 * t831 + t1222 * t908;
t808 = -pkin(2) * t828 - t1260;
t807 = pkin(1) * t849 + t1228;
t806 = -pkin(7) * t877 - t1217 * t834 + t1221 * t841;
t805 = -pkin(7) * t866 - t1217 * t824 + t1221 * t836;
t804 = -pkin(6) * t849 - t1218 * t839 + t1222 * t815;
t799 = pkin(1) * t855 + t1250;
t798 = -pkin(1) * t858 + pkin(6) * t850 + t1218 * t815 + t1222 * t839;
t796 = t1217 * t810 + t1221 * t809;
t794 = pkin(1) * t846 + t1251;
t791 = t1218 * t967 + t1222 * t797;
t790 = t1218 * t797 - t1222 * t967;
t787 = -pkin(6) * t855 - t1218 * t816 + t1222 * t806;
t786 = -pkin(1) * t877 + pkin(6) * t856 + t1218 * t806 + t1222 * t816;
t785 = -pkin(6) * t846 - t1218 * t813 + t1222 * t805;
t784 = -pkin(1) * t866 + pkin(6) * t847 + t1218 * t805 + t1222 * t813;
t783 = -pkin(2) * t796 - t1261;
t782 = -pkin(7) * t828 - t1217 * t801 + t1221 * t803;
t781 = pkin(1) * t818 + t1244;
t780 = -pkin(6) * t818 - t1218 * t808 + t1222 * t782;
t779 = -pkin(7) * t796 - t1217 * t789 + t1221 * t793;
t778 = -pkin(1) * t828 + pkin(6) * t819 + t1218 * t782 + t1222 * t808;
t777 = pkin(1) * t790 + t1252;
t776 = -pkin(6) * t790 - t1218 * t783 + t1222 * t779;
t775 = -pkin(1) * t796 + pkin(6) * t791 + t1218 * t779 + t1222 * t783;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1191, 0, -t1190, 0, t1235, -t1170, -t1232, -pkin(5) * t1232, 0, 0, -t1314, 0, -t1233, 0, t1326, t1327, t1323, pkin(5) * t1323 + pkin(6) * t1285 - t1219 * t1056, -t1103 * t1219 + t1105 * t1223, -t1075 * t1219 + t1076 * t1223, -t1114 * t1219 + t1116 * t1223, -t1102 * t1219 + t1104 * t1223, -t1113 * t1219 + t1115 * t1223, -t1145 * t1219 + t1146 * t1223, t1223 * t955 - t1219 * t943 - pkin(5) * (t1082 * t1223 + t1084 * t1219), t1223 * t956 - t1219 * t944 - pkin(5) * (t1083 * t1223 + t1085 * t1219), t1223 * t1006 - t1219 * t1005 - pkin(5) * (t1124 * t1223 + t1126 * t1219), t1223 * t918 - t1219 * t897 - pkin(5) * (t1003 * t1223 + t1004 * t1219), -t1219 * t973 + t1223 * t975, -t1219 * t929 + t1223 * t930, -t1219 * t950 + t1223 * t953, -t1219 * t972 + t1223 * t974, -t1219 * t949 + t1223 * t952, -t1021 * t1219 + t1022 * t1223, t1223 * t837 - t1219 * t825 - pkin(5) * (t1219 * t940 + t1223 * t939), t1223 * t845 - t1219 * t838 - pkin(5) * (t1219 * t954 + t1223 * t951), t1223 * t812 - t1219 * t811 - pkin(5) * (t1219 * t921 + t1223 * t920), t1223 * t804 - t1219 * t798 - pkin(5) * (t1219 * t850 + t1223 * t849), -t1219 * t852 + t1223 * t854, -t1219 * t820 + t1223 * t821, -t1219 * t860 + t1223 * t862, -t1219 * t851 + t1223 * t853, -t1219 * t861 + t1223 * t863, -t1219 * t898 + t1223 * t899, t1223 * t785 - t1219 * t784 - pkin(5) * (t1219 * t847 + t1223 * t846), t1223 * t787 - t1219 * t786 - pkin(5) * (t1219 * t856 + t1223 * t855), t1223 * t780 - t1219 * t778 - pkin(5) * (t1219 * t819 + t1223 * t818), t1223 * t776 - t1219 * t775 - pkin(5) * (t1219 * t791 + t1223 * t790); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1190, 0, t1191, 0, t1170, t1235, t1245, pkin(5) * t1245, 0, 0, t1233, 0, -t1314, 0, -t1327, t1326, t1322, pkin(5) * t1322 + pkin(6) * t1286 + t1223 * t1056, t1103 * t1223 + t1105 * t1219, t1075 * t1223 + t1076 * t1219, t1114 * t1223 + t1116 * t1219, t1102 * t1223 + t1104 * t1219, t1113 * t1223 + t1115 * t1219, t1145 * t1223 + t1146 * t1219, t1219 * t955 + t1223 * t943 + pkin(5) * (-t1082 * t1219 + t1084 * t1223), t1219 * t956 + t1223 * t944 + pkin(5) * (-t1083 * t1219 + t1085 * t1223), t1219 * t1006 + t1223 * t1005 + pkin(5) * (-t1124 * t1219 + t1126 * t1223), t1219 * t918 + t1223 * t897 + pkin(5) * (-t1003 * t1219 + t1004 * t1223), t1219 * t975 + t1223 * t973, t1219 * t930 + t1223 * t929, t1219 * t953 + t1223 * t950, t1219 * t974 + t1223 * t972, t1219 * t952 + t1223 * t949, t1021 * t1223 + t1022 * t1219, t1219 * t837 + t1223 * t825 + pkin(5) * (-t1219 * t939 + t1223 * t940), t1219 * t845 + t1223 * t838 + pkin(5) * (-t1219 * t951 + t1223 * t954), t1219 * t812 + t1223 * t811 + pkin(5) * (-t1219 * t920 + t1223 * t921), t1219 * t804 + t1223 * t798 + pkin(5) * (-t1219 * t849 + t1223 * t850), t1219 * t854 + t1223 * t852, t1219 * t821 + t1223 * t820, t1219 * t862 + t1223 * t860, t1219 * t853 + t1223 * t851, t1219 * t863 + t1223 * t861, t1219 * t899 + t1223 * t898, t1219 * t785 + t1223 * t784 + pkin(5) * (-t1219 * t846 + t1223 * t847), t1219 * t787 + t1223 * t786 + pkin(5) * (-t1219 * t855 + t1223 * t856), t1219 * t780 + t1223 * t778 + pkin(5) * (-t1219 * t818 + t1223 * t819), t1219 * t776 + t1223 * t775 + pkin(5) * (-t1219 * t790 + t1223 * t791); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1198, t1199, 0, 0, 0, 0, 0, 0, 0, t1210, t1094, t1095, 0, -t1057, t1132, t1122, t1137, t1131, t1135, 0, t1008, t1007, t986, t932, t1011, t935, t998, t1010, t997, t1025, t848, t864, t814, t807, t869, t827, t879, t868, t880, t900, t794, t799, t781, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1225, 0, 0, -g(3), -t1198, 0, 0, 0, -t1182, 0, -t1179, 0, t1315, t1160, t1060, pkin(6) * t1060, t1105, t1076, t1116, t1104, t1115, t1146, t955, t956, t1006, t918, t975, t930, t953, t974, t952, t1022, t837, t845, t812, t804, t854, t821, t862, t853, t863, t899, t785, t787, t780, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1225, 0, qJDD(1), 0, g(3), 0, -t1199, 0, 0, 0, t1179, 0, -t1182, 0, -t1160, t1315, t1247, t1056, t1103, t1075, t1114, t1102, t1113, t1145, t943, t944, t1005, t897, t973, t929, t950, t972, t949, t1021, t825, t838, t811, t798, t852, t820, t860, t851, t861, t898, t784, t786, t778, t775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1198, t1199, 0, 0, 0, 0, 0, 0, 0, t1210, t1094, t1095, 0, -t1057, t1132, t1122, t1137, t1131, t1135, 0, t1008, t1007, t986, t932, t1011, t935, t998, t1010, t997, t1025, t848, t864, t814, t807, t869, t827, t879, t868, t880, t900, t794, t799, t781, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, 0, -t1307, 0, 0, -g(3), t1129, 0, t1144, t1123, t1141, t1143, t1139, t1169, t1048, t1049, t1029, pkin(7) * t1029, t1013, t937, t1001, t1012, t1000, t1026, t883, t890, t831, t815, t871, t829, t881, t870, t882, t901, t805, t806, t782, t779; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1307, 0, t1210, 0, g(3), 0, t1130, 0, t1197, -t1184, -t1268, -t1197, -t1267, -qJDD(3), t1046, t1047, 0, pkin(2) * t1029, -t1120, -t1112, -t1074, t1120, -t1072, -qJDD(3), t896, t902, t908, t839, -t1036, -t1035, -t984, t1036, t980, -t1209, t813, t816, t808, t783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, -t1129, -t1130, 0, 0, t1132, t1122, t1137, t1131, t1135, 0, t1253, t1254, t1238, t1264, t1011, t935, t998, t1010, t997, t1025, t1242, t1241, t1243, t1228, t869, t827, t879, t868, t880, t900, t1251, t1250, t1244, t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1173, t1174, t1188, -t1201, t1195, t1201, 0, t1117, t1090, 0, t1065, t1019, t1054, t1063, t1053, t1089, t985, t988, t892, -qJ(4) * t903, t912, t874, t926, t911, t927, t948, t836, t841, t803, t793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, t1172, t1193, t1229, t1189, -t1255, -t1117, 0, t1091, 0, t1064, t1017, t1051, t1062, t1050, t1088, t942, t946, t888, t895, t910, t872, t924, t909, t925, t947, t824, t834, t801, t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1197, t1184, t1268, t1197, t1267, qJDD(3), -t1090, -t1091, 0, 0, t1120, t1112, t1074, -t1120, t1072, qJDD(3), t1324, t1237 + 0.2e1 * t1292, t1304, t1305, t1036, t1035, t984, -t1036, -t980, t1209, t1227, t1226, t1260, t1261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1121, -t1070, t1309, t1155, t1148, -t1155, 0, t1045, -t1234, 0, t971, t916, t994, t969, t995, t1024, t907, t919, t822, -pkin(8) * t843; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1294, t1073, t1149, -t1246, t1109, -t1294, -t1045, 0, t959, 0, t970, t914, t992, t968, t993, t1023, t889, t893, t817, t832; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1112, t1074, -t1120, t1072, qJDD(3), t1234, -t959, 0, 0, t1036, t1035, t984, -t1036, -t980, t1209, t1236, t1230, t913, t842; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1016, -t979, t1311, t1087, t1080, -t1087, 0, t967, t886, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1274, t1310, t1081, t1015, t1033, -t1274, -t967, 0, t887, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1036, t1035, t984, -t1036, -t980, t1209, -t886, -t887, 0, 0;];
m_new_reg = t1;
