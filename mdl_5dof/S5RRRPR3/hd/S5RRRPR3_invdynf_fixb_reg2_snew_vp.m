% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:44
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:43:57
% EndTime: 2022-01-20 11:44:00
% DurationCPUTime: 3.12s
% Computational Cost: add. (23366->217), mult. (31717->314), div. (0->0), fcn. (21339->10), ass. (0->179)
t1486 = qJD(1) + qJD(2);
t1483 = t1486 ^ 2;
t1484 = qJDD(1) + qJDD(2);
t1492 = sin(qJ(2));
t1496 = cos(qJ(2));
t1464 = t1492 * t1483 - t1496 * t1484;
t1493 = sin(qJ(1));
t1497 = cos(qJ(1));
t1503 = -t1496 * t1483 - t1492 * t1484;
t1533 = t1493 * t1464 + t1497 * t1503;
t1532 = t1497 * t1464 - t1493 * t1503;
t1485 = qJD(3) + qJD(5);
t1529 = qJD(5) + t1485;
t1488 = sin(pkin(9));
t1489 = cos(pkin(9));
t1495 = cos(qJ(3));
t1515 = t1486 * t1495;
t1491 = sin(qJ(3));
t1516 = t1486 * t1491;
t1450 = t1488 * t1516 - t1489 * t1515;
t1452 = (t1488 * t1495 + t1489 * t1491) * t1486;
t1490 = sin(qJ(5));
t1494 = cos(qJ(5));
t1424 = t1494 * t1450 + t1490 * t1452;
t1528 = t1424 ^ 2;
t1426 = -t1490 * t1450 + t1494 * t1452;
t1527 = t1426 ^ 2;
t1526 = t1450 ^ 2;
t1525 = t1452 ^ 2;
t1524 = t1485 ^ 2;
t1523 = t1495 ^ 2;
t1522 = -2 * qJD(4);
t1521 = qJD(3) * t1450;
t1520 = qJD(3) * t1452;
t1519 = t1426 * t1424;
t1518 = t1452 * t1450;
t1517 = t1483 * t1491;
t1478 = -t1497 * g(1) - t1493 * g(2);
t1499 = qJD(1) ^ 2;
t1467 = -t1499 * pkin(1) + t1478;
t1477 = t1493 * g(1) - t1497 * g(2);
t1501 = qJDD(1) * pkin(1) + t1477;
t1439 = t1496 * t1467 + t1492 * t1501;
t1433 = -t1483 * pkin(2) + t1484 * pkin(7) + t1439;
t1514 = t1491 * t1433;
t1513 = t1491 * t1484;
t1512 = t1495 * t1484;
t1511 = t1523 * t1483;
t1510 = qJD(5) - t1485;
t1509 = -qJDD(3) - qJDD(5);
t1487 = t1491 ^ 2;
t1508 = t1487 + t1523;
t1507 = qJD(3) * t1516;
t1506 = qJD(3) * t1515;
t1456 = t1506 + t1513;
t1404 = qJDD(3) * pkin(3) - t1456 * qJ(4) - t1514 + (qJD(3) * t1486 * qJ(4) + pkin(3) * t1517 - g(3)) * t1495;
t1423 = -t1491 * g(3) + t1495 * t1433;
t1468 = qJD(3) * pkin(3) - qJ(4) * t1516;
t1502 = -t1507 + t1512;
t1405 = -pkin(3) * t1511 + t1502 * qJ(4) - qJD(3) * t1468 + t1423;
t1375 = t1488 * t1404 + t1489 * t1405 + t1450 * t1522;
t1435 = t1489 * t1456 + t1488 * t1502;
t1415 = -t1435 - t1521;
t1504 = t1488 * t1456 - t1489 * t1502;
t1505 = -t1490 * t1435 - t1494 * t1504;
t1438 = -t1492 * t1467 + t1496 * t1501;
t1429 = qJDD(3) - t1518;
t1374 = t1489 * t1404 - t1488 * t1405 + t1452 * t1522;
t1432 = -t1484 * pkin(2) - t1483 * pkin(7) - t1438;
t1500 = -t1494 * t1435 + t1490 * t1504;
t1406 = -t1502 * pkin(3) - qJ(4) * t1511 + t1468 * t1516 + qJDD(4) + t1432;
t1498 = qJD(3) ^ 2;
t1476 = t1495 * t1517;
t1475 = -t1498 - t1511;
t1474 = -t1487 * t1483 - t1498;
t1472 = -t1493 * qJDD(1) - t1497 * t1499;
t1471 = t1497 * qJDD(1) - t1493 * t1499;
t1470 = -qJDD(3) + t1476;
t1469 = qJDD(3) + t1476;
t1466 = t1508 * t1483;
t1461 = t1508 * t1484;
t1457 = -0.2e1 * t1507 + t1512;
t1455 = 0.2e1 * t1506 + t1513;
t1445 = -t1498 - t1525;
t1444 = qJD(3) * pkin(4) - t1452 * pkin(8);
t1443 = t1495 * t1470 - t1491 * t1474;
t1442 = -t1491 * t1469 + t1495 * t1475;
t1441 = t1491 * t1470 + t1495 * t1474;
t1440 = t1495 * t1469 + t1491 * t1475;
t1437 = t1496 * t1461 - t1492 * t1466;
t1436 = t1492 * t1461 + t1496 * t1466;
t1430 = -qJDD(3) - t1518;
t1428 = -t1498 - t1526;
t1422 = -t1495 * g(3) - t1514;
t1420 = t1496 * t1443 + t1492 * t1455;
t1419 = t1496 * t1442 - t1492 * t1457;
t1418 = t1492 * t1443 - t1496 * t1455;
t1417 = t1492 * t1442 + t1496 * t1457;
t1416 = -t1524 - t1527;
t1414 = t1435 - t1521;
t1413 = -t1504 + t1520;
t1412 = t1504 + t1520;
t1411 = -t1525 - t1526;
t1410 = -t1492 * t1438 + t1496 * t1439;
t1409 = t1496 * t1438 + t1492 * t1439;
t1408 = t1489 * t1430 - t1488 * t1445;
t1407 = t1488 * t1430 + t1489 * t1445;
t1400 = t1489 * t1428 - t1488 * t1429;
t1399 = t1488 * t1428 + t1489 * t1429;
t1398 = t1509 - t1519;
t1397 = -t1509 - t1519;
t1396 = -t1524 - t1528;
t1395 = -t1491 * t1422 + t1495 * t1423;
t1394 = t1495 * t1422 + t1491 * t1423;
t1393 = t1489 * t1413 - t1488 * t1415;
t1392 = t1488 * t1413 + t1489 * t1415;
t1391 = -t1527 - t1528;
t1390 = t1496 * t1395 + t1492 * t1432;
t1389 = t1492 * t1395 - t1496 * t1432;
t1388 = -t1491 * t1407 + t1495 * t1408;
t1387 = t1495 * t1407 + t1491 * t1408;
t1386 = t1494 * t1398 - t1490 * t1416;
t1385 = t1490 * t1398 + t1494 * t1416;
t1384 = t1510 * t1424 + t1500;
t1383 = -t1529 * t1424 - t1500;
t1382 = -t1510 * t1426 + t1505;
t1381 = t1529 * t1426 - t1505;
t1380 = t1504 * pkin(4) - t1526 * pkin(8) + t1452 * t1444 + t1406;
t1379 = -t1491 * t1399 + t1495 * t1400;
t1378 = t1495 * t1399 + t1491 * t1400;
t1377 = t1494 * t1396 - t1490 * t1397;
t1376 = t1490 * t1396 + t1494 * t1397;
t1373 = t1496 * t1388 + t1492 * t1414;
t1372 = t1492 * t1388 - t1496 * t1414;
t1371 = t1496 * t1379 + t1492 * t1412;
t1370 = t1492 * t1379 - t1496 * t1412;
t1369 = -t1491 * t1392 + t1495 * t1393;
t1368 = t1495 * t1392 + t1491 * t1393;
t1367 = -t1526 * pkin(4) - t1504 * pkin(8) - qJD(3) * t1444 + t1375;
t1366 = t1429 * pkin(4) + t1415 * pkin(8) + t1374;
t1365 = -t1488 * t1385 + t1489 * t1386;
t1364 = t1489 * t1385 + t1488 * t1386;
t1363 = t1496 * t1369 + t1492 * t1411;
t1362 = t1492 * t1369 - t1496 * t1411;
t1361 = t1494 * t1382 - t1490 * t1384;
t1360 = t1490 * t1382 + t1494 * t1384;
t1359 = -t1488 * t1376 + t1489 * t1377;
t1358 = t1489 * t1376 + t1488 * t1377;
t1357 = -t1488 * t1374 + t1489 * t1375;
t1356 = t1489 * t1374 + t1488 * t1375;
t1355 = t1490 * t1366 + t1494 * t1367;
t1354 = t1494 * t1366 - t1490 * t1367;
t1353 = -t1491 * t1364 + t1495 * t1365;
t1352 = t1495 * t1364 + t1491 * t1365;
t1351 = -t1488 * t1360 + t1489 * t1361;
t1350 = t1489 * t1360 + t1488 * t1361;
t1349 = -t1491 * t1358 + t1495 * t1359;
t1348 = t1495 * t1358 + t1491 * t1359;
t1347 = -t1491 * t1356 + t1495 * t1357;
t1346 = t1495 * t1356 + t1491 * t1357;
t1345 = t1496 * t1353 + t1492 * t1383;
t1344 = t1492 * t1353 - t1496 * t1383;
t1343 = t1496 * t1347 + t1492 * t1406;
t1342 = t1492 * t1347 - t1496 * t1406;
t1341 = t1496 * t1349 + t1492 * t1381;
t1340 = t1492 * t1349 - t1496 * t1381;
t1339 = -t1490 * t1354 + t1494 * t1355;
t1338 = t1494 * t1354 + t1490 * t1355;
t1337 = -t1491 * t1350 + t1495 * t1351;
t1336 = t1495 * t1350 + t1491 * t1351;
t1335 = t1496 * t1337 + t1492 * t1391;
t1334 = t1492 * t1337 - t1496 * t1391;
t1333 = -t1488 * t1338 + t1489 * t1339;
t1332 = t1489 * t1338 + t1488 * t1339;
t1331 = -t1491 * t1332 + t1495 * t1333;
t1330 = t1495 * t1332 + t1491 * t1333;
t1329 = t1496 * t1331 + t1492 * t1380;
t1328 = t1492 * t1331 - t1496 * t1380;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1472, -t1471, 0, -t1493 * t1477 + t1497 * t1478, 0, 0, 0, 0, 0, 0, t1533, t1532, 0, -t1493 * t1409 + t1497 * t1410, 0, 0, 0, 0, 0, 0, -t1493 * t1417 + t1497 * t1419, -t1493 * t1418 + t1497 * t1420, -t1493 * t1436 + t1497 * t1437, -t1493 * t1389 + t1497 * t1390, 0, 0, 0, 0, 0, 0, -t1493 * t1370 + t1497 * t1371, -t1493 * t1372 + t1497 * t1373, -t1493 * t1362 + t1497 * t1363, -t1493 * t1342 + t1497 * t1343, 0, 0, 0, 0, 0, 0, -t1493 * t1340 + t1497 * t1341, -t1493 * t1344 + t1497 * t1345, -t1493 * t1334 + t1497 * t1335, -t1493 * t1328 + t1497 * t1329; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1471, t1472, 0, t1497 * t1477 + t1493 * t1478, 0, 0, 0, 0, 0, 0, -t1532, t1533, 0, t1497 * t1409 + t1493 * t1410, 0, 0, 0, 0, 0, 0, t1497 * t1417 + t1493 * t1419, t1497 * t1418 + t1493 * t1420, t1497 * t1436 + t1493 * t1437, t1497 * t1389 + t1493 * t1390, 0, 0, 0, 0, 0, 0, t1497 * t1370 + t1493 * t1371, t1497 * t1372 + t1493 * t1373, t1497 * t1362 + t1493 * t1363, t1497 * t1342 + t1493 * t1343, 0, 0, 0, 0, 0, 0, t1497 * t1340 + t1493 * t1341, t1497 * t1344 + t1493 * t1345, t1497 * t1334 + t1493 * t1335, t1497 * t1328 + t1493 * t1329; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1440, t1441, 0, t1394, 0, 0, 0, 0, 0, 0, t1378, t1387, t1368, t1346, 0, 0, 0, 0, 0, 0, t1348, t1352, t1336, t1330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1499, -qJDD(1), 0, t1478, 0, 0, 0, 0, 0, 0, t1503, t1464, 0, t1410, 0, 0, 0, 0, 0, 0, t1419, t1420, t1437, t1390, 0, 0, 0, 0, 0, 0, t1371, t1373, t1363, t1343, 0, 0, 0, 0, 0, 0, t1341, t1345, t1335, t1329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1499, 0, t1477, 0, 0, 0, 0, 0, 0, -t1464, t1503, 0, t1409, 0, 0, 0, 0, 0, 0, t1417, t1418, t1436, t1389, 0, 0, 0, 0, 0, 0, t1370, t1372, t1362, t1342, 0, 0, 0, 0, 0, 0, t1340, t1344, t1334, t1328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1440, t1441, 0, t1394, 0, 0, 0, 0, 0, 0, t1378, t1387, t1368, t1346, 0, 0, 0, 0, 0, 0, t1348, t1352, t1336, t1330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1483, -t1484, 0, t1439, 0, 0, 0, 0, 0, 0, t1442, t1443, t1461, t1395, 0, 0, 0, 0, 0, 0, t1379, t1388, t1369, t1347, 0, 0, 0, 0, 0, 0, t1349, t1353, t1337, t1331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1484, -t1483, 0, t1438, 0, 0, 0, 0, 0, 0, t1457, -t1455, t1466, -t1432, 0, 0, 0, 0, 0, 0, -t1412, -t1414, -t1411, -t1406, 0, 0, 0, 0, 0, 0, -t1381, -t1383, -t1391, -t1380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1440, t1441, 0, t1394, 0, 0, 0, 0, 0, 0, t1378, t1387, t1368, t1346, 0, 0, 0, 0, 0, 0, t1348, t1352, t1336, t1330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1475, t1470, t1512, t1423, 0, 0, 0, 0, 0, 0, t1400, t1408, t1393, t1357, 0, 0, 0, 0, 0, 0, t1359, t1365, t1351, t1333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1469, t1474, -t1513, t1422, 0, 0, 0, 0, 0, 0, t1399, t1407, t1392, t1356, 0, 0, 0, 0, 0, 0, t1358, t1364, t1350, t1332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1457, t1455, -t1466, t1432, 0, 0, 0, 0, 0, 0, t1412, t1414, t1411, t1406, 0, 0, 0, 0, 0, 0, t1381, t1383, t1391, t1380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1428, t1430, t1413, t1375, 0, 0, 0, 0, 0, 0, t1377, t1386, t1361, t1339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1429, t1445, t1415, t1374, 0, 0, 0, 0, 0, 0, t1376, t1385, t1360, t1338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1412, t1414, t1411, t1406, 0, 0, 0, 0, 0, 0, t1381, t1383, t1391, t1380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1396, t1398, t1382, t1355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1397, t1416, t1384, t1354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1381, t1383, t1391, t1380;];
f_new_reg = t1;
