% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 11:44
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 11:43:24
% EndTime: 2022-01-20 11:43:40
% DurationCPUTime: 15.79s
% Computational Cost: add. (88153->604), mult. (119643->922), div. (0->0), fcn. (80292->10), ass. (0->417)
t694 = cos(qJ(2));
t690 = sin(qJ(2));
t719 = qJDD(1) + qJDD(2);
t705 = t690 * t719;
t684 = qJD(1) + qJD(2);
t757 = t684 ^ 2;
t652 = t694 * t757 + t705;
t703 = t694 * t719;
t654 = -t690 * t757 + t703;
t691 = sin(qJ(1));
t695 = cos(qJ(1));
t606 = t691 * t652 - t695 * t654;
t634 = pkin(6) * t652 - t694 * g(3);
t770 = -pkin(6) * t654 - t690 * g(3);
t774 = pkin(5) * t606 + t691 * t634 + t695 * t770;
t701 = t695 * t652 + t691 * t654;
t773 = pkin(5) * t701 + t695 * t634 - t691 * t770;
t672 = t695 * g(1) + t691 * g(2);
t697 = qJD(1) ^ 2;
t659 = -t697 * pkin(1) - t672;
t671 = t691 * g(1) - t695 * g(2);
t700 = qJDD(1) * pkin(1) + t671;
t609 = t690 * t659 - t694 * t700;
t610 = t694 * t659 + t690 * t700;
t710 = t690 * t609 + t694 * t610;
t547 = t694 * t609 - t690 * t610;
t727 = t695 * t547;
t769 = -t691 * t710 + t727;
t735 = t691 * t547;
t496 = t695 * t710 + t735;
t686 = sin(pkin(9));
t687 = cos(pkin(9));
t693 = cos(qJ(3));
t689 = sin(qJ(3));
t737 = t689 * t684;
t636 = -t687 * t693 * t684 + t686 * t737;
t638 = (t686 * t693 + t687 * t689) * t684;
t598 = t638 * t636;
t759 = qJDD(3) - t598;
t768 = t686 * t759;
t767 = t687 * t759;
t688 = sin(qJ(5));
t692 = cos(qJ(5));
t577 = t692 * t636 + t688 * t638;
t579 = -t688 * t636 + t692 * t638;
t523 = t579 * t577;
t718 = qJDD(3) + qJDD(5);
t762 = -t523 + t718;
t766 = t688 * t762;
t765 = t692 * t762;
t683 = qJD(3) + qJD(5);
t570 = t683 * t577;
t706 = t689 * t719;
t724 = qJD(3) * t684;
t712 = t693 * t724;
t645 = t706 + t712;
t704 = t693 * t719;
t713 = t689 * t724;
t698 = t704 - t713;
t600 = t687 * t645 + t686 * t698;
t709 = t686 * t645 - t687 * t698;
t699 = t577 * qJD(5) - t692 * t600 + t688 * t709;
t761 = -t570 - t699;
t685 = t689 ^ 2;
t756 = t693 ^ 2;
t760 = t685 + t756;
t711 = t688 * t600 + t692 * t709;
t474 = (qJD(5) - t683) * t579 + t711;
t575 = t577 ^ 2;
t576 = t579 ^ 2;
t758 = t636 ^ 2;
t635 = t638 ^ 2;
t681 = t683 ^ 2;
t753 = t683 * t688;
t752 = t683 * t692;
t751 = t685 * t757;
t596 = -t757 * pkin(2) + t719 * pkin(7) + t610;
t740 = t689 * t596;
t529 = qJDD(3) * pkin(3) - t645 * qJ(4) - t740 + (-g(3) + (pkin(3) * t737 + qJ(4) * qJD(3)) * t684) * t693;
t574 = -t689 * g(3) + t693 * t596;
t660 = qJD(3) * pkin(3) - qJ(4) * t737;
t675 = t756 * t757;
t530 = -pkin(3) * t675 + qJ(4) * t698 - qJD(3) * t660 + t574;
t458 = 0.2e1 * qJD(4) * t638 - t687 * t529 + t686 * t530;
t726 = qJD(3) * t636;
t558 = -t600 - t726;
t435 = pkin(4) * t759 + pkin(8) * t558 - t458;
t459 = -0.2e1 * qJD(4) * t636 + t686 * t529 + t687 * t530;
t623 = qJD(3) * pkin(4) - pkin(8) * t638;
t437 = -pkin(4) * t758 - pkin(8) * t709 - qJD(3) * t623 + t459;
t387 = -t692 * t435 + t688 * t437;
t388 = t688 * t435 + t692 * t437;
t352 = -t692 * t387 + t688 * t388;
t750 = t686 * t352;
t595 = -t719 * pkin(2) - t757 * pkin(7) + t609;
t531 = -t698 * pkin(3) - qJ(4) * t675 + t660 * t737 + qJDD(4) + t595;
t749 = t686 * t531;
t587 = qJDD(3) + t598;
t748 = t686 * t587;
t747 = t687 * t352;
t746 = t687 * t531;
t745 = t687 * t587;
t464 = pkin(4) * t709 - t758 * pkin(8) + t638 * t623 + t531;
t744 = t688 * t464;
t520 = t523 + t718;
t743 = t688 * t520;
t405 = -t687 * t458 + t686 * t459;
t742 = t689 * t405;
t741 = t689 * t595;
t670 = t693 * t757 * t689;
t661 = qJDD(3) + t670;
t739 = t689 * t661;
t662 = qJDD(3) - t670;
t738 = t689 * t662;
t734 = t692 * t464;
t733 = t692 * t520;
t732 = t693 * t405;
t731 = t693 * t595;
t646 = t704 - 0.2e1 * t713;
t730 = t693 * t646;
t729 = t693 * t662;
t725 = qJD(3) * t638;
t723 = qJD(3) * t686;
t722 = qJD(3) * t687;
t720 = t694 * qJDD(3);
t717 = t690 * t523;
t716 = t690 * t598;
t715 = t694 * t523;
t714 = t694 * t598;
t353 = t688 * t387 + t692 * t388;
t406 = t686 * t458 + t687 * t459;
t573 = t693 * g(3) + t740;
t517 = t689 * t573 + t693 * t574;
t622 = -t691 * t671 - t695 * t672;
t708 = t690 * t670;
t707 = t694 * t670;
t664 = t695 * qJDD(1) - t691 * t697;
t702 = -pkin(5) * t664 - t691 * g(3);
t516 = t693 * t573 - t689 * t574;
t621 = t695 * t671 - t691 * t672;
t556 = -t709 + t725;
t696 = qJD(3) ^ 2;
t678 = t690 * qJDD(3);
t669 = -t675 - t696;
t668 = t675 - t696;
t667 = -t696 - t751;
t666 = t696 - t751;
t663 = t691 * qJDD(1) + t695 * t697;
t657 = t675 - t751;
t656 = t675 + t751;
t651 = t693 * t661;
t650 = t760 * t719;
t644 = t706 + 0.2e1 * t712;
t643 = -pkin(5) * t663 + t695 * g(3);
t642 = t760 * t724;
t626 = -t635 - t696;
t625 = -t635 + t696;
t624 = -t696 + t758;
t620 = t694 * t642 + t678;
t619 = t690 * t642 - t720;
t618 = t693 * t645 - t685 * t724;
t617 = -t689 * t698 - t756 * t724;
t616 = -t689 * t667 - t729;
t615 = -t689 * t666 + t651;
t614 = t693 * t669 - t739;
t613 = t693 * t668 - t738;
t612 = t693 * t667 - t738;
t611 = t689 * t669 + t651;
t605 = t694 * t650 - t690 * t656;
t602 = t690 * t650 + t694 * t656;
t601 = -t689 * t644 + t730;
t594 = t694 * t615 + t689 * t705;
t593 = t694 * t613 + t690 * t704;
t592 = t690 * t615 - t689 * t703;
t591 = t690 * t613 - t693 * t703;
t590 = -t635 + t758;
t585 = -t696 - t758;
t584 = t694 * t618 - t708;
t583 = t694 * t617 + t708;
t582 = t690 * t618 + t707;
t581 = t690 * t617 - t707;
t572 = (-t636 * t687 + t638 * t686) * qJD(3);
t571 = (-t636 * t686 - t638 * t687) * qJD(3);
t568 = t694 * t616 + t690 * t644;
t567 = t694 * t614 - t690 * t646;
t566 = t690 * t616 - t694 * t644;
t565 = t690 * t614 + t694 * t646;
t564 = -t576 + t681;
t563 = t575 - t681;
t561 = -t576 - t681;
t560 = t694 * t601 - t690 * t657;
t559 = t690 * t601 + t694 * t657;
t557 = t600 - t726;
t554 = t709 + t725;
t553 = -t635 - t758;
t552 = t687 * t600 - t638 * t723;
t551 = t686 * t600 + t638 * t722;
t550 = t636 * t722 + t686 * t709;
t549 = t636 * t723 - t687 * t709;
t544 = pkin(1) * g(3) + pkin(6) * t710;
t543 = -t686 * t626 - t745;
t542 = -t686 * t625 + t767;
t541 = t687 * t624 - t748;
t540 = t687 * t626 - t748;
t539 = t687 * t625 + t768;
t538 = t686 * t624 + t745;
t537 = -pkin(7) * t612 + t731;
t536 = -pkin(7) * t611 + t741;
t535 = -pkin(2) * t612 + t574;
t534 = -pkin(2) * t611 + t573;
t533 = -t691 * t602 + t695 * t605;
t532 = t695 * t602 + t691 * t605;
t525 = t687 * t585 - t768;
t524 = t686 * t585 + t767;
t522 = -t576 + t575;
t518 = -t681 - t575;
t514 = -t689 * t571 + t693 * t572;
t513 = (-t577 * t692 + t579 * t688) * t683;
t512 = (-t577 * t688 - t579 * t692) * t683;
t511 = -t691 * t566 + t695 * t568;
t510 = -t691 * t565 + t695 * t567;
t509 = t695 * t566 + t691 * t568;
t508 = t695 * t565 + t691 * t567;
t507 = t694 * t514 + t678;
t506 = t690 * t514 - t720;
t505 = t687 * t556 - t686 * t558;
t504 = -t687 * t554 - t686 * t557;
t503 = t686 * t556 + t687 * t558;
t502 = -t686 * t554 + t687 * t557;
t500 = -t579 * qJD(5) - t711;
t499 = -t575 - t576;
t498 = -t689 * t551 + t693 * t552;
t497 = -t689 * t549 + t693 * t550;
t494 = -pkin(6) * t602 + t694 * t516;
t493 = pkin(6) * t605 + t690 * t516;
t492 = t694 * t517 + t690 * t595;
t491 = t690 * t517 - t694 * t595;
t490 = -t689 * t540 + t693 * t543;
t489 = -t689 * t539 + t693 * t542;
t488 = -t689 * t538 + t693 * t541;
t487 = t693 * t540 + t689 * t543;
t486 = t692 * t563 - t743;
t485 = -t688 * t564 + t765;
t484 = t688 * t563 + t733;
t483 = t692 * t564 + t766;
t482 = -t688 * t561 - t733;
t481 = t692 * t561 - t743;
t480 = -qJ(4) * t540 + t746;
t479 = -qJ(4) * t524 + t749;
t478 = -t570 + t699;
t473 = (qJD(5) + t683) * t579 + t711;
t472 = t694 * t498 + t716;
t471 = t694 * t497 - t716;
t470 = t690 * t498 - t714;
t469 = t690 * t497 + t714;
t468 = -t579 * t753 - t692 * t699;
t467 = t579 * t752 - t688 * t699;
t466 = -t688 * t500 + t577 * t752;
t465 = t692 * t500 + t577 * t753;
t463 = -t689 * t524 + t693 * t525;
t462 = t693 * t524 + t689 * t525;
t461 = t692 * t518 - t766;
t460 = t688 * t518 + t765;
t456 = -pkin(6) * t566 - t690 * t535 + t694 * t537;
t455 = -pkin(6) * t565 - t690 * t534 + t694 * t536;
t454 = t694 * t490 + t690 * t557;
t453 = t694 * t489 - t690 * t558;
t452 = t694 * t488 + t556 * t690;
t451 = t690 * t490 - t694 * t557;
t450 = t690 * t489 + t694 * t558;
t449 = t690 * t488 - t556 * t694;
t448 = -t686 * t512 + t687 * t513;
t447 = t687 * t512 + t686 * t513;
t446 = -pkin(3) * t557 + qJ(4) * t543 + t749;
t445 = -pkin(1) * t612 + pkin(6) * t568 + t694 * t535 + t690 * t537;
t444 = -pkin(1) * t611 + pkin(6) * t567 + t694 * t534 + t690 * t536;
t443 = -pkin(3) * t554 + qJ(4) * t525 - t746;
t442 = t694 * t463 + t690 * t554;
t441 = t690 * t463 - t694 * t554;
t440 = -t689 * t503 + t693 * t505;
t439 = -t689 * t502 + t693 * t504;
t438 = t693 * t503 + t689 * t505;
t434 = -t691 * t491 + t695 * t492;
t433 = t695 * t491 + t691 * t492;
t432 = t694 * t439 - t690 * t590;
t431 = t690 * t439 + t694 * t590;
t428 = -t686 * t484 + t687 * t486;
t427 = -t686 * t483 + t687 * t485;
t426 = t687 * t484 + t686 * t486;
t425 = t687 * t483 + t686 * t485;
t424 = -t686 * t481 + t687 * t482;
t423 = t687 * t481 + t686 * t482;
t422 = t694 * t440 + t690 * t553;
t421 = t690 * t440 - t694 * t553;
t420 = -pkin(8) * t481 + t734;
t419 = -pkin(6) * t491 - (pkin(2) * t690 - pkin(7) * t694) * t516;
t418 = -t474 * t692 - t688 * t478;
t417 = -t692 * t473 - t688 * t761;
t416 = -t474 * t688 + t692 * t478;
t415 = -t688 * t473 + t692 * t761;
t414 = -t686 * t467 + t687 * t468;
t413 = -t686 * t465 + t687 * t466;
t412 = t687 * t467 + t686 * t468;
t411 = t687 * t465 + t686 * t466;
t410 = -pkin(2) * t438 - pkin(3) * t503;
t409 = -pkin(8) * t460 + t744;
t408 = -t686 * t460 + t687 * t461;
t407 = t687 * t460 + t686 * t461;
t404 = -pkin(2) * t487 - pkin(3) * t540 + t459;
t403 = -t691 * t451 + t695 * t454;
t402 = t695 * t451 + t691 * t454;
t401 = -t689 * t447 + t693 * t448;
t400 = t694 * t401 + t690 * t718;
t399 = t690 * t401 - t694 * t718;
t398 = pkin(6) * t492 - (-pkin(2) * t694 - pkin(7) * t690 - pkin(1)) * t516;
t397 = -pkin(2) * t462 - pkin(3) * t524 + t458;
t396 = -pkin(3) * t531 + qJ(4) * t406;
t395 = -t691 * t441 + t695 * t442;
t394 = t695 * t441 + t691 * t442;
t393 = -pkin(4) * t761 + pkin(8) * t482 + t744;
t392 = -qJ(4) * t503 - t405;
t391 = -pkin(7) * t487 - t689 * t446 + t693 * t480;
t390 = -pkin(4) * t473 + pkin(8) * t461 - t734;
t389 = -pkin(3) * t553 + qJ(4) * t505 + t406;
t385 = -pkin(7) * t462 - t689 * t443 + t693 * t479;
t384 = -t689 * t426 + t693 * t428;
t383 = -t689 * t425 + t693 * t427;
t382 = -t689 * t423 + t693 * t424;
t381 = t693 * t423 + t689 * t424;
t380 = -t691 * t421 + t695 * t422;
t379 = t695 * t421 + t691 * t422;
t378 = -t686 * t416 + t687 * t418;
t377 = -t686 * t415 + t687 * t417;
t376 = t687 * t416 + t686 * t418;
t375 = t687 * t415 + t686 * t417;
t374 = -t689 * t412 + t693 * t414;
t373 = -t689 * t411 + t693 * t413;
t372 = -t689 * t407 + t693 * t408;
t371 = t693 * t407 + t689 * t408;
t370 = t694 * t384 - t690 * t474;
t369 = t694 * t383 - t690 * t478;
t368 = t690 * t384 + t694 * t474;
t367 = t690 * t383 + t694 * t478;
t366 = t693 * t406 - t742;
t365 = t689 * t406 + t732;
t364 = t694 * t382 + t690 * t761;
t363 = t690 * t382 - t694 * t761;
t362 = t694 * t374 + t717;
t361 = t694 * t373 - t717;
t360 = t690 * t374 - t715;
t359 = t690 * t373 + t715;
t358 = t694 * t366 + t690 * t531;
t357 = t690 * t366 - t694 * t531;
t356 = t694 * t372 + t690 * t473;
t355 = t690 * t372 - t694 * t473;
t354 = -pkin(6) * t451 + t694 * t391 - t690 * t404;
t351 = -qJ(4) * t423 - t686 * t393 + t687 * t420;
t350 = -pkin(2) * t365 - pkin(3) * t405;
t349 = -pkin(1) * t487 + pkin(6) * t454 + t690 * t391 + t694 * t404;
t348 = -pkin(6) * t441 + t694 * t385 - t690 * t397;
t347 = -qJ(4) * t407 - t686 * t390 + t687 * t409;
t346 = -pkin(3) * t761 + qJ(4) * t424 + t687 * t393 + t686 * t420;
t345 = -pkin(4) * t464 + pkin(8) * t353;
t344 = -pkin(7) * t438 - t689 * t389 + t693 * t392;
t343 = -t689 * t376 + t693 * t378;
t342 = -t689 * t375 + t693 * t377;
t341 = t693 * t376 + t689 * t378;
t340 = -pkin(1) * t462 + pkin(6) * t442 + t690 * t385 + t694 * t397;
t339 = -pkin(3) * t473 + qJ(4) * t408 + t687 * t390 + t686 * t409;
t338 = -pkin(8) * t416 - t352;
t337 = t694 * t342 - t690 * t522;
t336 = t690 * t342 + t694 * t522;
t335 = t694 * t343 + t690 * t499;
t334 = t690 * t343 - t694 * t499;
t333 = -t691 * t363 + t695 * t364;
t332 = t695 * t363 + t691 * t364;
t331 = -pkin(4) * t499 + pkin(8) * t418 + t353;
t330 = -pkin(2) * t381 - pkin(3) * t423 - pkin(4) * t481 + t388;
t329 = -pkin(7) * t365 - qJ(4) * t732 - t689 * t396;
t328 = -t691 * t357 + t695 * t358;
t327 = t695 * t357 + t691 * t358;
t326 = -t691 * t355 + t695 * t356;
t325 = t695 * t355 + t691 * t356;
t324 = -pkin(2) * t371 - pkin(3) * t407 - pkin(4) * t460 + t387;
t323 = -pkin(6) * t421 + t694 * t344 - t690 * t410;
t322 = -pkin(1) * t438 + pkin(6) * t422 + t690 * t344 + t694 * t410;
t321 = t687 * t353 - t750;
t320 = t686 * t353 + t747;
t319 = -pkin(2) * t341 - pkin(3) * t376 - pkin(4) * t416;
t318 = -pkin(7) * t381 - t689 * t346 + t693 * t351;
t317 = -t691 * t334 + t695 * t335;
t316 = t695 * t334 + t691 * t335;
t315 = -pkin(7) * t371 - t689 * t339 + t693 * t347;
t314 = -pkin(6) * t357 + t694 * t329 - t690 * t350;
t313 = -qJ(4) * t376 - t686 * t331 + t687 * t338;
t312 = -pkin(3) * t499 + qJ(4) * t378 + t687 * t331 + t686 * t338;
t311 = -pkin(1) * t365 + pkin(6) * t358 + t690 * t329 + t694 * t350;
t310 = -t689 * t320 + t693 * t321;
t309 = t693 * t320 + t689 * t321;
t308 = -pkin(8) * t747 - qJ(4) * t320 - t686 * t345;
t307 = t694 * t310 + t690 * t464;
t306 = t690 * t310 - t694 * t464;
t305 = -pkin(3) * t464 - pkin(8) * t750 + qJ(4) * t321 + t687 * t345;
t304 = -pkin(6) * t363 + t694 * t318 - t690 * t330;
t303 = -pkin(1) * t381 + pkin(6) * t364 + t690 * t318 + t694 * t330;
t302 = -pkin(6) * t355 + t694 * t315 - t690 * t324;
t301 = -pkin(1) * t371 + pkin(6) * t356 + t690 * t315 + t694 * t324;
t300 = -pkin(2) * t309 - pkin(3) * t320 - pkin(4) * t352;
t299 = -pkin(7) * t341 - t689 * t312 + t693 * t313;
t298 = -t691 * t306 + t695 * t307;
t297 = t695 * t306 + t691 * t307;
t296 = -pkin(6) * t334 + t694 * t299 - t690 * t319;
t295 = -pkin(7) * t309 - t689 * t305 + t693 * t308;
t294 = -pkin(1) * t341 + pkin(6) * t335 + t690 * t299 + t694 * t319;
t293 = -pkin(6) * t306 + t694 * t295 - t690 * t300;
t292 = -pkin(1) * t309 + pkin(6) * t307 + t690 * t295 + t694 * t300;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t663, -t664, 0, t622, 0, 0, 0, 0, 0, 0, -t701, t606, 0, t496, 0, 0, 0, 0, 0, 0, t510, t511, t533, t434, 0, 0, 0, 0, 0, 0, t395, t403, t380, t328, 0, 0, 0, 0, 0, 0, t326, t333, t317, t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t664, -t663, 0, t621, 0, 0, 0, 0, 0, 0, -t606, -t701, 0, -t769, 0, 0, 0, 0, 0, 0, t508, t509, t532, t433, 0, 0, 0, 0, 0, 0, t394, t402, t379, t327, 0, 0, 0, 0, 0, 0, t325, t332, t316, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t611, t612, 0, -t516, 0, 0, 0, 0, 0, 0, t462, t487, t438, t365, 0, 0, 0, 0, 0, 0, t371, t381, t341, t309; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t664, 0, -t663, 0, t702, -t643, -t621, -pkin(5) * t621, 0, 0, -t606, 0, -t701, 0, t774, t773, t769, pkin(5) * t769 + pkin(6) * t727 - t691 * t544, -t691 * t582 + t695 * t584, -t691 * t559 + t695 * t560, -t691 * t592 + t695 * t594, -t691 * t581 + t695 * t583, -t691 * t591 + t695 * t593, -t691 * t619 + t695 * t620, -pkin(5) * t508 - t691 * t444 + t695 * t455, -pkin(5) * t509 - t691 * t445 + t695 * t456, -pkin(5) * t532 - t691 * t493 + t695 * t494, -pkin(5) * t433 - t691 * t398 + t695 * t419, -t691 * t470 + t695 * t472, -t691 * t431 + t695 * t432, -t691 * t450 + t695 * t453, -t691 * t469 + t695 * t471, -t691 * t449 + t695 * t452, -t691 * t506 + t695 * t507, -pkin(5) * t394 - t691 * t340 + t695 * t348, -pkin(5) * t402 - t691 * t349 + t695 * t354, -pkin(5) * t379 - t691 * t322 + t695 * t323, -pkin(5) * t327 - t691 * t311 + t695 * t314, -t691 * t360 + t695 * t362, -t691 * t336 + t695 * t337, -t691 * t367 + t695 * t369, -t691 * t359 + t695 * t361, -t691 * t368 + t695 * t370, -t691 * t399 + t695 * t400, -pkin(5) * t325 - t691 * t301 + t695 * t302, -pkin(5) * t332 - t691 * t303 + t695 * t304, -pkin(5) * t316 - t691 * t294 + t695 * t296, -pkin(5) * t297 - t691 * t292 + t695 * t293; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t663, 0, t664, 0, t643, t702, t622, pkin(5) * t622, 0, 0, t701, 0, -t606, 0, -t773, t774, t496, pkin(5) * t496 + pkin(6) * t735 + t695 * t544, t695 * t582 + t691 * t584, t695 * t559 + t691 * t560, t695 * t592 + t691 * t594, t695 * t581 + t691 * t583, t695 * t591 + t691 * t593, t695 * t619 + t691 * t620, pkin(5) * t510 + t695 * t444 + t691 * t455, pkin(5) * t511 + t695 * t445 + t691 * t456, pkin(5) * t533 + t695 * t493 + t691 * t494, pkin(5) * t434 + t695 * t398 + t691 * t419, t695 * t470 + t691 * t472, t695 * t431 + t691 * t432, t695 * t450 + t691 * t453, t695 * t469 + t691 * t471, t695 * t449 + t691 * t452, t695 * t506 + t691 * t507, pkin(5) * t395 + t695 * t340 + t691 * t348, pkin(5) * t403 + t695 * t349 + t691 * t354, pkin(5) * t380 + t695 * t322 + t691 * t323, pkin(5) * t328 + t695 * t311 + t691 * t314, t695 * t360 + t691 * t362, t695 * t336 + t691 * t337, t695 * t367 + t691 * t369, t695 * t359 + t691 * t361, t695 * t368 + t691 * t370, t695 * t399 + t691 * t400, pkin(5) * t326 + t695 * t301 + t691 * t302, pkin(5) * t333 + t695 * t303 + t691 * t304, pkin(5) * t317 + t695 * t294 + t691 * t296, pkin(5) * t298 + t695 * t292 + t691 * t293; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t671, t672, 0, 0, 0, 0, 0, 0, 0, t719, pkin(1) * t654 - t609, -pkin(1) * t652 - t610, 0, -pkin(1) * t547, (t645 + t712) * t689, t693 * t644 + t689 * t646, t693 * t666 + t739, t730, t689 * t668 + t729, 0, pkin(1) * t565 + pkin(2) * t646 + pkin(7) * t614 - t731, pkin(1) * t566 - pkin(2) * t644 + pkin(7) * t616 + t741, pkin(1) * t602 + pkin(2) * t656 + pkin(7) * t650 + t517, pkin(1) * t491 - pkin(2) * t595 + pkin(7) * t517, t693 * t551 + t689 * t552, t693 * t502 + t689 * t504, t693 * t539 + t689 * t542, t693 * t549 + t689 * t550, t693 * t538 + t689 * t541, t693 * t571 + t689 * t572, pkin(1) * t441 - pkin(2) * t554 + pkin(7) * t463 + t693 * t443 + t689 * t479, pkin(1) * t451 - pkin(2) * t557 + pkin(7) * t490 + t693 * t446 + t689 * t480, pkin(1) * t421 - pkin(2) * t553 + pkin(7) * t440 + t693 * t389 + t689 * t392, pkin(1) * t357 - pkin(2) * t531 + pkin(7) * t366 - qJ(4) * t742 + t693 * t396, t693 * t412 + t689 * t414, t693 * t375 + t689 * t377, t693 * t425 + t689 * t427, t693 * t411 + t689 * t413, t693 * t426 + t689 * t428, t693 * t447 + t689 * t448, pkin(1) * t355 - pkin(2) * t473 + pkin(7) * t372 + t693 * t339 + t689 * t347, pkin(1) * t363 - pkin(2) * t761 + pkin(7) * t382 + t693 * t346 + t689 * t351, pkin(1) * t334 - pkin(2) * t499 + pkin(7) * t343 + t693 * t312 + t689 * t313, pkin(1) * t306 - pkin(2) * t464 + pkin(7) * t310 + t693 * t305 + t689 * t308;];
tauB_reg = t1;
