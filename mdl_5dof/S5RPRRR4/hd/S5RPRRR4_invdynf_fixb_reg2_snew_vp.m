% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:35
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:35:04
% EndTime: 2022-01-23 09:35:06
% DurationCPUTime: 2.13s
% Computational Cost: add. (8445->142), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1071 = sin(qJ(1));
t1075 = cos(qJ(1));
t1062 = qJD(1) + qJD(3);
t1058 = qJD(4) + t1062;
t1055 = t1058 ^ 2;
t1061 = qJDD(1) + qJDD(3);
t1056 = qJDD(4) + t1061;
t1069 = sin(qJ(4));
t1073 = cos(qJ(4));
t1028 = t1069 * t1055 - t1073 * t1056;
t1070 = sin(qJ(3));
t1074 = cos(qJ(3));
t1080 = -t1073 * t1055 - t1069 * t1056;
t1007 = t1074 * t1028 - t1070 * t1080;
t1066 = sin(pkin(9));
t1067 = cos(pkin(9));
t1092 = t1070 * t1028 + t1074 * t1080;
t1099 = t1066 * t1007 + t1067 * t1092;
t987 = t1067 * t1007 - t1066 * t1092;
t1103 = t1071 * t987 + t1075 * t1099;
t1102 = -t1071 * t1099 + t1075 * t987;
t1060 = t1062 ^ 2;
t1036 = t1070 * t1060 - t1074 * t1061;
t1079 = -t1074 * t1060 - t1070 * t1061;
t1013 = t1067 * t1036 - t1066 * t1079;
t1091 = t1066 * t1036 + t1067 * t1079;
t1098 = t1071 * t1013 + t1075 * t1091;
t1097 = t1075 * t1013 - t1071 * t1091;
t1051 = t1071 * g(1) - t1075 * g(2);
t1041 = qJDD(1) * pkin(1) + t1051;
t1052 = -t1075 * g(1) - t1071 * g(2);
t1077 = qJD(1) ^ 2;
t1042 = -t1077 * pkin(1) + t1052;
t1017 = t1067 * t1041 - t1066 * t1042;
t1015 = qJDD(1) * pkin(2) + t1017;
t1018 = t1066 * t1041 + t1067 * t1042;
t1016 = -t1077 * pkin(2) + t1018;
t995 = t1074 * t1015 - t1070 * t1016;
t1078 = t1061 * pkin(3) + t995;
t996 = t1070 * t1015 + t1074 * t1016;
t994 = -t1060 * pkin(3) + t996;
t978 = t1069 * t1078 + t1073 * t994;
t1086 = qJD(5) * t1058;
t1068 = sin(qJ(5));
t1085 = t1068 * t1056;
t1072 = cos(qJ(5));
t1084 = t1072 * t1056;
t1063 = t1068 ^ 2;
t1064 = t1072 ^ 2;
t1083 = t1063 + t1064;
t977 = -t1069 * t994 + t1073 * t1078;
t1043 = -t1066 * qJDD(1) - t1067 * t1077;
t1044 = t1067 * qJDD(1) - t1066 * t1077;
t1082 = t1075 * t1043 - t1071 * t1044;
t1081 = t1071 * t1043 + t1075 * t1044;
t1076 = qJD(5) ^ 2;
t1065 = -g(3) + qJDD(2);
t1049 = -t1071 * qJDD(1) - t1075 * t1077;
t1048 = t1075 * qJDD(1) - t1071 * t1077;
t1047 = t1072 * t1055 * t1068;
t1046 = -t1064 * t1055 - t1076;
t1045 = -t1063 * t1055 - t1076;
t1040 = -qJDD(5) + t1047;
t1039 = qJDD(5) + t1047;
t1030 = t1083 * t1055;
t1025 = t1083 * t1056;
t1024 = -0.2e1 * t1068 * t1086 + t1084;
t1023 = 0.2e1 * t1072 * t1086 + t1085;
t1022 = t1072 * t1040 - t1068 * t1045;
t1021 = -t1068 * t1039 + t1072 * t1046;
t1020 = t1068 * t1040 + t1072 * t1045;
t1019 = t1072 * t1039 + t1068 * t1046;
t1006 = t1073 * t1025 - t1069 * t1030;
t1003 = t1069 * t1025 + t1073 * t1030;
t1002 = t1073 * t1022 + t1069 * t1023;
t1001 = t1073 * t1021 - t1069 * t1024;
t1000 = t1069 * t1022 - t1073 * t1023;
t999 = t1069 * t1021 + t1073 * t1024;
t998 = -t1066 * t1017 + t1067 * t1018;
t997 = t1067 * t1017 + t1066 * t1018;
t990 = -t1070 * t1003 + t1074 * t1006;
t989 = t1074 * t1003 + t1070 * t1006;
t984 = -t1070 * t1000 + t1074 * t1002;
t983 = t1074 * t1001 - t1070 * t999;
t982 = t1074 * t1000 + t1070 * t1002;
t981 = t1070 * t1001 + t1074 * t999;
t980 = -t1070 * t995 + t1074 * t996;
t979 = t1070 * t996 + t1074 * t995;
t976 = -t1055 * pkin(4) + t1056 * pkin(8) + t978;
t975 = -t1056 * pkin(4) - t1055 * pkin(8) - t977;
t974 = -t1066 * t989 + t1067 * t990;
t973 = t1066 * t990 + t1067 * t989;
t972 = t1068 * t1065 + t1072 * t976;
t971 = t1072 * t1065 - t1068 * t976;
t970 = -t1066 * t982 + t1067 * t984;
t969 = -t1066 * t981 + t1067 * t983;
t968 = t1066 * t984 + t1067 * t982;
t967 = t1066 * t983 + t1067 * t981;
t966 = -t1066 * t979 + t1067 * t980;
t965 = t1066 * t980 + t1067 * t979;
t964 = -t1069 * t977 + t1073 * t978;
t963 = t1069 * t978 + t1073 * t977;
t962 = -t1068 * t971 + t1072 * t972;
t961 = t1068 * t972 + t1072 * t971;
t960 = t1069 * t975 + t1073 * t962;
t959 = t1069 * t962 - t1073 * t975;
t958 = -t1070 * t963 + t1074 * t964;
t957 = t1070 * t964 + t1074 * t963;
t956 = -t1070 * t959 + t1074 * t960;
t955 = t1070 * t960 + t1074 * t959;
t954 = -t1066 * t957 + t1067 * t958;
t953 = t1066 * t958 + t1067 * t957;
t952 = -t1066 * t955 + t1067 * t956;
t951 = t1066 * t956 + t1067 * t955;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1049, -t1048, 0, -t1071 * t1051 + t1075 * t1052, 0, 0, 0, 0, 0, 0, t1082, -t1081, 0, -t1071 * t997 + t1075 * t998, 0, 0, 0, 0, 0, 0, t1098, t1097, 0, -t1071 * t965 + t1075 * t966, 0, 0, 0, 0, 0, 0, t1103, t1102, 0, -t1071 * t953 + t1075 * t954, 0, 0, 0, 0, 0, 0, -t1071 * t967 + t1075 * t969, -t1071 * t968 + t1075 * t970, -t1071 * t973 + t1075 * t974, -t1071 * t951 + t1075 * t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1048, t1049, 0, t1075 * t1051 + t1071 * t1052, 0, 0, 0, 0, 0, 0, t1081, t1082, 0, t1071 * t998 + t1075 * t997, 0, 0, 0, 0, 0, 0, -t1097, t1098, 0, t1071 * t966 + t1075 * t965, 0, 0, 0, 0, 0, 0, -t1102, t1103, 0, t1071 * t954 + t1075 * t953, 0, 0, 0, 0, 0, 0, t1071 * t969 + t1075 * t967, t1071 * t970 + t1075 * t968, t1071 * t974 + t1075 * t973, t1071 * t952 + t1075 * t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, t1019, t1020, 0, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1077, -qJDD(1), 0, t1052, 0, 0, 0, 0, 0, 0, t1043, -t1044, 0, t998, 0, 0, 0, 0, 0, 0, t1091, t1013, 0, t966, 0, 0, 0, 0, 0, 0, t1099, t987, 0, t954, 0, 0, 0, 0, 0, 0, t969, t970, t974, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1077, 0, t1051, 0, 0, 0, 0, 0, 0, t1044, t1043, 0, t997, 0, 0, 0, 0, 0, 0, -t1013, t1091, 0, t965, 0, 0, 0, 0, 0, 0, -t987, t1099, 0, t953, 0, 0, 0, 0, 0, 0, t967, t968, t973, t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, t1019, t1020, 0, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1077, -qJDD(1), 0, t1018, 0, 0, 0, 0, 0, 0, t1079, t1036, 0, t980, 0, 0, 0, 0, 0, 0, t1092, t1007, 0, t958, 0, 0, 0, 0, 0, 0, t983, t984, t990, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1077, 0, t1017, 0, 0, 0, 0, 0, 0, -t1036, t1079, 0, t979, 0, 0, 0, 0, 0, 0, -t1007, t1092, 0, t957, 0, 0, 0, 0, 0, 0, t981, t982, t989, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, t1019, t1020, 0, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1060, -t1061, 0, t996, 0, 0, 0, 0, 0, 0, t1080, t1028, 0, t964, 0, 0, 0, 0, 0, 0, t1001, t1002, t1006, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, -t1060, 0, t995, 0, 0, 0, 0, 0, 0, -t1028, t1080, 0, t963, 0, 0, 0, 0, 0, 0, t999, t1000, t1003, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, t1019, t1020, 0, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1055, -t1056, 0, t978, 0, 0, 0, 0, 0, 0, t1021, t1022, t1025, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, -t1055, 0, t977, 0, 0, 0, 0, 0, 0, t1024, -t1023, t1030, -t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, 0, 0, 0, 0, 0, 0, t1019, t1020, 0, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1046, t1040, t1084, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, t1045, -t1085, t971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1024, t1023, -t1030, t975;];
f_new_reg = t1;
