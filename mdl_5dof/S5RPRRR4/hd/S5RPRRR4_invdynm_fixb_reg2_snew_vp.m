% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:35
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:34:55
% EndTime: 2022-01-23 09:35:04
% DurationCPUTime: 10.00s
% Computational Cost: add. (52284->415), mult. (74873->561), div. (0->0), fcn. (44118->10), ass. (0->288)
t820 = qJD(1) + qJD(3);
t816 = qJD(4) + t820;
t813 = t816 ^ 2;
t831 = cos(qJ(4));
t819 = qJDD(1) + qJDD(3);
t814 = qJDD(4) + t819;
t827 = sin(qJ(4));
t882 = t827 * t814;
t773 = t831 * t813 + t882;
t874 = t831 * t814;
t776 = t827 * t813 - t874;
t828 = sin(qJ(3));
t832 = cos(qJ(3));
t710 = t832 * t773 - t828 * t776;
t823 = g(3) - qJDD(2);
t750 = pkin(7) * t773 - t831 * t823;
t910 = pkin(7) * t776 - t827 * t823;
t653 = pkin(6) * t710 + t832 * t750 - t828 * t910;
t715 = t828 * t773 + t832 * t776;
t824 = sin(pkin(9));
t825 = cos(pkin(9));
t663 = t825 * t710 - t824 * t715;
t923 = pkin(6) * t715 + t828 * t750 + t832 * t910;
t593 = qJ(2) * t663 + t825 * t653 - t824 * t923;
t829 = sin(qJ(1));
t833 = cos(qJ(1));
t667 = t824 * t710 + t825 * t715;
t925 = t833 * t663 - t829 * t667;
t938 = qJ(2) * t667 + t824 * t653 + t825 * t923;
t950 = pkin(5) * t925 + t833 * t593 - t829 * t938;
t940 = t829 * t663 + t833 * t667;
t949 = pkin(5) * t940 + t829 * t593 + t833 * t938;
t806 = t829 * g(1) - t833 * g(2);
t793 = qJDD(1) * pkin(1) + t806;
t807 = t833 * g(1) + t829 * g(2);
t835 = qJD(1) ^ 2;
t794 = -t835 * pkin(1) - t807;
t733 = -t825 * t793 + t824 * t794;
t725 = qJDD(1) * pkin(2) - t733;
t734 = t824 * t793 + t825 * t794;
t726 = -t835 * pkin(2) + t734;
t678 = t828 * t725 + t832 * t726;
t818 = t820 ^ 2;
t672 = -t818 * pkin(3) + t678;
t677 = -t832 * t725 + t828 * t726;
t840 = t819 * pkin(3) - t677;
t626 = t827 * t672 - t831 * t840;
t627 = t831 * t672 + t827 * t840;
t861 = t827 * t626 + t831 * t627;
t582 = t831 * t626 - t827 * t627;
t872 = t832 * t582;
t558 = -t828 * t861 + t872;
t880 = t828 * t582;
t913 = t832 * t861 + t880;
t542 = t825 * t558 - t824 * t913;
t934 = t824 * t558 + t825 * t913;
t947 = t829 * t542 + t833 * t934;
t946 = t833 * t542 - t829 * t934;
t784 = t832 * t818 + t828 * t819;
t787 = t828 * t818 - t832 * t819;
t718 = t825 * t784 - t824 * t787;
t754 = pkin(6) * t784 - t832 * t823;
t911 = pkin(6) * t787 - t828 * t823;
t661 = qJ(2) * t718 + t825 * t754 - t824 * t911;
t722 = t824 * t784 + t825 * t787;
t908 = t833 * t718 - t829 * t722;
t922 = qJ(2) * t722 + t824 * t754 + t825 * t911;
t941 = pkin(5) * t908 + t833 * t661 - t829 * t922;
t924 = t829 * t718 + t833 * t722;
t939 = pkin(5) * t924 + t829 * t661 + t833 * t922;
t860 = t828 * t677 + t832 * t678;
t632 = t832 * t677 - t828 * t678;
t886 = t825 * t632;
t586 = -t824 * t860 + t886;
t887 = t824 * t632;
t912 = t825 * t860 + t887;
t933 = t829 * t586 + t833 * t912;
t932 = t833 * t586 - t829 * t912;
t859 = t824 * t733 + t825 * t734;
t682 = t825 * t733 - t824 * t734;
t870 = t833 * t682;
t915 = -t829 * t859 + t870;
t878 = t829 * t682;
t914 = t833 * t859 + t878;
t795 = t824 * qJDD(1) + t825 * t835;
t761 = qJ(2) * t795 - t825 * t823;
t796 = t825 * qJDD(1) - t824 * t835;
t843 = -qJ(2) * t796 - t824 * t823;
t893 = t833 * t795 + t829 * t796;
t907 = pkin(5) * t893 + t833 * t761 - t829 * t843;
t743 = -t829 * t795 + t833 * t796;
t906 = -pkin(5) * t743 + t829 * t761 + t833 * t843;
t624 = -t813 * pkin(4) + t814 * pkin(8) + t627;
t826 = sin(qJ(5));
t830 = cos(qJ(5));
t614 = t826 * t624 + t830 * t823;
t615 = t830 * t624 - t826 * t823;
t577 = t826 * t614 + t830 * t615;
t891 = pkin(1) * t823;
t890 = pkin(2) * t823;
t821 = t826 ^ 2;
t888 = t821 * t813;
t623 = -t814 * pkin(4) - t813 * pkin(8) + t626;
t620 = t826 * t623;
t801 = t830 * t813 * t826;
t790 = qJDD(5) + t801;
t885 = t826 * t790;
t791 = qJDD(5) - t801;
t884 = t826 * t791;
t883 = t826 * t814;
t621 = t830 * t623;
t875 = t830 * t791;
t808 = t830 * t814;
t579 = pkin(3) * t582;
t869 = -pkin(2) * t558 - t579;
t868 = -pkin(4) * t623 + pkin(8) * t577;
t822 = t830 ^ 2;
t867 = t821 + t822;
t866 = qJD(5) * t816;
t834 = qJD(5) ^ 2;
t798 = -t834 - t888;
t742 = -t826 * t798 - t875;
t805 = t830 * t866;
t766 = 0.2e1 * t805 + t883;
t865 = -pkin(4) * t766 + pkin(8) * t742 + t620;
t809 = t822 * t813;
t800 = -t809 - t834;
t740 = t830 * t800 - t885;
t862 = t826 * t866;
t769 = t808 - 0.2e1 * t862;
t864 = pkin(4) * t769 + pkin(8) * t740 - t621;
t565 = t827 * t577 - t831 * t623;
t863 = pkin(3) * t565 + t868;
t856 = -t829 * t806 - t833 * t807;
t855 = t827 * t801;
t854 = t831 * t801;
t566 = t831 * t577 + t827 * t623;
t550 = t832 * t565 + t828 * t566;
t853 = pkin(2) * t550 + t863;
t772 = t867 * t814;
t777 = t809 + t888;
t852 = pkin(4) * t777 + pkin(8) * t772 + t577;
t691 = t827 * t742 - t831 * t766;
t851 = pkin(3) * t691 + t865;
t690 = t827 * t740 + t831 * t769;
t850 = pkin(3) * t690 + t864;
t803 = t833 * qJDD(1) - t829 * t835;
t849 = -pkin(5) * t803 - t829 * g(3);
t848 = -pkin(3) * t776 - t626;
t847 = -pkin(2) * t787 - t677;
t709 = t827 * t772 + t831 * t777;
t846 = pkin(3) * t709 + t852;
t692 = t831 * t740 - t827 * t769;
t642 = t832 * t690 + t828 * t692;
t845 = pkin(2) * t642 + t850;
t693 = t831 * t742 + t827 * t766;
t643 = t832 * t691 + t828 * t693;
t844 = pkin(2) * t643 + t851;
t576 = t830 * t614 - t826 * t615;
t842 = t833 * t806 - t829 * t807;
t841 = -pkin(2) * t715 + t848;
t713 = t831 * t772 - t827 * t777;
t669 = t832 * t709 + t828 * t713;
t839 = pkin(2) * t669 + t846;
t838 = -pkin(2) * t784 - t678;
t837 = -pkin(3) * t773 - t627;
t836 = -pkin(2) * t710 + t837;
t802 = t829 * qJDD(1) + t833 * t835;
t799 = t809 - t834;
t797 = t834 - t888;
t780 = t830 * t790;
t779 = -pkin(5) * t802 + t833 * g(3);
t778 = -t809 + t888;
t768 = t808 - t862;
t767 = t805 + t883;
t762 = t867 * t866;
t746 = t827 * qJDD(5) + t831 * t762;
t745 = -t831 * qJDD(5) + t827 * t762;
t741 = -t826 * t797 + t780;
t739 = t830 * t799 - t884;
t738 = t830 * t798 - t884;
t737 = t830 * t797 + t885;
t736 = t826 * t800 + t780;
t735 = t826 * t799 + t875;
t732 = t830 * t767 - t821 * t866;
t731 = -t826 * t768 - t822 * t866;
t728 = (t767 + t805) * t826;
t727 = (t768 - t862) * t830;
t705 = pkin(1) * t796 - t733;
t704 = -pkin(1) * t795 - t734;
t703 = -t826 * t766 + t830 * t769;
t702 = t830 * t766 + t826 * t769;
t701 = t831 * t741 + t826 * t882;
t700 = t831 * t739 + t827 * t808;
t699 = t827 * t741 - t826 * t874;
t698 = t827 * t739 - t830 * t874;
t697 = t831 * t732 - t855;
t696 = t831 * t731 + t855;
t695 = t827 * t732 + t854;
t694 = t827 * t731 - t854;
t687 = -t828 * t745 + t832 * t746;
t686 = t832 * t745 + t828 * t746;
t685 = t831 * t703 + t827 * t778;
t684 = t827 * t703 - t831 * t778;
t679 = pkin(1) * t682;
t676 = qJ(2) * t859 + t891;
t670 = -t828 * t709 + t832 * t713;
t657 = -t828 * t699 + t832 * t701;
t656 = -t828 * t698 + t832 * t700;
t655 = t832 * t699 + t828 * t701;
t654 = t832 * t698 + t828 * t700;
t649 = -t828 * t695 + t832 * t697;
t648 = -t828 * t694 + t832 * t696;
t647 = t832 * t695 + t828 * t697;
t646 = t832 * t694 + t828 * t696;
t645 = -t828 * t691 + t832 * t693;
t644 = -t828 * t690 + t832 * t692;
t639 = -pkin(1) * t722 + t847;
t638 = -pkin(1) * t718 + t838;
t637 = -t824 * t686 + t825 * t687;
t636 = t825 * t686 + t824 * t687;
t635 = -t828 * t684 + t832 * t685;
t634 = t832 * t684 + t828 * t685;
t629 = pkin(2) * t632;
t628 = pkin(6) * t860 + t890;
t619 = -t824 * t669 + t825 * t670;
t618 = t825 * t669 + t824 * t670;
t611 = -t824 * t655 + t825 * t657;
t610 = -t824 * t654 + t825 * t656;
t609 = t825 * t655 + t824 * t657;
t608 = t825 * t654 + t824 * t656;
t607 = -t824 * t647 + t825 * t649;
t606 = -t824 * t646 + t825 * t648;
t605 = t825 * t647 + t824 * t649;
t604 = t825 * t646 + t824 * t648;
t603 = -pkin(8) * t738 + t621;
t602 = -pkin(8) * t736 + t620;
t601 = -pkin(4) * t738 + t615;
t600 = -pkin(4) * t736 + t614;
t599 = -t824 * t643 + t825 * t645;
t598 = -t824 * t642 + t825 * t644;
t597 = t825 * t643 + t824 * t645;
t596 = t825 * t642 + t824 * t644;
t595 = -t824 * t634 + t825 * t635;
t594 = t825 * t634 + t824 * t635;
t589 = -pkin(1) * t667 + t841;
t588 = -pkin(1) * t663 + t836;
t578 = pkin(3) * t823 + pkin(7) * t861;
t573 = -pkin(7) * t709 + t831 * t576;
t572 = pkin(7) * t713 + t827 * t576;
t571 = -pkin(1) * t586 - t629;
t570 = -pkin(7) * t691 - t827 * t601 + t831 * t603;
t569 = -pkin(7) * t690 - t827 * t600 + t831 * t602;
t568 = -pkin(3) * t738 + pkin(7) * t693 + t831 * t601 + t827 * t603;
t567 = -pkin(3) * t736 + pkin(7) * t692 + t831 * t600 + t827 * t602;
t563 = pkin(6) * t886 + qJ(2) * t586 - t824 * t628;
t562 = pkin(6) * t887 + qJ(2) * t912 + t825 * t628 + t891;
t561 = pkin(1) * t597 + t844;
t560 = pkin(1) * t596 + t845;
t554 = pkin(1) * t618 + t839;
t553 = -pkin(6) * t669 - t828 * t572 + t832 * t573;
t552 = pkin(6) * t670 + t832 * t572 + t828 * t573;
t551 = -t828 * t565 + t832 * t566;
t548 = -pkin(6) * t643 - t828 * t568 + t832 * t570;
t547 = -pkin(6) * t642 - t828 * t567 + t832 * t569;
t546 = -pkin(2) * t738 + pkin(6) * t645 + t832 * t568 + t828 * t570;
t545 = -pkin(2) * t736 + pkin(6) * t644 + t832 * t567 + t828 * t569;
t544 = -pkin(7) * t565 - (pkin(4) * t827 - pkin(8) * t831) * t576;
t539 = pkin(6) * t558 + pkin(7) * t872 - t828 * t578;
t538 = pkin(6) * t913 + pkin(7) * t880 + t832 * t578 + t890;
t537 = pkin(7) * t566 - (-pkin(4) * t831 - pkin(8) * t827 - pkin(3)) * t576;
t536 = -qJ(2) * t618 - t824 * t552 + t825 * t553;
t535 = qJ(2) * t619 + t825 * t552 + t824 * t553;
t534 = -t824 * t550 + t825 * t551;
t533 = t825 * t550 + t824 * t551;
t532 = -pkin(1) * t542 + t869;
t531 = -qJ(2) * t597 - t824 * t546 + t825 * t548;
t530 = -qJ(2) * t596 - t824 * t545 + t825 * t547;
t529 = -pkin(1) * t738 + qJ(2) * t599 + t825 * t546 + t824 * t548;
t528 = -pkin(1) * t736 + qJ(2) * t598 + t825 * t545 + t824 * t547;
t527 = qJ(2) * t542 - t824 * t538 + t825 * t539;
t526 = qJ(2) * t934 + t825 * t538 + t824 * t539 + t891;
t525 = -pkin(6) * t550 - t828 * t537 + t832 * t544;
t524 = pkin(1) * t533 + t853;
t523 = pkin(2) * t576 + pkin(6) * t551 + t832 * t537 + t828 * t544;
t522 = -qJ(2) * t533 - t824 * t523 + t825 * t525;
t521 = pkin(1) * t576 + qJ(2) * t534 + t825 * t523 + t824 * t525;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t803, 0, -t802, 0, t849, -t779, -t842, -pkin(5) * t842, 0, 0, t743, 0, -t893, 0, t906, t907, t915, pkin(5) * t915 + qJ(2) * t870 - t829 * t676, 0, 0, -t924, 0, -t908, 0, t939, t941, t932, pkin(5) * t932 - t829 * t562 + t833 * t563, 0, 0, -t940, 0, -t925, 0, t949, t950, t946, pkin(5) * t946 - t829 * t526 + t833 * t527, -t829 * t605 + t833 * t607, -t829 * t594 + t833 * t595, -t829 * t609 + t833 * t611, -t829 * t604 + t833 * t606, -t829 * t608 + t833 * t610, -t829 * t636 + t833 * t637, t833 * t530 - t829 * t528 - pkin(5) * (t833 * t596 + t829 * t598), t833 * t531 - t829 * t529 - pkin(5) * (t833 * t597 + t829 * t599), t833 * t536 - t829 * t535 - pkin(5) * (t833 * t618 + t829 * t619), t833 * t522 - t829 * t521 - pkin(5) * (t833 * t533 + t829 * t534); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t802, 0, t803, 0, t779, t849, t856, pkin(5) * t856, 0, 0, t893, 0, t743, 0, -t907, t906, t914, pkin(5) * t914 + qJ(2) * t878 + t833 * t676, 0, 0, t908, 0, -t924, 0, -t941, t939, t933, pkin(5) * t933 + t833 * t562 + t829 * t563, 0, 0, t925, 0, -t940, 0, -t950, t949, t947, pkin(5) * t947 + t833 * t526 + t829 * t527, t833 * t605 + t829 * t607, t833 * t594 + t829 * t595, t833 * t609 + t829 * t611, t833 * t604 + t829 * t606, t833 * t608 + t829 * t610, t833 * t636 + t829 * t637, t829 * t530 + t833 * t528 + pkin(5) * (-t829 * t596 + t833 * t598), t829 * t531 + t833 * t529 + pkin(5) * (-t829 * t597 + t833 * t599), t829 * t536 + t833 * t535 + pkin(5) * (-t829 * t618 + t833 * t619), t829 * t522 + t833 * t521 + pkin(5) * (-t829 * t533 + t833 * t534); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t806, t807, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t705, t704, 0, -t679, 0, 0, 0, 0, 0, t819, t639, t638, 0, t571, 0, 0, 0, 0, 0, t814, t589, t588, 0, t532, t728, t702, t737, t727, t735, 0, t560, t561, t554, t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t835, 0, 0, -g(3), -t806, 0, 0, 0, t796, 0, -t795, 0, t843, t761, t682, qJ(2) * t682, 0, 0, -t722, 0, -t718, 0, t922, t661, t586, t563, 0, 0, -t667, 0, -t663, 0, t938, t593, t542, t527, t607, t595, t611, t606, t610, t637, t530, t531, t536, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t835, 0, qJDD(1), 0, g(3), 0, -t807, 0, 0, 0, t795, 0, t796, 0, -t761, t843, t859, t676, 0, 0, t718, 0, -t722, 0, -t661, t922, t912, t562, 0, 0, t663, 0, -t667, 0, -t593, t938, t934, t526, t605, t594, t609, t604, t608, t636, t528, t529, t535, t521; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t806, t807, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t705, t704, 0, -t679, 0, 0, 0, 0, 0, t819, t639, t638, 0, t571, 0, 0, 0, 0, 0, t814, t589, t588, 0, t532, t728, t702, t737, t727, t735, 0, t560, t561, t554, t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t835, 0, 0, -t823, t733, 0, 0, 0, -t787, 0, -t784, 0, t911, t754, t632, pkin(6) * t632, 0, 0, -t715, 0, -t710, 0, t923, t653, t558, t539, t649, t635, t657, t648, t656, t687, t547, t548, t553, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t835, 0, qJDD(1), 0, t823, 0, t734, 0, 0, 0, t784, 0, -t787, 0, -t754, t911, t860, t628, 0, 0, t710, 0, -t715, 0, -t653, t923, t913, t538, t647, t634, t655, t646, t654, t686, t545, t546, t552, t523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t733, -t734, 0, 0, 0, 0, 0, 0, 0, t819, t847, t838, 0, -t629, 0, 0, 0, 0, 0, t814, t841, t836, 0, t869, t728, t702, t737, t727, t735, 0, t845, t844, t839, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t819, 0, -t818, 0, 0, -t823, t677, 0, 0, 0, -t776, 0, -t773, 0, t910, t750, t582, pkin(7) * t582, t697, t685, t701, t696, t700, t746, t569, t570, t573, t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, 0, t819, 0, t823, 0, t678, 0, 0, 0, t773, 0, -t776, 0, -t750, t910, t861, t578, t695, t684, t699, t694, t698, t745, t567, t568, t572, t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t819, -t677, -t678, 0, 0, 0, 0, 0, 0, 0, t814, t848, t837, 0, -t579, t728, t702, t737, t727, t735, 0, t850, t851, t846, t863; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, 0, -t813, 0, 0, -t823, t626, 0, t732, t703, t741, t731, t739, t762, t602, t603, t576, pkin(8) * t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, 0, t814, 0, t823, 0, t627, 0, t801, -t778, -t883, -t801, -t808, -qJDD(5), t600, t601, 0, pkin(4) * t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, -t626, -t627, 0, 0, t728, t702, t737, t727, t735, 0, t864, t865, t852, t868; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767, t769, t790, -t805, t799, t805, 0, t623, t614, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, t766, t797, t768, t791, -t862, -t623, 0, t615, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t801, t778, t883, t801, t808, qJDD(5), -t614, -t615, 0, 0;];
m_new_reg = t1;
