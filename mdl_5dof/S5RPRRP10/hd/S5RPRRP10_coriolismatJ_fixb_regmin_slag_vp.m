% Calculate minimal parameter regressor of coriolis matrix for
% S5RPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-15 19:15
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRP10_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP10_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP10_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP10_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-15 19:14:53
% EndTime: 2021-01-15 19:15:10
% DurationCPUTime: 3.12s
% Computational Cost: add. (4256->303), mult. (8567->408), div. (0->0), fcn. (9167->6), ass. (0->254)
t188 = sin(pkin(8));
t326 = cos(qJ(3));
t245 = t326 * t188;
t189 = cos(pkin(8));
t191 = sin(qJ(3));
t280 = t191 * t189;
t169 = t245 + t280;
t190 = sin(qJ(4));
t192 = cos(qJ(4));
t281 = t190 * t192;
t248 = t169 * t281;
t225 = 0.2e1 * t248;
t167 = t191 * t188 - t326 * t189;
t324 = t167 * pkin(4);
t279 = t192 * qJ(5);
t181 = -pkin(2) * t189 - pkin(1);
t219 = pkin(3) * t167 - pkin(7) * t169;
t199 = t181 + t219;
t321 = pkin(6) + qJ(2);
t226 = t321 * t188;
t220 = t191 * t226;
t171 = t321 * t189;
t246 = t326 * t171;
t110 = t246 - t220;
t282 = t190 * t110;
t58 = -t192 * t199 + t282;
t52 = t169 * t279 + t58;
t38 = -t52 + t324;
t334 = t38 + t52;
t257 = t169 * qJD(1);
t150 = t192 * t257;
t265 = qJD(3) * t190;
t128 = t150 + t265;
t164 = t167 ^ 2;
t165 = t169 ^ 2;
t333 = -t165 - t164;
t252 = t165 - t164;
t160 = t245 / 0.2e1 + t280 / 0.2e1;
t322 = t169 * pkin(3);
t323 = t167 * pkin(7);
t107 = t322 + t323;
t100 = t192 * t107;
t159 = t169 * pkin(4);
t109 = t171 * t191 + t326 * t226;
t294 = t109 * t190;
t92 = t192 * t167;
t44 = qJ(5) * t92 + t100 + t159 + t294;
t332 = t44 / 0.2e1;
t331 = -t100 / 0.2e1;
t106 = t109 * t192;
t102 = t106 / 0.2e1;
t330 = -t169 / 0.2e1;
t320 = pkin(7) + qJ(5);
t173 = t320 * t192;
t329 = -t173 / 0.2e1;
t187 = t192 ^ 2;
t328 = -t187 / 0.2e1;
t327 = -t190 / 0.2e1;
t325 = pkin(4) * t165;
t278 = t192 * t110;
t59 = t190 * t199 + t278;
t89 = t190 * t169;
t53 = -qJ(5) * t89 + t59;
t310 = t53 * t192;
t314 = t38 * t190;
t319 = -t314 / 0.2e1 + t310 / 0.2e1;
t7 = t334 * t89;
t318 = qJD(1) * t7;
t249 = t52 / 0.2e1 + t38 / 0.2e1;
t250 = t324 / 0.2e1;
t210 = t250 + t249;
t9 = t210 * t190;
t317 = qJD(1) * t9;
t87 = t190 * t167;
t71 = -pkin(4) * t87 + t110;
t316 = t192 * t71;
t99 = t190 * t107;
t56 = qJ(5) * t87 - t106 + t99;
t70 = pkin(4) * t89 + t109;
t3 = t38 * t44 + t53 * t56 + t70 * t71;
t315 = t3 * qJD(1);
t313 = t38 * t192;
t4 = t210 * t192;
t312 = t4 * qJD(1);
t311 = t44 * t192;
t309 = t56 * t190;
t216 = t53 * t190 + t313;
t6 = (t309 + t311) * t169 - t216 * t167;
t308 = t6 * qJD(1);
t307 = t70 * t169;
t306 = t70 * t190;
t305 = t70 * t192;
t304 = t71 * t190;
t291 = t169 * t192;
t8 = pkin(4) * t70 * t291 - t334 * t53;
t303 = t8 * qJD(1);
t302 = t102 - t99 / 0.2e1;
t15 = t307 + (-t310 + t314) * t167;
t301 = qJD(1) * t15;
t182 = -pkin(4) * t192 - pkin(3);
t231 = t169 * t182 / 0.2e1;
t287 = t173 * t192;
t172 = t320 * t190;
t290 = t172 * t190;
t194 = (-t287 / 0.2e1 - t290 / 0.2e1) * t167 + t231;
t209 = -t311 / 0.2e1 - t309 / 0.2e1;
t16 = t194 + t209;
t300 = qJD(1) * t16;
t32 = t109 * t291 - t59 * t167;
t299 = qJD(1) * t32;
t67 = t252 * t190;
t298 = qJD(1) * t67;
t68 = t333 * t190;
t297 = qJD(1) * t68;
t69 = t252 * t192;
t296 = qJD(1) * t69;
t295 = qJD(4) * t53;
t11 = (t38 + t304) * t169 + (t44 - t306) * t167;
t293 = t11 * qJD(1);
t12 = (-t53 + t316) * t169 + (-t56 - t305) * t167;
t292 = t12 * qJD(1);
t289 = t172 * t192;
t288 = t173 * t190;
t18 = t100 * t167 + (-t58 + t282) * t169;
t286 = t18 * qJD(1);
t285 = t182 * t190;
t284 = t182 * t192;
t19 = (-t59 + t278) * t169 - t99 * t167;
t283 = t19 * qJD(1);
t22 = t216 * t169;
t277 = t22 * qJD(1);
t25 = -t53 * t167 + (t190 * t325 + t307) * t192;
t276 = t25 * qJD(1);
t26 = t167 * t52 + t187 * t325 - t70 * t89;
t275 = t26 * qJD(1);
t31 = -t109 * t89 + t167 * t58;
t274 = t31 * qJD(1);
t186 = t190 ^ 2;
t221 = t169 * t328 + t186 * t330;
t65 = t221 - t160;
t273 = t65 * qJD(1);
t272 = t252 * qJD(1);
t271 = t87 * qJD(1);
t270 = t89 * qJD(1);
t269 = t92 * qJD(1);
t154 = t186 * t167;
t155 = t187 * t167;
t95 = t154 + t155;
t268 = t95 * qJD(1);
t178 = t186 + t187;
t96 = t178 * t165;
t267 = t96 * qJD(1);
t98 = t333 * t192;
t57 = t98 * qJD(1);
t175 = t188 ^ 2 + t189 ^ 2;
t179 = t187 - t186;
t266 = qJD(2) * t192;
t264 = qJD(3) * t192;
t263 = qJD(4) * t173;
t262 = qJD(4) * t190;
t183 = qJD(4) * t192;
t261 = qJD(5) * t190;
t260 = qJD(5) * t192;
t259 = t160 * qJD(1);
t258 = t167 * qJD(1);
t156 = t167 * qJD(3);
t256 = t169 * qJD(3);
t170 = t175 * qJ(2);
t255 = t170 * qJD(1);
t254 = t175 * qJD(1);
t253 = t178 * qJD(3);
t251 = pkin(4) * t262;
t247 = t306 / 0.2e1;
t244 = t167 * t266;
t243 = t169 * t266;
t242 = t190 * t264;
t241 = t169 * t262;
t240 = t169 * t183;
t239 = t169 * t260;
t238 = t167 * t257;
t237 = t167 * t256;
t236 = t190 * t183;
t235 = t190 * t257;
t234 = t169 * t261;
t233 = t192 * t258;
t232 = t167 * t260;
t101 = t294 / 0.2e1;
t230 = t284 / 0.2e1;
t229 = qJ(5) * t327;
t228 = t92 / 0.2e1;
t227 = t186 / 0.2e1 + t328;
t105 = t167 * t150;
t224 = qJD(3) * t87 + t105;
t223 = t190 * t250;
t222 = qJD(1) * t181 + qJD(2);
t218 = qJD(3) * t225;
t217 = t105 + t240;
t1 = t249 * t173 + (t332 + t284 * t330 - t306 / 0.2e1) * pkin(4);
t61 = pkin(4) * t285;
t215 = -qJD(1) * t1 + qJD(3) * t61;
t119 = t287 + t290;
t193 = -t246 / 0.2e1 + t223 + t220 / 0.2e1;
t196 = (-t288 / 0.2e1 + t289 / 0.2e1) * t169 + t319;
t14 = t193 + t196;
t214 = qJD(1) * t14 + qJD(3) * t119;
t153 = pkin(4) * t281 - t285;
t197 = (t227 * pkin(4) + t230) * t169;
t21 = -t159 + t331 + (t70 / 0.2e1 - t109 / 0.2e1) * t190 + (t329 - t279 / 0.2e1) * t167 + t197;
t213 = qJD(1) * t21 - qJD(3) * t153;
t163 = t186 * pkin(4) + t284;
t198 = -pkin(4) * t248 - t305 / 0.2e1 + t190 * t231;
t23 = (t229 - t172 / 0.2e1) * t167 + t198 + t302;
t212 = -t23 * qJD(1) + t163 * qJD(3);
t211 = t323 / 0.2e1 + t322 / 0.2e1;
t203 = t211 * t192;
t29 = t331 - t203;
t208 = pkin(3) * t265 - t29 * qJD(1);
t195 = t211 * t190 + t102;
t27 = -t106 / 0.2e1 + t99 / 0.2e1 + t195;
t207 = pkin(3) * t264 - t27 * qJD(1);
t86 = t227 * t169;
t206 = -t86 * qJD(1) + t242;
t205 = (-qJD(4) - t258) * t89;
t126 = t235 - t264;
t204 = qJD(4) * t160 + t238;
t202 = qJD(1) * t165 * t281 + t86 * qJD(3);
t97 = t179 * t165;
t201 = t97 * qJD(1) + t218;
t200 = qJD(1) * t225 - t179 * qJD(3);
t152 = t160 * qJD(3);
t149 = t192 * t256;
t127 = -t183 - t233;
t120 = t128 * pkin(4);
t94 = t100 / 0.2e1;
t85 = t98 * qJD(2);
t81 = t89 * qJD(2);
t79 = t87 * qJD(2);
t76 = t87 * qJD(4);
t75 = t86 * qJD(4);
t72 = -t262 - t271;
t66 = t68 * qJD(2);
t64 = t221 + t160;
t51 = -t89 * qJD(3) - t167 * t183 + t57;
t37 = t149 - t76 + t297;
t30 = 0.2e1 * t101 + t94 - t203;
t28 = t195 + t302;
t24 = -t198 + t302 + (t172 / 0.2e1 + t229) * t167;
t20 = qJ(5) * t228 + t167 * t329 + t101 + t159 + t197 + t247 + t94;
t17 = t194 - t209;
t13 = -t193 + t196;
t10 = t52 * t327 - t310 / 0.2e1 + t223 + t319;
t5 = -t52 * t192 / 0.2e1 - t313 / 0.2e1 + pkin(4) * t228;
t2 = t230 * t159 + t334 * t329 + (t247 + t332) * pkin(4);
t33 = [0, 0, 0, 0, t175 * qJD(2), t170 * qJD(2), -t237, -t252 * qJD(3), 0, 0, 0, t181 * t256, -t181 * t156, -t165 * t236 - t187 * t237, -t97 * qJD(4) + t167 * t218, qJD(3) * t69 - t167 * t241, -t67 * qJD(3) - t167 * t240, t237, qJD(3) * t18 + qJD(4) * t32 - t66, qJD(3) * t19 + qJD(4) * t31 - t85, t11 * qJD(3) + t25 * qJD(4) - t169 * t232 - t66, qJD(3) * t12 + qJD(4) * t26 + t167 * t234 - t85, -qJD(3) * t6 + qJD(4) * t7 + qJD(5) * t96, qJD(2) * t15 + qJD(3) * t3 + qJD(4) * t8 - qJD(5) * t22; 0, 0, 0, 0, t254, t255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t297, -t57, -t297, -t57, 0, qJD(3) * t17 + qJD(4) * t10 + qJD(5) * t64 + t301; 0, 0, 0, 0, 0, 0, -t238, -t272, -t156, -t256, 0, -qJD(3) * t110 + t181 * t257, qJD(3) * t109 - t181 * t258, -t75 + (-t187 * t257 - t242) * t167, (t154 - t155) * qJD(3) + (-qJD(4) + t258) * t225, t190 * t256 + t296, t149 - t298, t204, t286 + (t190 * t219 - t278) * qJD(3) + t30 * qJD(4), t283 + (t192 * t219 + t282) * qJD(3) + t28 * qJD(4), t293 + (-t172 * t169 - t182 * t87 - t316) * qJD(3) + t20 * qJD(4) - t87 * qJD(5), t292 + (-t173 * t169 - t182 * t92 + t304) * qJD(3) + t24 * qJD(4) - t232, -t308 + (-t44 * t190 + t192 * t56 + (t288 - t289) * t167) * qJD(3) + t5 * qJD(4), t315 + t17 * qJD(2) + (-t172 * t44 + t173 * t56 + t182 * t71) * qJD(3) + t2 * qJD(4) + t13 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, -t201, t205, -t217, t152, qJD(3) * t30 - qJD(4) * t59 + t299, qJD(3) * t28 + qJD(4) * t58 + t274, qJD(3) * t20 + t276 - t295, qJD(3) * t24 + qJD(4) * t52 + t275, pkin(4) * t241 + qJD(3) * t5 + t318, -pkin(4) * t295 + qJD(2) * t10 + qJD(3) * t2 + t303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t224, t126 * t167, t267, qJD(2) * t64 + qJD(3) * t13 - t277; 0, 0, 0, 0, -t254, -t255, 0, 0, 0, 0, 0, t256, -t156, 0, 0, 0, 0, 0, t37, t51, t37, t51, t95 * qJD(3), -qJD(3) * t16 - qJD(4) * t9 + qJD(5) * t65 - t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257, -t258, 0, 0, 0, 0, 0, t150, -t270, t150, -t270, t268, -t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, t127, t72, t127, 0, -t251 - t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t273; 0, 0, 0, 0, 0, 0, t238, t272, 0, 0, 0, -t222 * t169, t222 * t167, t187 * t238 - t75, 0.2e1 * t192 * t205, qJD(4) * t92 - t296, -t76 + t298, -t204, t29 * qJD(4) - t243 - t286, qJD(4) * t27 - t283 + t81, t21 * qJD(4) - t243 - t293, -qJD(4) * t23 - t292 + t81, -qJD(2) * t95 - qJD(4) * t4 + t308, qJD(2) * t16 - qJD(4) * t1 + qJD(5) * t14 - t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, t258, 0, 0, 0, 0, 0, -t150, t270, -t150, t270, -t268, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236, t179 * qJD(4), 0, 0, 0, -pkin(3) * t262, -pkin(3) * t183, -t153 * qJD(4), t163 * qJD(4), qJD(5) * t178, qJD(4) * t61 + qJD(5) * t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, -t200, t183 + t269, t72, -t259, -pkin(7) * t183 - t208, pkin(7) * t262 - t207, t213 - t263, qJD(4) * t172 + t212, -pkin(4) * t183 - t312, -pkin(4) * t263 + t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t253, t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, t201, -qJD(3) * t92 + t167 * t235, t224, t152, -qJD(3) * t29 - t299 + t79, -t27 * qJD(3) + t244 - t274, -t21 * qJD(3) - t239 - t276 + t79, t23 * qJD(3) + t234 + t244 - t275, qJD(3) * t4 - t318, -pkin(4) * t239 + t9 * qJD(2) + t1 * qJD(3) - t303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, t233, t271, t233, 0, t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206, t200, -t269, t271, t259, t208, t207, -t213 - t261, -t212 - t260, t312, -pkin(4) * t261 - t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128, t126, 0, -t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t217, t205, -t267, pkin(4) * t240 - t65 * qJD(2) - t14 * qJD(3) + t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t262, t183, -t253, -t214 + t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, -t126, 0, t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t33;
