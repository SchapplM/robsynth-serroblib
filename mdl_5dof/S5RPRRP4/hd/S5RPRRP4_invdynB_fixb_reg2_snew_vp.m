% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:33
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:32:59
% EndTime: 2022-01-23 09:33:08
% DurationCPUTime: 9.31s
% Computational Cost: add. (29115->513), mult. (71637->742), div. (0->0), fcn. (49311->8), ass. (0->391)
t687 = 2 * qJD(2);
t587 = sin(qJ(1));
t590 = cos(qJ(1));
t561 = g(1) * t590 + g(2) * t587;
t591 = qJD(1) ^ 2;
t544 = -pkin(1) * t591 + qJDD(1) * qJ(2) - t561;
t693 = (qJD(1) * t687) + t544;
t585 = sin(qJ(4));
t586 = sin(qJ(3));
t588 = cos(qJ(4));
t589 = cos(qJ(3));
t583 = sin(pkin(8));
t635 = qJD(1) * t583;
t527 = (-t585 * t589 - t586 * t588) * t635;
t618 = t586 * t635;
t536 = t589 * t583 * qJDD(1) - qJD(3) * t618;
t628 = qJDD(1) * t586;
t633 = qJD(1) * t589;
t600 = qJD(3) * t633 + t628;
t594 = t600 * t583;
t469 = t527 * qJD(4) + t588 * t536 - t585 * t594;
t584 = cos(pkin(8));
t634 = qJD(1) * t584;
t570 = -qJD(3) + t634;
t563 = -qJD(4) + t570;
t652 = t527 * t563;
t694 = t469 - t652;
t629 = qJDD(1) * t584;
t569 = -qJDD(3) + t629;
t559 = -qJDD(4) + t569;
t617 = t583 * t633;
t529 = -t585 * t618 + t588 * t617;
t653 = t527 * t529;
t595 = -t559 + t653;
t692 = t595 * pkin(4);
t609 = t570 * t618;
t501 = t536 + t609;
t491 = t501 * t589;
t658 = t595 * t585;
t657 = t595 * t588;
t526 = t529 ^ 2;
t558 = t563 ^ 2;
t489 = -t526 - t558;
t474 = t559 + t653;
t660 = t474 * t585;
t430 = t489 * t588 + t660;
t659 = t474 * t588;
t431 = -t489 * t585 + t659;
t387 = t430 * t589 + t431 * t586;
t691 = -pkin(2) * t387 - pkin(3) * t430;
t525 = t527 ^ 2;
t473 = -t558 - t525;
t421 = t473 * t585 + t657;
t422 = t473 * t588 - t658;
t377 = t421 * t589 + t422 * t586;
t690 = -pkin(2) * t377 - pkin(3) * t421;
t612 = t536 * t585 + t588 * t594;
t433 = (qJD(4) + t563) * t529 + t612;
t468 = -qJD(4) * t529 - t612;
t495 = -pkin(4) * t563 - qJ(5) * t529;
t689 = -t468 * pkin(4) - t525 * qJ(5) + t495 * t529 + qJDD(5);
t567 = t570 ^ 2;
t688 = t586 ^ 2;
t684 = pkin(2) * t583;
t683 = pkin(2) * t584;
t437 = -t652 - t469;
t392 = -t433 * t585 + t437 * t588;
t394 = -t433 * t588 - t437 * t585;
t345 = -t392 * t586 + t394 * t589;
t470 = -t525 - t526;
t332 = t345 * t584 + t470 * t583;
t343 = t392 * t589 + t394 * t586;
t291 = t332 * t587 - t343 * t590;
t680 = pkin(5) * t291;
t378 = -t421 * t586 + t422 * t589;
t432 = (qJD(4) - t563) * t529 + t612;
t350 = t378 * t584 + t432 * t583;
t315 = t350 * t587 - t377 * t590;
t679 = pkin(5) * t315;
t389 = -t430 * t586 + t431 * t589;
t356 = t389 * t584 + t583 * t694;
t320 = t356 * t587 - t387 * t590;
t678 = pkin(5) * t320;
t677 = pkin(6) * t343;
t676 = pkin(6) * t377;
t675 = pkin(6) * t387;
t674 = pkin(7) * t392;
t673 = pkin(7) * t421;
t672 = pkin(7) * t430;
t671 = g(3) * t584;
t331 = t345 * t583 - t470 * t584;
t670 = qJ(2) * t331;
t349 = t378 * t583 - t432 * t584;
t669 = qJ(2) * t349;
t355 = t389 * t583 - t584 * t694;
t668 = qJ(2) * t355;
t667 = qJDD(1) * pkin(1);
t506 = -g(3) * t583 + t693 * t584;
t607 = -pkin(6) * t583 - t683;
t548 = t607 * qJD(1);
t479 = t548 * t634 + t506;
t560 = g(1) * t587 - t590 * g(2);
t596 = -qJ(2) * t591 + qJDD(2) - t560;
t604 = -pkin(1) + t607;
t510 = qJDD(1) * t604 + t596;
t497 = t589 * t510;
t580 = t583 ^ 2;
t619 = t570 * t635;
t639 = t589 * t591;
t414 = -pkin(3) * t569 - pkin(7) * t536 + t497 + (-pkin(3) * t580 * t639 + pkin(7) * t619 - t479) * t586;
t451 = t589 * t479 + t586 * t510;
t533 = -pkin(3) * t570 - pkin(7) * t617;
t643 = t580 * t591;
t568 = t688 * t643;
t415 = -pkin(3) * t568 - pkin(7) * t594 + t570 * t533 + t451;
t366 = -t588 * t414 + t585 * t415;
t367 = t585 * t414 + t588 * t415;
t311 = -t366 * t588 + t367 * t585;
t666 = t311 * t586;
t665 = t311 * t589;
t620 = t469 * qJ(5) + t366;
t602 = -qJ(5) * t652 - t620;
t632 = qJD(5) * t529;
t334 = t602 - 0.2e1 * t632 + t692;
t664 = t334 * t585;
t663 = t334 * t588;
t608 = pkin(3) * t594 - pkin(7) * t568 + t671;
t611 = -t533 * t589 - t548;
t428 = (t544 + (t687 - t611) * qJD(1)) * t583 + t608;
t662 = t428 * t585;
t661 = t428 * t588;
t478 = t671 + (t544 + (t687 + t548) * qJD(1)) * t583;
t656 = t478 * t586;
t655 = t478 * t589;
t621 = t586 * t639;
t557 = t580 * t621;
t534 = -t557 + t569;
t651 = t534 * t586;
t650 = t534 * t589;
t535 = -t557 - t569;
t649 = t535 * t586;
t648 = t535 * t589;
t537 = -t596 + t667;
t647 = t537 * t587;
t646 = t537 * t590;
t645 = t563 * t585;
t644 = t563 * t588;
t642 = t583 * t584;
t641 = t583 * t587;
t640 = t583 * t590;
t638 = -pkin(1) * t343 + qJ(2) * t332;
t637 = -pkin(1) * t377 + qJ(2) * t350;
t636 = -pkin(1) * t387 + qJ(2) * t356;
t627 = qJDD(1) * t587;
t626 = qJDD(1) * t590;
t624 = t583 * t653;
t623 = t584 * t653;
t582 = t589 ^ 2;
t622 = t582 * t643;
t616 = -pkin(3) * t470 + pkin(7) * t394;
t615 = -pkin(3) * t432 + pkin(7) * t422;
t614 = -pkin(3) * t694 + pkin(7) * t431;
t613 = t537 + t667;
t312 = t366 * t585 + t588 * t367;
t450 = t479 * t586 - t497;
t505 = t693 * t583 + t671;
t462 = t505 * t583 + t584 * t506;
t518 = -t560 * t587 - t590 * t561;
t579 = t583 * t580;
t610 = t579 * t621;
t307 = -pkin(2) * t343 - pkin(3) * t392;
t555 = -t587 * t591 + t626;
t606 = -pkin(5) * t555 - g(3) * t587;
t605 = t584 * t557;
t399 = -t450 * t589 + t451 * t586;
t400 = t450 * t586 + t451 * t589;
t461 = t505 * t584 - t506 * t583;
t517 = t560 * t590 - t561 * t587;
t554 = t590 * t591 + t627;
t581 = t584 ^ 2;
t547 = (t580 + t581) * t584 * t591;
t514 = -t547 * t587 + t584 * t626;
t603 = t547 * t590 + t584 * t627;
t601 = t468 * qJ(5) + 0.2e1 * qJD(5) * t527 + t495 * t563 + t367;
t599 = -pkin(1) * t331 + pkin(2) * t470 - pkin(6) * t345;
t598 = -pkin(1) * t349 + pkin(2) * t432 - pkin(6) * t378;
t597 = -pkin(1) * t355 + pkin(2) * t694 - pkin(6) * t389;
t373 = t428 + t689;
t576 = t581 * t591;
t575 = t581 * qJDD(1);
t574 = t580 * qJDD(1);
t553 = t576 - t643;
t552 = t576 + t643;
t551 = t575 - t574;
t550 = t575 + t574;
t546 = (t581 * t583 + t579) * t591;
t545 = t570 * t617;
t543 = t568 - t622;
t542 = t568 + t622;
t541 = t567 - t622;
t540 = -t568 - t567;
t539 = t568 - t567;
t538 = -pkin(5) * t554 + g(3) * t590;
t524 = t555 * t642;
t523 = t554 * t642;
t521 = -t622 - t567;
t520 = 0.2e1 * t632;
t515 = t546 * t590 + t583 * t627;
t513 = t546 * t587 - t583 * t626;
t512 = t550 * t590 - t552 * t587;
t511 = t550 * t587 + t552 * t590;
t509 = (-t582 - t688) * t619;
t504 = -t526 + t558;
t503 = t525 - t558;
t500 = t545 - t594;
t499 = t545 + t594;
t498 = t609 - t536;
t493 = -t536 * t586 + t582 * t619;
t492 = (t688 * t570 * qJD(1) + t589 * t600) * t583;
t490 = (t628 + (qJD(3) - t570) * t633) * t586 * t583;
t488 = t540 * t589 - t649;
t487 = t539 * t589 + t651;
t486 = -t541 * t586 + t648;
t485 = t540 * t586 + t648;
t484 = -t539 * t586 + t650;
t483 = -t541 * t589 - t649;
t482 = -t526 + t525;
t481 = -t521 * t586 + t650;
t480 = t521 * t589 + t651;
t472 = t491 * t584 + t610;
t471 = t490 * t584 - t610;
t467 = (-t527 * t588 - t529 * t585) * t563;
t466 = (-t527 * t585 + t529 * t588) * t563;
t459 = t500 * t589 - t501 * t586;
t458 = -t498 * t586 - t499 * t589;
t457 = -t500 * t586 - t491;
t456 = t498 * t589 - t499 * t586;
t455 = t488 * t584 - t500 * t583;
t454 = t487 * t584 - t499 * t583;
t453 = t486 * t584 - t498 * t583;
t452 = t488 * t583 + t500 * t584;
t449 = t481 * t584 + t501 * t583;
t448 = t481 * t583 - t501 * t584;
t447 = t503 * t588 + t660;
t446 = -t504 * t585 + t657;
t445 = t503 * t585 - t659;
t444 = t504 * t588 + t658;
t443 = t462 * t590 - t647;
t442 = t462 * t587 + t646;
t441 = -pkin(6) * t485 + t656;
t440 = t459 * t584 - t543 * t583;
t439 = t458 * t584 - t542 * t583;
t438 = t458 * t583 + t542 * t584;
t427 = -pkin(6) * t480 + t655;
t426 = t469 * t588 + t529 * t645;
t425 = t469 * t585 - t529 * t644;
t424 = -t468 * t585 + t527 * t644;
t423 = t468 * t588 + t527 * t645;
t419 = -pkin(2) * t485 + t450;
t418 = t455 * t590 + t485 * t587;
t417 = t455 * t587 - t485 * t590;
t416 = -pkin(2) * t480 + t451;
t413 = -t466 * t586 + t467 * t589;
t412 = -t466 * t589 - t467 * t586;
t407 = t449 * t590 + t480 * t587;
t406 = t449 * t587 - t480 * t590;
t405 = -pkin(4) * t694 + qJ(5) * t474;
t404 = t413 * t584 - t559 * t583;
t403 = t413 * t583 + t559 * t584;
t402 = t439 * t590 + t456 * t587;
t401 = t439 * t587 - t456 * t590;
t398 = -t445 * t586 + t447 * t589;
t397 = -t444 * t586 + t446 * t589;
t396 = -t445 * t589 - t447 * t586;
t395 = -t444 * t589 - t446 * t586;
t393 = -t432 * t588 - t585 * t694;
t391 = -t432 * t585 + t588 * t694;
t388 = t661 - t672;
t385 = -pkin(1) * t452 - pkin(2) * t500 - pkin(6) * t488 + t655;
t384 = -t425 * t586 + t426 * t589;
t383 = -t423 * t586 + t424 * t589;
t382 = -t425 * t589 - t426 * t586;
t381 = -t423 * t589 - t424 * t586;
t380 = t662 - t673;
t379 = -pkin(1) * t448 + pkin(2) * t501 - pkin(6) * t481 - t656;
t376 = t400 * t584 + t478 * t583;
t375 = t400 * t583 - t478 * t584;
t372 = -pkin(6) * t456 - t399;
t371 = t384 * t584 - t624;
t370 = t383 * t584 + t624;
t369 = t384 * t583 + t623;
t368 = t383 * t583 - t623;
t364 = -qJ(5) * t489 + t373;
t363 = t398 * t584 - t433 * t583;
t362 = t397 * t584 - t437 * t583;
t361 = t398 * t583 + t433 * t584;
t360 = t397 * t583 + t437 * t584;
t359 = t614 + t662;
t358 = t404 * t590 - t412 * t587;
t357 = t404 * t587 + t412 * t590;
t353 = -qJ(2) * t452 - t419 * t583 + t441 * t584;
t352 = t615 - t661;
t351 = -qJ(2) * t448 - t416 * t583 + t427 * t584;
t347 = -pkin(1) * t438 - pkin(2) * t542 - pkin(6) * t458 - t400;
t346 = -pkin(4) * t432 + qJ(5) * t473 - t608 + (qJD(1) * t611 - t693) * t583 - t689;
t344 = -t391 * t586 + t393 * t589;
t342 = -t391 * t589 - t393 * t586;
t340 = t376 * t590 + t399 * t587;
t339 = t376 * t587 - t399 * t590;
t338 = -qJ(2) * t438 + t372 * t584 + t456 * t684;
t337 = -pkin(4) * t525 + t601;
t336 = t344 * t584 - t482 * t583;
t335 = t344 * t583 + t482 * t584;
t333 = -pkin(1) * t375 + pkin(2) * t478 - pkin(6) * t400;
t329 = t371 * t590 - t382 * t587;
t328 = t370 * t590 - t381 * t587;
t327 = t371 * t587 + t382 * t590;
t326 = t370 * t587 + t381 * t590;
t325 = t363 * t590 - t396 * t587;
t324 = t362 * t590 - t395 * t587;
t323 = t363 * t587 + t396 * t590;
t322 = t362 * t587 + t395 * t590;
t321 = t356 * t590 + t387 * t587;
t319 = pkin(5) * t321;
t318 = t364 * t588 - t405 * t585 - t672;
t317 = t520 + (-t437 + t652) * qJ(5) - t692 + t620;
t316 = t350 * t590 + t377 * t587;
t314 = -qJ(5) * t657 - t346 * t585 - t673;
t313 = pkin(5) * t316;
t310 = t367 + t691;
t309 = -qJ(2) * t375 + (-pkin(6) * t584 + t684) * t399;
t308 = -qJ(5) * t433 + (-t470 - t525) * pkin(4) + t601;
t306 = t366 + t690;
t305 = t364 * t585 + t405 * t588 + t614;
t304 = -qJ(5) * t658 + t346 * t588 + t615;
t303 = -pkin(3) * t428 + pkin(7) * t312;
t302 = -pkin(4) * t373 + qJ(5) * t337;
t301 = -pkin(4) * t437 + t307;
t300 = -t359 * t586 + t388 * t589 - t675;
t299 = -t352 * t586 + t380 * t589 - t676;
t298 = -t311 - t674;
t297 = (-t489 - t525) * pkin(4) + t601 + t691;
t296 = t312 + t616;
t295 = t520 - t602 + t690 - 0.2e1 * t692;
t294 = t336 * t590 - t342 * t587;
t293 = t336 * t587 + t342 * t590;
t292 = t332 * t590 + t343 * t587;
t290 = pkin(5) * t292;
t289 = t337 * t588 - t664;
t288 = t337 * t585 + t663;
t287 = -t359 * t589 - t388 * t586 + t597;
t286 = t312 * t589 - t666;
t285 = t312 * t586 + t665;
t284 = -t352 * t589 - t380 * t586 + t598;
t283 = t286 * t584 + t428 * t583;
t282 = t286 * t583 - t428 * t584;
t281 = -t308 * t585 + t317 * t588 - t674;
t280 = -t305 * t586 + t318 * t589 - t675;
t279 = t308 * t588 + t317 * t585 + t616;
t278 = -t304 * t586 + t314 * t589 - t676;
t277 = t300 * t584 - t310 * t583 - t668;
t276 = -pkin(2) * t285 - pkin(3) * t311;
t275 = t299 * t584 - t306 * t583 - t669;
t274 = -t305 * t589 - t318 * t586 + t597;
t273 = -t288 * t586 + t289 * t589;
t272 = t288 * t589 + t289 * t586;
t271 = -t304 * t589 - t314 * t586 + t598;
t270 = -t296 * t586 + t298 * t589 - t677;
t269 = -pkin(7) * t288 - qJ(5) * t663 - t302 * t585;
t268 = t273 * t584 + t373 * t583;
t267 = t273 * t583 - t373 * t584;
t266 = -pkin(3) * t373 + pkin(7) * t289 - qJ(5) * t664 + t302 * t588;
t265 = -pkin(6) * t285 - pkin(7) * t665 - t303 * t586;
t264 = t283 * t590 + t285 * t587;
t263 = t283 * t587 - t285 * t590;
t262 = t280 * t584 - t297 * t583 - t668;
t261 = -t296 * t589 - t298 * t586 + t599;
t260 = t278 * t584 - t295 * t583 - t669;
t259 = t270 * t584 - t307 * t583 - t670;
t258 = -pkin(2) * t272 - pkin(3) * t288 - pkin(4) * t334;
t257 = -t279 * t586 + t281 * t589 - t677;
t256 = -t279 * t589 - t281 * t586 + t599;
t255 = -pkin(1) * t282 + pkin(2) * t428 - pkin(6) * t286 + pkin(7) * t666 - t303 * t589;
t254 = t268 * t590 + t272 * t587;
t253 = t268 * t587 - t272 * t590;
t252 = t257 * t584 - t301 * t583 - t670;
t251 = -qJ(2) * t282 + t265 * t584 - t276 * t583;
t250 = -pkin(6) * t272 - t266 * t586 + t269 * t589;
t249 = -pkin(1) * t267 + pkin(2) * t373 - pkin(6) * t273 - t266 * t589 - t269 * t586;
t248 = -qJ(2) * t267 + t250 * t584 - t258 * t583;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t554, -t555, 0, t518, 0, 0, 0, 0, 0, 0, -t603, t515, t512, t443, 0, 0, 0, 0, 0, 0, t418, t407, t402, t340, 0, 0, 0, 0, 0, 0, t316, t321, t292, t264, 0, 0, 0, 0, 0, 0, t316, t321, t292, t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t555, -t554, 0, t517, 0, 0, 0, 0, 0, 0, t514, t513, t511, t442, 0, 0, 0, 0, 0, 0, t417, t406, t401, t339, 0, 0, 0, 0, 0, 0, t315, t320, t291, t263, 0, 0, 0, 0, 0, 0, t315, t320, t291, t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t461, 0, 0, 0, 0, 0, 0, t452, t448, t438, t375, 0, 0, 0, 0, 0, 0, t349, t355, t331, t282, 0, 0, 0, 0, 0, 0, t349, t355, t331, t267; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t555, 0, -t554, 0, t606, -t538, -t517, -pkin(5) * t517, t524, t551 * t590 - t553 * t587, t515, -t524, t603, 0, -pkin(5) * t514 - t505 * t587 - t537 * t640, -pkin(5) * t513 - t506 * t587 - t584 * t646, -pkin(5) * t511 + t461 * t590, -pkin(5) * t442 - (pkin(1) * t587 - qJ(2) * t590) * t461, t472 * t590 - t493 * t587, t440 * t590 - t457 * t587, t453 * t590 - t483 * t587, t471 * t590 - t492 * t587, t454 * t590 - t484 * t587, -t509 * t587 - t569 * t640, -pkin(5) * t417 + t353 * t590 - t385 * t587, -pkin(5) * t406 + t351 * t590 - t379 * t587, -pkin(5) * t401 + t338 * t590 - t347 * t587, -pkin(5) * t339 + t309 * t590 - t333 * t587, t329, t294, t324, t328, t325, t358, t275 * t590 - t284 * t587 - t679, t277 * t590 - t287 * t587 - t678, t259 * t590 - t261 * t587 - t680, -pkin(5) * t263 + t251 * t590 - t255 * t587, t329, t294, t324, t328, t325, t358, t260 * t590 - t271 * t587 - t679, t262 * t590 - t274 * t587 - t678, t252 * t590 - t256 * t587 - t680, -pkin(5) * t253 + t248 * t590 - t249 * t587; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t554, 0, t555, 0, t538, t606, t518, pkin(5) * t518, t523, t551 * t587 + t553 * t590, t513, -t523, -t514, 0, -pkin(5) * t603 + t505 * t590 - t537 * t641, pkin(5) * t515 + t506 * t590 - t584 * t647, pkin(5) * t512 + t461 * t587, pkin(5) * t443 - (-pkin(1) * t590 - qJ(2) * t587) * t461, t472 * t587 + t493 * t590, t440 * t587 + t457 * t590, t453 * t587 + t483 * t590, t471 * t587 + t492 * t590, t454 * t587 + t484 * t590, t509 * t590 - t569 * t641, pkin(5) * t418 + t353 * t587 + t385 * t590, pkin(5) * t407 + t351 * t587 + t379 * t590, pkin(5) * t402 + t338 * t587 + t347 * t590, pkin(5) * t340 + t309 * t587 + t333 * t590, t327, t293, t322, t326, t323, t357, t275 * t587 + t284 * t590 + t313, t277 * t587 + t287 * t590 + t319, t259 * t587 + t261 * t590 + t290, pkin(5) * t264 + t251 * t587 + t255 * t590, t327, t293, t322, t326, t323, t357, t260 * t587 + t271 * t590 + t313, t262 * t587 + t274 * t590 + t319, t252 * t587 + t256 * t590 + t290, pkin(5) * t254 + t248 * t587 + t249 * t590; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t560, t561, 0, 0, t574, 0.2e1 * t583 * t629, 0, t575, 0, 0, -qJ(2) * t547 + t584 * t613, qJ(2) * t546 - t583 * t613, pkin(1) * t552 + qJ(2) * t550 + t462, pkin(1) * t537 + qJ(2) * t462, t491 * t583 - t605, t459 * t583 + t543 * t584, t486 * t583 + t498 * t584, t490 * t583 + t605, t487 * t583 + t499 * t584, t584 * t569, -pkin(1) * t485 + qJ(2) * t455 + t419 * t584 + t441 * t583, -pkin(1) * t480 + qJ(2) * t449 + t416 * t584 + t427 * t583, qJ(2) * t439 + t372 * t583 + (-pkin(1) - t683) * t456, qJ(2) * t376 + t399 * t604, t369, t335, t360, t368, t361, t403, t299 * t583 + t306 * t584 + t637, t300 * t583 + t310 * t584 + t636, t270 * t583 + t307 * t584 + t638, -pkin(1) * t285 + qJ(2) * t283 + t265 * t583 + t276 * t584, t369, t335, t360, t368, t361, t403, t278 * t583 + t295 * t584 + t637, t280 * t583 + t297 * t584 + t636, t257 * t583 + t301 * t584 + t638, -pkin(1) * t272 + qJ(2) * t268 + t250 * t583 + t258 * t584;];
tauB_reg = t1;
