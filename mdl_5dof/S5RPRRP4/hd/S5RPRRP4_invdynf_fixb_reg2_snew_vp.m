% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:33
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:33:21
% EndTime: 2022-01-23 09:33:23
% DurationCPUTime: 2.33s
% Computational Cost: add. (8523->205), mult. (20990->274), div. (0->0), fcn. (14498->8), ass. (0->160)
t1325 = qJD(1) ^ 2;
t1317 = sin(pkin(8));
t1314 = t1317 ^ 2;
t1318 = cos(pkin(8));
t1315 = t1318 ^ 2;
t1348 = t1314 + t1315;
t1297 = t1348 * t1325;
t1312 = t1318 * qJDD(1);
t1342 = -t1312 + qJDD(3);
t1336 = -qJDD(4) - t1342;
t1319 = sin(qJ(4));
t1320 = sin(qJ(3));
t1322 = cos(qJ(4));
t1323 = cos(qJ(3));
t1357 = qJD(1) * t1317;
t1279 = (-t1319 * t1323 - t1320 * t1322) * t1357;
t1355 = qJD(1) * t1323;
t1339 = t1317 * t1355;
t1356 = qJD(1) * t1320;
t1340 = t1317 * t1356;
t1281 = -t1319 * t1340 + t1322 * t1339;
t1353 = t1281 * t1279;
t1257 = -t1336 + t1353;
t1365 = t1279 ^ 2;
t1364 = t1281 ^ 2;
t1351 = t1318 * qJD(1);
t1308 = -qJD(3) + t1351;
t1304 = -qJD(4) + t1308;
t1363 = t1304 ^ 2;
t1362 = t1308 ^ 2;
t1361 = t1320 ^ 2;
t1360 = 2 * qJD(2);
t1359 = -2 * qJD(5);
t1358 = t1318 * g(3);
t1354 = t1279 * t1304;
t1352 = t1314 * t1325;
t1333 = -pkin(2) * t1318 - pkin(6) * t1317;
t1295 = t1333 * qJD(1);
t1350 = t1360 + t1295;
t1349 = qJD(4) + t1304;
t1321 = sin(qJ(1));
t1324 = cos(qJ(1));
t1302 = -t1324 * g(1) - t1321 * g(2);
t1292 = -t1325 * pkin(1) + qJDD(1) * qJ(2) + t1302;
t1274 = -t1317 * g(3) + t1318 * t1292 + t1351 * t1360;
t1260 = t1295 * t1351 + t1274;
t1301 = t1321 * g(1) - t1324 * g(2);
t1331 = -t1325 * qJ(2) + qJDD(2) - t1301;
t1276 = (-pkin(1) + t1333) * qJDD(1) + t1331;
t1268 = t1323 * t1276;
t1303 = qJD(3) * t1340;
t1345 = t1317 * qJDD(1);
t1288 = t1323 * t1345 - t1303;
t1338 = t1323 * t1352;
t1230 = t1268 - t1288 * pkin(7) + t1342 * pkin(3) + (t1308 * pkin(7) * t1357 - pkin(3) * t1338 - t1260) * t1320;
t1246 = t1323 * t1260 + t1320 * t1276;
t1285 = -t1308 * pkin(3) - pkin(7) * t1339;
t1347 = qJDD(1) * t1320;
t1330 = (-qJD(3) * t1355 - t1347) * t1317;
t1337 = t1361 * t1352;
t1231 = -pkin(3) * t1337 + pkin(7) * t1330 + t1308 * t1285 + t1246;
t1215 = t1319 * t1230 + t1322 * t1231;
t1346 = qJDD(1) * t1323;
t1344 = t1321 * qJDD(1);
t1343 = t1324 * qJDD(1);
t1341 = t1308 * t1356;
t1214 = t1322 * t1230 - t1319 * t1231;
t1335 = t1319 * t1288 - t1322 * t1330;
t1334 = t1320 * t1338;
t1332 = -t1281 * qJD(4) - t1335;
t1329 = t1322 * t1288 + t1319 * t1330;
t1234 = t1358 - pkin(3) * t1330 - pkin(7) * t1337 + (t1292 + (t1285 * t1323 + t1350) * qJD(1)) * t1317;
t1328 = t1279 * qJD(4) + t1329;
t1316 = t1323 ^ 2;
t1307 = t1318 * t1325 * t1317;
t1299 = -t1324 * t1325 - t1344;
t1298 = -t1321 * t1325 + t1343;
t1296 = t1348 * qJDD(1);
t1294 = t1318 * t1297;
t1293 = t1317 * t1297;
t1291 = (t1316 + t1361) * t1352;
t1290 = -t1337 - t1362;
t1289 = qJDD(1) * pkin(1) - t1331;
t1287 = -t1334 + t1342;
t1286 = -t1334 - t1342;
t1277 = -t1316 * t1352 - t1362;
t1273 = -0.2e1 * qJD(2) * t1357 - t1317 * t1292 - t1358;
t1272 = -t1303 + (t1341 + t1346) * t1317;
t1271 = (-t1347 + (-qJD(3) - t1308) * t1355) * t1317;
t1270 = (t1347 + (qJD(3) - t1308) * t1355) * t1317;
t1269 = t1303 + (t1341 - t1346) * t1317;
t1266 = -t1304 * pkin(4) - t1281 * qJ(5);
t1265 = -t1363 - t1364;
t1264 = -t1320 * t1287 + t1323 * t1290;
t1263 = t1323 * t1287 + t1320 * t1290;
t1262 = -t1320 * t1277 + t1323 * t1286;
t1261 = t1323 * t1277 + t1320 * t1286;
t1259 = t1358 + (t1350 * qJD(1) + t1292) * t1317;
t1256 = t1336 + t1353;
t1255 = -t1363 - t1365;
t1254 = -t1364 - t1365;
t1252 = -t1317 * t1273 + t1318 * t1274;
t1251 = t1318 * t1273 + t1317 * t1274;
t1250 = -t1320 * t1269 + t1323 * t1271;
t1249 = t1323 * t1269 + t1320 * t1271;
t1248 = t1318 * t1264 + t1317 * t1270;
t1247 = t1317 * t1264 - t1318 * t1270;
t1245 = -t1320 * t1260 + t1268;
t1244 = t1318 * t1262 + t1317 * t1272;
t1243 = t1317 * t1262 - t1318 * t1272;
t1242 = t1318 * t1250 - t1317 * t1291;
t1241 = t1317 * t1250 + t1318 * t1291;
t1240 = -t1349 * t1279 - t1329;
t1239 = t1328 - t1354;
t1238 = -t1349 * t1281 - t1335;
t1237 = (qJD(4) - t1304) * t1281 + t1335;
t1236 = t1322 * t1256 - t1319 * t1265;
t1235 = t1319 * t1256 + t1322 * t1265;
t1233 = t1322 * t1255 - t1319 * t1257;
t1232 = t1319 * t1255 + t1322 * t1257;
t1226 = -t1320 * t1245 + t1323 * t1246;
t1225 = t1323 * t1245 + t1320 * t1246;
t1224 = t1322 * t1238 - t1319 * t1240;
t1223 = t1319 * t1238 + t1322 * t1240;
t1222 = -t1320 * t1235 + t1323 * t1236;
t1221 = t1323 * t1235 + t1320 * t1236;
t1220 = -t1320 * t1232 + t1323 * t1233;
t1219 = t1323 * t1232 + t1320 * t1233;
t1218 = t1318 * t1226 + t1317 * t1259;
t1217 = t1317 * t1226 - t1318 * t1259;
t1216 = -t1332 * pkin(4) - t1365 * qJ(5) + t1281 * t1266 + qJDD(5) + t1234;
t1213 = t1318 * t1222 + t1317 * t1239;
t1212 = t1317 * t1222 - t1318 * t1239;
t1211 = t1318 * t1220 + t1317 * t1237;
t1210 = t1317 * t1220 - t1318 * t1237;
t1209 = -t1320 * t1223 + t1323 * t1224;
t1208 = t1323 * t1223 + t1320 * t1224;
t1207 = t1304 * t1266 + t1332 * qJ(5) - (pkin(4) * t1279 + t1359) * t1279 + t1215;
t1206 = t1281 * t1359 + t1214 + (-t1328 - t1354) * qJ(5) + t1257 * pkin(4);
t1205 = t1318 * t1209 + t1317 * t1254;
t1204 = t1317 * t1209 - t1318 * t1254;
t1203 = t1324 * t1213 + t1321 * t1221;
t1202 = t1321 * t1213 - t1324 * t1221;
t1201 = t1324 * t1211 + t1321 * t1219;
t1200 = t1321 * t1211 - t1324 * t1219;
t1199 = -t1319 * t1214 + t1322 * t1215;
t1198 = t1322 * t1214 + t1319 * t1215;
t1197 = t1324 * t1205 + t1321 * t1208;
t1196 = t1321 * t1205 - t1324 * t1208;
t1195 = -t1319 * t1206 + t1322 * t1207;
t1194 = t1322 * t1206 + t1319 * t1207;
t1193 = -t1320 * t1198 + t1323 * t1199;
t1192 = t1323 * t1198 + t1320 * t1199;
t1191 = t1318 * t1193 + t1317 * t1234;
t1190 = t1317 * t1193 - t1318 * t1234;
t1189 = -t1320 * t1194 + t1323 * t1195;
t1188 = t1323 * t1194 + t1320 * t1195;
t1187 = t1318 * t1189 + t1317 * t1216;
t1186 = t1317 * t1189 - t1318 * t1216;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1299, -t1298, 0, -t1321 * t1301 + t1324 * t1302, 0, 0, 0, 0, 0, 0, -t1324 * t1294 - t1318 * t1344, t1324 * t1293 + t1317 * t1344, t1324 * t1296 - t1321 * t1297, t1324 * t1252 - t1321 * t1289, 0, 0, 0, 0, 0, 0, t1324 * t1248 + t1321 * t1263, t1324 * t1244 + t1321 * t1261, t1324 * t1242 + t1321 * t1249, t1324 * t1218 + t1321 * t1225, 0, 0, 0, 0, 0, 0, t1201, t1203, t1197, t1324 * t1191 + t1321 * t1192, 0, 0, 0, 0, 0, 0, t1201, t1203, t1197, t1324 * t1187 + t1321 * t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1298, t1299, 0, t1324 * t1301 + t1321 * t1302, 0, 0, 0, 0, 0, 0, -t1321 * t1294 + t1318 * t1343, t1321 * t1293 - t1317 * t1343, t1321 * t1296 + t1324 * t1297, t1321 * t1252 + t1324 * t1289, 0, 0, 0, 0, 0, 0, t1321 * t1248 - t1324 * t1263, t1321 * t1244 - t1324 * t1261, t1321 * t1242 - t1324 * t1249, t1321 * t1218 - t1324 * t1225, 0, 0, 0, 0, 0, 0, t1200, t1202, t1196, t1321 * t1191 - t1324 * t1192, 0, 0, 0, 0, 0, 0, t1200, t1202, t1196, t1321 * t1187 - t1324 * t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, 0, 0, 0, 0, 0, 0, t1247, t1243, t1241, t1217, 0, 0, 0, 0, 0, 0, t1210, t1212, t1204, t1190, 0, 0, 0, 0, 0, 0, t1210, t1212, t1204, t1186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1325, -qJDD(1), 0, t1302, 0, 0, 0, 0, 0, 0, -t1294, t1293, t1296, t1252, 0, 0, 0, 0, 0, 0, t1248, t1244, t1242, t1218, 0, 0, 0, 0, 0, 0, t1211, t1213, t1205, t1191, 0, 0, 0, 0, 0, 0, t1211, t1213, t1205, t1187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1325, 0, t1301, 0, 0, 0, 0, 0, 0, t1312, -t1345, t1297, t1289, 0, 0, 0, 0, 0, 0, -t1263, -t1261, -t1249, -t1225, 0, 0, 0, 0, 0, 0, -t1219, -t1221, -t1208, -t1192, 0, 0, 0, 0, 0, 0, -t1219, -t1221, -t1208, -t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, 0, 0, 0, 0, 0, 0, t1247, t1243, t1241, t1217, 0, 0, 0, 0, 0, 0, t1210, t1212, t1204, t1190, 0, 0, 0, 0, 0, 0, t1210, t1212, t1204, t1186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1315 * t1325, t1307, t1312, t1274, 0, 0, 0, 0, 0, 0, t1264, t1262, t1250, t1226, 0, 0, 0, 0, 0, 0, t1220, t1222, t1209, t1193, 0, 0, 0, 0, 0, 0, t1220, t1222, t1209, t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1307, -t1352, -t1345, t1273, 0, 0, 0, 0, 0, 0, -t1270, -t1272, t1291, -t1259, 0, 0, 0, 0, 0, 0, -t1237, -t1239, -t1254, -t1234, 0, 0, 0, 0, 0, 0, -t1237, -t1239, -t1254, -t1216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1312, t1345, -t1297, -t1289, 0, 0, 0, 0, 0, 0, t1263, t1261, t1249, t1225, 0, 0, 0, 0, 0, 0, t1219, t1221, t1208, t1192, 0, 0, 0, 0, 0, 0, t1219, t1221, t1208, t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1290, t1286, t1271, t1246, 0, 0, 0, 0, 0, 0, t1233, t1236, t1224, t1199, 0, 0, 0, 0, 0, 0, t1233, t1236, t1224, t1195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1287, t1277, t1269, t1245, 0, 0, 0, 0, 0, 0, t1232, t1235, t1223, t1198, 0, 0, 0, 0, 0, 0, t1232, t1235, t1223, t1194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1270, t1272, -t1291, t1259, 0, 0, 0, 0, 0, 0, t1237, t1239, t1254, t1234, 0, 0, 0, 0, 0, 0, t1237, t1239, t1254, t1216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, t1256, t1238, t1215, 0, 0, 0, 0, 0, 0, t1255, t1256, t1238, t1207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1257, t1265, t1240, t1214, 0, 0, 0, 0, 0, 0, t1257, t1265, t1240, t1206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1237, t1239, t1254, t1234, 0, 0, 0, 0, 0, 0, t1237, t1239, t1254, t1216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, t1256, t1238, t1207; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1257, t1265, t1240, t1206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1237, t1239, t1254, t1216;];
f_new_reg = t1;
