% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x21]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2021-01-15 22:15
% Revision: 24b2e7d74a0c1a3b64fa2f8f5ad758691ad61af3 (2021-01-15)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRPP1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPP1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2021-01-15 22:14:52
% EndTime: 2021-01-15 22:15:02
% DurationCPUTime: 2.68s
% Computational Cost: add. (3845->276), mult. (7457->338), div. (0->0), fcn. (7284->6), ass. (0->220)
t220 = sin(pkin(8));
t221 = sin(qJ(3));
t223 = cos(qJ(3));
t331 = cos(pkin(8));
t182 = t220 * t223 + t331 * t221;
t224 = cos(qJ(2));
t341 = t224 * pkin(1);
t144 = t182 * t341;
t235 = -t220 * t221 + t331 * t223;
t145 = t235 * t341;
t247 = t144 * t182 + t145 * t235;
t357 = t247 * qJD(1);
t179 = t182 ^ 2;
t369 = t235 ^ 2 + t179;
t379 = t369 * qJD(4);
t386 = qJD(2) * t247 + t379;
t387 = t386 + t357;
t385 = t379 - t357;
t287 = qJD(1) + qJD(2);
t384 = t287 * t369;
t222 = sin(qJ(2));
t342 = t222 * pkin(1);
t284 = t342 / 0.2e1;
t218 = t223 * qJ(4);
t199 = t223 * pkin(7) + t218;
t185 = t331 * t199;
t198 = (-qJ(4) - pkin(7)) * t221;
t312 = t220 * t198;
t368 = t185 + t312;
t319 = t368 * t235;
t129 = -t331 * t198 + t220 * t199;
t320 = t129 * t182;
t210 = pkin(7) + t342;
t177 = t223 * t210 + t218;
t157 = t331 * t177;
t176 = (-qJ(4) - t210) * t221;
t313 = t220 * t176;
t370 = t157 + t313;
t324 = t370 * t235;
t109 = -t331 * t176 + t220 * t177;
t327 = t109 * t182;
t228 = t320 / 0.2e1 + t327 / 0.2e1 + t319 / 0.2e1 + t324 / 0.2e1 + t284;
t250 = t324 + t327;
t356 = t250 * qJD(1);
t383 = qJD(2) * t228 + t356;
t226 = (-t129 / 0.2e1 - t109 / 0.2e1) * t182 - t235 * (t368 / 0.2e1 + t370 / 0.2e1) + t284;
t380 = qJD(2) * t226 - t356;
t209 = -t331 * pkin(3) - pkin(4);
t343 = t221 * pkin(3);
t213 = t343 / 0.2e1;
t207 = t220 * pkin(3) + qJ(5);
t349 = t207 / 0.2e1;
t45 = t213 + (pkin(4) / 0.2e1 - t209 / 0.2e1) * t182 - (qJ(5) / 0.2e1 + t349) * t235;
t378 = t287 * t45;
t282 = -t331 / 0.2e1;
t350 = t235 / 0.2e1;
t233 = t182 * t282 + t220 * t350;
t345 = -t221 / 0.2e1;
t89 = (t345 + t233) * pkin(3);
t377 = t287 * t89;
t212 = -t223 * pkin(3) - pkin(2);
t112 = -pkin(4) * t235 - t182 * qJ(5) + t212;
t102 = t112 - t341;
t278 = t112 / 0.2e1 + t102 / 0.2e1;
t376 = t278 * t182;
t373 = t287 * t235;
t372 = t287 * t182;
t205 = -t221 ^ 2 + t223 ^ 2;
t371 = t287 * t205;
t362 = qJD(4) * t226;
t248 = t319 + t320;
t361 = qJD(4) * t248;
t360 = qJD(4) * t250;
t358 = t228 * qJD(4);
t353 = -qJD(1) * t226 + qJD(2) * t248;
t264 = t157 / 0.2e1;
t263 = t185 / 0.2e1;
t348 = t209 / 0.2e1;
t211 = -pkin(2) - t341;
t347 = t211 / 0.2e1;
t346 = t220 / 0.2e1;
t344 = t182 * pkin(4);
t340 = pkin(1) * qJD(1);
t339 = pkin(1) * qJD(2);
t338 = pkin(2) * qJD(2);
t337 = qJD(3) * pkin(3);
t318 = t235 * qJ(5);
t113 = -t318 + t343 + t344;
t330 = t102 * t113;
t336 = t330 * qJD(1);
t171 = t182 * qJD(5);
t333 = t45 * qJD(3) - t171;
t332 = (-t207 * t182 + t209 * t235) * qJD(3) + qJD(5) * t235;
t329 = t102 * t235;
t328 = t102 * t182;
t323 = t112 * t235;
t322 = t112 * t182;
t321 = t113 * t112;
t197 = t212 - t341;
t317 = t197 * t235;
t316 = t197 * t182;
t315 = t212 * t235;
t314 = t212 * t182;
t23 = t197 * t343;
t311 = t23 * qJD(1);
t251 = t109 * t144 + t145 * t370;
t24 = t102 * t342 + t251;
t310 = t24 * qJD(1);
t25 = t197 * t342 + t251;
t309 = t25 * qJD(1);
t80 = t113 * t235;
t29 = -t80 + t328;
t308 = t29 * qJD(1);
t81 = t113 * t182;
t30 = -t81 - t329;
t307 = t30 * qJD(1);
t158 = t235 * t343;
t99 = -t158 + t316;
t302 = t99 * qJD(1);
t286 = t222 * t339;
t152 = t235 * t286;
t285 = t222 * t340;
t153 = t235 * t285;
t301 = -t152 - t153;
t170 = t179 * qJD(5);
t271 = t182 * t286;
t300 = t170 - t271;
t266 = t331 * t341;
t246 = -t266 / 0.2e1;
t269 = t341 * t346;
t299 = t221 * t269 + t223 * t246;
t245 = t266 / 0.2e1;
t283 = -t341 / 0.2e1;
t268 = t221 * t283;
t298 = t220 * t268 + t223 * t245;
t297 = t221 * t245 + t223 * t269;
t267 = t223 * t283;
t296 = t220 * t267 + t221 * t246;
t295 = qJD(1) * t211;
t159 = t182 * t343;
t100 = t159 + t317;
t294 = t100 * qJD(1);
t293 = t109 * qJD(3);
t292 = t129 * qJD(3);
t291 = t235 * qJD(3);
t290 = t235 * qJD(4);
t289 = t182 * qJD(4);
t288 = t221 * qJD(3);
t217 = t223 * qJD(3);
t281 = qJD(1) * t328;
t280 = t221 * t295;
t279 = t223 * t295;
t275 = t212 / 0.2e1 + t197 / 0.2e1;
t274 = t144 * t129 + t145 * t368;
t273 = pkin(1) * t287;
t272 = t182 * t285;
t270 = t221 * t285;
t265 = t222 * t273;
t237 = t144 * t348 + t145 * t349;
t1 = -t278 * t113 + t237;
t262 = -t1 * qJD(1) + qJD(2) * t321;
t28 = t212 * t343;
t234 = t144 * t282 + t145 * t346;
t7 = (-t275 * t221 + t234) * pkin(3);
t257 = -t7 * qJD(1) + t28 * qJD(2);
t17 = t296 + t80 - t376;
t33 = -t80 + t322;
t254 = -t17 * qJD(1) + t33 * qJD(2);
t18 = t235 * t278 + t298 + t81;
t34 = -t81 - t323;
t253 = t18 * qJD(1) - t34 * qJD(2);
t106 = -t158 + t314;
t35 = -t275 * t182 + t158 + t296;
t244 = -t35 * qJD(1) + t106 * qJD(2);
t107 = t159 + t315;
t36 = -t235 * t275 - t159 + t299;
t243 = t36 * qJD(1) - t107 * qJD(2);
t242 = t283 + pkin(2) / 0.2e1 - t211 / 0.2e1;
t136 = t242 * t221;
t241 = t136 * qJD(1) + t221 * t338;
t137 = t242 * t223;
t240 = t137 * qJD(1) + t223 * t338;
t239 = -t328 / 0.2e1 - t322 / 0.2e1;
t26 = t297 + t376;
t236 = -t26 * qJD(1) - qJD(2) * t322;
t105 = t264 - t157 / 0.2e1;
t127 = t263 - t185 / 0.2e1;
t231 = t105 * qJD(1) + t127 * qJD(2) + t207 * qJD(3);
t206 = t221 * t217;
t204 = t221 * t286;
t200 = t205 * qJD(3);
t169 = t182 * qJD(3);
t163 = t287 * t223 * t221;
t139 = t267 + (-pkin(2) / 0.2e1 + t347) * t223;
t138 = pkin(2) * t345 + t221 * t347 + t268;
t125 = t235 * t171;
t121 = t368 * qJD(3);
t117 = t287 * t179;
t104 = (-t182 * t220 - t235 * t331) * t337;
t103 = t370 * qJD(3);
t101 = 0.2e1 * t263 + t312;
t88 = pkin(3) * t233 + t213;
t86 = t89 * qJD(3);
t85 = t89 * qJD(4);
t84 = t88 * qJD(3);
t83 = t88 * qJD(4);
t64 = 0.2e1 * t264 + t313;
t63 = t235 * t372;
t46 = t182 * t348 + t207 * t350 + t213 - t318 / 0.2e1 + t344 / 0.2e1;
t44 = t45 * qJD(4);
t43 = t46 * qJD(3);
t42 = t46 * qJD(4);
t38 = t159 + t315 / 0.2e1 + t317 / 0.2e1 + t299;
t37 = -t158 + t314 / 0.2e1 + t316 / 0.2e1 + t296;
t27 = t239 + t297;
t20 = -t81 - t323 / 0.2e1 - t329 / 0.2e1 + t298;
t19 = -t80 - t239 + t296;
t8 = t234 * pkin(3) + (t197 + t212) * t213;
t2 = t321 / 0.2e1 + t330 / 0.2e1 + t237;
t3 = [0, 0, 0, 0, -t286, -t224 * t339, t206, t200, 0, 0, 0, t211 * t288 - t223 * t286, t211 * t217 + t204, t99 * qJD(3) - t152, t100 * qJD(3) + t271, t386, t25 * qJD(2) + t23 * qJD(3) + t360, t29 * qJD(3) + t125 - t152, t386, t30 * qJD(3) + t300, t24 * qJD(2) + qJD(3) * t330 - t102 * t171 + t360; 0, 0, 0, 0, -t265, -t224 * t273, t206, t200, 0, 0, 0, t138 * qJD(3) - t223 * t265, t139 * qJD(3) + t204 + t270, t37 * qJD(3) + t301, t38 * qJD(3) + t271 + t272, t387, t309 + (t212 * t342 + t274) * qJD(2) + t8 * qJD(3) + t358, t19 * qJD(3) + t125 + t301, t387, t20 * qJD(3) - t272 + t300, t310 + (t112 * t342 + t274) * qJD(2) + t2 * qJD(3) + t358 + t27 * qJD(5); 0, 0, 0, 0, 0, 0, t163, t371, t217, -t288, 0, t138 * qJD(2) - t210 * t217 + t280, t139 * qJD(2) + t210 * t288 + t279, t37 * qJD(2) - t103 + t302, t38 * qJD(2) + t293 + t294, t104, t311 + t8 * qJD(2) + (-t109 * t220 - t331 * t370) * t337 + t83, t19 * qJD(2) - t103 + t308, t332, t20 * qJD(2) - t293 + t307, t336 + t2 * qJD(2) + (-t109 * t207 + t209 * t370) * qJD(3) + t42 + t64 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t384, t84 + t383, 0, t384, 0, t43 + t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t291, t117, t27 * qJD(2) + t64 * qJD(3) - t281; 0, 0, 0, 0, t285, t224 * t340, t206, t200, 0, 0, 0, -t136 * qJD(3) + t223 * t285, -t137 * qJD(3) - t270, -t35 * qJD(3) + t153, -t36 * qJD(3) - t272, t385, -t7 * qJD(3) - t309 - t362, -t17 * qJD(3) + t125 + t153, t385, -t18 * qJD(3) + t170 + t272, -t1 * qJD(3) - t26 * qJD(5) - t310 - t362; 0, 0, 0, 0, 0, 0, t206, t200, 0, 0, 0, -pkin(2) * t288, -pkin(2) * t217, t106 * qJD(3), t107 * qJD(3), t379, t28 * qJD(3) + t361, t33 * qJD(3) + t125, t379, t34 * qJD(3) + t170, qJD(3) * t321 - t112 * t171 + t361; 0, 0, 0, 0, 0, 0, t163, t371, t217, -t288, 0, -pkin(7) * t217 - t241, pkin(7) * t288 - t240, -t121 + t244, -t243 + t292, t104, (-t129 * t220 - t331 * t368) * t337 + t83 + t257, -t121 + t254, t332, -t253 - t292, (-t129 * t207 + t209 * t368) * qJD(3) + t42 + t101 * qJD(5) + t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t384, t353 + t84, 0, t384, 0, t353 + t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t291, t117, t101 * qJD(3) + t236; 0, 0, 0, 0, 0, 0, -t163, -t371, 0, 0, 0, t136 * qJD(2) - t280, t137 * qJD(2) - t279, t35 * qJD(2) - t289 - t302, t36 * qJD(2) - t290 - t294, 0, t7 * qJD(2) - t311 + t85, t17 * qJD(2) - t289 - t308, 0, t18 * qJD(2) + t290 - t307, t1 * qJD(2) + t105 * qJD(5) - t336 - t44; 0, 0, 0, 0, 0, 0, -t163, -t371, 0, 0, 0, t241, t240, -t289 - t244, -t290 + t243, 0, -t257 + t85, -t289 - t254, 0, t290 + t253, t127 * qJD(5) - t262 - t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), t207 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t372, -t373, 0, t377, -t372, 0, t373, -t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, t291, -t384, -t86 + t380, t169, -t384, -t291, t333 + t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t169, t291, -t384, -t353 - t86, t169, -t384, -t291, -t353 + t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, t373, 0, -t377, t372, 0, -t373, t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, 0, -t117, t26 * qJD(2) - t105 * qJD(3) + t281 + t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, 0, -t117, -t127 * qJD(3) - t236 + t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
