% Calculate inertial parameters regressor of joint inertia matrix for
% S5RRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RRPRR10_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR10_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR10_inertiaJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:26:40
% EndTime: 2019-12-31 20:26:44
% DurationCPUTime: 1.23s
% Computational Cost: add. (1504->142), mult. (3758->294), div. (0->0), fcn. (4157->10), ass. (0->104)
t54 = sin(pkin(10));
t55 = sin(pkin(5));
t56 = cos(pkin(10));
t60 = sin(qJ(2));
t63 = cos(qJ(2));
t33 = (t54 * t63 + t56 * t60) * t55;
t57 = cos(pkin(5));
t59 = sin(qJ(4));
t62 = cos(qJ(4));
t22 = t33 * t59 - t57 * t62;
t116 = t22 ^ 2;
t92 = t55 * t63;
t93 = t55 * t60;
t31 = t54 * t93 - t56 * t92;
t115 = t31 ^ 2;
t114 = -0.2e1 * t22;
t113 = -0.2e1 * t31;
t112 = 0.2e1 * t57;
t111 = 0.2e1 * t59;
t110 = pkin(1) * t60;
t61 = cos(qJ(5));
t109 = pkin(4) * t61;
t37 = (-pkin(2) * t63 - pkin(1)) * t55;
t16 = t31 * pkin(3) - t33 * pkin(8) + t37;
t104 = t57 * pkin(2);
t40 = t57 * t63 * pkin(1);
t80 = pkin(7) + qJ(3);
t25 = -t80 * t93 + t104 + t40;
t74 = t57 * t110;
t28 = t80 * t92 + t74;
t12 = t54 * t25 + t56 * t28;
t9 = t57 * pkin(8) + t12;
t6 = t62 * t16 - t59 * t9;
t3 = -t31 * pkin(4) - t6;
t58 = sin(qJ(5));
t108 = t3 * t58;
t107 = t3 * t61;
t106 = t54 * pkin(2);
t105 = t56 * pkin(2);
t103 = t62 * pkin(4);
t24 = t33 * t62 + t57 * t59;
t13 = t24 * t58 - t31 * t61;
t102 = t13 * t61;
t15 = t24 * t61 + t31 * t58;
t101 = t15 * t58;
t100 = t15 * t62;
t99 = t22 * t62;
t98 = t24 * t59;
t97 = t24 * t62;
t48 = t55 ^ 2;
t96 = t48 * t63;
t50 = t58 ^ 2;
t95 = t50 * t59;
t43 = pkin(8) + t106;
t51 = t59 ^ 2;
t94 = t51 * t43;
t91 = t58 * t22;
t90 = t58 * t59;
t89 = t58 * t61;
t88 = t58 * t62;
t17 = t59 * t22;
t87 = t59 * t31;
t86 = t59 * t43;
t85 = t61 * t22;
t84 = t61 * t59;
t83 = t61 * t62;
t82 = t62 * t13;
t81 = t62 * t43;
t79 = -t56 * t25 + t54 * t28;
t52 = t61 ^ 2;
t78 = t50 + t52;
t53 = t62 ^ 2;
t77 = t51 + t53;
t76 = t55 * t112;
t75 = t62 * t111;
t73 = t15 * t90;
t72 = t58 * t17;
t71 = t22 * t84;
t70 = t58 * t84;
t44 = -pkin(3) - t105;
t69 = t78 * pkin(9);
t8 = -t57 * pkin(3) + t79;
t7 = t59 * t16 + t62 * t9;
t4 = t31 * pkin(9) + t7;
t5 = t22 * pkin(4) - t24 * pkin(9) + t8;
t1 = -t58 * t4 + t61 * t5;
t2 = t61 * t4 + t58 * t5;
t68 = -t1 * t58 + t2 * t61;
t67 = -t6 * t59 + t7 * t62;
t36 = -t59 * pkin(9) - t103 + t44;
t20 = t61 * t36 - t58 * t81;
t21 = t58 * t36 + t61 * t81;
t66 = -t20 * t58 + t21 * t61;
t49 = t57 ^ 2;
t47 = t52 * t59;
t46 = t52 * t51;
t45 = t50 * t51;
t41 = t43 ^ 2;
t38 = t51 * t41;
t35 = pkin(7) * t92 + t74;
t34 = -pkin(7) * t93 + t40;
t29 = t62 * t31;
t10 = t13 * t84;
t11 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t48 * t60 ^ 2, 0.2e1 * t60 * t96, t60 * t76, t48 * t63 ^ 2, t63 * t76, t49, 0.2e1 * pkin(1) * t96 + 0.2e1 * t34 * t57, -0.2e1 * t48 * t110 - 0.2e1 * t35 * t57, 0.2e1 * (-t34 * t60 + t35 * t63) * t55, t48 * pkin(1) ^ 2 + t34 ^ 2 + t35 ^ 2, t33 ^ 2, t33 * t113, t33 * t112, t115, t57 * t113, t49, 0.2e1 * t37 * t31 - 0.2e1 * t57 * t79, -0.2e1 * t12 * t57 + 0.2e1 * t37 * t33, -0.2e1 * t12 * t31 + 0.2e1 * t33 * t79, t12 ^ 2 + t37 ^ 2 + t79 ^ 2, t24 ^ 2, t24 * t114, 0.2e1 * t24 * t31, t116, t22 * t113, t115, 0.2e1 * t8 * t22 + 0.2e1 * t6 * t31, 0.2e1 * t8 * t24 - 0.2e1 * t7 * t31, -0.2e1 * t7 * t22 - 0.2e1 * t6 * t24, t6 ^ 2 + t7 ^ 2 + t8 ^ 2, t15 ^ 2, -0.2e1 * t15 * t13, 0.2e1 * t15 * t22, t13 ^ 2, t13 * t114, t116, 0.2e1 * t1 * t22 + 0.2e1 * t3 * t13, 0.2e1 * t3 * t15 - 0.2e1 * t2 * t22, -0.2e1 * t1 * t15 - 0.2e1 * t2 * t13, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, t92, t57, t34, -t35, 0, 0, 0, 0, t33, 0, -t31, t57, t56 * t104 - t79, -t54 * t104 - t12, (-t31 * t54 - t33 * t56) * pkin(2), (t12 * t54 - t56 * t79) * pkin(2), t98, -t17 + t97, t87, -t99, t29, 0, t44 * t22 - t31 * t86 - t8 * t62, t44 * t24 - t31 * t81 + t8 * t59, (t98 - t99) * t43 + t67, t43 * t67 + t8 * t44, t15 * t84, -t10 - t73, t71 - t100, t13 * t90, -t72 + t82, -t99, -t1 * t62 + t20 * t22 + (t13 * t43 + t108) * t59, t2 * t62 - t21 * t22 + (t15 * t43 + t107) * t59, -t21 * t13 - t20 * t15 + (-t1 * t61 - t2 * t58) * t59, t1 * t20 + t2 * t21 + t3 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t105, -0.2e1 * t106, 0, (t54 ^ 2 + t56 ^ 2) * pkin(2) ^ 2, t51, t75, 0, t53, 0, 0, -0.2e1 * t44 * t62, t44 * t111, 0.2e1 * t77 * t43, t53 * t41 + t44 ^ 2 + t38, t46, -0.2e1 * t51 * t89, -0.2e1 * t59 * t83, t45, t58 * t75, t53, -0.2e1 * t20 * t62 + 0.2e1 * t58 * t94, 0.2e1 * t21 * t62 + 0.2e1 * t61 * t94, (-t20 * t61 - t21 * t58) * t111, t20 ^ 2 + t21 ^ 2 + t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t33, 0, t37, 0, 0, 0, 0, 0, 0, t29, -t87, -t17 - t97, t7 * t59 + t6 * t62, 0, 0, 0, 0, 0, 0, -t72 - t82, -t71 - t100, -t10 + t73, -t3 * t62 + t59 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t66 - t81) * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46 + t45 + t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t22, t31, t6, -t7, 0, 0, t101, -t58 * t13 + t15 * t61, t91, -t102, t85, 0, -pkin(4) * t13 - pkin(9) * t91 - t107, -pkin(4) * t15 - pkin(9) * t85 + t108, (t101 - t102) * pkin(9) + t68, -t3 * pkin(4) + pkin(9) * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, t62, 0, -t86, -t81, 0, 0, t70, t47 - t95, -t88, -t70, -t83, 0, -t43 * t84 + (-pkin(4) * t59 + pkin(9) * t62) * t58, pkin(9) * t83 + (t43 * t58 - t109) * t59, t66, -pkin(4) * t86 + pkin(9) * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -t59, 0, 0, 0, 0, 0, 0, 0, 0, t83, -t88, t47 + t95, t59 * t69 + t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t50, 0.2e1 * t89, 0, t52, 0, 0, 0.2e1 * t109, -0.2e1 * pkin(4) * t58, 0.2e1 * t69, pkin(9) ^ 2 * t78 + pkin(4) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, -t13, t22, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t90, -t62, t20, -t21, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, -t84, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, 0, t61, 0, -t58 * pkin(9), -t61 * pkin(9), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t11;
