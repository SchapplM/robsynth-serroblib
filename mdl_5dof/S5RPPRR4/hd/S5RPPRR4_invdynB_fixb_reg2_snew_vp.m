% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:17
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:17:07
% EndTime: 2022-01-23 09:17:21
% DurationCPUTime: 13.58s
% Computational Cost: add. (60796->626), mult. (168978->981), div. (0->0), fcn. (120066->10), ass. (0->457)
t674 = sin(pkin(8));
t673 = sin(pkin(9));
t675 = cos(pkin(9));
t678 = sin(qJ(4));
t681 = cos(qJ(4));
t698 = t673 * t681 + t675 * t678;
t692 = t698 * t674;
t615 = qJD(1) * t692;
t749 = t674 * t675;
t751 = t673 * t674;
t778 = -t678 * t751 + t681 * t749;
t573 = -t615 * qJD(4) + t778 * qJDD(1);
t676 = cos(pkin(8));
t730 = t676 * qJD(1);
t660 = -qJD(4) + t730;
t762 = t615 * t660;
t533 = -t573 + t762;
t781 = t573 + t762;
t679 = sin(qJ(1));
t682 = cos(qJ(1));
t652 = t679 * g(1) - t682 * g(2);
t683 = qJD(1) ^ 2;
t690 = -t683 * qJ(2) + qJDD(2) - t652;
t767 = pkin(2) * t676;
t700 = -qJ(3) * t674 - t767;
t696 = -pkin(1) + t700;
t780 = -0.2e1 * qJD(1) * qJD(3) * t674 + qJDD(1) * t696 + t690;
t653 = t682 * g(1) + t679 * g(2);
t629 = -t683 * pkin(1) + qJDD(1) * qJ(2) - t653;
t769 = 2 * qJD(2);
t779 = qJD(1) * t769 + t629;
t617 = t778 * qJD(1);
t777 = (qJD(4) + t660) * t617;
t743 = t676 * t683;
t677 = sin(qJ(5));
t723 = t676 * qJDD(1);
t659 = -qJDD(4) + t723;
t651 = -qJDD(5) + t659;
t680 = cos(qJ(5));
t561 = t680 * t615 + t677 * t617;
t563 = -t677 * t615 + t680 * t617;
t763 = t563 * t561;
t686 = -t651 - t763;
t776 = t677 * t686;
t761 = t617 * t615;
t691 = -t659 - t761;
t775 = t678 * t691;
t774 = t680 * t686;
t773 = t681 * t691;
t655 = -qJD(5) + t660;
t552 = t561 * t655;
t688 = qJDD(1) * t692;
t572 = -t617 * qJD(4) - t688;
t689 = t561 * qJD(5) - t677 * t572 - t680 * t573;
t772 = t552 - t689;
t705 = -t680 * t572 + t677 * t573;
t452 = (qJD(5) + t655) * t563 + t705;
t559 = t561 ^ 2;
t560 = t563 ^ 2;
t771 = t615 ^ 2;
t612 = t617 ^ 2;
t650 = t655 ^ 2;
t658 = t660 ^ 2;
t770 = t673 ^ 2;
t768 = pkin(2) * t674;
t670 = t674 ^ 2;
t766 = pkin(3) * t670;
t765 = t676 * g(3);
t764 = qJDD(1) * pkin(1);
t760 = t655 * t677;
t759 = t655 * t680;
t758 = t660 * t678;
t757 = t660 * t681;
t756 = t670 * t683;
t593 = -t674 * g(3) + t779 * t676;
t637 = t700 * qJD(1);
t566 = t637 * t730 + t593;
t695 = t780 * t675;
t697 = -pkin(3) * t676 - pkin(6) * t749;
t748 = t674 * t676;
t494 = t697 * qJDD(1) + (-t566 + (pkin(6) * t748 - t675 * t766) * t683) * t673 + t695;
t514 = t675 * t566 + t780 * t673;
t630 = t697 * qJD(1);
t725 = qJDD(1) * t674;
t750 = t673 * t683;
t495 = t630 * t730 + (-pkin(6) * t725 - t750 * t766) * t673 + t514;
t430 = -t681 * t494 + t678 * t495;
t431 = t678 * t494 + t681 * t495;
t377 = -t681 * t430 + t678 * t431;
t755 = t673 * t377;
t706 = qJDD(3) + t765;
t729 = t769 + t637;
t564 = (qJD(1) * t729 + t629) * t674 + t706;
t754 = t673 * t564;
t716 = t673 * t743;
t724 = qJDD(1) * t675;
t620 = (t716 + t724) * t674;
t608 = t673 * t620;
t717 = t675 * t750;
t641 = t670 * t717;
t624 = -t641 + t723;
t753 = t673 * t624;
t625 = -t641 - t723;
t752 = t673 * t625;
t747 = t675 * t377;
t746 = t675 * t564;
t745 = t675 * t624;
t744 = t675 * t625;
t657 = t770 * t756;
t726 = qJDD(1) * t673;
t519 = -pkin(6) * t657 + (pkin(3) * t726 + t629 + (t630 * t675 + t729) * qJD(1)) * t674 + t706;
t589 = -t660 * pkin(4) - t617 * pkin(7);
t450 = -t572 * pkin(4) - t771 * pkin(7) + t617 * t589 + t519;
t742 = t677 * t450;
t507 = t651 - t763;
t741 = t677 * t507;
t404 = t691 * pkin(4) + t533 * pkin(7) - t430;
t408 = -t771 * pkin(4) + t572 * pkin(7) + t660 * t589 + t431;
t357 = -t680 * t404 + t677 * t408;
t358 = t677 * t404 + t680 * t408;
t327 = -t680 * t357 + t677 * t358;
t740 = t678 * t327;
t739 = t678 * t519;
t556 = t659 - t761;
t738 = t678 * t556;
t623 = -t690 + t764;
t737 = t679 * t623;
t736 = t680 * t450;
t735 = t680 * t507;
t734 = t681 * t327;
t733 = t681 * t519;
t732 = t681 * t556;
t731 = t682 * t623;
t722 = t679 * qJDD(1);
t721 = t682 * qJDD(1);
t671 = t675 ^ 2;
t719 = t671 * t756;
t715 = t674 * t763;
t714 = t674 * t761;
t712 = t675 * t743;
t711 = t676 * t763;
t710 = t676 * t761;
t709 = t676 * t722;
t708 = t676 * t721;
t707 = t623 + t764;
t328 = t677 * t357 + t680 * t358;
t378 = t678 * t430 + t681 * t431;
t592 = t779 * t674 + t765;
t540 = t674 * t592 + t676 * t593;
t604 = -t679 * t652 - t682 * t653;
t669 = t674 * t670;
t703 = t669 * t717;
t702 = t673 * t712;
t647 = -t679 * t683 + t721;
t701 = -pkin(5) * t647 - t679 * g(3);
t699 = t670 * t702;
t513 = t673 * t566 - t695;
t460 = -t675 * t513 + t673 * t514;
t461 = t673 * t513 + t675 * t514;
t539 = t676 * t592 - t674 * t593;
t603 = t682 * t652 - t679 * t653;
t646 = t682 * t683 + t722;
t672 = t676 ^ 2;
t636 = (t670 + t672) * t743;
t600 = -t679 * t636 + t708;
t694 = t682 * t636 + t709;
t693 = t712 - t726;
t687 = t698 * t725;
t666 = t672 * t683;
t665 = t672 * qJDD(1);
t664 = t670 * qJDD(1);
t643 = t666 - t756;
t642 = t666 + t756;
t640 = t665 - t664;
t639 = t665 + t664;
t635 = -t666 - t719;
t634 = t666 - t719;
t633 = (t672 * t674 + t669) * t683;
t632 = -t657 - t666;
t631 = t657 - t666;
t628 = -pkin(5) * t646 + t682 * g(3);
t627 = t657 - t719;
t626 = t657 + t719;
t621 = (t716 - t724) * t674;
t619 = t693 * t674;
t618 = (t712 + t726) * t674;
t614 = t647 * t748;
t613 = t646 * t748;
t611 = (-t671 - t770) * t674 * t743;
t610 = (qJDD(1) * t671 + t702) * t674;
t609 = (t671 * t743 - t673 * t724) * t674;
t607 = t693 * t751;
t601 = t682 * t633 + t674 * t722;
t599 = t679 * t633 - t674 * t721;
t598 = t682 * t639 - t679 * t642;
t597 = t679 * t639 + t682 * t642;
t591 = -t612 + t658;
t590 = -t658 + t771;
t585 = t676 * t610 + t703;
t584 = -t676 * t607 - t703;
t583 = -t612 - t658;
t582 = -t673 * t634 + t744;
t581 = -t673 * t635 + t745;
t580 = t675 * t632 - t752;
t579 = t675 * t631 + t753;
t578 = -t675 * t634 - t752;
t577 = t675 * t635 + t753;
t576 = t673 * t632 + t744;
t575 = -t673 * t631 + t745;
t574 = -t612 + t771;
t571 = -t675 * t618 - t673 * t621;
t570 = t675 * t619 - t608;
t569 = -t673 * t618 + t675 * t621;
t568 = -t673 * t619 - t675 * t620;
t554 = -t658 - t771;
t551 = -t560 + t650;
t550 = t559 - t650;
t549 = (t615 * t681 - t617 * t678) * t660;
t548 = (t615 * t678 + t617 * t681) * t660;
t547 = t676 * t582 - t674 * t621;
t546 = t676 * t581 + t674 * t620;
t545 = t676 * t580 - t674 * t619;
t544 = t676 * t579 - t674 * t618;
t543 = t674 * t581 - t676 * t620;
t542 = t674 * t580 + t676 * t619;
t541 = -t612 - t771;
t537 = -t560 - t650;
t536 = t676 * t571 - t674 * t626;
t535 = t676 * t570 - t674 * t627;
t534 = t674 * t571 + t676 * t626;
t530 = -t688 - t777;
t529 = t687 + t777;
t528 = (qJD(4) - t660) * t617 + t687;
t527 = t681 * t573 + t617 * t758;
t526 = t678 * t573 - t617 * t757;
t525 = -t678 * t572 - t615 * t757;
t524 = t681 * t572 - t615 * t758;
t523 = t681 * t590 + t738;
t522 = -t678 * t591 + t773;
t521 = t678 * t590 - t732;
t520 = t681 * t591 + t775;
t518 = t682 * t540 - t737;
t517 = t679 * t540 + t731;
t516 = -qJ(3) * t577 + t746;
t515 = -qJ(3) * t576 + t754;
t512 = -t678 * t583 + t732;
t511 = t681 * t583 + t738;
t510 = -t560 + t559;
t506 = t682 * t546 + t679 * t577;
t505 = t682 * t545 + t679 * t576;
t504 = t681 * t554 - t775;
t503 = t679 * t546 - t682 * t577;
t502 = t679 * t545 - t682 * t576;
t501 = t678 * t554 + t773;
t500 = -t650 - t559;
t499 = (t561 * t680 - t563 * t677) * t655;
t498 = (t561 * t677 + t563 * t680) * t655;
t497 = t682 * t536 + t679 * t569;
t496 = t679 * t536 - t682 * t569;
t493 = -pkin(2) * t577 + t514;
t492 = -pkin(2) * t576 + t513;
t488 = -t673 * t548 + t675 * t549;
t487 = -t675 * t548 - t673 * t549;
t485 = -t563 * qJD(5) - t705;
t484 = t676 * t488 - t674 * t659;
t483 = -t559 - t560;
t482 = t681 * t530 - t678 * t533;
t481 = -t681 * t528 - t678 * t781;
t480 = t678 * t530 + t681 * t533;
t479 = -t678 * t528 + t681 * t781;
t478 = -t673 * t526 + t675 * t527;
t477 = -t673 * t524 + t675 * t525;
t476 = -t675 * t526 - t673 * t527;
t475 = -t675 * t524 - t673 * t525;
t474 = t680 * t550 + t741;
t473 = -t677 * t551 + t774;
t472 = t677 * t550 - t735;
t471 = t680 * t551 + t776;
t470 = -pkin(1) * t542 - pkin(2) * t619 - qJ(3) * t580 + t746;
t469 = -pkin(1) * t543 + pkin(2) * t620 - qJ(3) * t581 - t754;
t468 = -t673 * t521 + t675 * t523;
t467 = -t673 * t520 + t675 * t522;
t466 = -t675 * t521 - t673 * t523;
t465 = -t675 * t520 - t673 * t522;
t464 = -t677 * t537 + t735;
t463 = t680 * t537 + t741;
t462 = -pkin(6) * t511 + t733;
t459 = -t673 * t511 + t675 * t512;
t458 = t675 * t511 + t673 * t512;
t457 = -pkin(6) * t501 + t739;
t456 = t552 + t689;
t451 = (qJD(5) - t655) * t563 + t705;
t449 = t563 * t760 - t680 * t689;
t448 = -t563 * t759 - t677 * t689;
t447 = -t677 * t485 - t561 * t759;
t446 = t680 * t485 - t561 * t760;
t445 = t676 * t478 + t714;
t444 = t676 * t477 - t714;
t443 = t680 * t500 - t776;
t442 = t677 * t500 + t774;
t441 = -t673 * t501 + t675 * t504;
t440 = t675 * t501 + t673 * t504;
t439 = -qJ(3) * t569 - t460;
t438 = t676 * t461 + t674 * t564;
t437 = t674 * t461 - t676 * t564;
t436 = -t678 * t498 + t681 * t499;
t435 = t681 * t498 + t678 * t499;
t434 = -pkin(3) * t781 + pkin(6) * t512 + t739;
t433 = t676 * t468 - t674 * t529;
t432 = t676 * t467 - t674 * t533;
t428 = t676 * t459 + t674 * t781;
t427 = t674 * t459 - t676 * t781;
t426 = -pkin(3) * t528 + pkin(6) * t504 - t733;
t425 = -qJ(2) * t543 - t674 * t493 + t676 * t516;
t424 = -qJ(2) * t542 - t674 * t492 + t676 * t515;
t423 = t676 * t441 + t674 * t528;
t422 = t674 * t441 - t676 * t528;
t421 = -t673 * t480 + t675 * t482;
t420 = -t673 * t479 + t675 * t481;
t419 = t675 * t480 + t673 * t482;
t418 = -t675 * t479 - t673 * t481;
t417 = -pkin(1) * t534 - pkin(2) * t626 - qJ(3) * t571 - t461;
t416 = -t678 * t472 + t681 * t474;
t415 = -t678 * t471 + t681 * t473;
t414 = t681 * t472 + t678 * t474;
t413 = t681 * t471 + t678 * t473;
t412 = -qJ(2) * t534 + t676 * t439 + t569 * t768;
t411 = t676 * t420 - t674 * t574;
t410 = -t678 * t463 + t681 * t464;
t409 = t681 * t463 + t678 * t464;
t406 = t676 * t421 + t674 * t541;
t405 = t674 * t421 - t676 * t541;
t401 = -pkin(7) * t463 + t736;
t400 = -t452 * t680 - t677 * t456;
t399 = -t680 * t451 - t677 * t772;
t398 = -t452 * t677 + t680 * t456;
t397 = -t677 * t451 + t680 * t772;
t396 = -t678 * t448 + t681 * t449;
t395 = -t678 * t446 + t681 * t447;
t394 = t681 * t448 + t678 * t449;
t393 = t681 * t446 + t678 * t447;
t392 = -pkin(7) * t442 + t742;
t391 = t682 * t438 + t679 * t460;
t390 = t679 * t438 - t682 * t460;
t389 = -t678 * t442 + t681 * t443;
t388 = t681 * t442 + t678 * t443;
t387 = -pkin(2) * t419 - pkin(3) * t480;
t386 = t682 * t428 + t679 * t458;
t385 = t679 * t428 - t682 * t458;
t384 = -pkin(1) * t437 + pkin(2) * t564 - qJ(3) * t461;
t383 = -t673 * t435 + t675 * t436;
t382 = -t675 * t435 - t673 * t436;
t381 = t676 * t383 - t674 * t651;
t380 = t682 * t423 + t679 * t440;
t379 = t679 * t423 - t682 * t440;
t376 = -pkin(2) * t458 - pkin(3) * t511 + t431;
t375 = -pkin(2) * t440 - pkin(3) * t501 + t430;
t374 = -pkin(4) * t772 + pkin(7) * t464 + t742;
t373 = -pkin(3) * t519 + pkin(6) * t378;
t372 = -qJ(2) * t437 + (-qJ(3) * t676 + t768) * t460;
t371 = -pkin(4) * t451 + pkin(7) * t443 - t736;
t370 = -qJ(3) * t458 - t673 * t434 + t675 * t462;
t369 = -pkin(6) * t480 - t377;
t368 = t682 * t406 + t679 * t419;
t367 = t679 * t406 - t682 * t419;
t366 = -qJ(3) * t440 - t673 * t426 + t675 * t457;
t365 = -t673 * t414 + t675 * t416;
t364 = -t673 * t413 + t675 * t415;
t363 = -t675 * t414 - t673 * t416;
t362 = -t675 * t413 - t673 * t415;
t361 = -t673 * t409 + t675 * t410;
t360 = t675 * t409 + t673 * t410;
t359 = -pkin(3) * t541 + pkin(6) * t482 + t378;
t355 = -t678 * t398 + t681 * t400;
t354 = -t678 * t397 + t681 * t399;
t353 = t681 * t398 + t678 * t400;
t352 = t681 * t397 + t678 * t399;
t351 = -t673 * t394 + t675 * t396;
t350 = -t673 * t393 + t675 * t395;
t349 = -t675 * t394 - t673 * t396;
t348 = -t675 * t393 - t673 * t395;
t347 = -t673 * t388 + t675 * t389;
t346 = t675 * t388 + t673 * t389;
t345 = t676 * t365 - t674 * t452;
t344 = t676 * t364 - t674 * t456;
t343 = t676 * t361 + t674 * t772;
t342 = t674 * t361 - t676 * t772;
t341 = t676 * t351 + t715;
t340 = t676 * t350 - t715;
t339 = -pkin(1) * t427 + pkin(2) * t781 - qJ(3) * t459 - t675 * t434 - t673 * t462;
t338 = t675 * t378 - t755;
t337 = t673 * t378 + t747;
t336 = -pkin(1) * t422 + pkin(2) * t528 - qJ(3) * t441 - t675 * t426 - t673 * t457;
t335 = t676 * t347 + t674 * t451;
t334 = t674 * t347 - t676 * t451;
t333 = t676 * t338 + t674 * t519;
t332 = t674 * t338 - t676 * t519;
t331 = -pkin(6) * t409 - t678 * t374 + t681 * t401;
t330 = -qJ(2) * t427 + t676 * t370 - t674 * t376;
t329 = -pkin(6) * t388 - t678 * t371 + t681 * t392;
t326 = -pkin(3) * t772 + pkin(6) * t410 + t681 * t374 + t678 * t401;
t325 = -pkin(2) * t337 - pkin(3) * t377;
t324 = -qJ(2) * t422 + t676 * t366 - t674 * t375;
t323 = -t673 * t353 + t675 * t355;
t322 = -t673 * t352 + t675 * t354;
t321 = t675 * t353 + t673 * t355;
t320 = -t675 * t352 - t673 * t354;
t319 = t682 * t343 + t679 * t360;
t318 = t679 * t343 - t682 * t360;
t317 = -pkin(3) * t451 + pkin(6) * t389 + t681 * t371 + t678 * t392;
t316 = -pkin(4) * t450 + pkin(7) * t328;
t315 = -qJ(3) * t419 - t673 * t359 + t675 * t369;
t314 = t676 * t322 - t674 * t510;
t313 = t676 * t323 + t674 * t483;
t312 = t674 * t323 - t676 * t483;
t311 = -pkin(7) * t398 - t327;
t310 = t682 * t335 + t679 * t346;
t309 = t679 * t335 - t682 * t346;
t308 = -pkin(2) * t360 - pkin(3) * t409 - pkin(4) * t463 + t358;
t307 = -pkin(4) * t483 + pkin(7) * t400 + t328;
t306 = -pkin(1) * t405 + pkin(2) * t541 - qJ(3) * t421 - t675 * t359 - t673 * t369;
t305 = -pkin(6) * t747 - qJ(3) * t337 - t673 * t373;
t304 = t682 * t333 + t679 * t337;
t303 = t679 * t333 - t682 * t337;
t302 = -pkin(2) * t346 - pkin(3) * t388 - pkin(4) * t442 + t357;
t301 = -qJ(2) * t405 + t676 * t315 - t674 * t387;
t300 = -pkin(2) * t321 - pkin(3) * t353 - pkin(4) * t398;
t299 = t681 * t328 - t740;
t298 = t678 * t328 + t734;
t297 = -pkin(1) * t332 + pkin(2) * t519 + pkin(6) * t755 - qJ(3) * t338 - t675 * t373;
t296 = t682 * t313 + t679 * t321;
t295 = t679 * t313 - t682 * t321;
t294 = -qJ(3) * t360 - t673 * t326 + t675 * t331;
t293 = -qJ(3) * t346 - t673 * t317 + t675 * t329;
t292 = -pkin(1) * t342 + pkin(2) * t772 - qJ(3) * t361 - t675 * t326 - t673 * t331;
t291 = -pkin(6) * t353 - t678 * t307 + t681 * t311;
t290 = -qJ(2) * t332 + t676 * t305 - t674 * t325;
t289 = -pkin(3) * t483 + pkin(6) * t355 + t681 * t307 + t678 * t311;
t288 = -pkin(1) * t334 + pkin(2) * t451 - qJ(3) * t347 - t675 * t317 - t673 * t329;
t287 = -t673 * t298 + t675 * t299;
t286 = t675 * t298 + t673 * t299;
t285 = -pkin(6) * t298 - pkin(7) * t734 - t678 * t316;
t284 = t676 * t287 + t674 * t450;
t283 = t674 * t287 - t676 * t450;
t282 = -pkin(3) * t450 + pkin(6) * t299 - pkin(7) * t740 + t681 * t316;
t281 = -qJ(2) * t342 + t676 * t294 - t674 * t308;
t280 = -qJ(2) * t334 + t676 * t293 - t674 * t302;
t279 = -pkin(2) * t286 - pkin(3) * t298 - pkin(4) * t327;
t278 = -qJ(3) * t321 - t673 * t289 + t675 * t291;
t277 = t682 * t284 + t679 * t286;
t276 = t679 * t284 - t682 * t286;
t275 = -pkin(1) * t312 + pkin(2) * t483 - qJ(3) * t323 - t675 * t289 - t673 * t291;
t274 = -qJ(2) * t312 + t676 * t278 - t674 * t300;
t273 = -qJ(3) * t286 - t673 * t282 + t675 * t285;
t272 = -pkin(1) * t283 + pkin(2) * t450 - qJ(3) * t287 - t675 * t282 - t673 * t285;
t271 = -qJ(2) * t283 + t676 * t273 - t674 * t279;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t646, -t647, 0, t604, 0, 0, 0, 0, 0, 0, -t694, t601, t598, t518, 0, 0, 0, 0, 0, 0, t505, t506, t497, t391, 0, 0, 0, 0, 0, 0, t380, t386, t368, t304, 0, 0, 0, 0, 0, 0, t310, t319, t296, t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t647, -t646, 0, t603, 0, 0, 0, 0, 0, 0, t600, t599, t597, t517, 0, 0, 0, 0, 0, 0, t502, t503, t496, t390, 0, 0, 0, 0, 0, 0, t379, t385, t367, t303, 0, 0, 0, 0, 0, 0, t309, t318, t295, t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t539, 0, 0, 0, 0, 0, 0, t542, t543, t534, t437, 0, 0, 0, 0, 0, 0, t422, t427, t405, t332, 0, 0, 0, 0, 0, 0, t334, t342, t312, t283; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t647, 0, -t646, 0, t701, -t628, -t603, -pkin(5) * t603, t614, t682 * t640 - t679 * t643, t601, -t614, t694, 0, -pkin(5) * t600 - t679 * t592 - t674 * t731, -pkin(5) * t599 - t679 * t593 - t676 * t731, -pkin(5) * t597 + t682 * t539, -pkin(5) * t517 - (pkin(1) * t679 - qJ(2) * t682) * t539, t682 * t585 - t679 * t609, t682 * t535 - t679 * t568, t682 * t547 - t679 * t578, t682 * t584 - t679 * t608, t682 * t544 - t679 * t575, -t679 * t611 - t674 * t708, -pkin(5) * t502 + t682 * t424 - t679 * t470, -pkin(5) * t503 + t682 * t425 - t679 * t469, -pkin(5) * t496 + t682 * t412 - t679 * t417, -pkin(5) * t390 + t682 * t372 - t679 * t384, t682 * t445 - t679 * t476, t682 * t411 - t679 * t418, t682 * t432 - t679 * t465, t682 * t444 - t679 * t475, t682 * t433 - t679 * t466, t682 * t484 - t679 * t487, -pkin(5) * t379 + t682 * t324 - t679 * t336, -pkin(5) * t385 + t682 * t330 - t679 * t339, -pkin(5) * t367 + t682 * t301 - t679 * t306, -pkin(5) * t303 + t682 * t290 - t679 * t297, t682 * t341 - t679 * t349, t682 * t314 - t679 * t320, t682 * t344 - t679 * t362, t682 * t340 - t679 * t348, t682 * t345 - t679 * t363, t682 * t381 - t679 * t382, -pkin(5) * t309 + t682 * t280 - t679 * t288, -pkin(5) * t318 + t682 * t281 - t679 * t292, -pkin(5) * t295 + t682 * t274 - t679 * t275, -pkin(5) * t276 + t682 * t271 - t679 * t272; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t646, 0, t647, 0, t628, t701, t604, pkin(5) * t604, t613, t679 * t640 + t682 * t643, t599, -t613, -t600, 0, -pkin(5) * t694 + t682 * t592 - t674 * t737, pkin(5) * t601 + t682 * t593 - t676 * t737, pkin(5) * t598 + t679 * t539, pkin(5) * t518 - (-pkin(1) * t682 - qJ(2) * t679) * t539, t679 * t585 + t682 * t609, t679 * t535 + t682 * t568, t679 * t547 + t682 * t578, t679 * t584 + t682 * t608, t679 * t544 + t682 * t575, t682 * t611 - t674 * t709, pkin(5) * t505 + t679 * t424 + t682 * t470, pkin(5) * t506 + t679 * t425 + t682 * t469, pkin(5) * t497 + t679 * t412 + t682 * t417, pkin(5) * t391 + t679 * t372 + t682 * t384, t679 * t445 + t682 * t476, t679 * t411 + t682 * t418, t679 * t432 + t682 * t465, t679 * t444 + t682 * t475, t679 * t433 + t682 * t466, t679 * t484 + t682 * t487, pkin(5) * t380 + t679 * t324 + t682 * t336, pkin(5) * t386 + t679 * t330 + t682 * t339, pkin(5) * t368 + t679 * t301 + t682 * t306, pkin(5) * t304 + t679 * t290 + t682 * t297, t679 * t341 + t682 * t349, t679 * t314 + t682 * t320, t679 * t344 + t682 * t362, t679 * t340 + t682 * t348, t679 * t345 + t682 * t363, t679 * t381 + t682 * t382, pkin(5) * t310 + t679 * t280 + t682 * t288, pkin(5) * t319 + t679 * t281 + t682 * t292, pkin(5) * t296 + t679 * t274 + t682 * t275, pkin(5) * t277 + t679 * t271 + t682 * t272; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t652, t653, 0, 0, t664, 0.2e1 * t674 * t723, 0, t665, 0, 0, -qJ(2) * t636 + t676 * t707, qJ(2) * t633 - t674 * t707, pkin(1) * t642 + qJ(2) * t639 + t540, pkin(1) * t623 + qJ(2) * t540, t674 * t610 - t699, t674 * t570 + t676 * t627, t674 * t582 + t676 * t621, -t674 * t607 + t699, t674 * t579 + t676 * t618, t665, -pkin(1) * t576 + qJ(2) * t545 + t676 * t492 + t674 * t515, -pkin(1) * t577 + qJ(2) * t546 + t676 * t493 + t674 * t516, qJ(2) * t536 + t674 * t439 + (-pkin(1) - t767) * t569, qJ(2) * t438 + t460 * t696, t674 * t478 - t710, t674 * t420 + t676 * t574, t674 * t467 + t676 * t533, t674 * t477 + t710, t674 * t468 + t676 * t529, t674 * t488 + t676 * t659, -pkin(1) * t440 + qJ(2) * t423 + t674 * t366 + t676 * t375, -pkin(1) * t458 + qJ(2) * t428 + t674 * t370 + t676 * t376, -pkin(1) * t419 + qJ(2) * t406 + t674 * t315 + t676 * t387, -pkin(1) * t337 + qJ(2) * t333 + t674 * t305 + t676 * t325, t674 * t351 - t711, t674 * t322 + t676 * t510, t674 * t364 + t676 * t456, t674 * t350 + t711, t674 * t365 + t676 * t452, t674 * t383 + t676 * t651, -pkin(1) * t346 + qJ(2) * t335 + t674 * t293 + t676 * t302, -pkin(1) * t360 + qJ(2) * t343 + t674 * t294 + t676 * t308, -pkin(1) * t321 + qJ(2) * t313 + t674 * t278 + t676 * t300, -pkin(1) * t286 + qJ(2) * t284 + t674 * t273 + t676 * t279;];
tauB_reg = t1;
