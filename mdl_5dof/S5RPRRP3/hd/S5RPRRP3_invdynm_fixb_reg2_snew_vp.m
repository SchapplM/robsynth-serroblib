% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:30
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:30:31
% EndTime: 2022-01-23 09:30:41
% DurationCPUTime: 10.23s
% Computational Cost: add. (40505->531), mult. (82998->682), div. (0->0), fcn. (53268->8), ass. (0->381)
t996 = cos(qJ(3));
t1047 = qJD(1) * t996;
t993 = sin(qJ(3));
t1048 = qJD(1) * t993;
t992 = sin(qJ(4));
t995 = cos(qJ(4));
t936 = -t995 * t1047 + t992 * t1048;
t938 = t992 * t1047 + t995 * t1048;
t891 = t938 * t936;
t984 = qJDD(3) + qJDD(4);
t1102 = t891 - t984;
t1106 = t1102 * pkin(4);
t994 = sin(qJ(1));
t997 = cos(qJ(1));
t964 = t994 * g(1) - t997 * g(2);
t1008 = qJDD(1) * pkin(1) + t964;
t965 = t997 * g(1) + t994 * g(2);
t999 = qJD(1) ^ 2;
t948 = -t999 * pkin(1) - t965;
t989 = sin(pkin(8));
t990 = cos(pkin(8));
t889 = t1008 * t989 + t990 * t948;
t872 = -t999 * pkin(2) + qJDD(1) * pkin(6) + t889;
t987 = g(3) - qJDD(2);
t853 = t993 * t872 + t996 * t987;
t1042 = t993 * qJDD(1);
t1043 = qJD(1) * qJD(3);
t977 = t996 * t1043;
t951 = t977 + t1042;
t973 = t996 * t999 * t993;
t961 = qJDD(3) + t973;
t1000 = (-t951 + t977) * pkin(7) + t961 * pkin(3) - t853;
t1034 = t993 * t1043;
t1041 = t996 * qJDD(1);
t1004 = -t1034 + t1041;
t855 = t996 * t872 - t993 * t987;
t963 = qJD(3) * pkin(3) - pkin(7) * t1048;
t1091 = t996 ^ 2;
t981 = t1091 * t999;
t812 = -pkin(3) * t981 + pkin(7) * t1004 - qJD(3) * t963 + t855;
t764 = -t995 * t1000 + t992 * t812;
t985 = qJD(3) + qJD(4);
t926 = t985 * t936;
t1002 = qJ(5) * t926 + 0.2e1 * qJD(5) * t938 + t1106 + t764;
t857 = -t936 * qJD(4) + t1004 * t992 + t995 * t951;
t727 = t857 * qJ(5) + t1002;
t1001 = -t727 - t1106;
t1056 = t995 * t1102;
t933 = t936 ^ 2;
t983 = t985 ^ 2;
t882 = -t983 - t933;
t813 = t992 * t882 - t1056;
t810 = pkin(3) * t813;
t1105 = t1001 + t810;
t888 = -t990 * t1008 + t989 * t948;
t1026 = t989 * t888 + t990 * t889;
t825 = t990 * t888 - t989 * t889;
t1062 = t994 * t825;
t1104 = t1026 * t997 + t1062;
t1053 = t997 * t825;
t1103 = -t1026 * t994 + t1053;
t1066 = t992 * t1102;
t955 = t990 * qJDD(1) - t989 * t999;
t1010 = -qJ(2) * t955 - t989 * t987;
t954 = t989 * qJDD(1) + t990 * t999;
t1093 = t997 * t954 + t994 * t955;
t924 = qJ(2) * t954 - t990 * t987;
t1101 = pkin(5) * t1093 - t1010 * t994 + t997 * t924;
t894 = -t994 * t954 + t997 * t955;
t1100 = -pkin(5) * t894 + t997 * t1010 + t994 * t924;
t803 = t993 * t853 + t996 * t855;
t1097 = -t926 + t857;
t1025 = -t995 * t1004 + t992 * t951;
t836 = (qJD(4) - t985) * t938 + t1025;
t934 = t938 ^ 2;
t814 = t995 * t882 + t1066;
t767 = t996 * t813 + t993 * t814;
t1090 = pkin(2) * t767;
t885 = t891 + t984;
t1067 = t992 * t885;
t912 = -t934 - t983;
t841 = t995 * t912 - t1067;
t1057 = t995 * t885;
t842 = -t992 * t912 - t1057;
t787 = t996 * t841 + t993 * t842;
t1089 = pkin(2) * t787;
t765 = t992 * t1000 + t995 * t812;
t720 = -t995 * t764 + t992 * t765;
t1088 = pkin(3) * t720;
t840 = t926 + t857;
t784 = -t836 * t992 - t995 * t840;
t786 = -t836 * t995 + t992 * t840;
t731 = -t993 * t784 + t996 * t786;
t858 = -t933 - t934;
t718 = t989 * t731 - t990 * t858;
t719 = t990 * t731 + t989 * t858;
t1087 = pkin(5) * (t997 * t718 + t994 * t719);
t768 = -t993 * t813 + t996 * t814;
t835 = (qJD(4) + t985) * t938 + t1025;
t736 = t989 * t768 - t990 * t835;
t737 = t990 * t768 + t989 * t835;
t1086 = pkin(5) * (t997 * t736 + t994 * t737);
t788 = -t993 * t841 + t996 * t842;
t746 = -t1097 * t990 + t989 * t788;
t747 = t1097 * t989 + t990 * t788;
t1085 = pkin(5) * (t997 * t746 + t994 * t747);
t729 = t996 * t784 + t993 * t786;
t1083 = pkin(6) * t729;
t1082 = pkin(6) * t767;
t1081 = pkin(6) * t787;
t1080 = pkin(7) * t784;
t1079 = pkin(7) * t813;
t1078 = pkin(7) * t841;
t1077 = qJ(2) * t718;
t1076 = qJ(2) * t736;
t1075 = qJ(2) * t746;
t1073 = t985 * t938;
t1072 = t985 * t992;
t1071 = t985 * t995;
t986 = t993 ^ 2;
t1070 = t986 * t999;
t1069 = t992 * t727;
t871 = -qJDD(1) * pkin(2) - t999 * pkin(6) + t888;
t827 = -t1004 * pkin(3) - pkin(7) * t981 + t963 * t1048 + t871;
t1068 = t992 * t827;
t1065 = t993 * t720;
t867 = t993 * t871;
t1064 = t993 * t961;
t962 = qJDD(3) - t973;
t1063 = t993 * t962;
t1059 = t995 * t727;
t1058 = t995 * t827;
t1055 = t996 * t720;
t868 = t996 * t871;
t952 = -0.2e1 * t1034 + t1041;
t902 = t996 * t952;
t1054 = t996 * t962;
t1052 = -pkin(2) * t858 + pkin(6) * t731;
t1051 = -pkin(2) * t835 + pkin(6) * t768;
t1050 = -pkin(2) * t1097 + pkin(6) * t788;
t1049 = -pkin(2) * t871 + pkin(6) * t803;
t1046 = qJD(5) * t936;
t1040 = t986 + t1091;
t1039 = t989 * t891;
t1038 = t990 * t891;
t832 = pkin(3) * t841;
t1037 = t832 - t765;
t998 = qJD(3) ^ 2;
t967 = -t998 - t1070;
t911 = -t993 * t967 - t1054;
t950 = 0.2e1 * t977 + t1042;
t1036 = -pkin(2) * t950 + pkin(6) * t911 + t867;
t969 = -t981 - t998;
t909 = t996 * t969 - t1064;
t1035 = pkin(2) * t952 + pkin(6) * t909 - t868;
t1033 = -pkin(1) * t729 + qJ(2) * t719;
t1032 = -pkin(1) * t767 + qJ(2) * t737;
t1031 = -pkin(1) * t787 + qJ(2) * t747;
t780 = pkin(3) * t784;
t696 = -pkin(2) * t729 - t780;
t856 = -t938 * qJD(4) - t1025;
t913 = t985 * pkin(4) - t938 * qJ(5);
t1011 = t933 * pkin(4) - t856 * qJ(5) + t985 * t913 - t765;
t927 = -0.2e1 * t1046;
t733 = t927 - t1011;
t675 = t992 * t733 - t1059;
t726 = pkin(4) * t727;
t1030 = pkin(3) * t675 - t726;
t1029 = -pkin(3) * t858 + pkin(7) * t786;
t1028 = -pkin(3) * t835 + pkin(7) * t814;
t1027 = -pkin(3) * t1097 + pkin(7) * t842;
t721 = t992 * t764 + t995 * t765;
t1024 = -t994 * t964 - t997 * t965;
t1023 = t989 * t973;
t1022 = t990 * t973;
t676 = t995 * t733 + t1069;
t762 = -t856 * pkin(4) - t933 * qJ(5) + t938 * t913 + qJDD(5) + t827;
t691 = -pkin(4) * t762 + qJ(5) * t733;
t641 = -pkin(3) * t762 + pkin(7) * t676 + qJ(5) * t1069 + t995 * t691;
t648 = -pkin(7) * t675 + qJ(5) * t1059 - t992 * t691;
t655 = -t993 * t675 + t996 * t676;
t1021 = -pkin(2) * t762 + pkin(6) * t655 + t996 * t641 + t993 * t648;
t706 = -pkin(4) * t858 - qJ(5) * t836 + t733;
t715 = (t840 + t857) * qJ(5) + t1002;
t661 = t995 * t706 + t992 * t715 + t1029;
t663 = -t992 * t706 + t995 * t715 - t1080;
t1020 = t996 * t661 + t993 * t663 + t1052;
t680 = t1029 + t721;
t687 = -t720 - t1080;
t1019 = t996 * t680 + t993 * t687 + t1052;
t732 = -pkin(4) * t835 + qJ(5) * t882 - t762;
t690 = qJ(5) * t1066 + t995 * t732 + t1028;
t705 = qJ(5) * t1056 - t992 * t732 - t1079;
t1018 = t996 * t690 + t993 * t705 + t1051;
t754 = -qJ(5) * t912 + t762;
t799 = -pkin(4) * t1097 - qJ(5) * t885;
t693 = t992 * t754 + t995 * t799 + t1027;
t712 = t995 * t754 - t992 * t799 - t1078;
t1017 = t996 * t693 + t993 * t712 + t1050;
t741 = t1028 - t1058;
t775 = t1068 - t1079;
t1016 = t996 * t741 + t993 * t775 + t1051;
t749 = t1027 + t1068;
t781 = t1058 - t1078;
t1015 = t996 * t749 + t993 * t781 + t1050;
t956 = t1040 * qJDD(1);
t959 = t981 + t1070;
t1014 = pkin(2) * t959 + pkin(6) * t956 + t803;
t958 = t997 * qJDD(1) - t994 * t999;
t1013 = -pkin(5) * t958 - t994 * g(3);
t1012 = t764 - t810;
t802 = t996 * t853 - t993 * t855;
t1009 = t997 * t964 - t994 * t965;
t1007 = pkin(4) * t912 + t1011;
t672 = t996 * t721 - t1065;
t702 = -pkin(3) * t827 + pkin(7) * t721;
t1006 = -pkin(2) * t827 + pkin(6) * t672 - pkin(7) * t1065 + t996 * t702;
t1003 = t832 + t1007;
t968 = t981 - t998;
t966 = t998 - t1070;
t960 = -t981 + t1070;
t957 = t994 * qJDD(1) + t997 * t999;
t946 = t996 * t961;
t945 = t1040 * t1043;
t932 = -pkin(5) * t957 + t997 * g(3);
t928 = 0.2e1 * t1046;
t919 = -t934 + t983;
t918 = t933 - t983;
t917 = -t986 * t1043 + t996 * t951;
t916 = -t1004 * t993 - t1091 * t1043;
t915 = t989 * qJDD(3) + t990 * t945;
t914 = -t990 * qJDD(3) + t989 * t945;
t910 = -t993 * t966 + t946;
t908 = t996 * t968 - t1063;
t907 = t996 * t967 - t1063;
t906 = t996 * t966 + t1064;
t905 = t993 * t969 + t946;
t904 = t993 * t968 + t1054;
t903 = (t951 + t977) * t993;
t897 = t990 * t956 - t989 * t959;
t896 = t989 * t956 + t990 * t959;
t893 = -t993 * t950 + t902;
t892 = t996 * t950 + t993 * t952;
t887 = t934 - t933;
t881 = t990 * t917 - t1023;
t880 = t990 * t916 + t1023;
t879 = t989 * t917 + t1022;
t878 = t989 * t916 - t1022;
t877 = t989 * t1042 + t990 * t910;
t876 = t989 * t1041 + t990 * t908;
t875 = -t990 * t1042 + t989 * t910;
t874 = -t990 * t1041 + t989 * t908;
t866 = t990 * t911 + t989 * t950;
t865 = t990 * t909 - t989 * t952;
t864 = t989 * t911 - t990 * t950;
t863 = t989 * t909 + t990 * t952;
t862 = -pkin(1) * t954 - t889;
t861 = pkin(1) * t955 - t888;
t860 = (-t936 * t995 + t938 * t992) * t985;
t859 = (-t936 * t992 - t938 * t995) * t985;
t854 = t990 * t893 + t989 * t960;
t852 = t989 * t893 - t990 * t960;
t846 = t995 * t918 - t1067;
t845 = -t992 * t919 - t1056;
t844 = t992 * t918 + t1057;
t843 = t995 * t919 - t1066;
t834 = -pkin(6) * t907 + t868;
t833 = -pkin(6) * t905 + t867;
t828 = pkin(4) * t840;
t821 = pkin(1) * t825;
t820 = -t938 * t1072 + t995 * t857;
t819 = t938 * t1071 + t992 * t857;
t818 = t936 * t1071 - t992 * t856;
t817 = t936 * t1072 + t995 * t856;
t816 = -pkin(2) * t907 + t855;
t815 = -pkin(2) * t905 + t853;
t811 = pkin(1) * t987 + qJ(2) * t1026;
t805 = -t993 * t859 + t996 * t860;
t804 = t996 * t859 + t993 * t860;
t798 = t990 * t805 + t989 * t984;
t797 = t989 * t805 - t990 * t984;
t796 = pkin(1) * t863 + t1035;
t795 = pkin(1) * t864 + t1036;
t794 = -t993 * t844 + t996 * t846;
t793 = -t993 * t843 + t996 * t845;
t792 = t996 * t844 + t993 * t846;
t791 = t996 * t843 + t993 * t845;
t790 = -qJ(2) * t896 + t990 * t802;
t789 = qJ(2) * t897 + t989 * t802;
t785 = -t1097 * t992 - t995 * t835;
t783 = t1097 * t995 - t992 * t835;
t777 = t990 * t803 + t989 * t871;
t776 = t989 * t803 - t990 * t871;
t774 = -t993 * t819 + t996 * t820;
t773 = -t993 * t817 + t996 * t818;
t772 = t996 * t819 + t993 * t820;
t771 = t996 * t817 + t993 * t818;
t769 = pkin(1) * t896 + t1014;
t760 = t990 * t774 + t1039;
t759 = t990 * t773 - t1039;
t758 = t989 * t774 - t1038;
t757 = t989 * t773 + t1038;
t756 = -qJ(2) * t864 - t989 * t816 + t990 * t834;
t755 = -qJ(2) * t863 - t989 * t815 + t990 * t833;
t753 = t990 * t794 - t989 * t836;
t752 = t990 * t793 + t989 * t840;
t751 = t989 * t794 + t990 * t836;
t750 = t989 * t793 - t990 * t840;
t745 = pkin(1) * t746;
t743 = -pkin(1) * t907 + qJ(2) * t866 + t990 * t816 + t989 * t834;
t742 = -pkin(1) * t905 + qJ(2) * t865 + t990 * t815 + t989 * t833;
t740 = -t994 * t797 + t997 * t798;
t739 = t997 * t797 + t994 * t798;
t735 = pkin(1) * t736;
t730 = -t993 * t783 + t996 * t785;
t728 = t996 * t783 + t993 * t785;
t724 = pkin(1) * t776 + t1049;
t723 = t990 * t730 + t989 * t887;
t722 = t989 * t730 - t990 * t887;
t717 = pkin(1) * t718;
t714 = -qJ(2) * t776 - (pkin(2) * t989 - pkin(6) * t990) * t802;
t713 = -t1037 - t1089;
t710 = -t994 * t758 + t997 * t760;
t709 = -t994 * t757 + t997 * t759;
t708 = t997 * t758 + t994 * t760;
t707 = t997 * t757 + t994 * t759;
t703 = t1012 - t1090;
t700 = -t994 * t751 + t997 * t753;
t699 = -t994 * t750 + t997 * t752;
t698 = t997 * t751 + t994 * t753;
t697 = t997 * t750 + t994 * t752;
t694 = pkin(5) * (-t994 * t746 + t997 * t747);
t689 = qJ(2) * t777 - (-pkin(2) * t990 - pkin(6) * t989 - pkin(1)) * t802;
t684 = pkin(5) * (-t994 * t736 + t997 * t737);
t683 = -t993 * t749 + t996 * t781 - t1081;
t682 = t696 + t828;
t681 = -t1003 + t927 - t1089;
t678 = -t993 * t741 + t996 * t775 - t1082;
t677 = -t1090 - t1105;
t674 = -t994 * t722 + t997 * t723;
t673 = t997 * t722 + t994 * t723;
t671 = t993 * t721 + t1055;
t668 = pkin(5) * (-t994 * t718 + t997 * t719);
t667 = t990 * t672 + t989 * t827;
t666 = t989 * t672 - t990 * t827;
t665 = t745 + t1015;
t664 = t735 + t1016;
t659 = -t993 * t693 + t996 * t712 - t1081;
t658 = -pkin(2) * t671 - t1088;
t657 = -t993 * t690 + t996 * t705 - t1082;
t656 = t990 * t683 - t989 * t713 - t1075;
t654 = t996 * t675 + t993 * t676;
t652 = t990 * t678 - t989 * t703 - t1076;
t651 = t989 * t683 + t990 * t713 + t1031;
t650 = t745 + t1017;
t649 = -t993 * t680 + t996 * t687 - t1083;
t646 = t990 * t655 + t989 * t762;
t645 = t989 * t655 - t990 * t762;
t644 = t735 + t1018;
t643 = t989 * t678 + t990 * t703 + t1032;
t642 = -pkin(6) * t671 - pkin(7) * t1055 - t993 * t702;
t639 = t717 + t1019;
t638 = t990 * t659 - t989 * t681 - t1075;
t637 = t989 * t659 + t990 * t681 + t1031;
t636 = t990 * t657 - t989 * t677 - t1076;
t635 = -pkin(2) * t654 - t1030;
t634 = t989 * t657 + t990 * t677 + t1032;
t633 = t990 * t649 - t989 * t696 - t1077;
t632 = -t993 * t661 + t996 * t663 - t1083;
t631 = pkin(1) * t666 + t1006;
t630 = t989 * t649 + t990 * t696 + t1033;
t629 = t717 + t1020;
t628 = t990 * t632 - t989 * t682 - t1077;
t627 = -qJ(2) * t666 + t990 * t642 - t989 * t658;
t626 = t989 * t632 + t990 * t682 + t1033;
t625 = -pkin(1) * t671 + qJ(2) * t667 + t989 * t642 + t990 * t658;
t624 = -pkin(6) * t654 - t993 * t641 + t996 * t648;
t623 = pkin(1) * t645 + t1021;
t622 = -qJ(2) * t645 + t990 * t624 - t989 * t635;
t621 = -pkin(1) * t654 + qJ(2) * t646 + t989 * t624 + t990 * t635;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t958, 0, -t957, 0, t1013, -t932, -t1009, -pkin(5) * t1009, 0, 0, t894, 0, -t1093, 0, t1100, t1101, t1103, pkin(5) * t1103 + qJ(2) * t1053 - t994 * t811, -t994 * t879 + t997 * t881, -t994 * t852 + t997 * t854, -t994 * t875 + t997 * t877, -t994 * t878 + t997 * t880, -t994 * t874 + t997 * t876, -t994 * t914 + t997 * t915, t997 * t755 - t994 * t742 - pkin(5) * (t997 * t863 + t994 * t865), t997 * t756 - t994 * t743 - pkin(5) * (t997 * t864 + t994 * t866), t997 * t790 - t994 * t789 - pkin(5) * (t997 * t896 + t994 * t897), t997 * t714 - t994 * t689 - pkin(5) * (t997 * t776 + t994 * t777), t710, t674, t699, t709, t700, t740, -t994 * t643 + t997 * t652 - t1086, -t994 * t651 + t997 * t656 - t1085, -t994 * t630 + t997 * t633 - t1087, t997 * t627 - t994 * t625 - pkin(5) * (t997 * t666 + t994 * t667), t710, t674, t699, t709, t700, t740, -t994 * t634 + t997 * t636 - t1086, -t994 * t637 + t997 * t638 - t1085, -t994 * t626 + t997 * t628 - t1087, t997 * t622 - t994 * t621 - pkin(5) * (t997 * t645 + t994 * t646); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t957, 0, t958, 0, t932, t1013, t1024, pkin(5) * t1024, 0, 0, t1093, 0, t894, 0, -t1101, t1100, t1104, pkin(5) * t1104 + qJ(2) * t1062 + t997 * t811, t997 * t879 + t994 * t881, t997 * t852 + t994 * t854, t997 * t875 + t994 * t877, t997 * t878 + t994 * t880, t997 * t874 + t994 * t876, t997 * t914 + t994 * t915, t994 * t755 + t997 * t742 + pkin(5) * (-t994 * t863 + t997 * t865), t994 * t756 + t997 * t743 + pkin(5) * (-t994 * t864 + t997 * t866), t994 * t790 + t997 * t789 + pkin(5) * (-t994 * t896 + t997 * t897), t994 * t714 + t997 * t689 + pkin(5) * (-t994 * t776 + t997 * t777), t708, t673, t697, t707, t698, t739, t997 * t643 + t994 * t652 + t684, t997 * t651 + t994 * t656 + t694, t997 * t630 + t994 * t633 + t668, t994 * t627 + t997 * t625 + pkin(5) * (-t994 * t666 + t997 * t667), t708, t673, t697, t707, t698, t739, t997 * t634 + t994 * t636 + t684, t997 * t637 + t994 * t638 + t694, t997 * t626 + t994 * t628 + t668, t994 * t622 + t997 * t621 + pkin(5) * (-t994 * t645 + t997 * t646); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t964, t965, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t861, t862, 0, -t821, t903, t892, t906, t902, t904, 0, t796, t795, t769, t724, t772, t728, t791, t771, t792, t804, t664, t665, t639, t631, t772, t728, t791, t771, t792, t804, t644, t650, t629, t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t999, 0, 0, -g(3), -t964, 0, 0, 0, t955, 0, -t954, 0, t1010, t924, t825, qJ(2) * t825, t881, t854, t877, t880, t876, t915, t755, t756, t790, t714, t760, t723, t752, t759, t753, t798, t652, t656, t633, t627, t760, t723, t752, t759, t753, t798, t636, t638, t628, t622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t999, 0, qJDD(1), 0, g(3), 0, -t965, 0, 0, 0, t954, 0, t955, 0, -t924, t1010, t1026, t811, t879, t852, t875, t878, t874, t914, t742, t743, t789, t689, t758, t722, t750, t757, t751, t797, t643, t651, t630, t625, t758, t722, t750, t757, t751, t797, t634, t637, t626, t621; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t964, t965, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t861, t862, 0, -t821, t903, t892, t906, t902, t904, 0, t796, t795, t769, t724, t772, t728, t791, t771, t792, t804, t664, t665, t639, t631, t772, t728, t791, t771, t792, t804, t644, t650, t629, t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t999, 0, 0, -t987, t888, 0, t917, t893, t910, t916, t908, t945, t833, t834, t802, pkin(6) * t802, t774, t730, t793, t773, t794, t805, t678, t683, t649, t642, t774, t730, t793, t773, t794, t805, t657, t659, t632, t624; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t999, 0, qJDD(1), 0, t987, 0, t889, 0, t973, -t960, -t1042, -t973, -t1041, -qJDD(3), t815, t816, 0, pkin(2) * t802, -t891, -t887, -t840, t891, t836, -t984, t703, t713, t696, t658, -t891, -t887, -t840, t891, t836, -t984, t677, t681, t682, t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t888, -t889, 0, 0, t903, t892, t906, t902, t904, 0, t1035, t1036, t1014, t1049, t772, t728, t791, t771, t792, t804, t1016, t1015, t1019, t1006, t772, t728, t791, t771, t792, t804, t1018, t1017, t1020, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t951, t952, t961, -t977, t968, t977, 0, t871, t853, 0, t820, t785, t845, t818, t846, t860, t775, t781, t687, -pkin(7) * t720, t820, t785, t845, t818, t846, t860, t705, t712, t663, t648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1034, t950, t966, t1004, t962, -t1034, -t871, 0, t855, 0, t819, t783, t843, t817, t844, t859, t741, t749, t680, t702, t819, t783, t843, t817, t844, t859, t690, t693, t661, t641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t973, t960, t1042, t973, t1041, qJDD(3), -t853, -t855, 0, 0, t891, t887, t840, -t891, -t836, t984, -t1012, t1037, t780, t1088, t891, t887, t840, -t891, -t836, t984, t1105, t928 + t1003, -t828 + t780, t1030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t857, -t835, -t1102, t926, t918, -t926, 0, t827, t764, 0, t857, -t835, -t1102, t926, t918, -t926, qJ(5) * t1102, t754, t715, qJ(5) * t727; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, t1097, t919, t856, t885, -t1073, -t827, 0, t765, 0, t1073, t1097, t919, t856, t885, -t1073, t732, t799, t706, t691; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t891, t887, t840, -t891, -t836, t984, -t764, -t765, 0, 0, t891, t887, t840, -t891, -t836, t984, t1001, t928 + t1007, -t828, -t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t857, -t835, -t1102, t926, t918, -t926, 0, t762, t727, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, t1097, t919, t856, t885, -t1073, -t762, 0, t733, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t891, t887, t840, -t891, -t836, t984, -t727, -t733, 0, 0;];
m_new_reg = t1;
