% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:30
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:30:24
% EndTime: 2022-01-23 09:30:31
% DurationCPUTime: 7.03s
% Computational Cost: add. (24080->479), mult. (49296->677), div. (0->0), fcn. (31846->8), ass. (0->350)
t529 = sin(qJ(4));
t532 = cos(qJ(4));
t533 = cos(qJ(3));
t530 = sin(qJ(3));
t567 = qJD(1) * t530;
t478 = -t532 * t533 * qJD(1) + t529 * t567;
t480 = (t529 * t533 + t530 * t532) * qJD(1);
t439 = t480 * t478;
t520 = qJDD(3) + qJDD(4);
t547 = -t520 + t439;
t616 = t547 * pkin(4);
t585 = t529 * t547;
t574 = t532 * t547;
t531 = sin(qJ(1));
t534 = cos(qJ(1));
t503 = t534 * g(1) + t531 * g(2);
t536 = qJD(1) ^ 2;
t488 = -t536 * pkin(1) - t503;
t526 = sin(pkin(8));
t527 = cos(pkin(8));
t502 = t531 * g(1) - t534 * g(2);
t539 = qJDD(1) * pkin(1) + t502;
t437 = t526 * t488 - t527 * t539;
t438 = t527 * t488 + t526 * t539;
t548 = t526 * t437 + t527 * t438;
t380 = t527 * t437 - t526 * t438;
t569 = t534 * t380;
t620 = -t531 * t548 + t569;
t580 = t531 * t380;
t332 = t534 * t548 + t580;
t492 = t526 * qJDD(1) + t527 * t536;
t493 = t527 * qJDD(1) - t526 * t536;
t441 = -t531 * t492 + t534 * t493;
t524 = g(3) - qJDD(2);
t466 = qJ(2) * t492 - t527 * t524;
t540 = -qJ(2) * t493 - t526 * t524;
t619 = -pkin(5) * t441 + t531 * t466 + t534 * t540;
t611 = t534 * t492 + t531 * t493;
t617 = pkin(5) * t611 + t534 * t466 - t531 * t540;
t564 = qJD(1) * qJD(3);
t555 = t533 * t564;
t563 = t530 * qJDD(1);
t490 = t555 + t563;
t515 = t533 * qJDD(1);
t556 = t530 * t564;
t541 = -t515 + t556;
t412 = -t478 * qJD(4) + t532 * t490 - t529 * t541;
t521 = qJD(3) + qJD(4);
t468 = t521 * t478;
t612 = -t468 + t412;
t474 = t480 ^ 2;
t519 = t521 ^ 2;
t455 = -t474 - t519;
t434 = t439 + t520;
t586 = t529 * t434;
t394 = t532 * t455 - t586;
t575 = t532 * t434;
t395 = -t529 * t455 - t575;
t342 = t533 * t394 + t530 * t395;
t610 = -pkin(2) * t342 - pkin(3) * t394;
t473 = t478 ^ 2;
t431 = -t519 - t473;
t370 = t529 * t431 - t574;
t371 = t532 * t431 + t585;
t324 = t533 * t370 + t530 * t371;
t609 = -pkin(2) * t324 - pkin(3) * t370;
t546 = t529 * t490 + t532 * t541;
t389 = (qJD(4) - t521) * t480 + t546;
t393 = -t468 - t412;
t339 = -t389 * t529 + t532 * t393;
t341 = -t389 * t532 - t529 * t393;
t291 = -t530 * t339 + t533 * t341;
t413 = -t473 - t474;
t278 = t526 * t291 - t527 * t413;
t279 = t527 * t291 + t526 * t413;
t234 = t534 * t278 + t531 * t279;
t603 = pkin(5) * t234;
t325 = -t530 * t370 + t533 * t371;
t388 = (qJD(4) + t521) * t480 + t546;
t296 = t526 * t325 - t527 * t388;
t297 = t527 * t325 + t526 * t388;
t249 = t534 * t296 + t531 * t297;
t602 = pkin(5) * t249;
t343 = -t530 * t394 + t533 * t395;
t305 = t526 * t343 - t527 * t612;
t306 = t527 * t343 + t526 * t612;
t257 = t534 * t305 + t531 * t306;
t601 = pkin(5) * t257;
t289 = t533 * t339 + t530 * t341;
t600 = pkin(6) * t289;
t599 = pkin(6) * t324;
t598 = pkin(6) * t342;
t597 = pkin(7) * t339;
t596 = pkin(7) * t370;
t595 = pkin(7) * t394;
t594 = qJ(2) * t278;
t593 = qJ(2) * t296;
t592 = qJ(2) * t305;
t591 = t521 * t529;
t590 = t521 * t532;
t522 = t530 ^ 2;
t589 = t522 * t536;
t523 = t533 ^ 2;
t517 = t523 * t536;
t422 = -t536 * pkin(2) + qJDD(1) * pkin(6) + t438;
t408 = t530 * t422 + t533 * t524;
t509 = t533 * t536 * t530;
t499 = qJDD(3) + t509;
t366 = (-t490 + t555) * pkin(7) + t499 * pkin(3) - t408;
t410 = t533 * t422 - t530 * t524;
t501 = qJD(3) * pkin(3) - pkin(7) * t567;
t369 = -pkin(3) * t517 - t541 * pkin(7) - qJD(3) * t501 + t410;
t321 = -t532 * t366 + t529 * t369;
t557 = t412 * qJ(5) + t321;
t538 = -qJ(5) * t468 - t557;
t566 = qJD(5) * t480;
t287 = t538 - 0.2e1 * t566 - t616;
t588 = t529 * t287;
t421 = -qJDD(1) * pkin(2) - t536 * pkin(6) + t437;
t382 = t541 * pkin(3) - pkin(7) * t517 + t501 * t567 + t421;
t587 = t529 * t382;
t322 = t529 * t366 + t532 * t369;
t280 = -t532 * t321 + t529 * t322;
t584 = t530 * t280;
t583 = t530 * t421;
t582 = t530 * t499;
t500 = qJDD(3) - t509;
t581 = t530 * t500;
t577 = t532 * t287;
t576 = t532 * t382;
t573 = t533 * t280;
t572 = t533 * t421;
t491 = t515 - 0.2e1 * t556;
t571 = t533 * t491;
t570 = t533 * t500;
t568 = t522 + t523;
t562 = t526 * t439;
t561 = t527 * t439;
t560 = pkin(1) * t278 - pkin(2) * t413 + pkin(6) * t291;
t559 = pkin(1) * t296 - pkin(2) * t388 + pkin(6) * t325;
t558 = pkin(1) * t305 - pkin(2) * t612 + pkin(6) * t343;
t554 = -pkin(1) * t289 + qJ(2) * t279;
t553 = -pkin(1) * t324 + qJ(2) * t297;
t552 = -pkin(1) * t342 + qJ(2) * t306;
t551 = -pkin(3) * t413 + pkin(7) * t341;
t550 = -pkin(3) * t388 + pkin(7) * t371;
t549 = -pkin(3) * t612 + pkin(7) * t395;
t281 = t529 * t321 + t532 * t322;
t355 = t530 * t408 + t533 * t410;
t448 = -t531 * t502 - t534 * t503;
t544 = t526 * t509;
t543 = t527 * t509;
t259 = -pkin(2) * t289 - pkin(3) * t339;
t496 = t534 * qJDD(1) - t531 * t536;
t542 = -pkin(5) * t496 - t531 * g(3);
t354 = t533 * t408 - t530 * t410;
t447 = t534 * t502 - t531 * t503;
t411 = -t480 * qJD(4) - t546;
t456 = t521 * pkin(4) - t480 * qJ(5);
t537 = t411 * qJ(5) - 0.2e1 * qJD(5) * t478 - t521 * t456 + t322;
t319 = -t411 * pkin(4) - t473 * qJ(5) + t480 * t456 + qJDD(5) + t382;
t535 = qJD(3) ^ 2;
t507 = -t517 - t535;
t506 = t517 - t535;
t505 = -t535 - t589;
t504 = t535 - t589;
t498 = t517 - t589;
t497 = t517 + t589;
t495 = t531 * qJDD(1) + t534 * t536;
t494 = t568 * qJDD(1);
t489 = 0.2e1 * t555 + t563;
t486 = t533 * t499;
t485 = t568 * t564;
t472 = -pkin(5) * t495 + t534 * g(3);
t470 = 0.2e1 * t566;
t462 = -t474 + t519;
t461 = t473 - t519;
t460 = t533 * t490 - t522 * t564;
t459 = -t523 * t564 + t530 * t541;
t458 = t526 * qJDD(3) + t527 * t485;
t457 = -t527 * qJDD(3) + t526 * t485;
t454 = -t530 * t505 - t570;
t453 = -t530 * t504 + t486;
t452 = t533 * t507 - t582;
t451 = t533 * t506 - t581;
t450 = t533 * t505 - t581;
t449 = t530 * t507 + t486;
t446 = t527 * t494 - t526 * t497;
t445 = t526 * t494 + t527 * t497;
t440 = -t530 * t489 + t571;
t436 = -t474 + t473;
t430 = t527 * t460 - t544;
t429 = t527 * t459 + t544;
t428 = t526 * t460 + t543;
t427 = t526 * t459 - t543;
t426 = t527 * t453 + t526 * t563;
t425 = t527 * t451 + t526 * t515;
t424 = t526 * t453 - t527 * t563;
t423 = t526 * t451 - t527 * t515;
t419 = t527 * t454 + t526 * t489;
t418 = t527 * t452 - t526 * t491;
t417 = t526 * t454 - t527 * t489;
t416 = t526 * t452 + t527 * t491;
t415 = (-t478 * t532 + t480 * t529) * t521;
t414 = (-t478 * t529 - t480 * t532) * t521;
t409 = t527 * t440 - t526 * t498;
t407 = t526 * t440 + t527 * t498;
t401 = t532 * t461 - t586;
t400 = -t529 * t462 - t574;
t399 = t529 * t461 + t575;
t398 = t532 * t462 - t585;
t397 = -t531 * t445 + t534 * t446;
t396 = t534 * t445 + t531 * t446;
t387 = -pkin(6) * t450 + t572;
t386 = -pkin(6) * t449 + t583;
t377 = t532 * t412 - t480 * t591;
t376 = t529 * t412 + t480 * t590;
t375 = -t529 * t411 + t478 * t590;
t374 = t532 * t411 + t478 * t591;
t373 = -pkin(2) * t450 + t410;
t372 = -pkin(2) * t449 + t408;
t368 = pkin(1) * t524 + qJ(2) * t548;
t361 = -t531 * t417 + t534 * t419;
t360 = -t531 * t416 + t534 * t418;
t359 = t534 * t417 + t531 * t419;
t358 = t534 * t416 + t531 * t418;
t357 = -t530 * t414 + t533 * t415;
t356 = t533 * t414 + t530 * t415;
t352 = -pkin(4) * t612 - qJ(5) * t434;
t351 = t527 * t357 + t526 * t520;
t350 = t526 * t357 - t527 * t520;
t349 = -t530 * t399 + t533 * t401;
t348 = -t530 * t398 + t533 * t400;
t347 = t533 * t399 + t530 * t401;
t346 = t533 * t398 + t530 * t400;
t345 = -qJ(2) * t445 + t527 * t354;
t344 = qJ(2) * t446 + t526 * t354;
t340 = -t532 * t388 - t529 * t612;
t338 = -t529 * t388 + t532 * t612;
t336 = t576 - t595;
t334 = t527 * t355 + t526 * t421;
t333 = t526 * t355 - t527 * t421;
t330 = t587 - t596;
t329 = -t530 * t376 + t533 * t377;
t328 = -t530 * t374 + t533 * t375;
t327 = t533 * t376 + t530 * t377;
t326 = t533 * t374 + t530 * t375;
t318 = t527 * t329 + t562;
t317 = t527 * t328 - t562;
t316 = t526 * t329 - t561;
t315 = t526 * t328 + t561;
t314 = -qJ(2) * t417 - t526 * t373 + t527 * t387;
t313 = -qJ(2) * t416 - t526 * t372 + t527 * t386;
t312 = -qJ(5) * t455 + t319;
t311 = t527 * t349 - t526 * t389;
t310 = t527 * t348 - t526 * t393;
t309 = t526 * t349 + t527 * t389;
t308 = t526 * t348 + t527 * t393;
t307 = t549 + t587;
t302 = -pkin(1) * t450 + qJ(2) * t419 + t527 * t373 + t526 * t387;
t301 = -pkin(1) * t449 + qJ(2) * t418 + t527 * t372 + t526 * t386;
t300 = t550 - t576;
t299 = -t531 * t350 + t534 * t351;
t298 = t534 * t350 + t531 * t351;
t293 = -t473 * pkin(4) + t537;
t292 = -pkin(4) * t388 + qJ(5) * t431 - t319;
t290 = -t530 * t338 + t533 * t340;
t288 = t533 * t338 + t530 * t340;
t285 = -t531 * t333 + t534 * t334;
t284 = t534 * t333 + t531 * t334;
t283 = t527 * t290 - t526 * t436;
t282 = t526 * t290 + t527 * t436;
t275 = t470 + (-t393 + t468) * qJ(5) + t616 + t557;
t274 = -qJ(2) * t333 - (pkin(2) * t526 - pkin(6) * t527) * t354;
t273 = t322 + t610;
t272 = t532 * t312 - t529 * t352 - t595;
t271 = -t531 * t316 + t534 * t318;
t270 = -t531 * t315 + t534 * t317;
t269 = t534 * t316 + t531 * t318;
t268 = t534 * t315 + t531 * t317;
t267 = -qJ(5) * t389 + (-t413 - t473) * pkin(4) + t537;
t266 = qJ(5) * t574 - t529 * t292 - t596;
t265 = t321 + t609;
t264 = -pkin(3) * t382 + pkin(7) * t281;
t263 = -t531 * t309 + t534 * t311;
t262 = -t531 * t308 + t534 * t310;
t261 = t534 * t309 + t531 * t311;
t260 = t534 * t308 + t531 * t310;
t258 = -t531 * t305 + t534 * t306;
t256 = pkin(5) * t258;
t255 = t529 * t312 + t532 * t352 + t549;
t254 = -pkin(4) * t319 + qJ(5) * t293;
t253 = qJ(5) * t585 + t532 * t292 + t550;
t252 = qJ(2) * t334 - (-pkin(2) * t527 - pkin(6) * t526 - pkin(1)) * t354;
t251 = -t280 - t597;
t250 = -t531 * t296 + t534 * t297;
t248 = pkin(5) * t250;
t247 = -t530 * t307 + t533 * t336 - t598;
t246 = -pkin(4) * t393 + t259;
t245 = (-t455 - t473) * pkin(4) + t537 + t610;
t244 = t281 + t551;
t243 = -t530 * t300 + t533 * t330 - t599;
t242 = t470 - t538 + t609 + 0.2e1 * t616;
t241 = t532 * t293 - t588;
t240 = t529 * t293 + t577;
t239 = -t531 * t282 + t534 * t283;
t238 = t534 * t282 + t531 * t283;
t237 = t533 * t281 - t584;
t236 = t530 * t281 + t573;
t235 = -t531 * t278 + t534 * t279;
t233 = pkin(5) * t235;
t232 = t527 * t237 + t526 * t382;
t231 = t526 * t237 - t527 * t382;
t230 = -t529 * t267 + t532 * t275 - t597;
t229 = t532 * t267 + t529 * t275 + t551;
t228 = -t530 * t255 + t533 * t272 - t598;
t227 = -pkin(2) * t236 - pkin(3) * t280;
t226 = -t530 * t253 + t533 * t266 - t599;
t225 = t527 * t247 - t526 * t273 - t592;
t224 = -t530 * t240 + t533 * t241;
t223 = t533 * t240 + t530 * t241;
t222 = t527 * t243 - t526 * t265 - t593;
t221 = t526 * t247 + t527 * t273 + t552;
t220 = -t530 * t244 + t533 * t251 - t600;
t219 = -pkin(7) * t240 - qJ(5) * t577 - t529 * t254;
t218 = t527 * t224 + t526 * t319;
t217 = t526 * t224 - t527 * t319;
t216 = t526 * t243 + t527 * t265 + t553;
t215 = -pkin(6) * t236 - pkin(7) * t573 - t530 * t264;
t214 = -pkin(3) * t319 + pkin(7) * t241 - qJ(5) * t588 + t532 * t254;
t213 = -t531 * t231 + t534 * t232;
t212 = t534 * t231 + t531 * t232;
t211 = t527 * t228 - t526 * t245 - t592;
t210 = t526 * t228 + t527 * t245 + t552;
t209 = t527 * t226 - t526 * t242 - t593;
t208 = -pkin(2) * t223 - pkin(3) * t240 - pkin(4) * t287;
t207 = t526 * t226 + t527 * t242 + t553;
t206 = t527 * t220 - t526 * t259 - t594;
t205 = -t530 * t229 + t533 * t230 - t600;
t204 = t526 * t220 + t527 * t259 + t554;
t203 = -t531 * t217 + t534 * t218;
t202 = t534 * t217 + t531 * t218;
t201 = t527 * t205 - t526 * t246 - t594;
t200 = -qJ(2) * t231 + t527 * t215 - t526 * t227;
t199 = t526 * t205 + t527 * t246 + t554;
t198 = -pkin(1) * t236 + qJ(2) * t232 + t526 * t215 + t527 * t227;
t197 = -pkin(6) * t223 - t530 * t214 + t533 * t219;
t196 = -qJ(2) * t217 + t527 * t197 - t526 * t208;
t195 = -pkin(1) * t223 + qJ(2) * t218 + t526 * t197 + t527 * t208;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t495, -t496, 0, t448, 0, 0, 0, 0, 0, 0, -t611, -t441, 0, t332, 0, 0, 0, 0, 0, 0, t360, t361, t397, t285, 0, 0, 0, 0, 0, 0, t250, t258, t235, t213, 0, 0, 0, 0, 0, 0, t250, t258, t235, t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t496, -t495, 0, t447, 0, 0, 0, 0, 0, 0, t441, -t611, 0, -t620, 0, 0, 0, 0, 0, 0, t358, t359, t396, t284, 0, 0, 0, 0, 0, 0, t249, t257, t234, t212, 0, 0, 0, 0, 0, 0, t249, t257, t234, t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t524, 0, 0, 0, 0, 0, 0, t449, t450, 0, -t354, 0, 0, 0, 0, 0, 0, t324, t342, t289, t236, 0, 0, 0, 0, 0, 0, t324, t342, t289, t223; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t496, 0, -t495, 0, t542, -t472, -t447, -pkin(5) * t447, 0, 0, t441, 0, -t611, 0, t619, t617, t620, pkin(5) * t620 + qJ(2) * t569 - t531 * t368, -t531 * t428 + t534 * t430, -t531 * t407 + t534 * t409, -t531 * t424 + t534 * t426, -t531 * t427 + t534 * t429, -t531 * t423 + t534 * t425, -t531 * t457 + t534 * t458, -pkin(5) * t358 - t531 * t301 + t534 * t313, -pkin(5) * t359 - t531 * t302 + t534 * t314, -pkin(5) * t396 - t531 * t344 + t534 * t345, -pkin(5) * t284 - t531 * t252 + t534 * t274, t271, t239, t262, t270, t263, t299, -t531 * t216 + t534 * t222 - t602, -t531 * t221 + t534 * t225 - t601, -t531 * t204 + t534 * t206 - t603, -pkin(5) * t212 - t531 * t198 + t534 * t200, t271, t239, t262, t270, t263, t299, -t531 * t207 + t534 * t209 - t602, -t531 * t210 + t534 * t211 - t601, -t531 * t199 + t534 * t201 - t603, -pkin(5) * t202 - t531 * t195 + t534 * t196; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t495, 0, t496, 0, t472, t542, t448, pkin(5) * t448, 0, 0, t611, 0, t441, 0, -t617, t619, t332, pkin(5) * t332 + qJ(2) * t580 + t534 * t368, t534 * t428 + t531 * t430, t534 * t407 + t531 * t409, t534 * t424 + t531 * t426, t534 * t427 + t531 * t429, t534 * t423 + t531 * t425, t534 * t457 + t531 * t458, pkin(5) * t360 + t534 * t301 + t531 * t313, pkin(5) * t361 + t534 * t302 + t531 * t314, pkin(5) * t397 + t534 * t344 + t531 * t345, pkin(5) * t285 + t534 * t252 + t531 * t274, t269, t238, t260, t268, t261, t298, t534 * t216 + t531 * t222 + t248, t534 * t221 + t531 * t225 + t256, t534 * t204 + t531 * t206 + t233, pkin(5) * t213 + t534 * t198 + t531 * t200, t269, t238, t260, t268, t261, t298, t534 * t207 + t531 * t209 + t248, t534 * t210 + t531 * t211 + t256, t534 * t199 + t531 * t201 + t233, pkin(5) * t203 + t534 * t195 + t531 * t196; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t502, t503, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t493 - t437, -pkin(1) * t492 - t438, 0, -pkin(1) * t380, (t490 + t555) * t530, t533 * t489 + t530 * t491, t533 * t504 + t582, t571, t530 * t506 + t570, 0, pkin(1) * t416 + pkin(2) * t491 + pkin(6) * t452 - t572, pkin(1) * t417 - pkin(2) * t489 + pkin(6) * t454 + t583, pkin(1) * t445 + pkin(2) * t497 + pkin(6) * t494 + t355, pkin(1) * t333 - pkin(2) * t421 + pkin(6) * t355, t327, t288, t346, t326, t347, t356, t533 * t300 + t530 * t330 + t559, t533 * t307 + t530 * t336 + t558, t533 * t244 + t530 * t251 + t560, pkin(1) * t231 - pkin(2) * t382 + pkin(6) * t237 - pkin(7) * t584 + t533 * t264, t327, t288, t346, t326, t347, t356, t533 * t253 + t530 * t266 + t559, t533 * t255 + t530 * t272 + t558, t533 * t229 + t530 * t230 + t560, pkin(1) * t217 - pkin(2) * t319 + pkin(6) * t224 + t533 * t214 + t530 * t219;];
tauB_reg = t1;
