% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:30
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:30:41
% EndTime: 2022-01-23 09:30:43
% DurationCPUTime: 1.83s
% Computational Cost: add. (6554->165), mult. (13463->228), div. (0->0), fcn. (8785->8), ass. (0->134)
t1223 = qJD(3) + qJD(4);
t1261 = qJD(4) + t1223;
t1230 = sin(qJ(4));
t1233 = cos(qJ(4));
t1234 = cos(qJ(3));
t1254 = qJD(1) * t1234;
t1231 = sin(qJ(3));
t1255 = qJD(1) * t1231;
t1193 = t1230 * t1255 - t1233 * t1254;
t1260 = t1193 ^ 2;
t1195 = (t1230 * t1234 + t1231 * t1233) * qJD(1);
t1259 = t1195 ^ 2;
t1258 = t1223 ^ 2;
t1257 = t1234 ^ 2;
t1256 = -2 * qJD(5);
t1253 = t1195 * t1193;
t1237 = qJD(1) ^ 2;
t1252 = t1257 * t1237;
t1251 = qJD(4) - t1223;
t1232 = sin(qJ(1));
t1235 = cos(qJ(1));
t1213 = -t1235 * g(1) - t1232 * g(2);
t1199 = -t1237 * pkin(1) + t1213;
t1227 = sin(pkin(8));
t1228 = cos(pkin(8));
t1212 = t1232 * g(1) - t1235 * g(2);
t1239 = qJDD(1) * pkin(1) + t1212;
t1179 = t1228 * t1199 + t1227 * t1239;
t1174 = -t1237 * pkin(2) + qJDD(1) * pkin(6) + t1179;
t1225 = -g(3) + qJDD(2);
t1165 = -t1231 * t1174 + t1234 * t1225;
t1245 = qJD(3) * t1254;
t1250 = t1231 * qJDD(1);
t1201 = t1245 + t1250;
t1217 = t1234 * t1237 * t1231;
t1209 = qJDD(3) + t1217;
t1151 = (-t1201 + t1245) * pkin(7) + t1209 * pkin(3) + t1165;
t1166 = t1234 * t1174 + t1231 * t1225;
t1211 = qJD(3) * pkin(3) - pkin(7) * t1255;
t1246 = qJD(3) * t1255;
t1249 = t1234 * qJDD(1);
t1240 = -t1246 + t1249;
t1152 = -pkin(3) * t1252 + t1240 * pkin(7) - qJD(3) * t1211 + t1166;
t1137 = t1230 * t1151 + t1233 * t1152;
t1248 = -qJDD(3) - qJDD(4);
t1224 = t1231 ^ 2;
t1247 = t1224 + t1257;
t1136 = t1233 * t1151 - t1230 * t1152;
t1178 = -t1227 * t1199 + t1228 * t1239;
t1244 = t1230 * t1201 - t1233 * t1240;
t1203 = -t1227 * qJDD(1) - t1228 * t1237;
t1204 = t1228 * qJDD(1) - t1227 * t1237;
t1243 = t1235 * t1203 - t1232 * t1204;
t1176 = -t1248 - t1253;
t1242 = t1232 * t1203 + t1235 * t1204;
t1173 = -qJDD(1) * pkin(2) - t1237 * pkin(6) - t1178;
t1241 = -t1195 * qJD(4) - t1244;
t1238 = -t1233 * t1201 - t1230 * t1240;
t1157 = -t1240 * pkin(3) - pkin(7) * t1252 + t1211 * t1255 + t1173;
t1161 = t1251 * t1193 + t1238;
t1236 = qJD(3) ^ 2;
t1215 = -t1236 - t1252;
t1214 = -t1224 * t1237 - t1236;
t1210 = -qJDD(3) + t1217;
t1208 = t1247 * t1237;
t1207 = -t1232 * qJDD(1) - t1235 * t1237;
t1206 = t1235 * qJDD(1) - t1232 * t1237;
t1205 = t1247 * qJDD(1);
t1202 = -0.2e1 * t1246 + t1249;
t1200 = 0.2e1 * t1245 + t1250;
t1187 = t1223 * pkin(4) - t1195 * qJ(5);
t1186 = -t1258 - t1259;
t1185 = t1234 * t1210 - t1231 * t1214;
t1184 = -t1231 * t1209 + t1234 * t1215;
t1183 = t1231 * t1210 + t1234 * t1214;
t1182 = t1234 * t1209 + t1231 * t1215;
t1181 = t1228 * t1205 - t1227 * t1208;
t1180 = t1227 * t1205 + t1228 * t1208;
t1177 = t1248 - t1253;
t1175 = -t1258 - t1260;
t1171 = t1228 * t1185 + t1227 * t1200;
t1170 = t1228 * t1184 - t1227 * t1202;
t1169 = t1227 * t1185 - t1228 * t1200;
t1168 = t1227 * t1184 + t1228 * t1202;
t1167 = -t1259 - t1260;
t1163 = t1233 * t1177 - t1230 * t1186;
t1162 = t1230 * t1177 + t1233 * t1186;
t1160 = -t1261 * t1193 - t1238;
t1159 = -t1251 * t1195 - t1244;
t1158 = t1261 * t1195 + t1244;
t1156 = -t1227 * t1178 + t1228 * t1179;
t1155 = t1228 * t1178 + t1227 * t1179;
t1154 = t1233 * t1175 - t1230 * t1176;
t1153 = t1230 * t1175 + t1233 * t1176;
t1147 = -t1231 * t1165 + t1234 * t1166;
t1146 = t1234 * t1165 + t1231 * t1166;
t1145 = -t1231 * t1162 + t1234 * t1163;
t1144 = t1234 * t1162 + t1231 * t1163;
t1143 = t1233 * t1159 - t1230 * t1161;
t1142 = t1230 * t1159 + t1233 * t1161;
t1141 = t1228 * t1147 + t1227 * t1173;
t1140 = t1227 * t1147 - t1228 * t1173;
t1139 = -t1231 * t1153 + t1234 * t1154;
t1138 = t1234 * t1153 + t1231 * t1154;
t1135 = -t1241 * pkin(4) - t1260 * qJ(5) + t1195 * t1187 + qJDD(5) + t1157;
t1134 = t1228 * t1145 + t1227 * t1160;
t1133 = t1227 * t1145 - t1228 * t1160;
t1132 = t1228 * t1139 + t1227 * t1158;
t1131 = t1227 * t1139 - t1228 * t1158;
t1130 = -t1223 * t1187 + t1241 * qJ(5) + (-pkin(4) * t1193 + t1256) * t1193 + t1137;
t1129 = -t1231 * t1142 + t1234 * t1143;
t1128 = t1234 * t1142 + t1231 * t1143;
t1127 = t1176 * pkin(4) + t1161 * qJ(5) + t1195 * t1256 + t1136;
t1126 = -t1230 * t1136 + t1233 * t1137;
t1125 = t1233 * t1136 + t1230 * t1137;
t1124 = t1228 * t1129 + t1227 * t1167;
t1123 = t1227 * t1129 - t1228 * t1167;
t1122 = -t1232 * t1133 + t1235 * t1134;
t1121 = t1235 * t1133 + t1232 * t1134;
t1120 = -t1232 * t1131 + t1235 * t1132;
t1119 = t1235 * t1131 + t1232 * t1132;
t1118 = -t1230 * t1127 + t1233 * t1130;
t1117 = t1233 * t1127 + t1230 * t1130;
t1116 = -t1231 * t1125 + t1234 * t1126;
t1115 = t1234 * t1125 + t1231 * t1126;
t1114 = -t1232 * t1123 + t1235 * t1124;
t1113 = t1235 * t1123 + t1232 * t1124;
t1112 = t1228 * t1116 + t1227 * t1157;
t1111 = t1227 * t1116 - t1228 * t1157;
t1110 = -t1231 * t1117 + t1234 * t1118;
t1109 = t1234 * t1117 + t1231 * t1118;
t1108 = t1228 * t1110 + t1227 * t1135;
t1107 = t1227 * t1110 - t1228 * t1135;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1207, -t1206, 0, -t1232 * t1212 + t1235 * t1213, 0, 0, 0, 0, 0, 0, t1243, -t1242, 0, -t1232 * t1155 + t1235 * t1156, 0, 0, 0, 0, 0, 0, -t1232 * t1168 + t1235 * t1170, -t1232 * t1169 + t1235 * t1171, -t1232 * t1180 + t1235 * t1181, -t1232 * t1140 + t1235 * t1141, 0, 0, 0, 0, 0, 0, t1120, t1122, t1114, -t1232 * t1111 + t1235 * t1112, 0, 0, 0, 0, 0, 0, t1120, t1122, t1114, -t1232 * t1107 + t1235 * t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1206, t1207, 0, t1235 * t1212 + t1232 * t1213, 0, 0, 0, 0, 0, 0, t1242, t1243, 0, t1235 * t1155 + t1232 * t1156, 0, 0, 0, 0, 0, 0, t1235 * t1168 + t1232 * t1170, t1235 * t1169 + t1232 * t1171, t1235 * t1180 + t1232 * t1181, t1235 * t1140 + t1232 * t1141, 0, 0, 0, 0, 0, 0, t1119, t1121, t1113, t1235 * t1111 + t1232 * t1112, 0, 0, 0, 0, 0, 0, t1119, t1121, t1113, t1235 * t1107 + t1232 * t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1225, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, t1146, 0, 0, 0, 0, 0, 0, t1138, t1144, t1128, t1115, 0, 0, 0, 0, 0, 0, t1138, t1144, t1128, t1109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1237, -qJDD(1), 0, t1213, 0, 0, 0, 0, 0, 0, t1203, -t1204, 0, t1156, 0, 0, 0, 0, 0, 0, t1170, t1171, t1181, t1141, 0, 0, 0, 0, 0, 0, t1132, t1134, t1124, t1112, 0, 0, 0, 0, 0, 0, t1132, t1134, t1124, t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1237, 0, t1212, 0, 0, 0, 0, 0, 0, t1204, t1203, 0, t1155, 0, 0, 0, 0, 0, 0, t1168, t1169, t1180, t1140, 0, 0, 0, 0, 0, 0, t1131, t1133, t1123, t1111, 0, 0, 0, 0, 0, 0, t1131, t1133, t1123, t1107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1225, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, t1146, 0, 0, 0, 0, 0, 0, t1138, t1144, t1128, t1115, 0, 0, 0, 0, 0, 0, t1138, t1144, t1128, t1109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1237, -qJDD(1), 0, t1179, 0, 0, 0, 0, 0, 0, t1184, t1185, t1205, t1147, 0, 0, 0, 0, 0, 0, t1139, t1145, t1129, t1116, 0, 0, 0, 0, 0, 0, t1139, t1145, t1129, t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1237, 0, t1178, 0, 0, 0, 0, 0, 0, t1202, -t1200, t1208, -t1173, 0, 0, 0, 0, 0, 0, -t1158, -t1160, -t1167, -t1157, 0, 0, 0, 0, 0, 0, -t1158, -t1160, -t1167, -t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1225, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, t1146, 0, 0, 0, 0, 0, 0, t1138, t1144, t1128, t1115, 0, 0, 0, 0, 0, 0, t1138, t1144, t1128, t1109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, t1210, t1249, t1166, 0, 0, 0, 0, 0, 0, t1154, t1163, t1143, t1126, 0, 0, 0, 0, 0, 0, t1154, t1163, t1143, t1118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1209, t1214, -t1250, t1165, 0, 0, 0, 0, 0, 0, t1153, t1162, t1142, t1125, 0, 0, 0, 0, 0, 0, t1153, t1162, t1142, t1117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1202, t1200, -t1208, t1173, 0, 0, 0, 0, 0, 0, t1158, t1160, t1167, t1157, 0, 0, 0, 0, 0, 0, t1158, t1160, t1167, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, t1177, t1159, t1137, 0, 0, 0, 0, 0, 0, t1175, t1177, t1159, t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1176, t1186, t1161, t1136, 0, 0, 0, 0, 0, 0, t1176, t1186, t1161, t1127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, t1160, t1167, t1157, 0, 0, 0, 0, 0, 0, t1158, t1160, t1167, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, t1177, t1159, t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1176, t1186, t1161, t1127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, t1160, t1167, t1135;];
f_new_reg = t1;
