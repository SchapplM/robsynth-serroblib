% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta3,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 09:13
% Revision: 008671b0a00594318b890887636eaaff83cd5e2f (2021-12-12)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPPR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPPR1_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 09:13:03
% EndTime: 2022-01-20 09:13:19
% DurationCPUTime: 16.57s
% Computational Cost: add. (53224->613), mult. (128162->868), div. (0->0), fcn. (82460->10), ass. (0->434)
t1060 = sin(qJ(5));
t1058 = cos(pkin(8));
t1124 = t1058 * qJDD(1);
t1036 = -qJDD(5) + t1124;
t1055 = sin(pkin(8));
t1054 = sin(pkin(9));
t1057 = cos(pkin(9));
t1062 = cos(qJ(5));
t1086 = t1054 * t1062 + t1057 * t1060;
t1078 = t1086 * t1055;
t981 = qJD(1) * t1078;
t1135 = t1055 * t1057;
t1137 = t1054 * t1055;
t983 = (-t1060 * t1137 + t1062 * t1135) * qJD(1);
t1163 = t983 * t981;
t1182 = -t1036 - t1163;
t1190 = t1060 * t1182;
t1189 = t1062 * t1182;
t1061 = sin(qJ(1));
t1056 = sin(pkin(7));
t1059 = cos(pkin(7));
t1063 = cos(qJ(1));
t1030 = t1063 * g(1) + t1061 * g(2);
t1064 = qJD(1) ^ 2;
t1013 = -t1064 * pkin(1) - t1030;
t1029 = t1061 * g(1) - t1063 * g(2);
t1081 = qJDD(1) * pkin(1) + t1029;
t954 = t1056 * t1013 - t1059 * t1081;
t955 = t1059 * t1013 + t1056 * t1081;
t1109 = t1056 * t954 + t1059 * t955;
t885 = t1056 * t955 - t1059 * t954;
t1142 = t1063 * t885;
t1188 = t1061 * t1109 + t1142;
t1145 = t1061 * t885;
t1187 = t1063 * t1109 - t1145;
t1123 = t1059 * qJDD(1);
t1017 = -t1056 * t1064 + t1123;
t1162 = g(3) - qJDD(2);
t1172 = -qJ(2) * t1017 - t1056 * t1162;
t1125 = t1056 * qJDD(1);
t1016 = t1059 * t1064 + t1125;
t964 = -t1061 * t1016 + t1063 * t1017;
t986 = -qJ(2) * t1016 + t1059 * t1162;
t1186 = -pkin(5) * t964 - t1061 * t986 + t1063 * t1172;
t1173 = t1063 * t1016 + t1061 * t1017;
t1185 = -pkin(5) * t1173 + t1061 * t1172 + t1063 * t986;
t1165 = pkin(3) * t1058;
t1092 = -qJ(4) * t1055 - t1165;
t936 = -qJDD(1) * pkin(2) - t1064 * qJ(3) + qJDD(3) + t954;
t1184 = -0.2e1 * qJD(1) * qJD(4) * t1055 + qJDD(1) * t1092 + t936;
t1133 = t1058 * qJD(1);
t1037 = -qJD(5) + t1133;
t1141 = t981 * t1037;
t1043 = t1055 * qJDD(1);
t1112 = t1057 * t1043;
t1115 = t1054 * t1043;
t926 = -t981 * qJD(5) - t1060 * t1115 + t1062 * t1112;
t1183 = t926 + t1141;
t1049 = t1055 ^ 2;
t1051 = t1058 ^ 2;
t1132 = t1058 * t1064;
t1008 = (t1049 + t1051) * t1132;
t1111 = t1058 * t1123;
t968 = -t1056 * t1008 + t1111;
t1113 = t1056 * t1124;
t970 = t1059 * t1008 + t1113;
t1179 = t1061 * t970 - t1063 * t968;
t1178 = t1061 * t968 + t1063 * t970;
t1040 = t1058 * t1162;
t1170 = 2 * qJD(3);
t939 = -t1064 * pkin(2) + qJDD(1) * qJ(3) + t955;
t1108 = qJD(1) * t1170 + t939;
t913 = t1108 * t1055 + t1040;
t1110 = t1055 * t1162;
t914 = t1108 * t1058 - t1110;
t846 = t1055 * t913 + t1058 * t914;
t1176 = (qJD(5) + t1037) * t983;
t979 = t981 ^ 2;
t980 = t983 ^ 2;
t1035 = t1037 ^ 2;
t1171 = t1054 ^ 2;
t1082 = t1184 * t1057;
t1084 = -pkin(4) * t1058 - pkin(6) * t1135;
t1134 = t1055 * t1058;
t1164 = pkin(4) * t1049;
t1129 = t1092 * qJD(1) + t1170;
t1089 = t1129 * qJD(1) + t939;
t880 = t1089 * t1058 - t1110;
t809 = t1084 * qJDD(1) + (-t880 + (pkin(6) * t1134 - t1057 * t1164) * t1064) * t1054 + t1082;
t1000 = t1084 * qJD(1);
t1136 = t1054 * t1064;
t828 = t1184 * t1054 + t1057 * t880;
t810 = t1000 * t1133 + (-pkin(6) * t1043 - t1136 * t1164) * t1054 + t828;
t759 = t1060 * t810 - t1062 * t809;
t760 = t1060 * t809 + t1062 * t810;
t711 = t1060 * t760 - t1062 * t759;
t1169 = pkin(4) * t711;
t1073 = qJDD(1) * t1078;
t874 = -t1073 - t1176;
t877 = t926 - t1141;
t819 = t1060 * t874 - t1062 * t877;
t1168 = pkin(4) * t819;
t1166 = pkin(3) * t1055;
t1161 = -pkin(2) * t936 + qJ(3) * t846;
t1158 = t1037 * t983;
t1157 = t1054 * t711;
t1122 = qJDD(4) + t1040;
t878 = t1055 * t1089 + t1122;
t1156 = t1054 * t878;
t1117 = t1057 * t1136;
t1018 = t1049 * t1117;
t992 = -t1018 + t1124;
t1155 = t1054 * t992;
t993 = -t1018 - t1124;
t1154 = t1054 * t993;
t931 = t1055 * t936;
t1153 = t1056 * t936;
t1152 = t1057 * t711;
t1151 = t1057 * t878;
t1150 = t1057 * t992;
t1149 = t1057 * t993;
t932 = t1058 * t936;
t1148 = t1059 * t936;
t1138 = t1049 * t1064;
t1033 = t1171 * t1138;
t1127 = qJDD(1) * t1054;
t847 = -pkin(6) * t1033 + (pkin(4) * t1127 + t939 + (t1000 * t1057 + t1129) * qJD(1)) * t1055 + t1122;
t1147 = t1060 * t847;
t917 = t1036 - t1163;
t1146 = t1060 * t917;
t1144 = t1062 * t847;
t1143 = t1062 * t917;
t1140 = t1037 * t1060;
t1139 = t1037 * t1062;
t1126 = qJDD(1) * t1057;
t1121 = t1055 * t1163;
t1120 = t1058 * t1163;
t1119 = pkin(2) * t1124 - qJ(3) * t1008 - t932;
t1050 = t1057 ^ 2;
t1118 = t1050 * t1138;
t1116 = t1057 * t1132;
t1034 = t1055 * t1132;
t1114 = t1055 * t1124;
t827 = t1054 * t880 - t1082;
t778 = t1054 * t827 + t1057 * t828;
t712 = t1060 * t759 + t1062 * t760;
t696 = t1054 * t712 + t1152;
t705 = -pkin(4) * t847 + pkin(6) * t712;
t678 = -pkin(6) * t1152 - qJ(4) * t696 - t1054 * t705;
t686 = -pkin(3) * t696 - t1169;
t697 = t1057 * t712 - t1157;
t694 = t1055 * t847 + t1058 * t697;
t1106 = -pkin(2) * t696 + qJ(3) * t694 + t1055 * t678 + t1058 * t686;
t821 = t1060 * t877 + t1062 * t874;
t896 = -t979 - t980;
t703 = -pkin(4) * t896 + pkin(6) * t821 + t712;
t704 = -pkin(6) * t819 - t711;
t766 = t1054 * t821 + t1057 * t819;
t688 = -qJ(4) * t766 - t1054 * t703 + t1057 * t704;
t736 = -pkin(3) * t766 - t1168;
t768 = -t1054 * t819 + t1057 * t821;
t750 = t1055 * t896 + t1058 * t768;
t1105 = -pkin(2) * t766 + qJ(3) * t750 + t1055 * t688 + t1058 * t736;
t915 = -t1035 - t979;
t857 = t1062 * t915 - t1190;
t1072 = t1086 * t1043;
t872 = (qJD(5) - t1037) * t983 + t1072;
t772 = -pkin(4) * t872 + pkin(6) * t857 - t1144;
t856 = t1060 * t915 + t1189;
t786 = -pkin(6) * t856 + t1147;
t788 = t1054 * t857 + t1057 * t856;
t707 = -qJ(4) * t788 - t1054 * t772 + t1057 * t786;
t1083 = pkin(4) * t856 - t759;
t718 = -pkin(3) * t788 - t1083;
t789 = -t1054 * t856 + t1057 * t857;
t771 = t1055 * t872 + t1058 * t789;
t1104 = -pkin(2) * t788 + qJ(3) * t771 + t1055 * t707 + t1058 * t718;
t948 = -t980 - t1035;
t859 = -t1060 * t948 + t1143;
t776 = -pkin(4) * t1183 + pkin(6) * t859 + t1147;
t858 = t1062 * t948 + t1146;
t794 = -pkin(6) * t858 + t1144;
t798 = t1054 * t859 + t1057 * t858;
t716 = -qJ(4) * t798 - t1054 * t776 + t1057 * t794;
t1075 = pkin(4) * t858 - t760;
t726 = -pkin(3) * t798 - t1075;
t799 = -t1054 * t858 + t1057 * t859;
t781 = t1055 * t1183 + t1058 * t799;
t1103 = -pkin(2) * t798 + qJ(3) * t781 + t1055 * t716 + t1058 * t726;
t1046 = t1051 * t1064;
t1004 = -t1033 - t1046;
t941 = t1054 * t1004 + t1149;
t807 = -pkin(3) * t941 + t827;
t842 = -qJ(4) * t941 + t1156;
t945 = t1057 * t1004 - t1154;
t1079 = t1116 - t1127;
t989 = t1079 * t1055;
t902 = -t1055 * t989 + t1058 * t945;
t1102 = -pkin(2) * t941 + qJ(3) * t902 + t1055 * t842 + t1058 * t807;
t1007 = -t1046 - t1118;
t942 = t1057 * t1007 + t1155;
t808 = -pkin(3) * t942 + t828;
t843 = -qJ(4) * t942 + t1151;
t946 = -t1054 * t1007 + t1150;
t1020 = t1054 * t1034;
t990 = t1020 + t1112;
t903 = t1055 * t990 + t1058 * t946;
t1101 = -pkin(2) * t942 + qJ(3) * t903 + t1055 * t843 + t1058 * t808;
t1100 = -t1061 * t1029 - t1063 * t1030;
t1042 = t1049 * qJDD(1);
t1044 = t1051 * qJDD(1);
t1014 = t1044 + t1042;
t1021 = t1046 + t1138;
t1099 = pkin(2) * t1021 + qJ(3) * t1014 + t846;
t1048 = t1055 * t1049;
t1098 = t1048 * t1117;
t1097 = t1054 * t1116;
t1096 = t1057 * t1034;
t1095 = t1055 * t1111;
t1094 = -pkin(3) * t878 + qJ(4) * t778;
t1026 = t1063 * qJDD(1) - t1061 * t1064;
t1093 = -pkin(5) * t1026 - t1061 * g(3);
t777 = t1054 * t828 - t1057 * t827;
t844 = t1055 * t914 - t1058 * t913;
t975 = t1016 * t1134;
t976 = -t1056 * t1034 + t1095;
t1091 = t1061 * t976 + t1063 * t975;
t1090 = t1061 * t975 - t1063 * t976;
t1088 = t1049 * t1097;
t1087 = t1063 * t1029 - t1061 * t1030;
t1005 = (t1051 * t1055 + t1048) * t1064;
t1085 = -pkin(2) * t1043 + qJ(3) * t1005 + t931;
t988 = (t1116 + t1127) * t1055;
t991 = -t1020 + t1112;
t922 = -t1054 * t988 - t1057 * t991;
t762 = -qJ(4) * t922 - t777;
t924 = t1054 * t991 - t1057 * t988;
t994 = t1033 + t1118;
t887 = -t1055 * t994 + t1058 * t924;
t1080 = qJ(3) * t887 + t1055 * t762 + (-pkin(2) - t1165) * t922;
t1077 = -pkin(3) * t990 + qJ(4) * t946 + t1156;
t1076 = pkin(3) * t989 + qJ(4) * t945 - t1151;
t1074 = pkin(3) * t994 + qJ(4) * t924 + t778;
t757 = t1055 * t878 + t1058 * t778;
t1071 = qJ(3) * t757 + (-pkin(2) + t1092) * t777;
t1070 = -pkin(3) * t896 + qJ(4) * t768 + t1054 * t704 + t1057 * t703;
t1069 = -pkin(3) * t872 + qJ(4) * t789 + t1054 * t786 + t1057 * t772;
t1068 = -pkin(3) * t1183 + qJ(4) * t799 + t1054 * t794 + t1057 * t776;
t1067 = -pkin(3) * t847 - pkin(6) * t1157 + qJ(4) * t697 + t1057 * t705;
t1031 = 0.2e1 * t1114;
t1025 = t1061 * qJDD(1) + t1063 * t1064;
t1022 = -t1046 + t1138;
t1015 = t1044 - t1042;
t1006 = t1046 - t1118;
t1003 = t1033 - t1046;
t996 = -pkin(5) * t1025 + t1063 * g(3);
t995 = -t1033 + t1118;
t978 = (t1050 + t1171) * t1034;
t977 = (qJDD(1) * t1050 + t1097) * t1055;
t974 = (-t1050 * t1132 + t1054 * t1126) * t1055;
t973 = (t1054 * t1132 + t1126) * t1137;
t972 = t1079 * t1137;
t969 = t1059 * t1005 + t1055 * t1125;
t966 = t1056 * t1005 - t1055 * t1123;
t961 = t1059 * t1015 + t1056 * t1022;
t960 = t1059 * t1014 - t1056 * t1021;
t959 = t1056 * t1015 - t1059 * t1022;
t958 = t1056 * t1014 + t1059 * t1021;
t957 = -t980 + t1035;
t956 = t979 - t1035;
t952 = t1058 * t977 + t1098;
t951 = -t1058 * t972 - t1098;
t950 = t1056 * t978 - t1095;
t949 = -t1055 * t1113 - t1059 * t978;
t947 = -t1054 * t1006 + t1149;
t944 = t1057 * t1003 + t1155;
t943 = t1057 * t1006 + t1154;
t940 = t1054 * t1003 - t1150;
t935 = t1055 * t977 - t1088;
t934 = -t1055 * t972 + t1088;
t929 = -pkin(1) * t1016 - t955;
t928 = pkin(1) * t1017 - t954;
t927 = t980 - t979;
t925 = -t983 * qJD(5) - t1073;
t923 = -t1054 * t990 + t1057 * t989;
t921 = t1054 * t989 + t1057 * t990;
t908 = -t1061 * t966 + t1063 * t969;
t907 = t1061 * t969 + t1063 * t966;
t906 = (-t1060 * t983 + t1062 * t981) * t1037;
t905 = (t1060 * t981 + t1062 * t983) * t1037;
t904 = t1055 * t991 + t1058 * t947;
t901 = -t1055 * t988 + t1058 * t944;
t900 = t1055 * t947 - t1058 * t991;
t899 = t1055 * t946 - t1058 * t990;
t898 = t1055 * t945 + t1058 * t989;
t897 = t1055 * t944 + t1058 * t988;
t893 = t1056 * t974 + t1059 * t952;
t892 = -t1056 * t973 + t1059 * t951;
t891 = t1056 * t952 - t1059 * t974;
t890 = t1056 * t951 + t1059 * t973;
t886 = t1055 * t995 + t1058 * t923;
t883 = t1055 * t924 + t1058 * t994;
t882 = t1055 * t923 - t1058 * t995;
t881 = pkin(1) * t885;
t873 = t1072 + t1176;
t870 = pkin(1) * t1162 + qJ(2) * t1109;
t869 = t1062 * t926 + t983 * t1140;
t868 = t1060 * t926 - t983 * t1139;
t867 = -t1060 * t925 - t981 * t1139;
t866 = t1062 * t925 - t981 * t1140;
t865 = t1062 * t956 + t1146;
t864 = -t1060 * t957 + t1189;
t863 = t1060 * t956 - t1143;
t862 = t1062 * t957 + t1190;
t861 = pkin(1) * t968 + t1119;
t860 = pkin(1) * t966 + t1085;
t855 = t1056 * t943 + t1059 * t904;
t854 = t1056 * t942 + t1059 * t903;
t853 = t1056 * t941 + t1059 * t902;
t852 = t1056 * t940 + t1059 * t901;
t851 = t1056 * t904 - t1059 * t943;
t850 = t1056 * t903 - t1059 * t942;
t849 = t1056 * t902 - t1059 * t941;
t848 = t1056 * t901 - t1059 * t940;
t838 = t1056 * t922 + t1059 * t887;
t837 = t1056 * t921 + t1059 * t886;
t836 = t1056 * t887 - t1059 * t922;
t835 = t1056 * t886 - t1059 * t921;
t834 = -qJ(2) * t966 - t1056 * t914 + t1058 * t1148;
t833 = -qJ(2) * t968 + t1055 * t1148 - t1056 * t913;
t832 = qJ(2) * t969 + t1056 * t932 + t1059 * t914;
t831 = -qJ(2) * t970 + t1055 * t1153 + t1059 * t913;
t830 = -t1054 * t905 + t1057 * t906;
t829 = t1054 * t906 + t1057 * t905;
t825 = -t1055 * t1036 + t1058 * t830;
t824 = t1058 * t1036 + t1055 * t830;
t823 = -qJ(2) * t958 - t1059 * t844;
t822 = qJ(2) * t960 - t1056 * t844;
t820 = -t1060 * t1183 - t1062 * t872;
t818 = -t1060 * t872 + t1062 * t1183;
t817 = t1059 * t846 + t1153;
t816 = t1056 * t846 - t1148;
t815 = -t1054 * t868 + t1057 * t869;
t814 = -t1054 * t866 + t1057 * t867;
t813 = t1054 * t869 + t1057 * t868;
t812 = t1054 * t867 + t1057 * t866;
t811 = pkin(1) * t958 + t1099;
t803 = -t1054 * t863 + t1057 * t865;
t802 = -t1054 * t862 + t1057 * t864;
t801 = t1054 * t865 + t1057 * t863;
t800 = t1054 * t864 + t1057 * t862;
t796 = -pkin(2) * t898 - t1076;
t795 = -pkin(2) * t899 - t1077;
t793 = t1058 * t815 + t1121;
t792 = t1058 * t814 - t1121;
t791 = t1055 * t815 - t1120;
t790 = t1055 * t814 + t1120;
t785 = -t1055 * t873 + t1058 * t803;
t784 = t1055 * t877 + t1058 * t802;
t783 = t1055 * t803 + t1058 * t873;
t782 = t1055 * t802 - t1058 * t877;
t780 = t1055 * t799 - t1058 * t1183;
t774 = t1056 * t829 + t1059 * t825;
t773 = t1056 * t825 - t1059 * t829;
t770 = t1055 * t789 - t1058 * t872;
t767 = -t1054 * t818 + t1057 * t820;
t765 = t1054 * t820 + t1057 * t818;
t763 = pkin(1) * t816 + t1161;
t756 = t1055 * t778 - t1058 * t878;
t755 = t1055 * t927 + t1058 * t767;
t754 = t1055 * t767 - t1058 * t927;
t753 = -qJ(3) * t899 - t1055 * t808 + t1058 * t843;
t752 = -qJ(3) * t898 - t1055 * t807 + t1058 * t842;
t749 = t1055 * t768 - t1058 * t896;
t747 = t1056 * t813 + t1059 * t793;
t746 = t1056 * t812 + t1059 * t792;
t745 = t1056 * t793 - t1059 * t813;
t744 = t1056 * t792 - t1059 * t812;
t743 = -qJ(2) * t816 + (pkin(2) * t1056 - qJ(3) * t1059) * t844;
t742 = -pkin(2) * t883 - t1074;
t741 = t1056 * t801 + t1059 * t785;
t740 = t1056 * t800 + t1059 * t784;
t739 = t1056 * t785 - t1059 * t801;
t738 = t1056 * t784 - t1059 * t800;
t737 = -qJ(3) * t883 + t1058 * t762 + t922 * t1166;
t734 = t1056 * t798 + t1059 * t781;
t733 = t1056 * t781 - t1059 * t798;
t732 = pkin(1) * t850 + t1101;
t731 = pkin(1) * t849 + t1102;
t730 = qJ(2) * t817 + (-pkin(2) * t1059 - qJ(3) * t1056 - pkin(1)) * t844;
t729 = t1056 * t788 + t1059 * t771;
t728 = t1056 * t771 - t1059 * t788;
t727 = pkin(1) * t836 + t1080;
t724 = t1056 * t777 + t1059 * t757;
t723 = t1056 * t757 - t1059 * t777;
t722 = -qJ(2) * t850 - t1056 * t795 + t1059 * t753;
t721 = -qJ(2) * t849 - t1056 * t796 + t1059 * t752;
t720 = t1056 * t765 + t1059 * t755;
t719 = t1056 * t755 - t1059 * t765;
t714 = t1056 * t766 + t1059 * t750;
t713 = t1056 * t750 - t1059 * t766;
t710 = -pkin(2) * t756 - t1094;
t709 = -pkin(1) * t899 + qJ(2) * t854 + t1056 * t753 + t1059 * t795;
t708 = -pkin(1) * t898 + qJ(2) * t853 + t1056 * t752 + t1059 * t796;
t702 = -qJ(3) * t756 + (-qJ(4) * t1058 + t1166) * t777;
t701 = -qJ(2) * t836 - t1056 * t742 + t1059 * t737;
t700 = -pkin(2) * t780 - t1068;
t699 = -pkin(1) * t883 + qJ(2) * t838 + t1056 * t737 + t1059 * t742;
t698 = -pkin(2) * t770 - t1069;
t693 = t1055 * t697 - t1058 * t847;
t691 = -qJ(3) * t780 - t1055 * t726 + t1058 * t716;
t690 = -qJ(3) * t770 - t1055 * t718 + t1058 * t707;
t689 = pkin(1) * t723 + t1071;
t684 = pkin(1) * t733 + t1103;
t683 = -qJ(2) * t723 - t1056 * t710 + t1059 * t702;
t682 = pkin(1) * t728 + t1104;
t681 = -pkin(2) * t749 - t1070;
t680 = -pkin(1) * t756 + qJ(2) * t724 + t1056 * t702 + t1059 * t710;
t679 = -qJ(3) * t749 - t1055 * t736 + t1058 * t688;
t676 = t1056 * t696 + t1059 * t694;
t675 = t1056 * t694 - t1059 * t696;
t674 = -qJ(2) * t733 - t1056 * t700 + t1059 * t691;
t673 = -qJ(2) * t728 - t1056 * t698 + t1059 * t690;
t672 = -pkin(1) * t780 + qJ(2) * t734 + t1056 * t691 + t1059 * t700;
t671 = -pkin(1) * t770 + qJ(2) * t729 + t1056 * t690 + t1059 * t698;
t670 = pkin(1) * t713 + t1105;
t669 = -pkin(2) * t693 - t1067;
t668 = -qJ(2) * t713 - t1056 * t681 + t1059 * t679;
t667 = -pkin(1) * t749 + qJ(2) * t714 + t1056 * t679 + t1059 * t681;
t666 = -qJ(3) * t693 - t1055 * t686 + t1058 * t678;
t665 = pkin(1) * t675 + t1106;
t664 = -qJ(2) * t675 - t1056 * t669 + t1059 * t666;
t663 = -pkin(1) * t693 + qJ(2) * t676 + t1056 * t666 + t1059 * t669;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1026, 0, -t1025, 0, t1093, -t996, -t1087, -pkin(5) * t1087, 0, 0, t964, 0, -t1173, 0, t1186, -t1185, -t1188, -pkin(5) * t1188 - qJ(2) * t1142 - t1061 * t870, -t1090, -t1061 * t959 + t1063 * t961, t908, t1090, t1178, 0, pkin(5) * t1179 - t1061 * t831 + t1063 * t833, -pkin(5) * t907 - t1061 * t832 + t1063 * t834, t1063 * t823 - t1061 * t822 - pkin(5) * (t1061 * t960 + t1063 * t958), t1063 * t743 - t1061 * t730 - pkin(5) * (t1061 * t817 + t1063 * t816), -t1061 * t891 + t1063 * t893, -t1061 * t835 + t1063 * t837, -t1061 * t851 + t1063 * t855, -t1061 * t890 + t1063 * t892, -t1061 * t848 + t1063 * t852, -t1061 * t949 + t1063 * t950, t1063 * t721 - t1061 * t708 - pkin(5) * (t1061 * t853 + t1063 * t849), t1063 * t722 - t1061 * t709 - pkin(5) * (t1061 * t854 + t1063 * t850), t1063 * t701 - t1061 * t699 - pkin(5) * (t1061 * t838 + t1063 * t836), t1063 * t683 - t1061 * t680 - pkin(5) * (t1061 * t724 + t1063 * t723), -t1061 * t745 + t1063 * t747, -t1061 * t719 + t1063 * t720, -t1061 * t738 + t1063 * t740, -t1061 * t744 + t1063 * t746, -t1061 * t739 + t1063 * t741, -t1061 * t773 + t1063 * t774, t1063 * t673 - t1061 * t671 - pkin(5) * (t1061 * t729 + t1063 * t728), t1063 * t674 - t1061 * t672 - pkin(5) * (t1061 * t734 + t1063 * t733), t1063 * t668 - t1061 * t667 - pkin(5) * (t1061 * t714 + t1063 * t713), t1063 * t664 - t1061 * t663 - pkin(5) * (t1061 * t676 + t1063 * t675); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1025, 0, t1026, 0, t996, t1093, t1100, pkin(5) * t1100, 0, 0, t1173, 0, t964, 0, t1185, t1186, t1187, pkin(5) * t1187 - qJ(2) * t1145 + t1063 * t870, t1091, t1061 * t961 + t1063 * t959, t907, -t1091, t1179, 0, -pkin(5) * t1178 + t1061 * t833 + t1063 * t831, pkin(5) * t908 + t1061 * t834 + t1063 * t832, t1061 * t823 + t1063 * t822 + pkin(5) * (-t1061 * t958 + t1063 * t960), t1061 * t743 + t1063 * t730 + pkin(5) * (-t1061 * t816 + t1063 * t817), t1061 * t893 + t1063 * t891, t1061 * t837 + t1063 * t835, t1061 * t855 + t1063 * t851, t1061 * t892 + t1063 * t890, t1061 * t852 + t1063 * t848, t1061 * t950 + t1063 * t949, t1061 * t721 + t1063 * t708 + pkin(5) * (-t1061 * t849 + t1063 * t853), t1061 * t722 + t1063 * t709 + pkin(5) * (-t1061 * t850 + t1063 * t854), t1061 * t701 + t1063 * t699 + pkin(5) * (-t1061 * t836 + t1063 * t838), t1061 * t683 + t1063 * t680 + pkin(5) * (-t1061 * t723 + t1063 * t724), t1061 * t747 + t1063 * t745, t1061 * t720 + t1063 * t719, t1061 * t740 + t1063 * t738, t1061 * t746 + t1063 * t744, t1061 * t741 + t1063 * t739, t1061 * t774 + t1063 * t773, t1061 * t673 + t1063 * t671 + pkin(5) * (-t1061 * t728 + t1063 * t729), t1061 * t674 + t1063 * t672 + pkin(5) * (-t1061 * t733 + t1063 * t734), t1061 * t668 + t1063 * t667 + pkin(5) * (-t1061 * t713 + t1063 * t714), t1061 * t664 + t1063 * t663 + pkin(5) * (-t1061 * t675 + t1063 * t676); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1029, t1030, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t928, t929, 0, t881, t1042, t1031, 0, t1044, 0, 0, t861, t860, t811, t763, t935, t882, t900, t934, t897, t1044, t731, t732, t727, t689, t791, t754, t782, t790, t783, t824, t682, t684, t670, t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1064, 0, 0, -g(3), -t1029, 0, 0, 0, t1017, 0, -t1016, 0, t1172, -t986, -t885, -qJ(2) * t885, t976, t961, t969, -t976, t970, 0, t833, t834, t823, t743, t893, t837, t855, t892, t852, t950, t721, t722, t701, t683, t747, t720, t740, t746, t741, t774, t673, t674, t668, t664; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, qJDD(1), 0, g(3), 0, -t1030, 0, 0, 0, t1016, 0, t1017, 0, t986, t1172, t1109, t870, t975, t959, t966, -t975, -t968, 0, t831, t832, t822, t730, t891, t835, t851, t890, t848, t949, t708, t709, t699, t680, t745, t719, t738, t744, t739, t773, t671, t672, t667, t663; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1029, t1030, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t928, t929, 0, t881, t1042, t1031, 0, t1044, 0, 0, t861, t860, t811, t763, t935, t882, t900, t934, t897, t1044, t731, t732, t727, t689, t791, t754, t782, t790, t783, t824, t682, t684, t670, t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1064, 0, 0, -t1162, t954, 0, t1114, t1015, t1005, -t1114, t1008, 0, t931, t932, -t844, -qJ(3) * t844, t952, t886, t904, t951, t901, -t1114, t752, t753, t737, t702, t793, t755, t784, t792, t785, t825, t690, t691, t679, t666; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, qJDD(1), 0, t1162, 0, t955, 0, t1034, -t1022, -t1043, -t1034, -t1124, 0, t913, t914, 0, -pkin(2) * t844, -t974, -t921, -t943, t973, -t940, -t978, t796, t795, t742, t710, -t813, -t765, -t800, -t812, -t801, -t829, t698, t700, t681, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t954, -t955, 0, 0, t1042, t1031, 0, t1044, 0, 0, t1119, t1085, t1099, t1161, t935, t882, t900, t934, t897, t1044, t1102, t1101, t1080, t1071, t791, t754, t782, t790, t783, t824, t1104, t1103, t1105, t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1043, t1124, t1034, 0, t1046, 0, 0, t936, t913, 0, t977, t923, t947, -t972, t944, 0, t842, t843, t762, -qJ(4) * t777, t815, t767, t802, t814, t803, t830, t707, t716, t688, t678; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1043, -t1138, t1124, -t1034, 0, -t936, 0, t914, 0, -t1018, -t995, -t991, t1018, t988, t1124, t807, t808, -pkin(3) * t922, -pkin(3) * t777, -t1163, -t927, -t877, t1163, t873, t1036, t718, t726, t736, t686; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1034, t1022, t1043, t1034, t1124, 0, -t913, -t914, 0, 0, t974, t921, t943, -t973, t940, t978, t1076, t1077, t1074, t1094, t813, t765, t800, t812, t801, t829, t1069, t1068, t1070, t1067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, t989, t993, -t1020, t1003, t1020, 0, t878, t827, 0, t869, t820, t864, t867, t865, t906, t786, t794, t704, -pkin(6) * t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1096, t990, t1006, -t1115, -t992, t1096, -t878, 0, t828, 0, t868, t818, t862, t866, t863, t905, t772, t776, t703, t705; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, t995, t991, -t1018, -t988, -t1124, -t827, -t828, 0, 0, t1163, t927, t877, -t1163, -t873, -t1036, t1083, t1075, t1168, t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t926, -t872, t1182, -t1141, t956, t1141, 0, t847, t759, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158, t1183, t957, t925, -t917, t1158, -t847, 0, t760, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1163, t927, t877, -t1163, -t873, -t1036, -t759, -t760, 0, 0;];
m_new_reg = t1;
