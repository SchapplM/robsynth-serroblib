% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-20 09:52
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-20 09:51:48
% EndTime: 2022-01-20 09:51:57
% DurationCPUTime: 9.20s
% Computational Cost: add. (38322->450), mult. (54314->683), div. (0->0), fcn. (34125->10), ass. (0->301)
t503 = (qJD(1) + qJD(2));
t500 = t503 ^ 2;
t501 = qJDD(1) + qJDD(2);
t506 = sin(pkin(8));
t508 = cos(pkin(8));
t467 = t500 * t508 + t501 * t506;
t470 = t500 * t506 - t501 * t508;
t510 = sin(qJ(2));
t513 = cos(qJ(2));
t415 = t467 * t513 - t470 * t510;
t504 = g(3) - qJDD(3);
t442 = qJ(3) * t467 - t504 * t508;
t574 = qJ(3) * t470 - t504 * t506;
t348 = pkin(6) * t415 + t442 * t513 - t510 * t574;
t419 = t467 * t510 + t470 * t513;
t511 = sin(qJ(1));
t514 = cos(qJ(1));
t365 = t415 * t511 + t419 * t514;
t586 = pkin(6) * t419 + t442 * t510 + t513 * t574;
t596 = pkin(5) * t365 + t348 * t511 + t514 * t586;
t573 = t415 * t514 - t419 * t511;
t595 = pkin(5) * t573 + t348 * t514 - t511 * t586;
t487 = g(1) * t514 + g(2) * t511;
t561 = qJD(1) ^ 2;
t521 = -t561 * pkin(1) - t487;
t486 = g(1) * t511 - t514 * g(2);
t523 = qJDD(1) * pkin(1) + t486;
t434 = t510 * t523 + t513 * t521;
t421 = -pkin(2) * t500 + t434;
t520 = -t510 * t521 + t513 * t523;
t519 = t501 * pkin(2) + t520;
t367 = t421 * t506 - t508 * t519;
t368 = t508 * t421 + t506 * t519;
t529 = t367 * t506 + t508 * t368;
t319 = t367 * t508 - t368 * t506;
t555 = t319 * t513;
t270 = -t510 * t529 + t555;
t556 = t319 * t510;
t580 = t513 * t529 + t556;
t234 = t270 * t511 + t514 * t580;
t592 = t270 * t514 - t511 * t580;
t507 = cos(pkin(9));
t505 = sin(pkin(9));
t502 = t505 ^ 2;
t517 = t507 ^ 2;
t562 = t500 * (t502 + t517);
t461 = t507 * t562;
t539 = t507 * t508;
t429 = -t461 * t506 + t501 * t539;
t540 = t506 * t507;
t431 = t461 * t508 + t501 * t540;
t378 = t429 * t513 - t431 * t510;
t380 = t429 * t510 + t431 * t513;
t326 = t378 * t514 - t380 * t511;
t589 = t378 * t511 + t380 * t514;
t474 = t500 * t513 + t501 * t510;
t477 = t500 * t510 - t501 * t513;
t424 = t474 * t511 + t477 * t514;
t451 = pkin(6) * t474 - g(3) * t513;
t575 = pkin(6) * t477 - g(3) * t510;
t588 = pkin(5) * t424 + t451 * t511 + t514 * t575;
t525 = t474 * t514 - t477 * t511;
t587 = pkin(5) * t525 + t451 * t514 - t511 * t575;
t577 = -pkin(3) * t500 + qJ(4) * t501 + (2 * qJD(4) * t503) + t368;
t528 = t513 * t434 - t510 * t520;
t388 = -t434 * t510 - t513 * t520;
t551 = t388 * t514;
t581 = -t511 * t528 + t551;
t552 = t388 * t511;
t332 = t514 * t528 + t552;
t509 = sin(qJ(5));
t512 = cos(qJ(5));
t576 = t505 * t509 - t507 * t512;
t456 = t576 * t503;
t524 = t505 * t512 + t507 * t509;
t458 = t524 * t503;
t407 = t458 * t456;
t563 = qJDD(5) - t407;
t579 = t509 * t563;
t578 = t512 * t563;
t543 = t505 * t507;
t435 = t467 * t543;
t531 = t501 * t543;
t436 = -t500 * t505 * t540 + t508 * t531;
t392 = t435 * t513 + t436 * t510;
t395 = t435 * t510 - t436 * t513;
t572 = t392 * t514 - t395 * t511;
t571 = t392 * t511 + t395 * t514;
t564 = t524 * t501;
t493 = t517 * t500;
t548 = t500 * t502;
t472 = t493 + t548;
t454 = t456 ^ 2;
t455 = t458 ^ 2;
t496 = t501 * pkin(3);
t495 = t507 * t504;
t336 = -t495 + (pkin(4) * t500 * t507 - pkin(7) * t501 - t577) * t505;
t343 = -t505 * t504 + t577 * t507;
t547 = t501 * t507;
t337 = -pkin(4) * t493 + pkin(7) * t547 + t343;
t278 = -t512 * t336 + t337 * t509;
t279 = t509 * t336 + t512 * t337;
t249 = -t278 * t512 + t279 * t509;
t558 = t249 * t505;
t557 = t249 * t507;
t352 = -t500 * qJ(4) + qJDD(4) + t367 - t496;
t340 = -pkin(4) * t547 - t472 * pkin(7) + t352;
t554 = t340 * t509;
t553 = t340 * t512;
t400 = qJDD(5) + t407;
t550 = t400 * t509;
t549 = t400 * t512;
t544 = t505 * t506;
t542 = t505 * t508;
t536 = t456 * qJD(5);
t535 = t458 * qJD(5);
t533 = t506 * t407;
t532 = t508 * t407;
t530 = -t352 + t496;
t250 = t278 * t509 + t512 * t279;
t342 = t577 * t505 + t495;
t296 = t342 * t505 + t507 * t343;
t438 = -t486 * t511 - t514 * t487;
t481 = qJDD(1) * t514 - t511 * t561;
t526 = -pkin(5) * t481 - g(3) * t511;
t452 = t576 * t501;
t295 = t342 * t507 - t343 * t505;
t437 = t486 * t514 - t487 * t511;
t515 = qJD(5) ^ 2;
t492 = t517 * t501;
t491 = t502 * t501;
t480 = qJDD(1) * t511 + t561 * t514;
t473 = t493 - t548;
t465 = t492 - t491;
t464 = t492 + t491;
t463 = -pkin(5) * t480 + g(3) * t514;
t460 = t505 * t562;
t445 = -t455 - t515;
t444 = -t455 + t515;
t443 = t454 - t515;
t430 = t460 * t508 + t501 * t544;
t427 = t460 * t506 - t501 * t542;
t414 = t465 * t508 - t473 * t506;
t413 = t464 * t508 - t472 * t506;
t412 = t465 * t506 + t473 * t508;
t411 = t464 * t506 + t472 * t508;
t406 = -t455 + t454;
t405 = t564 - t536;
t404 = t564 - 0.2e1 * t536;
t403 = -t452 - t535;
t402 = t452 + 0.2e1 * t535;
t398 = -t515 - t454;
t397 = (-t456 * t512 + t458 * t509) * qJD(5);
t396 = (-t456 * t509 - t458 * t512) * qJD(5);
t391 = -t454 - t455;
t385 = t405 * t512 - t509 * t535;
t384 = t405 * t509 + t512 * t535;
t383 = -t403 * t509 + t512 * t536;
t382 = t403 * t512 + t509 * t536;
t379 = -t427 * t510 + t430 * t513;
t376 = t427 * t513 + t430 * t510;
t375 = -t445 * t509 - t549;
t374 = -t444 * t509 + t578;
t373 = t443 * t512 - t550;
t372 = t445 * t512 - t550;
t371 = t444 * t512 + t579;
t370 = t443 * t509 + t549;
t369 = pkin(1) * g(3) + pkin(6) * t528;
t362 = -t412 * t510 + t414 * t513;
t361 = -t411 * t510 + t413 * t513;
t360 = t412 * t513 + t414 * t510;
t359 = t411 * t513 + t413 * t510;
t356 = -t402 * t512 - t404 * t509;
t355 = -t452 * t512 + t509 * t564;
t354 = -t402 * t509 + t404 * t512;
t353 = -t452 * t509 - t512 * t564;
t351 = t398 * t512 - t579;
t350 = t398 * t509 + t578;
t344 = -t396 * t505 + t397 * t507;
t339 = qJDD(5) * t506 + t344 * t508;
t338 = -qJDD(5) * t508 + t344 * t506;
t330 = -t384 * t505 + t385 * t507;
t329 = -t382 * t505 + t383 * t507;
t327 = -t376 * t511 + t379 * t514;
t325 = t376 * t514 + t379 * t511;
t324 = -t372 * t505 + t375 * t507;
t323 = -t371 * t505 + t374 * t507;
t322 = -t370 * t505 + t373 * t507;
t321 = t372 * t507 + t375 * t505;
t316 = -t359 * t511 + t361 * t514;
t315 = t359 * t514 + t361 * t511;
t314 = pkin(2) * t504 + qJ(3) * t529;
t313 = t323 * t508 + t506 * t564;
t312 = t322 * t508 - t452 * t506;
t311 = t323 * t506 - t508 * t564;
t310 = t322 * t506 + t452 * t508;
t309 = -t354 * t505 + t356 * t507;
t308 = -t353 * t505 + t355 * t507;
t307 = t353 * t507 + t355 * t505;
t306 = -t350 * t505 + t351 * t507;
t305 = t350 * t507 + t351 * t505;
t304 = -pkin(7) * t372 + t553;
t303 = t330 * t508 + t533;
t302 = t329 * t508 - t533;
t301 = t330 * t506 - t532;
t300 = t329 * t506 + t532;
t299 = t324 * t508 + t404 * t506;
t298 = t324 * t506 - t404 * t508;
t297 = -pkin(7) * t350 + t554;
t293 = -pkin(4) * t404 + pkin(7) * t375 + t554;
t292 = -t338 * t510 + t339 * t513;
t291 = t338 * t513 + t339 * t510;
t290 = t309 * t508 - t406 * t506;
t289 = t309 * t506 + t406 * t508;
t288 = t306 * t508 + t402 * t506;
t287 = t306 * t506 - t402 * t508;
t286 = -qJ(3) * t427 - t343 * t506 + t352 * t539;
t285 = -qJ(3) * t429 - t342 * t506 + t352 * t542;
t284 = qJ(3) * t430 + t343 * t508 + t352 * t540;
t283 = -qJ(3) * t431 + t342 * t508 + t352 * t544;
t282 = -pkin(4) * t402 + pkin(7) * t351 - t553;
t281 = t308 * t508 + t391 * t506;
t280 = t308 * t506 - t391 * t508;
t276 = -qJ(3) * t411 + t295 * t508;
t275 = qJ(3) * t413 + t295 * t506;
t274 = -pkin(3) * t307 - pkin(4) * t353;
t273 = t296 * t508 + t352 * t506;
t272 = t296 * t506 - t352 * t508;
t267 = -t311 * t510 + t313 * t513;
t266 = -t310 * t510 + t312 * t513;
t265 = t311 * t513 + t313 * t510;
t264 = t310 * t513 + t312 * t510;
t263 = -t301 * t510 + t303 * t513;
t262 = -t300 * t510 + t302 * t513;
t261 = t301 * t513 + t303 * t510;
t260 = t300 * t513 + t302 * t510;
t259 = -t298 * t510 + t299 * t513;
t258 = t298 * t513 + t299 * t510;
t257 = -t289 * t510 + t290 * t513;
t256 = t289 * t513 + t290 * t510;
t255 = -pkin(3) * t321 - pkin(4) * t372 + t279;
t254 = -t287 * t510 + t288 * t513;
t253 = t287 * t513 + t288 * t510;
t252 = -t280 * t510 + t281 * t513;
t251 = t280 * t513 + t281 * t510;
t248 = -pkin(3) * t305 - pkin(4) * t350 + t278;
t247 = -pkin(6) * t376 - t284 * t510 + t286 * t513;
t246 = -pkin(6) * t378 - t283 * t510 + t285 * t513;
t245 = pkin(6) * t379 + t284 * t513 + t286 * t510;
t244 = -pkin(6) * t380 + t283 * t513 + t285 * t510;
t243 = -qJ(4) * t321 - t293 * t505 + t304 * t507;
t242 = -pkin(7) * t353 - t249;
t241 = -pkin(6) * t359 - t275 * t510 + t276 * t513;
t240 = pkin(6) * t361 + t275 * t513 + t276 * t510;
t239 = -pkin(4) * t340 + pkin(7) * t250;
t238 = -t272 * t510 + t273 * t513;
t237 = t272 * t513 + t273 * t510;
t236 = -qJ(4) * t305 - t282 * t505 + t297 * t507;
t235 = -pkin(4) * t391 + pkin(7) * t355 + t250;
t232 = pkin(6) * t270 + qJ(3) * t555 - t314 * t510;
t231 = pkin(1) * t504 + pkin(6) * t580 + qJ(3) * t556 + t314 * t513;
t230 = -qJ(3) * t272 - (pkin(3) * t506 - qJ(4) * t508) * t295;
t229 = -t258 * t511 + t259 * t514;
t228 = t258 * t514 + t259 * t511;
t227 = -t253 * t511 + t254 * t514;
t226 = t253 * t514 + t254 * t511;
t225 = qJ(3) * t273 - (-pkin(3) * t508 - qJ(4) * t506 - pkin(2)) * t295;
t224 = -t251 * t511 + t252 * t514;
t223 = t251 * t514 + t252 * t511;
t222 = t250 * t507 - t558;
t221 = t250 * t505 + t557;
t220 = t222 * t508 + t340 * t506;
t219 = t222 * t506 - t340 * t508;
t218 = -qJ(3) * t298 + t243 * t508 - t255 * t506;
t217 = -t237 * t511 + t238 * t514;
t216 = t237 * t514 + t238 * t511;
t215 = -pkin(2) * t321 + qJ(3) * t299 + t243 * t506 + t255 * t508;
t214 = -qJ(3) * t287 + t236 * t508 - t248 * t506;
t213 = -qJ(4) * t307 - t235 * t505 + t242 * t507;
t212 = -pkin(3) * t221 - pkin(4) * t249;
t211 = -pkin(2) * t305 + qJ(3) * t288 + t236 * t506 + t248 * t508;
t210 = -qJ(3) * t280 + t213 * t508 - t274 * t506;
t209 = -pkin(7) * t557 - qJ(4) * t221 - t239 * t505;
t208 = -pkin(2) * t307 + qJ(3) * t281 + t213 * t506 + t274 * t508;
t207 = -t219 * t510 + t220 * t513;
t206 = t219 * t513 + t220 * t510;
t205 = -pkin(6) * t237 - t225 * t510 + t230 * t513;
t204 = pkin(1) * t295 + pkin(6) * t238 + t225 * t513 + t230 * t510;
t203 = -pkin(6) * t258 - t215 * t510 + t218 * t513;
t202 = -pkin(1) * t321 + pkin(6) * t259 + t215 * t513 + t218 * t510;
t201 = -pkin(6) * t253 - t211 * t510 + t214 * t513;
t200 = -pkin(1) * t305 + pkin(6) * t254 + t211 * t513 + t214 * t510;
t199 = -t206 * t511 + t207 * t514;
t198 = t206 * t514 + t207 * t511;
t197 = -pkin(6) * t251 - t208 * t510 + t210 * t513;
t196 = -pkin(1) * t307 + pkin(6) * t252 + t208 * t513 + t210 * t510;
t195 = -qJ(3) * t219 + t209 * t508 - t212 * t506;
t194 = -pkin(2) * t221 + qJ(3) * t220 + t209 * t506 + t212 * t508;
t193 = -pkin(6) * t206 - t194 * t510 + t195 * t513;
t192 = -pkin(1) * t221 + pkin(6) * t207 + t194 * t513 + t195 * t510;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t480, -t481, 0, t438, 0, 0, 0, 0, 0, 0, -t525, t424, 0, t332, 0, 0, 0, 0, 0, 0, -t573, t365, 0, t234, 0, 0, 0, 0, 0, 0, -t589, t327, t316, t217, 0, 0, 0, 0, 0, 0, t227, t229, t224, t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t481, -t480, 0, t437, 0, 0, 0, 0, 0, 0, -t424, -t525, 0, -t581, 0, 0, 0, 0, 0, 0, -t365, -t573, 0, -t592, 0, 0, 0, 0, 0, 0, t326, t325, t315, t216, 0, 0, 0, 0, 0, 0, t226, t228, t223, t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t504, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t295, 0, 0, 0, 0, 0, 0, t305, t321, t307, t221; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t481, 0, -t480, 0, t526, -t463, -t437, -pkin(5) * t437, 0, 0, -t424, 0, -t525, 0, t588, t587, t581, pkin(5) * t581 + pkin(6) * t551 - t369 * t511, 0, 0, -t365, 0, -t573, 0, t596, t595, t592, pkin(5) * t592 - t231 * t511 + t232 * t514, -t571, -t360 * t511 + t362 * t514, t327, t571, t589, 0, -pkin(5) * t326 - t244 * t511 + t246 * t514, -pkin(5) * t325 - t245 * t511 + t247 * t514, -pkin(5) * t315 - t240 * t511 + t241 * t514, -pkin(5) * t216 - t204 * t511 + t205 * t514, -t261 * t511 + t263 * t514, -t256 * t511 + t257 * t514, -t265 * t511 + t267 * t514, -t260 * t511 + t262 * t514, -t264 * t511 + t266 * t514, -t291 * t511 + t292 * t514, -pkin(5) * t226 - t200 * t511 + t201 * t514, -pkin(5) * t228 - t202 * t511 + t203 * t514, -pkin(5) * t223 - t196 * t511 + t197 * t514, -pkin(5) * t198 - t192 * t511 + t193 * t514; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t480, 0, t481, 0, t463, t526, t438, pkin(5) * t438, 0, 0, t525, 0, -t424, 0, -t587, t588, t332, pkin(5) * t332 + pkin(6) * t552 + t369 * t514, 0, 0, t573, 0, -t365, 0, -t595, t596, t234, pkin(5) * t234 + t231 * t514 + t232 * t511, t572, t360 * t514 + t362 * t511, t325, -t572, -t326, 0, -pkin(5) * t589 + t244 * t514 + t246 * t511, pkin(5) * t327 + t245 * t514 + t247 * t511, pkin(5) * t316 + t240 * t514 + t241 * t511, pkin(5) * t217 + t204 * t514 + t205 * t511, t261 * t514 + t263 * t511, t256 * t514 + t257 * t511, t265 * t514 + t267 * t511, t260 * t514 + t262 * t511, t264 * t514 + t266 * t511, t291 * t514 + t292 * t511, pkin(5) * t227 + t200 * t514 + t201 * t511, pkin(5) * t229 + t202 * t514 + t203 * t511, pkin(5) * t224 + t196 * t514 + t197 * t511, pkin(5) * t199 + t192 * t514 + t193 * t511; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t486, t487, 0, 0, 0, 0, 0, 0, 0, t501, -pkin(1) * t477 + t520, -pkin(1) * t474 - t434, 0, -pkin(1) * t388, 0, 0, 0, 0, 0, t501, -pkin(1) * t419 - pkin(2) * t470 - t367, -pkin(1) * t415 - pkin(2) * t467 - t368, 0, -pkin(1) * t270 - pkin(2) * t319, t491, 0.2e1 * t531, 0, t492, 0, 0, pkin(1) * t378 + pkin(2) * t429 - qJ(4) * t461 + t507 * t530, pkin(1) * t376 + pkin(2) * t427 + qJ(4) * t460 - t505 * t530, pkin(1) * t359 + pkin(2) * t411 + pkin(3) * t472 + qJ(4) * t464 + t296, pkin(1) * t237 + pkin(2) * t272 - pkin(3) * t352 + qJ(4) * t296, t384 * t507 + t385 * t505, t354 * t507 + t356 * t505, t371 * t507 + t374 * t505, t382 * t507 + t383 * t505, t370 * t507 + t373 * t505, t396 * t507 + t397 * t505, pkin(1) * t253 + pkin(2) * t287 - pkin(3) * t402 + qJ(4) * t306 + t282 * t507 + t297 * t505, pkin(1) * t258 + pkin(2) * t298 - pkin(3) * t404 + qJ(4) * t324 + t293 * t507 + t304 * t505, pkin(1) * t251 + pkin(2) * t280 - pkin(3) * t391 + qJ(4) * t308 + t235 * t507 + t242 * t505, pkin(1) * t206 + pkin(2) * t219 - pkin(3) * t340 - pkin(7) * t558 + qJ(4) * t222 + t239 * t507;];
tauB_reg = t1;
