% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2022-01-23 09:23
% Revision: fd3771346c4aea32fdeb66112c511235427c26a7 (2022-01-20)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2022-01-23 09:23:16
% EndTime: 2022-01-23 09:23:28
% DurationCPUTime: 12.53s
% Computational Cost: add. (54520->599), mult. (119643->917), div. (0->0), fcn. (80292->10), ass. (0->412)
t626 = sin(qJ(1));
t629 = cos(qJ(1));
t597 = t629 * g(1) + t626 * g(2);
t685 = qJD(1) ^ 2;
t582 = -t685 * pkin(1) - t597;
t620 = sin(pkin(8));
t622 = cos(pkin(8));
t596 = t626 * g(1) - t629 * g(2);
t633 = qJDD(1) * pkin(1) + t596;
t532 = t620 * t582 - t622 * t633;
t533 = t622 * t582 + t620 * t633;
t641 = t620 * t532 + t622 * t533;
t469 = t622 * t532 - t620 * t533;
t661 = t629 * t469;
t703 = -t626 * t641 + t661;
t670 = t626 * t469;
t413 = t629 * t641 + t670;
t586 = t620 * qJDD(1) + t622 * t685;
t587 = t622 * qJDD(1) - t620 * t685;
t537 = -t626 * t586 + t629 * t587;
t617 = g(3) - qJDD(2);
t559 = qJ(2) * t586 - t622 * t617;
t634 = -qJ(2) * t587 - t620 * t617;
t702 = -pkin(5) * t537 + t626 * t559 + t629 * t634;
t619 = sin(pkin(9));
t621 = cos(pkin(9));
t628 = cos(qJ(3));
t625 = sin(qJ(3));
t660 = qJD(1) * t625;
t569 = -t621 * t628 * qJD(1) + t619 * t660;
t571 = (t619 * t628 + t621 * t625) * qJD(1);
t531 = t571 * t569;
t689 = qJDD(3) - t531;
t701 = t619 * t689;
t700 = t621 * t689;
t624 = sin(qJ(5));
t627 = cos(qJ(5));
t510 = t627 * t569 + t624 * t571;
t512 = -t624 * t569 + t627 * t571;
t461 = t512 * t510;
t649 = qJDD(3) + qJDD(5);
t692 = -t461 + t649;
t699 = t624 * t692;
t698 = t627 * t692;
t690 = t629 * t586 + t626 * t587;
t696 = pkin(5) * t690 + t629 * t559 - t626 * t634;
t615 = qJD(3) + qJD(5);
t504 = t615 * t510;
t653 = qJD(1) * qJD(3);
t642 = t628 * t653;
t651 = t625 * qJDD(1);
t584 = t642 + t651;
t643 = t625 * t653;
t650 = t628 * qJDD(1);
t632 = t643 - t650;
t535 = t621 * t584 - t619 * t632;
t639 = t619 * t584 + t621 * t632;
t631 = t510 * qJD(5) - t627 * t535 + t624 * t639;
t691 = -t504 - t631;
t640 = t624 * t535 + t627 * t639;
t407 = (qJD(5) - t615) * t512 + t640;
t508 = t510 ^ 2;
t509 = t512 ^ 2;
t687 = t569 ^ 2;
t568 = t571 ^ 2;
t613 = t615 ^ 2;
t686 = t628 ^ 2;
t684 = t615 * t624;
t683 = t615 * t627;
t514 = -t685 * pkin(2) + qJDD(1) * pkin(6) + t533;
t493 = t625 * t514 + t628 * t617;
t603 = t628 * t685 * t625;
t594 = qJDD(3) + t603;
t457 = (-t584 + t642) * qJ(4) + t594 * pkin(3) - t493;
t495 = t628 * t514 - t625 * t617;
t593 = qJD(3) * pkin(3) - qJ(4) * t660;
t611 = t686 * t685;
t460 = -pkin(3) * t611 - qJ(4) * t632 - qJD(3) * t593 + t495;
t390 = 0.2e1 * qJD(4) * t571 - t621 * t457 + t619 * t460;
t659 = qJD(3) * t569;
t491 = -t535 - t659;
t365 = pkin(4) * t689 + pkin(7) * t491 - t390;
t391 = -0.2e1 * qJD(4) * t569 + t619 * t457 + t621 * t460;
t555 = qJD(3) * pkin(4) - t571 * pkin(7);
t369 = -t687 * pkin(4) - pkin(7) * t639 - qJD(3) * t555 + t391;
t318 = -t627 * t365 + t624 * t369;
t319 = t624 * t365 + t627 * t369;
t283 = -t627 * t318 + t624 * t319;
t682 = t619 * t283;
t513 = -qJDD(1) * pkin(2) - t685 * pkin(6) + t532;
t466 = t632 * pkin(3) - qJ(4) * t611 + t593 * t660 + qJDD(4) + t513;
t681 = t619 * t466;
t526 = qJDD(3) + t531;
t680 = t619 * t526;
t679 = t621 * t283;
t678 = t621 * t466;
t677 = t621 * t526;
t396 = pkin(4) * t639 - t687 * pkin(7) + t571 * t555 + t466;
t676 = t624 * t396;
t454 = t461 + t649;
t675 = t624 * t454;
t337 = -t621 * t390 + t619 * t391;
t674 = t625 * t337;
t673 = t625 * t513;
t672 = t625 * t594;
t595 = qJDD(3) - t603;
t671 = t625 * t595;
t667 = t627 * t396;
t666 = t627 * t454;
t665 = t628 * t337;
t664 = t628 * t513;
t585 = -0.2e1 * t643 + t650;
t663 = t628 * t585;
t662 = t628 * t595;
t658 = qJD(3) * t571;
t657 = qJD(3) * t619;
t656 = qJD(3) * t621;
t616 = t625 ^ 2;
t655 = t616 * t685;
t652 = t622 * qJDD(3);
t648 = t616 + t686;
t647 = t620 * t461;
t646 = t620 * t531;
t645 = t622 * t461;
t644 = t622 * t531;
t284 = t624 * t318 + t627 * t319;
t338 = t619 * t390 + t621 * t391;
t440 = t625 * t493 + t628 * t495;
t544 = -t626 * t596 - t629 * t597;
t637 = t620 * t603;
t636 = t622 * t603;
t590 = t629 * qJDD(1) - t626 * t685;
t635 = -pkin(5) * t590 - t626 * g(3);
t439 = t628 * t493 - t625 * t495;
t543 = t629 * t596 - t626 * t597;
t489 = -t639 + t658;
t630 = qJD(3) ^ 2;
t608 = t620 * qJDD(3);
t602 = -t611 - t630;
t601 = t611 - t630;
t600 = -t630 - t655;
t599 = t630 - t655;
t592 = t611 - t655;
t591 = t611 + t655;
t589 = t626 * qJDD(1) + t629 * t685;
t588 = t648 * qJDD(1);
t583 = 0.2e1 * t642 + t651;
t580 = t628 * t594;
t579 = t648 * t653;
t567 = -pkin(5) * t589 + t629 * g(3);
t562 = -t568 - t630;
t561 = -t568 + t630;
t560 = -t630 + t687;
t554 = t628 * t584 - t616 * t653;
t553 = t625 * t632 - t686 * t653;
t552 = t622 * t579 + t608;
t551 = t620 * t579 - t652;
t550 = -t625 * t600 - t662;
t549 = -t625 * t599 + t580;
t548 = t628 * t602 - t672;
t547 = t628 * t601 - t671;
t546 = t628 * t600 - t671;
t545 = t625 * t602 + t580;
t542 = t622 * t588 - t620 * t591;
t541 = t620 * t588 + t622 * t591;
t536 = -t625 * t583 + t663;
t529 = -t568 + t687;
t524 = -t630 - t687;
t522 = t622 * t554 - t637;
t521 = t622 * t553 + t637;
t520 = t620 * t554 + t636;
t519 = t620 * t553 - t636;
t518 = t622 * t549 + t620 * t651;
t517 = t622 * t547 + t620 * t650;
t516 = t620 * t549 - t622 * t651;
t515 = t620 * t547 - t622 * t650;
t506 = (-t569 * t621 + t571 * t619) * qJD(3);
t505 = (-t569 * t619 - t571 * t621) * qJD(3);
t502 = t622 * t550 + t620 * t583;
t501 = t622 * t548 - t620 * t585;
t500 = t620 * t550 - t622 * t583;
t499 = t620 * t548 + t622 * t585;
t498 = -t509 + t613;
t497 = t508 - t613;
t496 = -t509 - t613;
t494 = t622 * t536 - t620 * t592;
t492 = t620 * t536 + t622 * t592;
t490 = t535 - t659;
t487 = t639 + t658;
t486 = -t568 - t687;
t484 = t621 * t535 - t571 * t657;
t483 = t619 * t535 + t571 * t656;
t482 = t569 * t656 + t619 * t639;
t481 = t569 * t657 - t621 * t639;
t480 = -t619 * t562 - t677;
t479 = -t619 * t561 + t700;
t478 = t621 * t560 - t680;
t477 = t621 * t562 - t680;
t476 = t621 * t561 + t701;
t475 = t619 * t560 + t677;
t474 = -t626 * t541 + t629 * t542;
t473 = t629 * t541 + t626 * t542;
t472 = -pkin(6) * t546 + t664;
t471 = -pkin(6) * t545 + t673;
t465 = -pkin(2) * t546 + t495;
t464 = -pkin(2) * t545 + t493;
t463 = t621 * t524 - t701;
t462 = t619 * t524 + t700;
t459 = pkin(1) * t617 + qJ(2) * t641;
t458 = -t509 + t508;
t452 = -t613 - t508;
t449 = -t625 * t505 + t628 * t506;
t448 = (-t510 * t627 + t512 * t624) * t615;
t447 = (-t510 * t624 - t512 * t627) * t615;
t446 = -t626 * t500 + t629 * t502;
t445 = -t626 * t499 + t629 * t501;
t444 = t629 * t500 + t626 * t502;
t443 = t629 * t499 + t626 * t501;
t442 = t622 * t449 + t608;
t441 = t620 * t449 - t652;
t437 = t621 * t489 - t619 * t491;
t436 = -t621 * t487 - t619 * t490;
t435 = t619 * t489 + t621 * t491;
t434 = -t619 * t487 + t621 * t490;
t432 = -t512 * qJD(5) - t640;
t431 = -t508 - t509;
t430 = -t625 * t483 + t628 * t484;
t429 = -t625 * t481 + t628 * t482;
t428 = -t625 * t477 + t628 * t480;
t427 = -t625 * t476 + t628 * t479;
t426 = -t625 * t475 + t628 * t478;
t425 = t628 * t477 + t625 * t480;
t424 = t627 * t497 - t675;
t423 = -t624 * t498 + t698;
t422 = t624 * t497 + t666;
t421 = t627 * t498 + t699;
t420 = -t624 * t496 - t666;
t419 = t627 * t496 - t675;
t418 = -qJ(2) * t541 + t622 * t439;
t417 = qJ(2) * t542 + t620 * t439;
t416 = -qJ(4) * t477 + t678;
t415 = t622 * t440 + t620 * t513;
t414 = t620 * t440 - t622 * t513;
t411 = -t504 + t631;
t406 = (qJD(5) + t615) * t512 + t640;
t405 = -qJ(4) * t462 + t681;
t404 = t622 * t430 + t646;
t403 = t622 * t429 - t646;
t402 = t620 * t430 - t644;
t401 = t620 * t429 + t644;
t400 = -t512 * t684 - t627 * t631;
t399 = t512 * t683 - t624 * t631;
t398 = -t624 * t432 + t510 * t683;
t397 = t627 * t432 + t510 * t684;
t395 = -t625 * t462 + t628 * t463;
t394 = t628 * t462 + t625 * t463;
t393 = t627 * t452 - t699;
t392 = t624 * t452 + t698;
t389 = t622 * t428 + t620 * t490;
t388 = t622 * t427 - t620 * t491;
t387 = t622 * t426 + t489 * t620;
t386 = t620 * t428 - t622 * t490;
t385 = t620 * t427 + t622 * t491;
t384 = t620 * t426 - t489 * t622;
t382 = -pkin(3) * t490 + qJ(4) * t480 + t681;
t381 = -t619 * t447 + t621 * t448;
t380 = t621 * t447 + t619 * t448;
t379 = -qJ(2) * t500 - t620 * t465 + t622 * t472;
t378 = -qJ(2) * t499 - t620 * t464 + t622 * t471;
t377 = -pkin(3) * t487 + qJ(4) * t463 - t678;
t376 = -t625 * t435 + t628 * t437;
t375 = -t625 * t434 + t628 * t436;
t374 = t628 * t435 + t625 * t437;
t373 = t622 * t395 + t620 * t487;
t372 = t620 * t395 - t622 * t487;
t371 = -pkin(1) * t546 + qJ(2) * t502 + t622 * t465 + t620 * t472;
t370 = -pkin(1) * t545 + qJ(2) * t501 + t622 * t464 + t620 * t471;
t368 = t622 * t375 - t620 * t529;
t367 = t620 * t375 + t622 * t529;
t362 = -t619 * t422 + t621 * t424;
t361 = -t619 * t421 + t621 * t423;
t360 = t621 * t422 + t619 * t424;
t359 = t621 * t421 + t619 * t423;
t358 = t622 * t376 + t620 * t486;
t357 = t620 * t376 - t622 * t486;
t356 = -t619 * t419 + t621 * t420;
t355 = t621 * t419 + t619 * t420;
t354 = -pkin(7) * t419 + t667;
t353 = -t626 * t414 + t629 * t415;
t352 = t629 * t414 + t626 * t415;
t351 = -t407 * t627 - t624 * t411;
t350 = -t627 * t406 - t624 * t691;
t349 = -t407 * t624 + t627 * t411;
t348 = -t624 * t406 + t627 * t691;
t347 = -t619 * t399 + t621 * t400;
t346 = -t619 * t397 + t621 * t398;
t345 = t621 * t399 + t619 * t400;
t344 = t621 * t397 + t619 * t398;
t343 = -pkin(2) * t374 - pkin(3) * t435;
t342 = -pkin(7) * t392 + t676;
t341 = -t619 * t392 + t621 * t393;
t340 = t621 * t392 + t619 * t393;
t339 = -qJ(2) * t414 - (pkin(2) * t620 - pkin(6) * t622) * t439;
t336 = -pkin(2) * t425 - pkin(3) * t477 + t391;
t335 = -t626 * t386 + t629 * t389;
t334 = t629 * t386 + t626 * t389;
t333 = -t625 * t380 + t628 * t381;
t332 = t622 * t333 + t620 * t649;
t331 = t620 * t333 - t622 * t649;
t330 = -pkin(2) * t394 - pkin(3) * t462 + t390;
t329 = -t626 * t372 + t629 * t373;
t328 = t629 * t372 + t626 * t373;
t327 = -pkin(3) * t466 + qJ(4) * t338;
t326 = -pkin(4) * t691 + pkin(7) * t420 + t676;
t325 = -pkin(6) * t425 - t625 * t382 + t628 * t416;
t324 = qJ(2) * t415 - (-pkin(2) * t622 - pkin(6) * t620 - pkin(1)) * t439;
t323 = -qJ(4) * t435 - t337;
t322 = -pkin(4) * t406 + pkin(7) * t393 - t667;
t321 = -pkin(6) * t394 - t625 * t377 + t628 * t405;
t320 = -pkin(3) * t486 + qJ(4) * t437 + t338;
t316 = -t625 * t360 + t628 * t362;
t315 = -t625 * t359 + t628 * t361;
t314 = -t626 * t357 + t629 * t358;
t313 = t629 * t357 + t626 * t358;
t312 = -t625 * t355 + t628 * t356;
t311 = t628 * t355 + t625 * t356;
t310 = -t619 * t349 + t621 * t351;
t309 = -t619 * t348 + t621 * t350;
t308 = t621 * t349 + t619 * t351;
t307 = t621 * t348 + t619 * t350;
t306 = -t625 * t345 + t628 * t347;
t305 = -t625 * t344 + t628 * t346;
t304 = -t625 * t340 + t628 * t341;
t303 = t628 * t340 + t625 * t341;
t302 = t622 * t316 - t620 * t407;
t301 = t622 * t315 - t620 * t411;
t300 = t620 * t316 + t622 * t407;
t299 = t620 * t315 + t622 * t411;
t298 = t622 * t312 + t620 * t691;
t297 = t620 * t312 - t622 * t691;
t296 = t622 * t306 + t647;
t295 = t622 * t305 - t647;
t294 = t620 * t306 - t645;
t293 = t620 * t305 + t645;
t292 = t628 * t338 - t674;
t291 = t625 * t338 + t665;
t290 = t622 * t292 + t620 * t466;
t289 = t620 * t292 - t622 * t466;
t288 = t622 * t304 + t620 * t406;
t287 = t620 * t304 - t622 * t406;
t286 = -qJ(2) * t386 + t622 * t325 - t620 * t336;
t285 = -qJ(4) * t355 - t619 * t326 + t621 * t354;
t282 = -pkin(2) * t291 - pkin(3) * t337;
t281 = -pkin(1) * t425 + qJ(2) * t389 + t620 * t325 + t622 * t336;
t280 = -qJ(2) * t372 + t622 * t321 - t620 * t330;
t279 = -qJ(4) * t340 - t619 * t322 + t621 * t342;
t278 = -pkin(3) * t691 + qJ(4) * t356 + t621 * t326 + t619 * t354;
t277 = -pkin(4) * t396 + pkin(7) * t284;
t276 = -pkin(6) * t374 - t625 * t320 + t628 * t323;
t275 = -t625 * t308 + t628 * t310;
t274 = -t625 * t307 + t628 * t309;
t273 = t628 * t308 + t625 * t310;
t272 = -pkin(3) * t406 + qJ(4) * t341 + t621 * t322 + t619 * t342;
t271 = -pkin(1) * t394 + qJ(2) * t373 + t620 * t321 + t622 * t330;
t270 = t622 * t274 - t620 * t458;
t269 = t620 * t274 + t622 * t458;
t268 = -pkin(7) * t349 - t283;
t267 = t622 * t275 + t620 * t431;
t266 = t620 * t275 - t622 * t431;
t265 = -t626 * t297 + t629 * t298;
t264 = t629 * t297 + t626 * t298;
t263 = -pkin(4) * t431 + pkin(7) * t351 + t284;
t262 = -pkin(2) * t311 - pkin(3) * t355 - pkin(4) * t419 + t319;
t261 = -pkin(6) * t291 - qJ(4) * t665 - t625 * t327;
t260 = -t626 * t289 + t629 * t290;
t259 = t629 * t289 + t626 * t290;
t258 = -t626 * t287 + t629 * t288;
t257 = t629 * t287 + t626 * t288;
t256 = -pkin(2) * t303 - pkin(3) * t340 - pkin(4) * t392 + t318;
t255 = -qJ(2) * t357 + t622 * t276 - t620 * t343;
t254 = -pkin(1) * t374 + qJ(2) * t358 + t620 * t276 + t622 * t343;
t253 = t621 * t284 - t682;
t252 = t619 * t284 + t679;
t251 = -pkin(2) * t273 - pkin(3) * t308 - pkin(4) * t349;
t250 = -t626 * t266 + t629 * t267;
t249 = t629 * t266 + t626 * t267;
t248 = -pkin(6) * t311 - t625 * t278 + t628 * t285;
t247 = -pkin(6) * t303 - t625 * t272 + t628 * t279;
t246 = -qJ(4) * t308 - t619 * t263 + t621 * t268;
t245 = -qJ(2) * t289 + t622 * t261 - t620 * t282;
t244 = -pkin(3) * t431 + qJ(4) * t310 + t621 * t263 + t619 * t268;
t243 = -t625 * t252 + t628 * t253;
t242 = t628 * t252 + t625 * t253;
t241 = -pkin(1) * t291 + qJ(2) * t290 + t620 * t261 + t622 * t282;
t240 = -pkin(7) * t679 - qJ(4) * t252 - t619 * t277;
t239 = t622 * t243 + t620 * t396;
t238 = t620 * t243 - t622 * t396;
t237 = -pkin(3) * t396 - pkin(7) * t682 + qJ(4) * t253 + t621 * t277;
t236 = -qJ(2) * t297 + t622 * t248 - t620 * t262;
t235 = -pkin(1) * t311 + qJ(2) * t298 + t620 * t248 + t622 * t262;
t234 = -qJ(2) * t287 + t622 * t247 - t620 * t256;
t233 = -pkin(1) * t303 + qJ(2) * t288 + t620 * t247 + t622 * t256;
t232 = -pkin(2) * t242 - pkin(3) * t252 - pkin(4) * t283;
t231 = -pkin(6) * t273 - t625 * t244 + t628 * t246;
t230 = -t626 * t238 + t629 * t239;
t229 = t629 * t238 + t626 * t239;
t228 = -qJ(2) * t266 + t622 * t231 - t620 * t251;
t227 = -pkin(1) * t273 + qJ(2) * t267 + t620 * t231 + t622 * t251;
t226 = -pkin(6) * t242 - t625 * t237 + t628 * t240;
t225 = -qJ(2) * t238 + t622 * t226 - t620 * t232;
t224 = -pkin(1) * t242 + qJ(2) * t239 + t620 * t226 + t622 * t232;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t589, -t590, 0, t544, 0, 0, 0, 0, 0, 0, -t690, -t537, 0, t413, 0, 0, 0, 0, 0, 0, t445, t446, t474, t353, 0, 0, 0, 0, 0, 0, t329, t335, t314, t260, 0, 0, 0, 0, 0, 0, t258, t265, t250, t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t590, -t589, 0, t543, 0, 0, 0, 0, 0, 0, t537, -t690, 0, -t703, 0, 0, 0, 0, 0, 0, t443, t444, t473, t352, 0, 0, 0, 0, 0, 0, t328, t334, t313, t259, 0, 0, 0, 0, 0, 0, t257, t264, t249, t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t617, 0, 0, 0, 0, 0, 0, t545, t546, 0, -t439, 0, 0, 0, 0, 0, 0, t394, t425, t374, t291, 0, 0, 0, 0, 0, 0, t303, t311, t273, t242; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t590, 0, -t589, 0, t635, -t567, -t543, -pkin(5) * t543, 0, 0, t537, 0, -t690, 0, t702, t696, t703, pkin(5) * t703 + qJ(2) * t661 - t626 * t459, -t626 * t520 + t629 * t522, -t626 * t492 + t629 * t494, -t626 * t516 + t629 * t518, -t626 * t519 + t629 * t521, -t626 * t515 + t629 * t517, -t626 * t551 + t629 * t552, -pkin(5) * t443 - t626 * t370 + t629 * t378, -pkin(5) * t444 - t626 * t371 + t629 * t379, -pkin(5) * t473 - t626 * t417 + t629 * t418, -pkin(5) * t352 - t626 * t324 + t629 * t339, -t626 * t402 + t629 * t404, -t626 * t367 + t629 * t368, -t626 * t385 + t629 * t388, -t626 * t401 + t629 * t403, -t626 * t384 + t629 * t387, -t626 * t441 + t629 * t442, -pkin(5) * t328 - t626 * t271 + t629 * t280, -pkin(5) * t334 - t626 * t281 + t629 * t286, -pkin(5) * t313 - t626 * t254 + t629 * t255, -pkin(5) * t259 - t626 * t241 + t629 * t245, -t626 * t294 + t629 * t296, -t626 * t269 + t629 * t270, -t626 * t299 + t629 * t301, -t626 * t293 + t629 * t295, -t626 * t300 + t629 * t302, -t626 * t331 + t629 * t332, -pkin(5) * t257 - t626 * t233 + t629 * t234, -pkin(5) * t264 - t626 * t235 + t629 * t236, -pkin(5) * t249 - t626 * t227 + t629 * t228, -pkin(5) * t229 - t626 * t224 + t629 * t225; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t589, 0, t590, 0, t567, t635, t544, pkin(5) * t544, 0, 0, t690, 0, t537, 0, -t696, t702, t413, pkin(5) * t413 + qJ(2) * t670 + t629 * t459, t629 * t520 + t626 * t522, t629 * t492 + t626 * t494, t629 * t516 + t626 * t518, t629 * t519 + t626 * t521, t629 * t515 + t626 * t517, t629 * t551 + t626 * t552, pkin(5) * t445 + t629 * t370 + t626 * t378, pkin(5) * t446 + t629 * t371 + t626 * t379, pkin(5) * t474 + t629 * t417 + t626 * t418, pkin(5) * t353 + t629 * t324 + t626 * t339, t629 * t402 + t626 * t404, t629 * t367 + t626 * t368, t629 * t385 + t626 * t388, t629 * t401 + t626 * t403, t629 * t384 + t626 * t387, t629 * t441 + t626 * t442, pkin(5) * t329 + t629 * t271 + t626 * t280, pkin(5) * t335 + t629 * t281 + t626 * t286, pkin(5) * t314 + t629 * t254 + t626 * t255, pkin(5) * t260 + t629 * t241 + t626 * t245, t629 * t294 + t626 * t296, t629 * t269 + t626 * t270, t629 * t299 + t626 * t301, t629 * t293 + t626 * t295, t629 * t300 + t626 * t302, t629 * t331 + t626 * t332, pkin(5) * t258 + t629 * t233 + t626 * t234, pkin(5) * t265 + t629 * t235 + t626 * t236, pkin(5) * t250 + t629 * t227 + t626 * t228, pkin(5) * t230 + t629 * t224 + t626 * t225; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t596, t597, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t587 - t532, -pkin(1) * t586 - t533, 0, -pkin(1) * t469, (t584 + t642) * t625, t628 * t583 + t625 * t585, t628 * t599 + t672, t663, t625 * t601 + t662, 0, pkin(1) * t499 + pkin(2) * t585 + pkin(6) * t548 - t664, pkin(1) * t500 - pkin(2) * t583 + pkin(6) * t550 + t673, pkin(1) * t541 + pkin(2) * t591 + pkin(6) * t588 + t440, pkin(1) * t414 - pkin(2) * t513 + pkin(6) * t440, t628 * t483 + t625 * t484, t628 * t434 + t625 * t436, t628 * t476 + t625 * t479, t628 * t481 + t625 * t482, t628 * t475 + t625 * t478, t628 * t505 + t625 * t506, pkin(1) * t372 - pkin(2) * t487 + pkin(6) * t395 + t628 * t377 + t625 * t405, pkin(1) * t386 - pkin(2) * t490 + pkin(6) * t428 + t628 * t382 + t625 * t416, pkin(1) * t357 - pkin(2) * t486 + pkin(6) * t376 + t628 * t320 + t625 * t323, pkin(1) * t289 - pkin(2) * t466 + pkin(6) * t292 - qJ(4) * t674 + t628 * t327, t628 * t345 + t625 * t347, t628 * t307 + t625 * t309, t628 * t359 + t625 * t361, t628 * t344 + t625 * t346, t628 * t360 + t625 * t362, t628 * t380 + t625 * t381, pkin(1) * t287 - pkin(2) * t406 + pkin(6) * t304 + t628 * t272 + t625 * t279, pkin(1) * t297 - pkin(2) * t691 + pkin(6) * t312 + t628 * t278 + t625 * t285, pkin(1) * t266 - pkin(2) * t431 + pkin(6) * t275 + t628 * t244 + t625 * t246, pkin(1) * t238 - pkin(2) * t396 + pkin(6) * t243 + t628 * t237 + t625 * t240;];
tauB_reg = t1;
