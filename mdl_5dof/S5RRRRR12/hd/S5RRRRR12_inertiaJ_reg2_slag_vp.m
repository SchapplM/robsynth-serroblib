% Calculate inertial parameters regressor of joint inertia matrix for
% S5RRRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d1,d2,d3,d4,d5]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RRRRR12_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR12_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5RRRRR12_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:55:12
% EndTime: 2019-12-31 22:55:20
% DurationCPUTime: 2.40s
% Computational Cost: add. (3756->249), mult. (10120->521), div. (0->0), fcn. (11388->12), ass. (0->135)
t70 = sin(pkin(5));
t80 = cos(qJ(2));
t114 = t70 * t80;
t76 = sin(qJ(2));
t138 = pkin(1) * t76;
t72 = cos(pkin(5));
t52 = pkin(8) * t114 + t72 * t138;
t69 = sin(pkin(6));
t71 = cos(pkin(6));
t112 = t71 * t80;
t92 = t70 * t112;
t29 = (t69 * t72 + t92) * pkin(9) + t52;
t75 = sin(qJ(3));
t79 = cos(qJ(3));
t115 = t70 * t76;
t59 = t72 * t80 * pkin(1);
t33 = t72 * pkin(2) + t59 + (-pkin(9) * t71 - pkin(8)) * t115;
t38 = (-pkin(9) * t69 * t76 - pkin(2) * t80 - pkin(1)) * t70;
t84 = t33 * t71 + t38 * t69;
t13 = -t75 * t29 + t84 * t79;
t117 = t69 * t75;
t32 = t72 * t117 + (t75 * t112 + t76 * t79) * t70;
t45 = -t69 * t114 + t72 * t71;
t74 = sin(qJ(4));
t78 = cos(qJ(4));
t19 = t32 * t74 - t45 * t78;
t149 = t19 ^ 2;
t116 = t69 * t79;
t30 = t75 * t115 - t72 * t116 - t79 * t92;
t148 = t30 ^ 2;
t46 = t74 * t117 - t78 * t71;
t147 = t46 ^ 2;
t146 = -0.2e1 * t19;
t145 = -0.2e1 * t30;
t48 = t78 * t117 + t74 * t71;
t73 = sin(qJ(5));
t77 = cos(qJ(5));
t34 = t77 * t116 + t73 * t48;
t144 = -0.2e1 * t34;
t143 = -0.2e1 * t48;
t142 = 0.2e1 * t69;
t141 = 0.2e1 * t70;
t140 = -0.2e1 * t74;
t139 = 0.2e1 * t78;
t137 = pkin(2) * t75;
t136 = pkin(2) * t79;
t135 = pkin(4) * t77;
t14 = t79 * t29 + t84 * t75;
t10 = t45 * pkin(10) + t14;
t18 = -t69 * t33 + t71 * t38;
t8 = t30 * pkin(3) - t32 * pkin(10) + t18;
t5 = -t74 * t10 + t78 * t8;
t3 = -t30 * pkin(4) - t5;
t134 = t3 * t73;
t133 = t3 * t77;
t66 = t74 ^ 2;
t132 = t66 * pkin(10);
t131 = t74 * pkin(10);
t21 = t32 * t78 + t45 * t74;
t15 = t21 * t73 - t30 * t77;
t130 = t15 * t77;
t17 = t21 * t77 + t30 * t73;
t129 = t17 * t73;
t128 = t19 * t46;
t127 = t19 * t78;
t126 = t21 * t74;
t94 = pkin(9) * t116;
t43 = t94 + (pkin(10) + t137) * t71;
t44 = (-pkin(3) * t79 - pkin(10) * t75 - pkin(2)) * t69;
t25 = -t74 * t43 + t78 * t44;
t23 = pkin(4) * t116 - t25;
t125 = t23 * t73;
t124 = t23 * t77;
t123 = t34 * t77;
t36 = -t73 * t116 + t77 * t48;
t122 = t36 * t73;
t121 = t46 * t78;
t120 = t48 * t74;
t63 = t69 ^ 2;
t119 = t63 * t79;
t64 = t70 ^ 2;
t118 = t64 * t80;
t113 = t71 * t75;
t111 = t73 * t19;
t110 = t73 * t46;
t109 = t73 * t74;
t108 = t73 * t77;
t107 = t73 * t78;
t106 = t74 * t19;
t105 = t74 * t30;
t104 = t74 * t46;
t103 = t77 * t19;
t102 = t77 * t46;
t101 = t77 * t74;
t100 = t77 * t78;
t99 = t78 * t30;
t65 = t73 ^ 2;
t67 = t77 ^ 2;
t98 = t65 + t67;
t97 = 0.2e1 * t116;
t96 = t72 * t141;
t95 = t74 * t139;
t93 = t30 * t116;
t91 = t74 * t116;
t90 = t73 * t101;
t89 = t78 * t116;
t6 = t78 * t10 + t74 * t8;
t4 = t30 * pkin(11) + t6;
t9 = -t45 * pkin(3) - t13;
t7 = t19 * pkin(4) - t21 * pkin(11) + t9;
t1 = -t73 * t4 + t77 * t7;
t2 = t77 * t4 + t73 * t7;
t88 = -t1 * t73 + t2 * t77;
t87 = -t5 * t74 + t6 * t78;
t58 = pkin(9) * t117;
t42 = t58 + (-pkin(3) - t136) * t71;
t22 = t46 * pkin(4) - t48 * pkin(11) + t42;
t26 = t78 * t43 + t74 * t44;
t24 = -pkin(11) * t116 + t26;
t11 = t77 * t22 - t73 * t24;
t12 = t73 * t22 + t77 * t24;
t86 = -t11 * t73 + t12 * t77;
t85 = -t25 * t74 + t26 * t78;
t54 = -t78 * pkin(4) - t74 * pkin(11) - pkin(3);
t39 = -pkin(10) * t107 + t77 * t54;
t40 = pkin(10) * t100 + t73 * t54;
t83 = -t39 * t73 + t40 * t77;
t82 = pkin(10) ^ 2;
t68 = t78 ^ 2;
t62 = t66 * t82;
t60 = t63 * t79 ^ 2;
t51 = pkin(2) * t113 + t94;
t50 = -pkin(8) * t115 + t59;
t49 = t71 * t136 - t58;
t16 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64 * t76 ^ 2, 0.2e1 * t76 * t118, t76 * t96, t64 * t80 ^ 2, t80 * t96, t72 ^ 2, 0.2e1 * pkin(1) * t118 + 0.2e1 * t50 * t72, -0.2e1 * t64 * t138 - 0.2e1 * t52 * t72, (-t50 * t76 + t52 * t80) * t141, t64 * pkin(1) ^ 2 + t50 ^ 2 + t52 ^ 2, t32 ^ 2, t32 * t145, 0.2e1 * t32 * t45, t148, t45 * t145, t45 ^ 2, 0.2e1 * t13 * t45 + 0.2e1 * t18 * t30, -0.2e1 * t14 * t45 + 0.2e1 * t18 * t32, -0.2e1 * t13 * t32 - 0.2e1 * t14 * t30, t13 ^ 2 + t14 ^ 2 + t18 ^ 2, t21 ^ 2, t21 * t146, 0.2e1 * t21 * t30, t149, t19 * t145, t148, 0.2e1 * t9 * t19 + 0.2e1 * t5 * t30, 0.2e1 * t9 * t21 - 0.2e1 * t6 * t30, -0.2e1 * t6 * t19 - 0.2e1 * t5 * t21, t5 ^ 2 + t6 ^ 2 + t9 ^ 2, t17 ^ 2, -0.2e1 * t17 * t15, 0.2e1 * t17 * t19, t15 ^ 2, t15 * t146, t149, 0.2e1 * t1 * t19 + 0.2e1 * t3 * t15, 0.2e1 * t3 * t17 - 0.2e1 * t2 * t19, -0.2e1 * t1 * t17 - 0.2e1 * t2 * t15, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, t114, t72, t50, -t52, 0, 0, t32 * t117, (-t30 * t75 + t32 * t79) * t69, t45 * t117 + t32 * t71, -t93, t45 * t116 - t30 * t71, t45 * t71, t13 * t71 + t49 * t45 + (-pkin(2) * t30 - t18 * t79) * t69, -t14 * t71 - t51 * t45 + (-pkin(2) * t32 + t18 * t75) * t69, -t51 * t30 - t49 * t32 + (-t13 * t75 + t14 * t79) * t69, -t18 * t69 * pkin(2) + t13 * t49 + t14 * t51, t21 * t48, -t48 * t19 - t21 * t46, -t21 * t116 + t48 * t30, t128, t19 * t116 - t46 * t30, -t93, -t5 * t116 + t42 * t19 + t25 * t30 + t9 * t46, t6 * t116 + t42 * t21 - t26 * t30 + t9 * t48, -t26 * t19 - t25 * t21 - t6 * t46 - t5 * t48, t5 * t25 + t6 * t26 + t9 * t42, t17 * t36, -t36 * t15 - t17 * t34, t17 * t46 + t36 * t19, t15 * t34, -t15 * t46 - t34 * t19, t128, t1 * t46 + t11 * t19 + t23 * t15 + t3 * t34, -t12 * t19 + t23 * t17 - t2 * t46 + t3 * t36, -t1 * t36 - t11 * t17 - t12 * t15 - t2 * t34, t1 * t11 + t2 * t12 + t3 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t63 * t75 ^ 2, 0.2e1 * t75 * t119, t113 * t142, t60, t71 * t97, t71 ^ 2, 0.2e1 * pkin(2) * t119 + 0.2e1 * t49 * t71, -0.2e1 * t63 * t137 - 0.2e1 * t51 * t71, (-t49 * t75 + t51 * t79) * t142, t63 * pkin(2) ^ 2 + t49 ^ 2 + t51 ^ 2, t48 ^ 2, t46 * t143, t116 * t143, t147, t46 * t97, t60, -0.2e1 * t25 * t116 + 0.2e1 * t42 * t46, 0.2e1 * t26 * t116 + 0.2e1 * t42 * t48, -0.2e1 * t25 * t48 - 0.2e1 * t26 * t46, t25 ^ 2 + t26 ^ 2 + t42 ^ 2, t36 ^ 2, t36 * t144, 0.2e1 * t36 * t46, t34 ^ 2, t46 * t144, t147, 0.2e1 * t11 * t46 + 0.2e1 * t23 * t34, -0.2e1 * t12 * t46 + 0.2e1 * t23 * t36, -0.2e1 * t11 * t36 - 0.2e1 * t12 * t34, t11 ^ 2 + t12 ^ 2 + t23 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, 0, -t30, t45, t13, -t14, 0, 0, t126, t21 * t78 - t106, t105, -t127, t99, 0, -pkin(3) * t19 - pkin(10) * t105 - t9 * t78, -pkin(3) * t21 - pkin(10) * t99 + t9 * t74, (t126 - t127) * pkin(10) + t87, -t9 * pkin(3) + pkin(10) * t87, t17 * t101, (-t129 - t130) * t74, t19 * t101 - t17 * t78, t15 * t109, -t73 * t106 + t15 * t78, -t127, -t1 * t78 + t39 * t19 + (pkin(10) * t15 + t134) * t74, -t40 * t19 + t2 * t78 + (pkin(10) * t17 + t133) * t74, -t40 * t15 - t39 * t17 + (-t1 * t77 - t2 * t73) * t74, t1 * t39 + t3 * t131 + t2 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, t116, t71, t49, -t51, 0, 0, t120, t48 * t78 - t104, -t91, -t121, -t89, 0, -pkin(3) * t46 + pkin(10) * t91 - t42 * t78, -pkin(3) * t48 + pkin(10) * t89 + t42 * t74, (t120 - t121) * pkin(10) + t85, -t42 * pkin(3) + pkin(10) * t85, t36 * t101, (-t122 - t123) * t74, t46 * t101 - t36 * t78, t34 * t109, -t73 * t104 + t34 * t78, -t121, -t11 * t78 + t39 * t46 + (pkin(10) * t34 + t125) * t74, t12 * t78 - t40 * t46 + (pkin(10) * t36 + t124) * t74, -t40 * t34 - t39 * t36 + (-t11 * t77 - t12 * t73) * t74, t11 * t39 + t12 * t40 + t23 * t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t66, t95, 0, t68, 0, 0, pkin(3) * t139, pkin(3) * t140, 0.2e1 * (t66 + t68) * pkin(10), pkin(3) ^ 2 + t68 * t82 + t62, t67 * t66, -0.2e1 * t66 * t108, t100 * t140, t65 * t66, t73 * t95, t68, 0.2e1 * t73 * t132 - 0.2e1 * t39 * t78, 0.2e1 * t77 * t132 + 0.2e1 * t40 * t78, 0.2e1 * (-t39 * t77 - t40 * t73) * t74, t39 ^ 2 + t40 ^ 2 + t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, -t19, t30, t5, -t6, 0, 0, t129, -t73 * t15 + t17 * t77, t111, -t130, t103, 0, -pkin(4) * t15 - pkin(11) * t111 - t133, -pkin(4) * t17 - pkin(11) * t103 + t134, (t129 - t130) * pkin(11) + t88, -t3 * pkin(4) + pkin(11) * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t46, -t116, t25, -t26, 0, 0, t122, -t73 * t34 + t36 * t77, t110, -t123, t102, 0, -pkin(4) * t34 - pkin(11) * t110 - t124, -pkin(4) * t36 - pkin(11) * t102 + t125, (t122 - t123) * pkin(11) + t86, -t23 * pkin(4) + pkin(11) * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, 0, t78, 0, -t131, -t78 * pkin(10), 0, 0, t90, (-t65 + t67) * t74, -t107, -t90, -t100, 0, -pkin(10) * t101 + (-pkin(4) * t74 + pkin(11) * t78) * t73, pkin(11) * t100 + (pkin(10) * t73 - t135) * t74, t83, -pkin(4) * t131 + pkin(11) * t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t65, 0.2e1 * t108, 0, t67, 0, 0, 0.2e1 * t135, -0.2e1 * pkin(4) * t73, 0.2e1 * t98 * pkin(11), pkin(11) ^ 2 * t98 + pkin(4) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17, 0, -t15, t19, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, 0, -t34, t46, t11, -t12, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, 0, -t109, -t78, t39, -t40, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73, 0, t77, 0, -t73 * pkin(11), -t77 * pkin(11), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t16;
